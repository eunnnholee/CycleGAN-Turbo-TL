op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('addmm_49', c0, {c0: 2}), MemoryDep('tangents_1', c0, {c0: 2})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (2, 1)
op0.sizes = ([2], [])
addmm_49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
class op0_loop_body:
    var_ranges = {p0: 2}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('addmm_49', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(sigmoid, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('tangents_1', get_index_1)
        mul = ops.mul(sub, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf0', get_index_2, mul, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 0, {})]
op3.unmet_dependencies = [MemoryDep('buf0', 0, {}), MemoryDep('buf0', 1, {})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1], stride=[1, 1])
    buf3.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (1, 1)
op3.sizes = ([], [])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1], stride=[1, 1])
class op3_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf3', get_index_2, add, None)
        return store


op13_op14: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op13_op14.writes = [MemoryDep('buf13', c0, {c0: 18}), MemoryDep('buf14', 0, {})]
op13_op14.unmet_dependencies = []
op13_op14.met_dependencies = [MemoryDep('convolution_6', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op13_op14.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf14.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op13_op14.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 18})]
op13.unmet_dependencies = []
op13.met_dependencies = [MemoryDep('convolution_6', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (18, 1)
op13.sizes = ([2, 9], [])
convolution_6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
class op13_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_6', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(sigmoid, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('tangents_1', get_index_1)
        constant_1 = ops.constant(0.1111111111111111, torch.float32)
        mul = ops.mul(load_1, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf13', get_index_2, mul_1, None)
        return store
op13_op14.snodes[1] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 0, {})]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 18})]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf14.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1, 18)
op14.sizes = ([], [18])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op14_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf14', get_index_1, reduction)
        return store_reduction


op30_op31: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op30_op31.writes = [MemoryDep('buf30', c0, {c0: 18}), MemoryDep('buf31', 0, {})]
op30_op31.unmet_dependencies = []
op30_op31.met_dependencies = [MemoryDep('convolution_3', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op30_op31.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf31.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op30_op31.snodes[0] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 18})]
op30.unmet_dependencies = []
op30.met_dependencies = [MemoryDep('convolution_3', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (18, 1)
op30.sizes = ([2, 9], [])
convolution_3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
class op30_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_3', get_index)
        sigmoid = ops.sigmoid(load)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(sigmoid, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('tangents_1', get_index_1)
        constant_1 = ops.constant(0.1111111111111111, torch.float32)
        mul = ops.mul(load_1, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf30', get_index_2, mul_1, None)
        return store
op30_op31.snodes[1] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', 0, {})]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 18})]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf31.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (1, 18)
op31.sizes = ([], [18])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op31_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf31', get_index_1, reduction)
        return store_reduction


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op2.met_dependencies = [StarDep(name='where_2', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.mm


op4_op5_op301: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op4_op5_op301.writes = 
    [   MemoryDep('buf301', 0, {}),
        MemoryDep('buf4', 0, {}),
        MemoryDep('buf5', c0, {c0: 256})]
op4_op5_op301.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 256})]
op4_op5_op301.met_dependencies = 
    [   MemoryDep('clamp_min_14', 0, {}),
        MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('primals_179', 0, {}),
        MemoryDep('sum_33', 0, {}),
        MemoryDep('tangents_7', c0, {c0: 256}),
        StarDep(name='primals_179', mode=None),
        WeakDep(name='buf5', mutating_buf='buf301')]
op4_op5_op301.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf301: ComputedBuffer
    buf301.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf301.mutations = ['primals_179']
    buf301.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op4_op5_op301.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 0, {})]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 256})]
op4.met_dependencies = 
    [   MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('sum_33', 0, {}),
        MemoryDep('tangents_7', c0, {c0: 256})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1, 256)
op4.sizes = ([], [256])
tangents_7_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
sum_33_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op4_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_178', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_33', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_33', get_index_4)
        mul = ops.mul(load_4, load_4)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_3, maximum)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('sum_33', get_index_5)
        mul_1 = ops.mul(truediv, load_5)
        truediv_1 = ops.truediv(load_2, mul_1)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_33', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_33', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('sum_33', get_index_8)
        mul_3 = ops.mul(truediv_2, load_8)
        truediv_3 = ops.truediv(truediv_1, mul_3)
        mul_4 = ops.mul(neg, truediv_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_4)
        get_index_9 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_9, reduction)
        return store_reduction
op4_op5_op301.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 256})]
op5.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 256}), MemoryDep('buf4', 0, {})]
op5.met_dependencies = 
    [   MemoryDep('clamp_min_14', 0, {}),
        MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('primals_179', 0, {}),
        MemoryDep('sum_33', 0, {}),
        MemoryDep('tangents_7', c0, {c0: 256})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (256, 1)
op5.sizes = ([256], [])
tangents_7_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
sum_33_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
clamp_min_14_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
class op5_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_33', get_index_3)
        mul = ops.mul(load_3, load_3)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_2, maximum)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_33', get_index_4)
        mul_1 = ops.mul(truediv, load_4)
        truediv_1 = ops.truediv(add, mul_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf4', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_33', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_33', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        mul_3 = ops.mul(load_5, truediv_2)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_178', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_179', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('clamp_min_14', get_index_10)
        truediv_3 = ops.truediv(mul_4, load_10)
        mul_5 = ops.mul(mul_3, truediv_3)
        add_1 = ops.add(truediv_1, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf5', get_index_11, add_1, None)
        return store
op4_op5_op301.snodes[2] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', 0, {})]
op301.unmet_dependencies = [WeakDep(name='buf5', mutating_buf='buf301')]
op301.met_dependencies = [MemoryDep('sum_33', 0, {}), StarDep(name='primals_179', mode=None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf301.mutations = ['primals_179']
    buf301.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (1, 1)
op301.sizes = ([], [])
sum_33_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf301_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op301_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('sum_33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sum_33', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf301', get_index_2, truediv, None)
        return store


op1: ExternKernelSchedulerNode(ExternKernelOut)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op1.met_dependencies = [StarDep(name='permute_125', mode=None)]
op1.outputs = [
    buf1: ExternKernelOut
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op1.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 512})]
op6.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 512})]
op6.met_dependencies = [MemoryDep('where_2', c0, {c0: 512})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (512, 1)
op6.sizes = ([512], [])
where_2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
class op6_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('where_2', get_index)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1', get_index_2)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(load_2, constant_1)
        where = ops.where(gt, load_1, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf6', get_index_3, where, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='permute_129', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 512], stride=[512, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.mm


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op47.met_dependencies = [StarDep(name='permute_135', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op47.node.kernel = extern_kernels.mm


op48_op49_op50: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op48_op49_op50.writes = 
    [   MemoryDep('buf48', c0, {c0: 2}),
        MemoryDep('buf49', c0, {c0: 2}),
        MemoryDep('buf50', c0, {c0: 1536})]
op48_op49_op50.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1536})]
op48_op49_op50.met_dependencies = 
    [   MemoryDep('div_39', c0, {c0: 2}),
        MemoryDep('mul_79', c0, {c0: 1536}),
        MemoryDep('primals_153', c1, {c0: 2, c1: 768})]
op48_op49_op50.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
    ]
]
op48_op49_op50.snodes[0] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 2})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1536})]
op48.met_dependencies = [MemoryDep('primals_153', c1, {c0: 2, c1: 768})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (2, 768)
op48.sizes = ([2], [768])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
primals_153_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
class op48_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_153', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf48', get_index_2, reduction)
        return store_reduction
op48_op49_op50.snodes[1] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 2})]
op49.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1536})]
op49.met_dependencies = 
    [   MemoryDep('mul_79', c0, {c0: 1536}),
        MemoryDep('primals_153', c1, {c0: 2, c1: 768})]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (2, 768)
op49.sizes = ([2], [768])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
primals_153_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
class op49_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_153', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_79', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf49', get_index_3, reduction)
        return store_reduction
op48_op49_op50.snodes[2] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 1536})]
op50.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 1536}),
        MemoryDep('buf48', c0, {c0: 2}),
        MemoryDep('buf49', c0, {c0: 2})]
op50.met_dependencies = 
    [   MemoryDep('div_39', c0, {c0: 2}),
        MemoryDep('mul_79', c0, {c0: 1536}),
        MemoryDep('primals_153', c1, {c0: 2, c1: 768})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (1536, 1)
op50.sizes = ([2, 768], [])
div_39_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
primals_153_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
mul_79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op50_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = p0
    index1 = 768*p0 + p1
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf47', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_153', get_index_2)
        mul = ops.mul(load_1, load_2)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf48', get_index_3)
        sub = ops.sub(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('mul_79', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf49', get_index_5)
        mul_2 = ops.mul(load_4, load_5)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf50', get_index_6, mul_3, None)
        return store


op15: ExternKernelSchedulerNode(FallbackKernel)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op15.met_dependencies = [StarDep(name='convolution_5', mode=None), StarDep(name='div_12', mode=None)]
op15.outputs = [
    buf15: FallbackKernel
    buf15.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op15.node.kernel = torch.ops.aten.convolution_backward.default


op32: ExternKernelSchedulerNode(FallbackKernel)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op32.met_dependencies = [StarDep(name='convolution_2', mode=None), StarDep(name='div_6', mode=None)]
op32.outputs = [
    buf32: FallbackKernel
    buf32.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
    ]
]
op32.node.kernel = torch.ops.aten.convolution_backward.default


op16: ExternKernelSchedulerNode(MultiOutput)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: MultiOutput
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op16.node.kernel = None


op20: ExternKernelSchedulerNode(FallbackKernel)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op20.met_dependencies = 
    [   StarDep(name='constant_pad_nd_2', mode=None),
        StarDep(name='primals_169', mode=None)]
op20.outputs = [
    buf20: FallbackKernel
    buf20.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = torch.ops.aten.convolution_backward.default


op17: ExternKernelSchedulerNode(MultiOutput)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: MultiOutput
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op17.node.kernel = None


op18_op19_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op18_op19_op296.writes = 
    [   MemoryDep('buf18', 0, {}),
        MemoryDep('buf19', c0, {c0: 256}),
        MemoryDep('buf296', 0, {})]
op18_op19_op296.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 256})]
op18_op19_op296.met_dependencies = 
    [   MemoryDep('clamp_min_10', 0, {}),
        MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('primals_171', 0, {}),
        MemoryDep('sum_21', 0, {}),
        MemoryDep('tangents_5', c0, {c0: 256}),
        StarDep(name='primals_171', mode=None),
        WeakDep(name='buf19', mutating_buf='buf296')]
op18_op19_op296.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf296: ComputedBuffer
    buf296.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf296.mutations = ['primals_171']
    buf296.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op18_op19_op296.snodes[0] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', 0, {})]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 256})]
op18.met_dependencies = 
    [   MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('sum_21', 0, {}),
        MemoryDep('tangents_5', c0, {c0: 256})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (1, 256)
op18.sizes = ([], [256])
tangents_5_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
sum_21_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op18_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_170', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_21', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_21', get_index_4)
        mul = ops.mul(load_4, load_4)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_3, maximum)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('sum_21', get_index_5)
        mul_1 = ops.mul(truediv, load_5)
        truediv_1 = ops.truediv(load_2, mul_1)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_21', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_21', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('sum_21', get_index_8)
        mul_3 = ops.mul(truediv_2, load_8)
        truediv_3 = ops.truediv(truediv_1, mul_3)
        mul_4 = ops.mul(neg, truediv_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_4)
        get_index_9 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_9, reduction)
        return store_reduction
op18_op19_op296.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 256})]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 256}), MemoryDep('buf18', 0, {})]
op19.met_dependencies = 
    [   MemoryDep('clamp_min_10', 0, {}),
        MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('primals_171', 0, {}),
        MemoryDep('sum_21', 0, {}),
        MemoryDep('tangents_5', c0, {c0: 256})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (256, 1)
op19.sizes = ([256], [])
tangents_5_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
sum_21_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
clamp_min_10_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
class op19_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_21', get_index_3)
        mul = ops.mul(load_3, load_3)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_2, maximum)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_21', get_index_4)
        mul_1 = ops.mul(truediv, load_4)
        truediv_1 = ops.truediv(add, mul_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf18', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_21', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_21', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        mul_3 = ops.mul(load_5, truediv_2)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_170', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_171', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('clamp_min_10', get_index_10)
        truediv_3 = ops.truediv(mul_4, load_10)
        mul_5 = ops.mul(mul_3, truediv_3)
        add_1 = ops.add(truediv_1, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf19', get_index_11, add_1, None)
        return store
op18_op19_op296.snodes[2] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', 0, {})]
op296.unmet_dependencies = [WeakDep(name='buf19', mutating_buf='buf296')]
op296.met_dependencies = [MemoryDep('sum_21', 0, {}), StarDep(name='primals_171', mode=None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf296.mutations = ['primals_171']
    buf296.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (1, 1)
op296.sizes = ([], [])
sum_21_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf296_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op296_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('sum_21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sum_21', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf296', get_index_2, truediv, None)
        return store


op21: ExternKernelSchedulerNode(MultiOutput)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: MultiOutput
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.node.kernel = None


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 25088})]
op22.unmet_dependencies = [MemoryDep('buf21', 20736*c0 + 2304*c1 + c2 + 2560, {c0: 2, c1: 7, c2: 1792})]
op22.met_dependencies = [MemoryDep('gt_4', c0, {c0: 25088})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (25088, 1)
op22.sizes = ([2, 7, 7, 256], [])
gt_4_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op22_loop_body:
    var_ranges = {p0: 2, p1: 7, p2: 7, p3: 256}
    index0 = 12544*p0 + 1792*p1 + 256*p2 + p3
    index1 = p1 + 1
    index2 = p2 + 1
    index3 = 20736*p0 + 2304*p1 + 256*p2 + p3 + 2560
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('gt_4', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(9, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(9, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(9, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_7 = self.get_index('index2')
        index_expr_6 = ops.index_expr(get_index_7, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_8 = self.get_index('index2')
        index_expr_7 = ops.index_expr(get_index_8, torch.int64)
        constant_7 = ops.constant(9, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        constant_8 = ops.constant(0.2, torch.float32)
        mul = ops.mul(masked_subblock2, constant_8)
        where = ops.where(load, masked_subblock1, mul)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf22', get_index_9, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf21', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf21', get_index)
        return load


op33: ExternKernelSchedulerNode(MultiOutput)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: MultiOutput
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op33.node.kernel = None


op37: ExternKernelSchedulerNode(FallbackKernel)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op37.met_dependencies = 
    [   StarDep(name='constant_pad_nd_1', mode=None),
        StarDep(name='primals_160', mode=None)]
op37.outputs = [
    buf37: FallbackKernel
    buf37.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = torch.ops.aten.convolution_backward.default


op34: ExternKernelSchedulerNode(MultiOutput)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: MultiOutput
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op34.node.kernel = None


op35_op36_op291: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op35_op36_op291.writes = 
    [   MemoryDep('buf291', 0, {}),
        MemoryDep('buf35', 0, {}),
        MemoryDep('buf36', c0, {c0: 256})]
op35_op36_op291.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 256})]
op35_op36_op291.met_dependencies = 
    [   MemoryDep('clamp_min_6', 0, {}),
        MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('primals_162', 0, {}),
        MemoryDep('sum_9', 0, {}),
        MemoryDep('tangents_3', c0, {c0: 256}),
        StarDep(name='primals_162', mode=None),
        WeakDep(name='buf36', mutating_buf='buf291')]
op35_op36_op291.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf291: ComputedBuffer
    buf291.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf291.mutations = ['primals_162']
    buf291.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op35_op36_op291.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', 0, {})]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 256})]
op35.met_dependencies = 
    [   MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('sum_9', 0, {}),
        MemoryDep('tangents_3', c0, {c0: 256})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1, 256)
op35.sizes = ([], [256])
tangents_3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
sum_9_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op35_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf34', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_9', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_9', get_index_4)
        mul = ops.mul(load_4, load_4)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_3, maximum)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('sum_9', get_index_5)
        mul_1 = ops.mul(truediv, load_5)
        truediv_1 = ops.truediv(load_2, mul_1)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_9', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_9', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('sum_9', get_index_8)
        mul_3 = ops.mul(truediv_2, load_8)
        truediv_3 = ops.truediv(truediv_1, mul_3)
        mul_4 = ops.mul(neg, truediv_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_4)
        get_index_9 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_9, reduction)
        return store_reduction
op35_op36_op291.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 256})]
op36.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 256}), MemoryDep('buf35', 0, {})]
op36.met_dependencies = 
    [   MemoryDep('clamp_min_6', 0, {}),
        MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('primals_162', 0, {}),
        MemoryDep('sum_9', 0, {}),
        MemoryDep('tangents_3', c0, {c0: 256})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (256, 1)
op36.sizes = ([256], [])
tangents_3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
sum_9_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
clamp_min_6_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
class op36_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf34', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_9', get_index_3)
        mul = ops.mul(load_3, load_3)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_2, maximum)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_9', get_index_4)
        mul_1 = ops.mul(truediv, load_4)
        truediv_1 = ops.truediv(add, mul_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf35', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_9', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_9', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        mul_3 = ops.mul(load_5, truediv_2)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_161', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_162', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('clamp_min_6', get_index_10)
        truediv_3 = ops.truediv(mul_4, load_10)
        mul_5 = ops.mul(mul_3, truediv_3)
        add_1 = ops.add(truediv_1, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf36', get_index_11, add_1, None)
        return store
op35_op36_op291.snodes[2] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', 0, {})]
op291.unmet_dependencies = [WeakDep(name='buf36', mutating_buf='buf291')]
op291.met_dependencies = [MemoryDep('sum_9', 0, {}), StarDep(name='primals_162', mode=None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf291.mutations = ['primals_162']
    buf291.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (1, 1)
op291.sizes = ([], [])
sum_9_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf291_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op291_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('sum_9', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sum_9', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf291', get_index_2, truediv, None)
        return store


op38: ExternKernelSchedulerNode(MultiOutput)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: MultiOutput
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = None


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 25088})]
op39.unmet_dependencies = [MemoryDep('buf38', 20736*c0 + 2304*c1 + c2 + 2560, {c0: 2, c1: 7, c2: 1792})]
op39.met_dependencies = [MemoryDep('gt_5', c0, {c0: 25088})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (25088, 1)
op39.sizes = ([2, 7, 7, 256], [])
gt_5_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op39_loop_body:
    var_ranges = {p0: 2, p1: 7, p2: 7, p3: 256}
    index0 = 12544*p0 + 1792*p1 + 256*p2 + p3
    index1 = p1 + 1
    index2 = p2 + 1
    index3 = 20736*p0 + 2304*p1 + 256*p2 + p3 + 2560
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('gt_5', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(9, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(9, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(9, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_7 = self.get_index('index2')
        index_expr_6 = ops.index_expr(get_index_7, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_8 = self.get_index('index2')
        index_expr_7 = ops.index_expr(get_index_8, torch.int64)
        constant_7 = ops.constant(9, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        constant_8 = ops.constant(0.2, torch.float32)
        mul = ops.mul(masked_subblock2, constant_8)
        where = ops.where(load, masked_subblock1, mul)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf39', get_index_9, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf38', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf38', get_index)
        return load


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 256})]
op9.unmet_dependencies = [MemoryDep('buf6', c0 + 256, {c0: 256}), MemoryDep('buf6', c0, {c0: 256})]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf9.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (256, 1)
op9.sizes = ([256], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
class op9_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = p0 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf6', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf9', get_index_2, add, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 256})]
op23.unmet_dependencies = [MemoryDep('buf22', c0 + 256*c1, {c0: 256, c1: 98})]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf23.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (256, 98)
op23.sizes = ([256], [98])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op23_loop_body:
    var_ranges = {p0: 256, p1: 98}
    index0 = p0 + 256*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, reduction)
        return store_reduction


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 256})]
op40.unmet_dependencies = [MemoryDep('buf39', c0 + 256*c1, {c0: 256, c1: 98})]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf40.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (256, 98)
op40.sizes = ([256], [98])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op40_loop_body:
    var_ranges = {p0: 256, p1: 98}
    index0 = p0 + 256*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf40', get_index_1, reduction)
        return store_reduction


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 76800})]
op265.unmet_dependencies = []
op265.met_dependencies = 
    [   MemoryDep('cat', c0, {c0: 76800}),
        MemoryDep('getitem_1', c0, {c0: 100}),
        MemoryDep('getitem_3', c0 + 2*c1, {c0: 2, c1: 50}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400}),
        MemoryDep('primals_7', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_8', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt', c0, {c0: 100}),
        MemoryDep('rsqrt_1', c0 + 2*c1, {c0: 2, c1: 50})]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (76800, 1)
op265.sizes = ([2, 50, 768], [])
cat_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
getitem_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
rsqrt_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
getitem_3_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
rsqrt_1_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
class op265_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = 38400*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 50*p0 + p1
    index3 = p2
    index4 = p0 + 2*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('cat', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('getitem_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('rsqrt', get_index_3)
        mul = ops.mul(sub, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_7', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_8', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('getitem_3', get_index_6)
        sub_1 = ops.sub(add_1, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('rsqrt_1', get_index_7)
        mul_2 = ops.mul(sub_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf265', get_index_8, mul_2, None)
        return store


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 76800})]
op51.unmet_dependencies = [MemoryDep('buf50', c1, {c0: 50, c1: 1536})]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (76800, 1)
op51.sizes = ([50, 1536], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op51_loop_body:
    var_ranges = {p0: 50, p1: 1536}
    index0 = p0
    index1 = p1
    index2 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf50', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf51', get_index_2, where, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='permute_137', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 307200})]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 307200})]
op53.met_dependencies = [MemoryDep('addmm_46', c0, {c0: 307200})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (307200, 1)
op53.sizes = ([307200], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_46_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op53_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_46', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_46', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_46', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_46', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf53', get_index_6, add, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='permute_138', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op54.node.kernel = extern_kernels.mm


op55_op56_op57_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op55_op56_op57_op58.writes = 
    [   MemoryDep('buf55', c0, {c0: 100}),
        MemoryDep('buf56', c0, {c0: 100}),
        MemoryDep('buf57', c0, {c0: 76800}),
        MemoryDep('buf58', c0, {c0: 76800})]
op55_op56_op57_op58.unmet_dependencies = 
    [   MemoryDep('buf50', c1, {c0: 50, c1: 1536}),
        MemoryDep('buf54', c0, {c0: 76800})]
op55_op56_op57_op58.met_dependencies = 
    [   MemoryDep('div_40', c0, {c0: 100}),
        MemoryDep('mul_75', c0, {c0: 76800}),
        MemoryDep('primals_147', c1, {c0: 100, c1: 768})]
op55_op56_op57_op58.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op55_op56_op57_op58.snodes[0] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 100})]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 76800})]
op55.met_dependencies = [MemoryDep('primals_147', c1, {c0: 100, c1: 768})]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (100, 768)
op55.sizes = ([100], [768])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op55_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_147', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_2, reduction)
        return store_reduction
op55_op56_op57_op58.snodes[1] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 100})]
op56.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 76800})]
op56.met_dependencies = 
    [   MemoryDep('mul_75', c0, {c0: 76800}),
        MemoryDep('primals_147', c1, {c0: 100, c1: 768})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (100, 768)
op56.sizes = ([100], [768])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op56_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_147', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_75', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf56', get_index_3, reduction)
        return store_reduction
op55_op56_op57_op58.snodes[2] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 76800})]
op57.unmet_dependencies = 
    [   MemoryDep('buf50', c1, {c0: 50, c1: 1536}),
        MemoryDep('buf54', c0, {c0: 76800}),
        MemoryDep('buf55', c0, {c0: 100}),
        MemoryDep('buf56', c0, {c0: 100})]
op57.met_dependencies = 
    [   MemoryDep('div_40', c0, {c0: 100}),
        MemoryDep('mul_75', c0, {c0: 76800}),
        MemoryDep('primals_147', c1, {c0: 100, c1: 768})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (76800, 1)
op57.sizes = ([50, 2, 768], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
div_40_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op57_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = p0
    index1 = 768*p1 + p2
    index2 = 2*p0 + p1
    index3 = 1536*p0 + 768*p1 + p2
    index4 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf50', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index2')
        load_1 = ops.load('div_40', get_index_2)
        get_index_3 = self.get_index('index3')
        load_2 = ops.load('buf54', get_index_3)
        get_index_4 = self.get_index('index4')
        load_3 = ops.load('primals_147', get_index_4)
        mul = ops.mul(load_2, load_3)
        constant_2 = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant_2)
        get_index_5 = self.get_index('index2')
        load_4 = ops.load('buf55', get_index_5)
        sub = ops.sub(mul_1, load_4)
        get_index_6 = self.get_index('index3')
        load_5 = ops.load('mul_75', get_index_6)
        get_index_7 = self.get_index('index2')
        load_6 = ops.load('buf56', get_index_7)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(where, mul_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf57', get_index_8, add, None)
        return store
op55_op56_op57_op58.snodes[3] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 76800})]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 76800})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (76800, 1)
op58.sizes = ([76800], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op58_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='permute_139', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: ExternKernelSchedulerNode(FallbackKernel)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = 
    [   StarDep(name='getitem_92', mode=None),
        StarDep(name='getitem_93', mode=None),
        StarDep(name='getitem_94', mode=None),
        StarDep(name='getitem_95', mode=None),
        StarDep(name='view_178', mode=None),
        StarDep(name='view_179', mode=None),
        StarDep(name='view_180', mode=None)]
op60.outputs = [
    buf60: FallbackKernel
    buf60.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
    ]
]
op60.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op61: ExternKernelSchedulerNode(MultiOutput)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: MultiOutput
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = None


op62: ExternKernelSchedulerNode(MultiOutput)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: MultiOutput
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = None


op63: ExternKernelSchedulerNode(MultiOutput)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: MultiOutput
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.node.kernel = None


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op64.unmet_dependencies = 
    [   MemoryDep('buf61', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf62', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf63', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (230400, 1)
op64.sizes = ([2, 50, 3, 768], [])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op64_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf63', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf62', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf64', get_index_6, add_1, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='permute_145', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.mm


op66_op67_op68_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op66_op67_op68_op69.writes = 
    [   MemoryDep('buf66', c0, {c0: 100}),
        MemoryDep('buf67', c0, {c0: 100}),
        MemoryDep('buf68', c0, {c0: 76800}),
        MemoryDep('buf69', c0, {c0: 76800})]
op66_op67_op68_op69.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 76800}), MemoryDep('buf65', c0, {c0: 76800})]
op66_op67_op68_op69.met_dependencies = 
    [   MemoryDep('div_41', c0, {c0: 100}),
        MemoryDep('mul_73', c0, {c0: 76800}),
        MemoryDep('primals_141', c1, {c0: 100, c1: 768})]
op66_op67_op68_op69.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op66_op67_op68_op69.snodes[0] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 100})]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 76800})]
op66.met_dependencies = [MemoryDep('primals_141', c1, {c0: 100, c1: 768})]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (100, 768)
op66.sizes = ([100], [768])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op66_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_141', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_2, reduction)
        return store_reduction
op66_op67_op68_op69.snodes[1] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 100})]
op67.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 76800})]
op67.met_dependencies = 
    [   MemoryDep('mul_73', c0, {c0: 76800}),
        MemoryDep('primals_141', c1, {c0: 100, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (100, 768)
op67.sizes = ([100], [768])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_73_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op67_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_141', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_73', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_3, reduction)
        return store_reduction
op66_op67_op68_op69.snodes[2] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 76800})]
op68.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 76800}),
        MemoryDep('buf65', c0, {c0: 76800}),
        MemoryDep('buf66', c0, {c0: 100}),
        MemoryDep('buf67', c0, {c0: 100})]
op68.met_dependencies = 
    [   MemoryDep('div_41', c0, {c0: 100}),
        MemoryDep('mul_73', c0, {c0: 76800}),
        MemoryDep('primals_141', c1, {c0: 100, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (76800, 1)
op68.sizes = ([100, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_41_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_73_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op68_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_41', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf65', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_141', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf66', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_73', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf67', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add, None)
        return store
op66_op67_op68_op69.snodes[3] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 76800})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 76800})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (76800, 1)
op69.sizes = ([76800], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op69_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf69', get_index_1, load, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='permute_146', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.mm


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 307200})]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 307200})]
op71.met_dependencies = [MemoryDep('addmm_42', c0, {c0: 307200})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (307200, 1)
op71.sizes = ([307200], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_42_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op71_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_42', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_42', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_42', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_42', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf71', get_index_6, add, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='permute_147', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.mm


op73_op74_op75_op76: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op73_op74_op75_op76.writes = 
    [   MemoryDep('buf73', c0, {c0: 100}),
        MemoryDep('buf74', c0, {c0: 100}),
        MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf76', c0, {c0: 76800})]
op73_op74_op75_op76.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 76800}), MemoryDep('buf72', c0, {c0: 76800})]
op73_op74_op75_op76.met_dependencies = 
    [   MemoryDep('div_42', c0, {c0: 100}),
        MemoryDep('mul_69', c0, {c0: 76800}),
        MemoryDep('primals_135', c1, {c0: 100, c1: 768})]
op73_op74_op75_op76.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf73.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op73_op74_op75_op76.snodes[0] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 100})]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 76800})]
op73.met_dependencies = [MemoryDep('primals_135', c1, {c0: 100, c1: 768})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf73.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (100, 768)
op73.sizes = ([100], [768])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op73_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_135', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf73', get_index_2, reduction)
        return store_reduction
op73_op74_op75_op76.snodes[1] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 100})]
op74.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 76800})]
op74.met_dependencies = 
    [   MemoryDep('mul_69', c0, {c0: 76800}),
        MemoryDep('primals_135', c1, {c0: 100, c1: 768})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (100, 768)
op74.sizes = ([100], [768])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_69_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op74_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_135', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_69', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, reduction)
        return store_reduction
op73_op74_op75_op76.snodes[2] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 76800})]
op75.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 76800}),
        MemoryDep('buf72', c0, {c0: 76800}),
        MemoryDep('buf73', c0, {c0: 100}),
        MemoryDep('buf74', c0, {c0: 100})]
op75.met_dependencies = 
    [   MemoryDep('div_42', c0, {c0: 100}),
        MemoryDep('mul_69', c0, {c0: 76800}),
        MemoryDep('primals_135', c1, {c0: 100, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (76800, 1)
op75.sizes = ([100, 768], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_42_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_69_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op75_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_42', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_135', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf73', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_69', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf74', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf75', get_index_7, add, None)
        return store
op73_op74_op75_op76.snodes[3] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 76800})]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800})]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (76800, 1)
op76.sizes = ([76800], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op76_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf76', get_index_1, load, None)
        return store


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='permute_148', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = extern_kernels.mm


op78: ExternKernelSchedulerNode(FallbackKernel)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = 
    [   StarDep(name='getitem_84', mode=None),
        StarDep(name='getitem_85', mode=None),
        StarDep(name='getitem_86', mode=None),
        StarDep(name='getitem_87', mode=None),
        StarDep(name='view_163', mode=None),
        StarDep(name='view_164', mode=None),
        StarDep(name='view_165', mode=None)]
op78.outputs = [
    buf78: FallbackKernel
    buf78.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op78.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op79: ExternKernelSchedulerNode(MultiOutput)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: MultiOutput
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = None


op80: ExternKernelSchedulerNode(MultiOutput)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: MultiOutput
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = None


op81: ExternKernelSchedulerNode(MultiOutput)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: MultiOutput
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = None


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op82.unmet_dependencies = 
    [   MemoryDep('buf79', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf80', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf81', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (230400, 1)
op82.sizes = ([2, 50, 3, 768], [])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op82_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf81', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf80', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf79', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf82', get_index_6, add_1, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='permute_154', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.mm


op84_op85_op86_op87: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op84_op85_op86_op87.writes = 
    [   MemoryDep('buf84', c0, {c0: 100}),
        MemoryDep('buf85', c0, {c0: 100}),
        MemoryDep('buf86', c0, {c0: 76800}),
        MemoryDep('buf87', c0, {c0: 76800})]
op84_op85_op86_op87.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800}), MemoryDep('buf83', c0, {c0: 76800})]
op84_op85_op86_op87.met_dependencies = 
    [   MemoryDep('div_43', c0, {c0: 100}),
        MemoryDep('mul_67', c0, {c0: 76800}),
        MemoryDep('primals_129', c1, {c0: 100, c1: 768})]
op84_op85_op86_op87.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op84_op85_op86_op87.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 100})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 76800})]
op84.met_dependencies = [MemoryDep('primals_129', c1, {c0: 100, c1: 768})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (100, 768)
op84.sizes = ([100], [768])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op84_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_129', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_2, reduction)
        return store_reduction
op84_op85_op86_op87.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 100})]
op85.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 76800})]
op85.met_dependencies = 
    [   MemoryDep('mul_67', c0, {c0: 76800}),
        MemoryDep('primals_129', c1, {c0: 100, c1: 768})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (100, 768)
op85.sizes = ([100], [768])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op85_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_129', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_67', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf85', get_index_3, reduction)
        return store_reduction
op84_op85_op86_op87.snodes[2] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 76800})]
op86.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf83', c0, {c0: 76800}),
        MemoryDep('buf84', c0, {c0: 100}),
        MemoryDep('buf85', c0, {c0: 100})]
op86.met_dependencies = 
    [   MemoryDep('div_43', c0, {c0: 100}),
        MemoryDep('mul_67', c0, {c0: 76800}),
        MemoryDep('primals_129', c1, {c0: 100, c1: 768})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (76800, 1)
op86.sizes = ([100, 768], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_43_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op86_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_43', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_129', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf84', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_67', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf85', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf86', get_index_7, add, None)
        return store
op84_op85_op86_op87.snodes[3] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 76800})]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 76800})]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (76800, 1)
op87.sizes = ([76800], [])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op87_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf87', get_index_1, load, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='permute_155', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 307200})]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 307200})]
op89.met_dependencies = [MemoryDep('addmm_38', c0, {c0: 307200})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (307200, 1)
op89.sizes = ([307200], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_38_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op89_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_38', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_38', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_38', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_38', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf89', get_index_6, add, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='permute_156', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
]
op90.node.kernel = extern_kernels.mm


op91_op92_op93_op94: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op91_op92_op93_op94.writes = 
    [   MemoryDep('buf91', c0, {c0: 100}),
        MemoryDep('buf92', c0, {c0: 100}),
        MemoryDep('buf93', c0, {c0: 76800}),
        MemoryDep('buf94', c0, {c0: 76800})]
op91_op92_op93_op94.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 76800}), MemoryDep('buf90', c0, {c0: 76800})]
op91_op92_op93_op94.met_dependencies = 
    [   MemoryDep('div_44', c0, {c0: 100}),
        MemoryDep('mul_63', c0, {c0: 76800}),
        MemoryDep('primals_123', c1, {c0: 100, c1: 768})]
op91_op92_op93_op94.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op91_op92_op93_op94.snodes[0] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 100})]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 76800})]
op91.met_dependencies = [MemoryDep('primals_123', c1, {c0: 100, c1: 768})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (100, 768)
op91.sizes = ([100], [768])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op91_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_123', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf91', get_index_2, reduction)
        return store_reduction
op91_op92_op93_op94.snodes[1] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 100})]
op92.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 76800})]
op92.met_dependencies = 
    [   MemoryDep('mul_63', c0, {c0: 76800}),
        MemoryDep('primals_123', c1, {c0: 100, c1: 768})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (100, 768)
op92.sizes = ([100], [768])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_63_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op92_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_123', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_63', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf92', get_index_3, reduction)
        return store_reduction
op91_op92_op93_op94.snodes[2] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 76800})]
op93.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 76800}),
        MemoryDep('buf90', c0, {c0: 76800}),
        MemoryDep('buf91', c0, {c0: 100}),
        MemoryDep('buf92', c0, {c0: 100})]
op93.met_dependencies = 
    [   MemoryDep('div_44', c0, {c0: 100}),
        MemoryDep('mul_63', c0, {c0: 76800}),
        MemoryDep('primals_123', c1, {c0: 100, c1: 768})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (76800, 1)
op93.sizes = ([100, 768], [])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_44_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_63_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op93_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_44', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf90', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_123', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf91', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_63', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf92', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf93', get_index_7, add, None)
        return store
op91_op92_op93_op94.snodes[3] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 76800})]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 76800})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (76800, 1)
op94.sizes = ([76800], [])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op94_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf94', get_index_1, load, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='permute_157', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = extern_kernels.mm


op96: ExternKernelSchedulerNode(FallbackKernel)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = 
    [   StarDep(name='getitem_76', mode=None),
        StarDep(name='getitem_77', mode=None),
        StarDep(name='getitem_78', mode=None),
        StarDep(name='getitem_79', mode=None),
        StarDep(name='view_148', mode=None),
        StarDep(name='view_149', mode=None),
        StarDep(name='view_150', mode=None)]
op96.outputs = [
    buf96: FallbackKernel
    buf96.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf96.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op96.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op97: ExternKernelSchedulerNode(MultiOutput)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: MultiOutput
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.node.kernel = None


op98: ExternKernelSchedulerNode(MultiOutput)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: MultiOutput
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.node.kernel = None


op99: ExternKernelSchedulerNode(MultiOutput)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: MultiOutput
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = None


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op100.unmet_dependencies = 
    [   MemoryDep('buf97', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf98', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf99', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (230400, 1)
op100.sizes = ([2, 50, 3, 768], [])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op100_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf99', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf98', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf97', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf100', get_index_6, add_1, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='permute_163', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op101.node.kernel = extern_kernels.mm


op102_op103_op104_op105: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op102_op103_op104_op105.writes = 
    [   MemoryDep('buf102', c0, {c0: 100}),
        MemoryDep('buf103', c0, {c0: 100}),
        MemoryDep('buf104', c0, {c0: 76800}),
        MemoryDep('buf105', c0, {c0: 76800})]
op102_op103_op104_op105.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800}), MemoryDep('buf93', c0, {c0: 76800})]
op102_op103_op104_op105.met_dependencies = 
    [   MemoryDep('div_45', c0, {c0: 100}),
        MemoryDep('mul_61', c0, {c0: 76800}),
        MemoryDep('primals_117', c1, {c0: 100, c1: 768})]
op102_op103_op104_op105.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op102_op103_op104_op105.snodes[0] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 100})]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800})]
op102.met_dependencies = [MemoryDep('primals_117', c1, {c0: 100, c1: 768})]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (100, 768)
op102.sizes = ([100], [768])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op102_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_117', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf102', get_index_2, reduction)
        return store_reduction
op102_op103_op104_op105.snodes[1] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 100})]
op103.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800})]
op103.met_dependencies = 
    [   MemoryDep('mul_61', c0, {c0: 76800}),
        MemoryDep('primals_117', c1, {c0: 100, c1: 768})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (100, 768)
op103.sizes = ([100], [768])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_61_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op103_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_117', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_61', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf103', get_index_3, reduction)
        return store_reduction
op102_op103_op104_op105.snodes[2] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 76800})]
op104.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 76800}),
        MemoryDep('buf102', c0, {c0: 100}),
        MemoryDep('buf103', c0, {c0: 100}),
        MemoryDep('buf93', c0, {c0: 76800})]
op104.met_dependencies = 
    [   MemoryDep('div_45', c0, {c0: 100}),
        MemoryDep('mul_61', c0, {c0: 76800}),
        MemoryDep('primals_117', c1, {c0: 100, c1: 768})]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (76800, 1)
op104.sizes = ([100, 768], [])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_61_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op104_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_45', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_117', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf102', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_61', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf103', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf104', get_index_7, add, None)
        return store
op102_op103_op104_op105.snodes[3] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 76800})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 76800})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (76800, 1)
op105.sizes = ([76800], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op105_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf105', get_index_1, load, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='permute_164', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 307200})]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 307200})]
op107.met_dependencies = [MemoryDep('addmm_34', c0, {c0: 307200})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (307200, 1)
op107.sizes = ([307200], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_34_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op107_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_34', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf106', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_34', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_34', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_34', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf107', get_index_6, add, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='permute_165', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.mm


op109_op110_op111_op112: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op109_op110_op111_op112.writes = 
    [   MemoryDep('buf109', c0, {c0: 100}),
        MemoryDep('buf110', c0, {c0: 100}),
        MemoryDep('buf111', c0, {c0: 76800}),
        MemoryDep('buf112', c0, {c0: 76800})]
op109_op110_op111_op112.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 76800}), MemoryDep('buf108', c0, {c0: 76800})]
op109_op110_op111_op112.met_dependencies = 
    [   MemoryDep('div_46', c0, {c0: 100}),
        MemoryDep('mul_57', c0, {c0: 76800}),
        MemoryDep('primals_111', c1, {c0: 100, c1: 768})]
op109_op110_op111_op112.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op109_op110_op111_op112.snodes[0] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 100})]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 76800})]
op109.met_dependencies = [MemoryDep('primals_111', c1, {c0: 100, c1: 768})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (100, 768)
op109.sizes = ([100], [768])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op109_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_111', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf109', get_index_2, reduction)
        return store_reduction
op109_op110_op111_op112.snodes[1] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 100})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 76800})]
op110.met_dependencies = 
    [   MemoryDep('mul_57', c0, {c0: 76800}),
        MemoryDep('primals_111', c1, {c0: 100, c1: 768})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (100, 768)
op110.sizes = ([100], [768])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_57_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op110_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_111', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_57', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf110', get_index_3, reduction)
        return store_reduction
op109_op110_op111_op112.snodes[2] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 76800})]
op111.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 76800}),
        MemoryDep('buf108', c0, {c0: 76800}),
        MemoryDep('buf109', c0, {c0: 100}),
        MemoryDep('buf110', c0, {c0: 100})]
op111.met_dependencies = 
    [   MemoryDep('div_46', c0, {c0: 100}),
        MemoryDep('mul_57', c0, {c0: 76800}),
        MemoryDep('primals_111', c1, {c0: 100, c1: 768})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (76800, 1)
op111.sizes = ([100, 768], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_46_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_57_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op111_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_46', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_111', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf109', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_57', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf110', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf111', get_index_7, add, None)
        return store
op109_op110_op111_op112.snodes[3] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 76800})]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 76800})]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (76800, 1)
op112.sizes = ([76800], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op112_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='permute_166', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: ExternKernelSchedulerNode(FallbackKernel)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = 
    [   StarDep(name='getitem_68', mode=None),
        StarDep(name='getitem_69', mode=None),
        StarDep(name='getitem_70', mode=None),
        StarDep(name='getitem_71', mode=None),
        StarDep(name='view_133', mode=None),
        StarDep(name='view_134', mode=None),
        StarDep(name='view_135', mode=None)]
op114.outputs = [
    buf114: FallbackKernel
    buf114.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf114.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
    ]
]
op114.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op115: ExternKernelSchedulerNode(MultiOutput)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: MultiOutput
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op115.node.kernel = None


op116: ExternKernelSchedulerNode(MultiOutput)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: MultiOutput
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = None


op117: ExternKernelSchedulerNode(MultiOutput)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: MultiOutput
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.node.kernel = None


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op118.unmet_dependencies = 
    [   MemoryDep('buf115', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf116', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf117', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (230400, 1)
op118.sizes = ([2, 50, 3, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op118_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf117', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf115', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf118', get_index_6, add_1, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='permute_172', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op119.node.kernel = extern_kernels.mm


op24: ExternKernelSchedulerNode(FallbackKernel)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op24.met_dependencies = [StarDep(name='add_62', mode=None), StarDep(name='div_9', mode=None)]
op24.outputs = [
    buf24: FallbackKernel
    buf24.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = torch.ops.aten.convolution_backward.default


op25: ExternKernelSchedulerNode(MultiOutput)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: MultiOutput
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf25.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = None


op120_op121_op122_op123: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op120_op121_op122_op123.writes = 
    [   MemoryDep('buf120', c0, {c0: 100}),
        MemoryDep('buf121', c0, {c0: 100}),
        MemoryDep('buf122', c0, {c0: 76800}),
        MemoryDep('buf123', c0, {c0: 76800})]
op120_op121_op122_op123.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 76800}),
        MemoryDep('buf119', c0, {c0: 76800}),
        MemoryDep('buf25', 37632*c1 + c2 + 768*(ModularIndexing(c0 - 1, 1, 49)), {c0: 50, c1: 2, c2: 768})]
op120_op121_op122_op123.met_dependencies = 
    [   MemoryDep('add_62', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('getitem_67', c0, {c0: 100}),
        MemoryDep('primals_105', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_17', c0, {c0: 100})]
op120_op121_op122_op123.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op120_op121_op122_op123.snodes[0] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 100})]
op120.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 76800})]
op120.met_dependencies = [MemoryDep('primals_105', c1, {c0: 100, c1: 768})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (100, 768)
op120.sizes = ([100], [768])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op120_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_105', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_2, reduction)
        return store_reduction
op120_op121_op122_op123.snodes[1] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 100})]
op121.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 76800})]
op121.met_dependencies = 
    [   MemoryDep('add_62', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('getitem_67', c0, {c0: 100}),
        MemoryDep('primals_105', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_17', c0, {c0: 100})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (100, 768)
op121.sizes = ([50, 2], [768])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_62_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
getitem_67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
rsqrt_17_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op121_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p0 + 38400*p1 + p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_105', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_62', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('getitem_67', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('rsqrt_17', get_index_4)
        mul_1 = ops.mul(sub, load_4)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf121', get_index_5, reduction)
        return store_reduction
op120_op121_op122_op123.snodes[2] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 76800})]
op122.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 76800}),
        MemoryDep('buf119', c0, {c0: 76800}),
        MemoryDep('buf120', c0, {c0: 100}),
        MemoryDep('buf121', c0, {c0: 100}),
        MemoryDep('buf25', 37632*c1 + c2 + 768*(ModularIndexing(c0 - 1, 1, 49)), {c0: 50, c1: 2, c2: 768})]
op122.met_dependencies = 
    [   MemoryDep('add_62', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('getitem_67', c0, {c0: 100}),
        MemoryDep('primals_105', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_17', c0, {c0: 100})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (76800, 1)
op122.sizes = ([50, 2, 768], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
rsqrt_17_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
add_62_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
getitem_67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op122_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = 2*p0 + p1
    index2 = p2
    index3 = 768*p0 + 38400*p1 + p2
    index4 = p0
    index5 = 37632*p1 + p2 + 768*(ModularIndexing(p0 - 1, 1, 49))
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('rsqrt_17', get_index_1)
        constant = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_105', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        constant_1 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf120', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('add_62', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('getitem_67', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('rsqrt_17', get_index_7)
        mul_3 = ops.mul(sub_1, load_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf121', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add = ops.add(load, mul_5)
        get_index_9 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_9, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_2)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock1, constant_3)
        add_1 = ops.add(add, where)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf122', get_index_10, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf25', get_index)
        return load
op120_op121_op122_op123.snodes[3] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 76800})]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 76800})]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (76800, 1)
op123.sizes = ([76800], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op123_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf123', get_index_1, load, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='permute_174', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 307200})]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 307200})]
op125.met_dependencies = [MemoryDep('addmm_30', c0, {c0: 307200})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (307200, 1)
op125.sizes = ([307200], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_30_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op125_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_30', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_30', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_30', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_30', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf125', get_index_6, add, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='permute_175', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op126.node.kernel = extern_kernels.mm


op127_op128_op129_op130: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op127_op128_op129_op130.writes = 
    [   MemoryDep('buf127', c0, {c0: 100}),
        MemoryDep('buf128', c0, {c0: 100}),
        MemoryDep('buf129', c0, {c0: 76800}),
        MemoryDep('buf130', c0, {c0: 76800})]
op127_op128_op129_op130.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 76800}), MemoryDep('buf126', c0, {c0: 76800})]
op127_op128_op129_op130.met_dependencies = 
    [   MemoryDep('div_48', c0, {c0: 100}),
        MemoryDep('mul_51', c0, {c0: 76800}),
        MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op127_op128_op129_op130.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op127_op128_op129_op130.snodes[0] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 100})]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 76800})]
op127.met_dependencies = [MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (100, 768)
op127.sizes = ([100], [768])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op127_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_99', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf127', get_index_2, reduction)
        return store_reduction
op127_op128_op129_op130.snodes[1] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 100})]
op128.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 76800})]
op128.met_dependencies = 
    [   MemoryDep('mul_51', c0, {c0: 76800}),
        MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (100, 768)
op128.sizes = ([100], [768])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op128_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_99', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_51', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_3, reduction)
        return store_reduction
op127_op128_op129_op130.snodes[2] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 76800})]
op129.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 76800}),
        MemoryDep('buf126', c0, {c0: 76800}),
        MemoryDep('buf127', c0, {c0: 100}),
        MemoryDep('buf128', c0, {c0: 100})]
op129.met_dependencies = 
    [   MemoryDep('div_48', c0, {c0: 100}),
        MemoryDep('mul_51', c0, {c0: 76800}),
        MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (76800, 1)
op129.sizes = ([100, 768], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_48_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op129_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_48', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf126', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_99', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf127', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_51', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf128', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf129', get_index_7, add, None)
        return store
op127_op128_op129_op130.snodes[3] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 76800})]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 76800})]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (76800, 1)
op130.sizes = ([76800], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op130_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf130', get_index_1, load, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='permute_176', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op132: ExternKernelSchedulerNode(FallbackKernel)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = 
    [   StarDep(name='getitem_60', mode=None),
        StarDep(name='getitem_61', mode=None),
        StarDep(name='getitem_62', mode=None),
        StarDep(name='getitem_63', mode=None),
        StarDep(name='view_118', mode=None),
        StarDep(name='view_119', mode=None),
        StarDep(name='view_120', mode=None)]
op132.outputs = [
    buf132: FallbackKernel
    buf132.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op26: ExternKernelSchedulerNode(MultiOutput)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: MultiOutput
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op26.node.kernel = None


op133: ExternKernelSchedulerNode(MultiOutput)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: MultiOutput
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = None


op134: ExternKernelSchedulerNode(MultiOutput)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: MultiOutput
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = None


op135: ExternKernelSchedulerNode(MultiOutput)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: MultiOutput
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.node.kernel = None


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op136.unmet_dependencies = 
    [   MemoryDep('buf133', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf134', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf135', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (230400, 1)
op136.sizes = ([2, 50, 3, 768], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op136_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf135', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf136', get_index_6, add_1, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='permute_182', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
]
op137.node.kernel = extern_kernels.mm


op138_op139_op140_op141: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op138_op139_op140_op141.writes = 
    [   MemoryDep('buf138', c0, {c0: 100}),
        MemoryDep('buf139', c0, {c0: 100}),
        MemoryDep('buf140', c0, {c0: 76800}),
        MemoryDep('buf141', c0, {c0: 76800})]
op138_op139_op140_op141.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 76800}), MemoryDep('buf137', c0, {c0: 76800})]
op138_op139_op140_op141.met_dependencies = 
    [   MemoryDep('div_49', c0, {c0: 100}),
        MemoryDep('mul_49', c0, {c0: 76800}),
        MemoryDep('primals_93', c1, {c0: 100, c1: 768})]
op138_op139_op140_op141.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op138_op139_op140_op141.snodes[0] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 100})]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 76800})]
op138.met_dependencies = [MemoryDep('primals_93', c1, {c0: 100, c1: 768})]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (100, 768)
op138.sizes = ([100], [768])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op138_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_93', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_2, reduction)
        return store_reduction
op138_op139_op140_op141.snodes[1] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 100})]
op139.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 76800})]
op139.met_dependencies = 
    [   MemoryDep('mul_49', c0, {c0: 76800}),
        MemoryDep('primals_93', c1, {c0: 100, c1: 768})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (100, 768)
op139.sizes = ([100], [768])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op139_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_93', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_49', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, reduction)
        return store_reduction
op138_op139_op140_op141.snodes[2] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 76800})]
op140.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 76800}),
        MemoryDep('buf137', c0, {c0: 76800}),
        MemoryDep('buf138', c0, {c0: 100}),
        MemoryDep('buf139', c0, {c0: 100})]
op140.met_dependencies = 
    [   MemoryDep('div_49', c0, {c0: 100}),
        MemoryDep('mul_49', c0, {c0: 76800}),
        MemoryDep('primals_93', c1, {c0: 100, c1: 768})]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (76800, 1)
op140.sizes = ([100, 768], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op140_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_49', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_93', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf138', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_49', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf139', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf140', get_index_7, add, None)
        return store
op138_op139_op140_op141.snodes[3] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 76800})]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 76800})]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (76800, 1)
op141.sizes = ([76800], [])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op141_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf141', get_index_1, load, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='permute_183', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 307200})]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 307200})]
op143.met_dependencies = [MemoryDep('addmm_26', c0, {c0: 307200})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (307200, 1)
op143.sizes = ([307200], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_26_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op143_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_26', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_26', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_26', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_26', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf143', get_index_6, add, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='permute_184', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op144.node.kernel = extern_kernels.mm


op145_op146_op147_op148: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op145_op146_op147_op148.writes = 
    [   MemoryDep('buf145', c0, {c0: 100}),
        MemoryDep('buf146', c0, {c0: 100}),
        MemoryDep('buf147', c0, {c0: 76800}),
        MemoryDep('buf148', c0, {c0: 76800})]
op145_op146_op147_op148.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 76800}), MemoryDep('buf144', c0, {c0: 76800})]
op145_op146_op147_op148.met_dependencies = 
    [   MemoryDep('div_50', c0, {c0: 100}),
        MemoryDep('mul_45', c0, {c0: 76800}),
        MemoryDep('primals_87', c1, {c0: 100, c1: 768})]
op145_op146_op147_op148.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op145_op146_op147_op148.snodes[0] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 100})]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 76800})]
op145.met_dependencies = [MemoryDep('primals_87', c1, {c0: 100, c1: 768})]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (100, 768)
op145.sizes = ([100], [768])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op145_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_87', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf145', get_index_2, reduction)
        return store_reduction
op145_op146_op147_op148.snodes[1] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 100})]
op146.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 76800})]
op146.met_dependencies = 
    [   MemoryDep('mul_45', c0, {c0: 76800}),
        MemoryDep('primals_87', c1, {c0: 100, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (100, 768)
op146.sizes = ([100], [768])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op146_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_87', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_45', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_3, reduction)
        return store_reduction
op145_op146_op147_op148.snodes[2] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 76800})]
op147.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 76800}),
        MemoryDep('buf144', c0, {c0: 76800}),
        MemoryDep('buf145', c0, {c0: 100}),
        MemoryDep('buf146', c0, {c0: 100})]
op147.met_dependencies = 
    [   MemoryDep('div_50', c0, {c0: 100}),
        MemoryDep('mul_45', c0, {c0: 76800}),
        MemoryDep('primals_87', c1, {c0: 100, c1: 768})]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (76800, 1)
op147.sizes = ([100, 768], [])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_50_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op147_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_50', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_87', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf145', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_45', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf146', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf147', get_index_7, add, None)
        return store
op145_op146_op147_op148.snodes[3] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 76800})]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 76800})]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (76800, 1)
op148.sizes = ([76800], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op148_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf148', get_index_1, load, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='permute_185', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = extern_kernels.mm


op150: ExternKernelSchedulerNode(FallbackKernel)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = 
    [   StarDep(name='getitem_52', mode=None),
        StarDep(name='getitem_53', mode=None),
        StarDep(name='getitem_54', mode=None),
        StarDep(name='getitem_55', mode=None),
        StarDep(name='view_103', mode=None),
        StarDep(name='view_104', mode=None),
        StarDep(name='view_105', mode=None)]
op150.outputs = [
    buf150: FallbackKernel
    buf150.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf150.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op150.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op151: ExternKernelSchedulerNode(MultiOutput)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: MultiOutput
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = None


op152: ExternKernelSchedulerNode(MultiOutput)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: MultiOutput
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = None


op153: ExternKernelSchedulerNode(MultiOutput)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: MultiOutput
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = None


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op154.unmet_dependencies = 
    [   MemoryDep('buf151', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf152', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf153', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (230400, 1)
op154.sizes = ([2, 50, 3, 768], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op154_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf153', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf151', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf154', get_index_6, add_1, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='permute_191', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.mm


op156_op157_op158_op159: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op156_op157_op158_op159.writes = 
    [   MemoryDep('buf156', c0, {c0: 100}),
        MemoryDep('buf157', c0, {c0: 100}),
        MemoryDep('buf158', c0, {c0: 76800}),
        MemoryDep('buf159', c0, {c0: 76800})]
op156_op157_op158_op159.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 76800}), MemoryDep('buf155', c0, {c0: 76800})]
op156_op157_op158_op159.met_dependencies = 
    [   MemoryDep('div_51', c0, {c0: 100}),
        MemoryDep('mul_43', c0, {c0: 76800}),
        MemoryDep('primals_81', c1, {c0: 100, c1: 768})]
op156_op157_op158_op159.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op156_op157_op158_op159.snodes[0] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 100})]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 76800})]
op156.met_dependencies = [MemoryDep('primals_81', c1, {c0: 100, c1: 768})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (100, 768)
op156.sizes = ([100], [768])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op156_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_81', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf156', get_index_2, reduction)
        return store_reduction
op156_op157_op158_op159.snodes[1] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 100})]
op157.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 76800})]
op157.met_dependencies = 
    [   MemoryDep('mul_43', c0, {c0: 76800}),
        MemoryDep('primals_81', c1, {c0: 100, c1: 768})]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (100, 768)
op157.sizes = ([100], [768])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_43_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op157_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_81', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_43', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf157', get_index_3, reduction)
        return store_reduction
op156_op157_op158_op159.snodes[2] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 76800})]
op158.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 76800}),
        MemoryDep('buf155', c0, {c0: 76800}),
        MemoryDep('buf156', c0, {c0: 100}),
        MemoryDep('buf157', c0, {c0: 100})]
op158.met_dependencies = 
    [   MemoryDep('div_51', c0, {c0: 100}),
        MemoryDep('mul_43', c0, {c0: 76800}),
        MemoryDep('primals_81', c1, {c0: 100, c1: 768})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (76800, 1)
op158.sizes = ([100, 768], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_43_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op158_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_51', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf155', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_81', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf156', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_43', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf157', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf158', get_index_7, add, None)
        return store
op156_op157_op158_op159.snodes[3] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 76800})]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 76800})]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (76800, 1)
op159.sizes = ([76800], [])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op159_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf159', get_index_1, load, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='permute_192', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 307200})]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 307200})]
op161.met_dependencies = [MemoryDep('addmm_22', c0, {c0: 307200})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (307200, 1)
op161.sizes = ([307200], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_22_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op161_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_22', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_22', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_22', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_22', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf161', get_index_6, add, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='permute_193', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163_op164_op165_op166: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op163_op164_op165_op166.writes = 
    [   MemoryDep('buf163', c0, {c0: 100}),
        MemoryDep('buf164', c0, {c0: 100}),
        MemoryDep('buf165', c0, {c0: 76800}),
        MemoryDep('buf166', c0, {c0: 76800})]
op163_op164_op165_op166.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 76800}), MemoryDep('buf162', c0, {c0: 76800})]
op163_op164_op165_op166.met_dependencies = 
    [   MemoryDep('div_52', c0, {c0: 100}),
        MemoryDep('mul_39', c0, {c0: 76800}),
        MemoryDep('primals_75', c1, {c0: 100, c1: 768})]
op163_op164_op165_op166.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
    ]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op163_op164_op165_op166.snodes[0] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 100})]
op163.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 76800})]
op163.met_dependencies = [MemoryDep('primals_75', c1, {c0: 100, c1: 768})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (100, 768)
op163.sizes = ([100], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op163_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_75', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_2, reduction)
        return store_reduction
op163_op164_op165_op166.snodes[1] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 100})]
op164.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 76800})]
op164.met_dependencies = 
    [   MemoryDep('mul_39', c0, {c0: 76800}),
        MemoryDep('primals_75', c1, {c0: 100, c1: 768})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (100, 768)
op164.sizes = ([100], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_39_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op164_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_75', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_39', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, reduction)
        return store_reduction
op163_op164_op165_op166.snodes[2] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 76800})]
op165.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 76800}),
        MemoryDep('buf162', c0, {c0: 76800}),
        MemoryDep('buf163', c0, {c0: 100}),
        MemoryDep('buf164', c0, {c0: 100})]
op165.met_dependencies = 
    [   MemoryDep('div_52', c0, {c0: 100}),
        MemoryDep('mul_39', c0, {c0: 76800}),
        MemoryDep('primals_75', c1, {c0: 100, c1: 768})]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (76800, 1)
op165.sizes = ([100, 768], [])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_52_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_39_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op165_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_52', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf162', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_75', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf163', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_39', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf164', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf165', get_index_7, add, None)
        return store
op163_op164_op165_op166.snodes[3] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 76800})]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 76800})]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (76800, 1)
op166.sizes = ([76800], [])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op166_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf166', get_index_1, load, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='permute_194', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: ExternKernelSchedulerNode(FallbackKernel)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = 
    [   StarDep(name='getitem_44', mode=None),
        StarDep(name='getitem_45', mode=None),
        StarDep(name='getitem_46', mode=None),
        StarDep(name='getitem_47', mode=None),
        StarDep(name='view_88', mode=None),
        StarDep(name='view_89', mode=None),
        StarDep(name='view_90', mode=None)]
op168.outputs = [
    buf168: FallbackKernel
    buf168.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op169: ExternKernelSchedulerNode(MultiOutput)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: MultiOutput
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = None


op170: ExternKernelSchedulerNode(MultiOutput)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: MultiOutput
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170.node.kernel = None


op171: ExternKernelSchedulerNode(MultiOutput)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: MultiOutput
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = None


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op172.unmet_dependencies = 
    [   MemoryDep('buf169', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf170', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf171', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (230400, 1)
op172.sizes = ([2, 50, 3, 768], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op172_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf171', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf172', get_index_6, add_1, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='permute_200', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
    ]
]
op173.node.kernel = extern_kernels.mm


op174_op175_op176_op177: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op174_op175_op176_op177.writes = 
    [   MemoryDep('buf174', c0, {c0: 100}),
        MemoryDep('buf175', c0, {c0: 100}),
        MemoryDep('buf176', c0, {c0: 76800}),
        MemoryDep('buf177', c0, {c0: 76800})]
op174_op175_op176_op177.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 76800}), MemoryDep('buf173', c0, {c0: 76800})]
op174_op175_op176_op177.met_dependencies = 
    [   MemoryDep('div_53', c0, {c0: 100}),
        MemoryDep('mul_37', c0, {c0: 76800}),
        MemoryDep('primals_69', c1, {c0: 100, c1: 768})]
op174_op175_op176_op177.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op174_op175_op176_op177.snodes[0] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 100})]
op174.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 76800})]
op174.met_dependencies = [MemoryDep('primals_69', c1, {c0: 100, c1: 768})]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (100, 768)
op174.sizes = ([100], [768])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op174_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_69', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_2, reduction)
        return store_reduction
op174_op175_op176_op177.snodes[1] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 100})]
op175.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 76800})]
op175.met_dependencies = 
    [   MemoryDep('mul_37', c0, {c0: 76800}),
        MemoryDep('primals_69', c1, {c0: 100, c1: 768})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (100, 768)
op175.sizes = ([100], [768])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_37_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op175_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_69', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_37', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, reduction)
        return store_reduction
op174_op175_op176_op177.snodes[2] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 76800})]
op176.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 76800}),
        MemoryDep('buf173', c0, {c0: 76800}),
        MemoryDep('buf174', c0, {c0: 100}),
        MemoryDep('buf175', c0, {c0: 100})]
op176.met_dependencies = 
    [   MemoryDep('div_53', c0, {c0: 100}),
        MemoryDep('mul_37', c0, {c0: 76800}),
        MemoryDep('primals_69', c1, {c0: 100, c1: 768})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (76800, 1)
op176.sizes = ([100, 768], [])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_53_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_37_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op176_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_53', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_69', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf174', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_37', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf175', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf176', get_index_7, add, None)
        return store
op174_op175_op176_op177.snodes[3] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 76800})]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 76800})]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (76800, 1)
op177.sizes = ([76800], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op177_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf177', get_index_1, load, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='permute_201', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 307200})]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 307200})]
op179.met_dependencies = [MemoryDep('addmm_18', c0, {c0: 307200})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (307200, 1)
op179.sizes = ([307200], [])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_18_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op179_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_18', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf178', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_18', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_18', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_18', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf179', get_index_6, add, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='permute_202', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.mm


op181_op182_op183_op184: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op181_op182_op183_op184.writes = 
    [   MemoryDep('buf181', c0, {c0: 100}),
        MemoryDep('buf182', c0, {c0: 100}),
        MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf184', c0, {c0: 76800})]
op181_op182_op183_op184.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 76800}), MemoryDep('buf180', c0, {c0: 76800})]
op181_op182_op183_op184.met_dependencies = 
    [   MemoryDep('div_54', c0, {c0: 100}),
        MemoryDep('mul_33', c0, {c0: 76800}),
        MemoryDep('primals_63', c1, {c0: 100, c1: 768})]
op181_op182_op183_op184.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op181_op182_op183_op184.snodes[0] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 100})]
op181.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 76800})]
op181.met_dependencies = [MemoryDep('primals_63', c1, {c0: 100, c1: 768})]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (100, 768)
op181.sizes = ([100], [768])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op181_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf181', get_index_2, reduction)
        return store_reduction
op181_op182_op183_op184.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 100})]
op182.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 76800})]
op182.met_dependencies = 
    [   MemoryDep('mul_33', c0, {c0: 76800}),
        MemoryDep('primals_63', c1, {c0: 100, c1: 768})]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (100, 768)
op182.sizes = ([100], [768])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_33_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op182_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_33', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf182', get_index_3, reduction)
        return store_reduction
op181_op182_op183_op184.snodes[2] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 76800})]
op183.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 76800}),
        MemoryDep('buf180', c0, {c0: 76800}),
        MemoryDep('buf181', c0, {c0: 100}),
        MemoryDep('buf182', c0, {c0: 100})]
op183.met_dependencies = 
    [   MemoryDep('div_54', c0, {c0: 100}),
        MemoryDep('mul_33', c0, {c0: 76800}),
        MemoryDep('primals_63', c1, {c0: 100, c1: 768})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (76800, 1)
op183.sizes = ([100, 768], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_54_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_33_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op183_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_63', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf181', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_33', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf182', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf183', get_index_7, add, None)
        return store
op181_op182_op183_op184.snodes[3] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 76800})]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 76800})]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (76800, 1)
op184.sizes = ([76800], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op184_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf184', get_index_1, load, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='permute_203', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.mm


op186: ExternKernelSchedulerNode(FallbackKernel)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = 
    [   StarDep(name='getitem_36', mode=None),
        StarDep(name='getitem_37', mode=None),
        StarDep(name='getitem_38', mode=None),
        StarDep(name='getitem_39', mode=None),
        StarDep(name='view_73', mode=None),
        StarDep(name='view_74', mode=None),
        StarDep(name='view_75', mode=None)]
op186.outputs = [
    buf186: FallbackKernel
    buf186.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf186.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op186.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op187: ExternKernelSchedulerNode(MultiOutput)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: MultiOutput
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op187.node.kernel = None


op188: ExternKernelSchedulerNode(MultiOutput)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: MultiOutput
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = None


op189: ExternKernelSchedulerNode(MultiOutput)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: MultiOutput
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = None


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op190.unmet_dependencies = 
    [   MemoryDep('buf187', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf188', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf189', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (230400, 1)
op190.sizes = ([2, 50, 3, 768], [])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op190_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf189', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf187', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf190', get_index_6, add_1, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='permute_209', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op191.node.kernel = extern_kernels.mm


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 216})]
op27.unmet_dependencies = [   MemoryDep('buf26', 6912*(((8192*c0 + c1)//6912)) + 768*(ModularIndexing(8192*c0 + c1, 1, 9)) + (ModularIndexing(8192*c0 + c1, 9, 768)), {c0: 216, c1: 8192})]
op27.met_dependencies = 
    [   MemoryDep('primals_165', c0, {c0: 1769472}),
        MemoryDep('sum_18', 0, {}),
        MemoryDep('tangents_4', c0, {c0: 1769472})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (216, 8192)
op27.sizes = ([216], [8192])
tangents_4_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
sum_18_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
class op27_loop_body:
    var_ranges = {p0: 216, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = 6912*(((8192*p0 + p1)//6912)) + 768*(ModularIndexing(8192*p0 + p1, 1, 9)) + (ModularIndexing(8192*p0 + p1, 9, 768))
    index2 = 0
    index3 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf26', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_165', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('sum_18', get_index_3)
        truediv = ops.truediv(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('sum_18', get_index_4)
        truediv_1 = ops.truediv(truediv, load_4)
        mul = ops.mul(neg, truediv_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf27', get_index_5, reduction)
        return store_reduction


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', 0, {})]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 216})]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1, 216)
op28.sizes = ([], [216])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op28_loop_body:
    var_ranges = {p0: 216}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_1, reduction)
        return store_reduction


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1769472})]
op29.unmet_dependencies = 
    [   MemoryDep('buf26', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9}),
        MemoryDep('buf28', 0, {})]
op29.met_dependencies = 
    [   MemoryDep('div_7', c1, {c0: 256, c1: 6912}),
        MemoryDep('div_8', c0, {c0: 256}),
        MemoryDep('sum_18', 0, {}),
        MemoryDep('tangents_4', c0, {c0: 1769472})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf29.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1769472, 1)
op29.sizes = ([256, 768, 9], [])
tangents_4_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
sum_18_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
div_8_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
div_7_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op29_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    index2 = 0
    index3 = p0
    index4 = 9*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf26', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('sum_18', get_index_2)
        truediv = ops.truediv(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf28', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('div_8', get_index_4)
        mul = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('div_7', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        add_1 = ops.add(truediv, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf29', get_index_6, add_1, None)
        return store


op41: ExternKernelSchedulerNode(FallbackKernel)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op41.met_dependencies = [StarDep(name='add_38', mode=None), StarDep(name='div_3', mode=None)]
op41.outputs = [
    buf41: FallbackKernel
    buf41.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
    ]
]
op41.node.kernel = torch.ops.aten.convolution_backward.default


op42: ExternKernelSchedulerNode(MultiOutput)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: MultiOutput
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf42.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op42.node.kernel = None


op192_op193_op194_op195: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op192_op193_op194_op195.writes = 
    [   MemoryDep('buf192', c0, {c0: 100}),
        MemoryDep('buf193', c0, {c0: 100}),
        MemoryDep('buf194', c0, {c0: 76800}),
        MemoryDep('buf195', c0, {c0: 76800})]
op192_op193_op194_op195.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf191', c0, {c0: 76800}),
        MemoryDep('buf42', 37632*c1 + c2 + 768*(ModularIndexing(c0 - 1, 1, 49)), {c0: 50, c1: 2, c2: 768})]
op192_op193_op194_op195.met_dependencies = 
    [   MemoryDep('add_38', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('getitem_35', c0, {c0: 100}),
        MemoryDep('primals_57', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_9', c0, {c0: 100})]
op192_op193_op194_op195.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op192_op193_op194_op195.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 100})]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 76800})]
op192.met_dependencies = [MemoryDep('primals_57', c1, {c0: 100, c1: 768})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (100, 768)
op192.sizes = ([100], [768])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op192_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_57', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_2, reduction)
        return store_reduction
op192_op193_op194_op195.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 100})]
op193.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 76800})]
op193.met_dependencies = 
    [   MemoryDep('add_38', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('getitem_35', c0, {c0: 100}),
        MemoryDep('primals_57', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_9', c0, {c0: 100})]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (100, 768)
op193.sizes = ([50, 2], [768])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_38_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
getitem_35_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
rsqrt_9_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op193_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p0 + 38400*p1 + p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_57', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_38', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('getitem_35', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('rsqrt_9', get_index_4)
        mul_1 = ops.mul(sub, load_4)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf193', get_index_5, reduction)
        return store_reduction
op192_op193_op194_op195.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 76800})]
op194.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf191', c0, {c0: 76800}),
        MemoryDep('buf192', c0, {c0: 100}),
        MemoryDep('buf193', c0, {c0: 100}),
        MemoryDep('buf42', 37632*c1 + c2 + 768*(ModularIndexing(c0 - 1, 1, 49)), {c0: 50, c1: 2, c2: 768})]
op194.met_dependencies = 
    [   MemoryDep('add_38', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('getitem_35', c0, {c0: 100}),
        MemoryDep('primals_57', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_9', c0, {c0: 100})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (76800, 1)
op194.sizes = ([50, 2, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
rsqrt_9_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
add_38_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
getitem_35_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op194_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = 2*p0 + p1
    index2 = p2
    index3 = 768*p0 + 38400*p1 + p2
    index4 = p0
    index5 = 37632*p1 + p2 + 768*(ModularIndexing(p0 - 1, 1, 49))
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('rsqrt_9', get_index_1)
        constant = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_57', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        constant_1 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf192', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('add_38', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('getitem_35', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('rsqrt_9', get_index_7)
        mul_3 = ops.mul(sub_1, load_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf193', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add = ops.add(load, mul_5)
        get_index_9 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_9, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_2)
        masked_subblock1 = self.masked_subblock1(ge, 0.0)
        constant_3 = ops.constant(0.0, torch.float32)
        where = ops.where(ge, masked_subblock1, constant_3)
        add_1 = ops.add(add, where)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf194', get_index_10, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf42', get_index)
        return load
op192_op193_op194_op195.snodes[3] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 76800})]
op195.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 76800})]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (76800, 1)
op195.sizes = ([76800], [])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op195_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf195', get_index_1, load, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op196.met_dependencies = [StarDep(name='permute_211', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op196.node.kernel = extern_kernels.mm


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 307200})]
op197.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 307200})]
op197.met_dependencies = [MemoryDep('addmm_14', c0, {c0: 307200})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (307200, 1)
op197.sizes = ([307200], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_14_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op197_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_14', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_14', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_14', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_14', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf197', get_index_6, add, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='permute_212', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op198.node.kernel = extern_kernels.mm


op199_op200_op201_op202: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op199_op200_op201_op202.writes = 
    [   MemoryDep('buf199', c0, {c0: 100}),
        MemoryDep('buf200', c0, {c0: 100}),
        MemoryDep('buf201', c0, {c0: 76800}),
        MemoryDep('buf202', c0, {c0: 76800})]
op199_op200_op201_op202.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 76800}), MemoryDep('buf198', c0, {c0: 76800})]
op199_op200_op201_op202.met_dependencies = 
    [   MemoryDep('div_56', c0, {c0: 100}),
        MemoryDep('mul_27', c0, {c0: 76800}),
        MemoryDep('primals_51', c1, {c0: 100, c1: 768})]
op199_op200_op201_op202.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf199.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op199_op200_op201_op202.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 100})]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 76800})]
op199.met_dependencies = [MemoryDep('primals_51', c1, {c0: 100, c1: 768})]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf199.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (100, 768)
op199.sizes = ([100], [768])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op199_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_51', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf199', get_index_2, reduction)
        return store_reduction
op199_op200_op201_op202.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 100})]
op200.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 76800})]
op200.met_dependencies = 
    [   MemoryDep('mul_27', c0, {c0: 76800}),
        MemoryDep('primals_51', c1, {c0: 100, c1: 768})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (100, 768)
op200.sizes = ([100], [768])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_27_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op200_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_51', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_27', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, reduction)
        return store_reduction
op199_op200_op201_op202.snodes[2] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 76800})]
op201.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 76800}),
        MemoryDep('buf198', c0, {c0: 76800}),
        MemoryDep('buf199', c0, {c0: 100}),
        MemoryDep('buf200', c0, {c0: 100})]
op201.met_dependencies = 
    [   MemoryDep('div_56', c0, {c0: 100}),
        MemoryDep('mul_27', c0, {c0: 76800}),
        MemoryDep('primals_51', c1, {c0: 100, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (76800, 1)
op201.sizes = ([100, 768], [])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_56_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_27_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op201_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_56', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_51', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf199', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_27', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf200', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf201', get_index_7, add, None)
        return store
op199_op200_op201_op202.snodes[3] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 76800})]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 76800})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (76800, 1)
op202.sizes = ([76800], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op202_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf202', get_index_1, load, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='permute_213', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op204: ExternKernelSchedulerNode(FallbackKernel)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = 
    [   StarDep(name='getitem_28', mode=None),
        StarDep(name='getitem_29', mode=None),
        StarDep(name='getitem_30', mode=None),
        StarDep(name='getitem_31', mode=None),
        StarDep(name='view_58', mode=None),
        StarDep(name='view_59', mode=None),
        StarDep(name='view_60', mode=None)]
op204.outputs = [
    buf204: FallbackKernel
    buf204.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf204.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
    ]
]
op204.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op43: ExternKernelSchedulerNode(MultiOutput)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: MultiOutput
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
    ]
]
op43.node.kernel = None


op205: ExternKernelSchedulerNode(MultiOutput)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: MultiOutput
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = None


op206: ExternKernelSchedulerNode(MultiOutput)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: MultiOutput
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = None


op207: ExternKernelSchedulerNode(MultiOutput)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: MultiOutput
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = None


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op208.unmet_dependencies = 
    [   MemoryDep('buf205', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf206', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf207', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (230400, 1)
op208.sizes = ([2, 50, 3, 768], [])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op208_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf207', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf206', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf205', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf208', get_index_6, add_1, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='permute_219', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op209.node.kernel = extern_kernels.mm


op210_op211_op212_op213: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op210_op211_op212_op213.writes = 
    [   MemoryDep('buf210', c0, {c0: 100}),
        MemoryDep('buf211', c0, {c0: 100}),
        MemoryDep('buf212', c0, {c0: 76800}),
        MemoryDep('buf213', c0, {c0: 76800})]
op210_op211_op212_op213.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 76800}), MemoryDep('buf209', c0, {c0: 76800})]
op210_op211_op212_op213.met_dependencies = 
    [   MemoryDep('div_57', c0, {c0: 100}),
        MemoryDep('mul_25', c0, {c0: 76800}),
        MemoryDep('primals_45', c1, {c0: 100, c1: 768})]
op210_op211_op212_op213.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op210_op211_op212_op213.snodes[0] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 100})]
op210.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 76800})]
op210.met_dependencies = [MemoryDep('primals_45', c1, {c0: 100, c1: 768})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (100, 768)
op210.sizes = ([100], [768])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op210_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_2, reduction)
        return store_reduction
op210_op211_op212_op213.snodes[1] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 100})]
op211.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 76800})]
op211.met_dependencies = 
    [   MemoryDep('mul_25', c0, {c0: 76800}),
        MemoryDep('primals_45', c1, {c0: 100, c1: 768})]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (100, 768)
op211.sizes = ([100], [768])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_25_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op211_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_25', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_3, reduction)
        return store_reduction
op210_op211_op212_op213.snodes[2] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 76800})]
op212.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 76800}),
        MemoryDep('buf209', c0, {c0: 76800}),
        MemoryDep('buf210', c0, {c0: 100}),
        MemoryDep('buf211', c0, {c0: 100})]
op212.met_dependencies = 
    [   MemoryDep('div_57', c0, {c0: 100}),
        MemoryDep('mul_25', c0, {c0: 76800}),
        MemoryDep('primals_45', c1, {c0: 100, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (76800, 1)
op212.sizes = ([100, 768], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_57_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_25_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op212_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_57', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf209', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_45', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf210', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_25', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf211', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf212', get_index_7, add, None)
        return store
op210_op211_op212_op213.snodes[3] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 76800})]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 76800})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (76800, 1)
op213.sizes = ([76800], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op213_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf213', get_index_1, load, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='permute_220', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.node.kernel = extern_kernels.mm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 307200})]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 307200})]
op215.met_dependencies = [MemoryDep('addmm_10', c0, {c0: 307200})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (307200, 1)
op215.sizes = ([307200], [])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_10_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op215_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_10', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_10', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_10', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_10', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf215', get_index_6, add, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='permute_221', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf216.users = [
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op216.node.kernel = extern_kernels.mm


op217_op218_op219_op220: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op217_op218_op219_op220.writes = 
    [   MemoryDep('buf217', c0, {c0: 100}),
        MemoryDep('buf218', c0, {c0: 100}),
        MemoryDep('buf219', c0, {c0: 76800}),
        MemoryDep('buf220', c0, {c0: 76800})]
op217_op218_op219_op220.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 76800}), MemoryDep('buf216', c0, {c0: 76800})]
op217_op218_op219_op220.met_dependencies = 
    [   MemoryDep('div_58', c0, {c0: 100}),
        MemoryDep('mul_21', c0, {c0: 76800}),
        MemoryDep('primals_39', c1, {c0: 100, c1: 768})]
op217_op218_op219_op220.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op217_op218_op219_op220.snodes[0] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 100})]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 76800})]
op217.met_dependencies = [MemoryDep('primals_39', c1, {c0: 100, c1: 768})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (100, 768)
op217.sizes = ([100], [768])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op217_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_39', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf217', get_index_2, reduction)
        return store_reduction
op217_op218_op219_op220.snodes[1] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 100})]
op218.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 76800})]
op218.met_dependencies = 
    [   MemoryDep('mul_21', c0, {c0: 76800}),
        MemoryDep('primals_39', c1, {c0: 100, c1: 768})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (100, 768)
op218.sizes = ([100], [768])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_21_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op218_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_39', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_21', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf218', get_index_3, reduction)
        return store_reduction
op217_op218_op219_op220.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 76800})]
op219.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 76800}),
        MemoryDep('buf216', c0, {c0: 76800}),
        MemoryDep('buf217', c0, {c0: 100}),
        MemoryDep('buf218', c0, {c0: 100})]
op219.met_dependencies = 
    [   MemoryDep('div_58', c0, {c0: 100}),
        MemoryDep('mul_21', c0, {c0: 76800}),
        MemoryDep('primals_39', c1, {c0: 100, c1: 768})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (76800, 1)
op219.sizes = ([100, 768], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_58_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_21_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op219_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_58', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf216', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_39', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf217', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_21', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf218', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf219', get_index_7, add, None)
        return store
op217_op218_op219_op220.snodes[3] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 76800})]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 76800})]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (76800, 1)
op220.sizes = ([76800], [])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op220_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf220', get_index_1, load, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='permute_222', mode=None)]
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.node.kernel = extern_kernels.mm


op222: ExternKernelSchedulerNode(FallbackKernel)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = 
    [   StarDep(name='getitem_20', mode=None),
        StarDep(name='getitem_21', mode=None),
        StarDep(name='getitem_22', mode=None),
        StarDep(name='getitem_23', mode=None),
        StarDep(name='view_43', mode=None),
        StarDep(name='view_44', mode=None),
        StarDep(name='view_45', mode=None)]
op222.outputs = [
    buf222: FallbackKernel
    buf222.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf222.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
    ]
]
op222.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op223: ExternKernelSchedulerNode(MultiOutput)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: MultiOutput
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = None


op224: ExternKernelSchedulerNode(MultiOutput)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: MultiOutput
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf224.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = None


op225: ExternKernelSchedulerNode(MultiOutput)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: MultiOutput
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = None


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op226.unmet_dependencies = 
    [   MemoryDep('buf223', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf224', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf225', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (230400, 1)
op226.sizes = ([2, 50, 3, 768], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op226_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf225', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf223', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf226', get_index_6, add_1, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='permute_228', mode=None)]
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op227.node.kernel = extern_kernels.mm


op228_op229_op230_op231: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op228_op229_op230_op231.writes = 
    [   MemoryDep('buf228', c0, {c0: 100}),
        MemoryDep('buf229', c0, {c0: 100}),
        MemoryDep('buf230', c0, {c0: 76800}),
        MemoryDep('buf231', c0, {c0: 76800})]
op228_op229_op230_op231.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 76800}), MemoryDep('buf227', c0, {c0: 76800})]
op228_op229_op230_op231.met_dependencies = 
    [   MemoryDep('div_59', c0, {c0: 100}),
        MemoryDep('mul_19', c0, {c0: 76800}),
        MemoryDep('primals_33', c1, {c0: 100, c1: 768})]
op228_op229_op230_op231.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op228_op229_op230_op231.snodes[0] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 100})]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 76800})]
op228.met_dependencies = [MemoryDep('primals_33', c1, {c0: 100, c1: 768})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (100, 768)
op228.sizes = ([100], [768])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op228_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_33', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_2, reduction)
        return store_reduction
op228_op229_op230_op231.snodes[1] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 100})]
op229.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 76800})]
op229.met_dependencies = 
    [   MemoryDep('mul_19', c0, {c0: 76800}),
        MemoryDep('primals_33', c1, {c0: 100, c1: 768})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (100, 768)
op229.sizes = ([100], [768])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_19_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op229_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_33', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_19', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf229', get_index_3, reduction)
        return store_reduction
op228_op229_op230_op231.snodes[2] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 76800})]
op230.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 76800}),
        MemoryDep('buf227', c0, {c0: 76800}),
        MemoryDep('buf228', c0, {c0: 100}),
        MemoryDep('buf229', c0, {c0: 100})]
op230.met_dependencies = 
    [   MemoryDep('div_59', c0, {c0: 100}),
        MemoryDep('mul_19', c0, {c0: 76800}),
        MemoryDep('primals_33', c1, {c0: 100, c1: 768})]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (76800, 1)
op230.sizes = ([100, 768], [])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_59_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_19_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op230_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_59', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf227', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_33', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf228', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_19', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf229', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf230', get_index_7, add, None)
        return store
op228_op229_op230_op231.snodes[3] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 76800})]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 76800})]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (76800, 1)
op231.sizes = ([76800], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op231_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf231', get_index_1, load, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='permute_229', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False)]
]
op232.node.kernel = extern_kernels.mm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 307200})]
op233.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 307200})]
op233.met_dependencies = [MemoryDep('addmm_6', c0, {c0: 307200})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (307200, 1)
op233.sizes = ([307200], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_6_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op233_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_6', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_6', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_6', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_6', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf233', get_index_6, add, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = [StarDep(name='permute_230', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op234.node.kernel = extern_kernels.mm


op235_op236_op237_op238: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op235_op236_op237_op238.writes = 
    [   MemoryDep('buf235', c0, {c0: 100}),
        MemoryDep('buf236', c0, {c0: 100}),
        MemoryDep('buf237', c0, {c0: 76800}),
        MemoryDep('buf238', c0, {c0: 76800})]
op235_op236_op237_op238.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 76800}), MemoryDep('buf234', c0, {c0: 76800})]
op235_op236_op237_op238.met_dependencies = 
    [   MemoryDep('div_60', c0, {c0: 100}),
        MemoryDep('mul_15', c0, {c0: 76800}),
        MemoryDep('primals_27', c1, {c0: 100, c1: 768})]
op235_op236_op237_op238.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op235_op236_op237_op238.snodes[0] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 100})]
op235.unmet_dependencies = [MemoryDep('buf234', c0, {c0: 76800})]
op235.met_dependencies = [MemoryDep('primals_27', c1, {c0: 100, c1: 768})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (100, 768)
op235.sizes = ([100], [768])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op235_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_27', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_2, reduction)
        return store_reduction
op235_op236_op237_op238.snodes[1] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 100})]
op236.unmet_dependencies = [MemoryDep('buf234', c0, {c0: 76800})]
op236.met_dependencies = 
    [   MemoryDep('mul_15', c0, {c0: 76800}),
        MemoryDep('primals_27', c1, {c0: 100, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (100, 768)
op236.sizes = ([100], [768])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_15_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op236_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_27', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_15', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, reduction)
        return store_reduction
op235_op236_op237_op238.snodes[2] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 76800})]
op237.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 76800}),
        MemoryDep('buf234', c0, {c0: 76800}),
        MemoryDep('buf235', c0, {c0: 100}),
        MemoryDep('buf236', c0, {c0: 100})]
op237.met_dependencies = 
    [   MemoryDep('div_60', c0, {c0: 100}),
        MemoryDep('mul_15', c0, {c0: 76800}),
        MemoryDep('primals_27', c1, {c0: 100, c1: 768})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (76800, 1)
op237.sizes = ([100, 768], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_60_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_15_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op237_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_60', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_27', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf235', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_15', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf236', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf237', get_index_7, add, None)
        return store
op235_op236_op237_op238.snodes[3] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 76800})]
op238.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 76800})]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (76800, 1)
op238.sizes = ([76800], [])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op238_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf238', get_index_1, load, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='permute_231', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240: ExternKernelSchedulerNode(FallbackKernel)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = 
    [   StarDep(name='getitem_12', mode=None),
        StarDep(name='getitem_13', mode=None),
        StarDep(name='getitem_14', mode=None),
        StarDep(name='getitem_15', mode=None),
        StarDep(name='view_28', mode=None),
        StarDep(name='view_29', mode=None),
        StarDep(name='view_30', mode=None)]
op240.outputs = [
    buf240: FallbackKernel
    buf240.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op240.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op241: ExternKernelSchedulerNode(MultiOutput)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: MultiOutput
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = None


op242: ExternKernelSchedulerNode(MultiOutput)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: MultiOutput
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = None


op243: ExternKernelSchedulerNode(MultiOutput)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: MultiOutput
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = None


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op244.unmet_dependencies = 
    [   MemoryDep('buf241', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf242', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf243', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (230400, 1)
op244.sizes = ([2, 50, 3, 768], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op244_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf243', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf242', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf241', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf244', get_index_6, add_1, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='permute_237', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op245.node.kernel = extern_kernels.mm


op246_op247_op248_op249: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op246_op247_op248_op249.writes = 
    [   MemoryDep('buf246', c0, {c0: 100}),
        MemoryDep('buf247', c0, {c0: 100}),
        MemoryDep('buf248', c0, {c0: 76800}),
        MemoryDep('buf249', c0, {c0: 76800})]
op246_op247_op248_op249.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 76800}), MemoryDep('buf245', c0, {c0: 76800})]
op246_op247_op248_op249.met_dependencies = 
    [   MemoryDep('div_61', c0, {c0: 100}),
        MemoryDep('mul_13', c0, {c0: 76800}),
        MemoryDep('primals_21', c1, {c0: 100, c1: 768})]
op246_op247_op248_op249.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op246_op247_op248_op249.snodes[0] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 100})]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 76800})]
op246.met_dependencies = [MemoryDep('primals_21', c1, {c0: 100, c1: 768})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (100, 768)
op246.sizes = ([100], [768])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op246_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_21', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf246', get_index_2, reduction)
        return store_reduction
op246_op247_op248_op249.snodes[1] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 100})]
op247.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 76800})]
op247.met_dependencies = 
    [   MemoryDep('mul_13', c0, {c0: 76800}),
        MemoryDep('primals_21', c1, {c0: 100, c1: 768})]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (100, 768)
op247.sizes = ([100], [768])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_13_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op247_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_21', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_13', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_3, reduction)
        return store_reduction
op246_op247_op248_op249.snodes[2] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 76800})]
op248.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 76800}),
        MemoryDep('buf245', c0, {c0: 76800}),
        MemoryDep('buf246', c0, {c0: 100}),
        MemoryDep('buf247', c0, {c0: 100})]
op248.met_dependencies = 
    [   MemoryDep('div_61', c0, {c0: 100}),
        MemoryDep('mul_13', c0, {c0: 76800}),
        MemoryDep('primals_21', c1, {c0: 100, c1: 768})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (76800, 1)
op248.sizes = ([100, 768], [])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_61_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_13_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op248_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_61', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_21', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf246', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_13', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf247', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf248', get_index_7, add, None)
        return store
op246_op247_op248_op249.snodes[3] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 76800})]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 76800})]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (76800, 1)
op249.sizes = ([76800], [])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op249_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf249', get_index_1, load, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='permute_238', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 307200})]
op251.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 307200})]
op251.met_dependencies = [MemoryDep('addmm_2', c0, {c0: 307200})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (307200, 1)
op251.sizes = ([307200], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
addmm_2_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op251_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('addmm_2', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('addmm_2', get_index_3)
        mul_2 = ops.mul(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('addmm_2', get_index_4)
        constant_1 = ops.constant(1.702, torch.float32)
        mul_3 = ops.mul(load_4, constant_1)
        sigmoid_1 = ops.sigmoid(mul_3)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('addmm_2', get_index_5)
        constant_2 = ops.constant(1.702, torch.float32)
        mul_4 = ops.mul(load_5, constant_2)
        sigmoid_2 = ops.sigmoid(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_3, sigmoid_2)
        mul_5 = ops.mul(sigmoid_1, sub)
        mul_6 = ops.mul(mul_2, mul_5)
        constant_4 = ops.constant(1.702, torch.float32)
        mul_7 = ops.mul(mul_6, constant_4)
        add = ops.add(mul_1, mul_7)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf251', get_index_6, add, None)
        return store


op252: ExternKernelSchedulerNode(ExternKernelOut)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = [StarDep(name='buf251', mode=None)]
op252.met_dependencies = [StarDep(name='permute_239', mode=None)]
op252.outputs = [
    buf252: ExternKernelOut
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
]
op252.node.kernel = extern_kernels.mm


op253_op254_op255_op256: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op253_op254_op255_op256.writes = 
    [   MemoryDep('buf253', c0, {c0: 100}),
        MemoryDep('buf254', c0, {c0: 100}),
        MemoryDep('buf255', c0, {c0: 76800}),
        MemoryDep('buf256', c0, {c0: 76800})]
op253_op254_op255_op256.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 76800}), MemoryDep('buf252', c0, {c0: 76800})]
op253_op254_op255_op256.met_dependencies = 
    [   MemoryDep('div_62', c0, {c0: 100}),
        MemoryDep('mul_9', c0, {c0: 76800}),
        MemoryDep('primals_15', c1, {c0: 100, c1: 768})]
op253_op254_op255_op256.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op253_op254_op255_op256.snodes[0] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 100})]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800})]
op253.met_dependencies = [MemoryDep('primals_15', c1, {c0: 100, c1: 768})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (100, 768)
op253.sizes = ([100], [768])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op253_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_15', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf253', get_index_2, reduction)
        return store_reduction
op253_op254_op255_op256.snodes[1] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 100})]
op254.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800})]
op254.met_dependencies = 
    [   MemoryDep('mul_9', c0, {c0: 76800}),
        MemoryDep('primals_15', c1, {c0: 100, c1: 768})]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (100, 768)
op254.sizes = ([100], [768])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_9_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op254_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_15', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_9', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf254', get_index_3, reduction)
        return store_reduction
op253_op254_op255_op256.snodes[2] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 76800})]
op255.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 76800}),
        MemoryDep('buf252', c0, {c0: 76800}),
        MemoryDep('buf253', c0, {c0: 100}),
        MemoryDep('buf254', c0, {c0: 100})]
op255.met_dependencies = 
    [   MemoryDep('div_62', c0, {c0: 100}),
        MemoryDep('mul_9', c0, {c0: 76800}),
        MemoryDep('primals_15', c1, {c0: 100, c1: 768})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (76800, 1)
op255.sizes = ([100, 768], [])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
div_62_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
mul_9_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op255_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_62', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf252', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_15', get_index_3)
        mul = ops.mul(load_2, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf253', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_9', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf254', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf255', get_index_7, add, None)
        return store
op253_op254_op255_op256.snodes[3] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 76800})]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 76800})]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (76800, 1)
op256.sizes = ([76800], [])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op256_loop_body:
    var_ranges = {p0: 76800}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf256', get_index_1, load, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='permute_240', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.node.kernel = extern_kernels.mm


op258: ExternKernelSchedulerNode(FallbackKernel)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = 
    [   StarDep(name='getitem_4', mode=None),
        StarDep(name='getitem_5', mode=None),
        StarDep(name='getitem_6', mode=None),
        StarDep(name='getitem_7', mode=None),
        StarDep(name='view_13', mode=None),
        StarDep(name='view_14', mode=None),
        StarDep(name='view_15', mode=None)]
op258.outputs = [
    buf258: FallbackKernel
    buf258.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op258.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention_backward.default


op259: ExternKernelSchedulerNode(MultiOutput)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: MultiOutput
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op259.node.kernel = None


op260: ExternKernelSchedulerNode(MultiOutput)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: MultiOutput
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op260.node.kernel = None


op261: ExternKernelSchedulerNode(MultiOutput)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: MultiOutput
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = None


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', 2304*c0 + 4608*c1 + c2, {c0: 2, c1: 50, c2: 2304})]
op262.unmet_dependencies = 
    [   MemoryDep('buf259', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf260', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768}),
        MemoryDep('buf261', 38400*c0 + 768*c1 + c3 + 768*(((768*c0 + c3)//1536)), {c0: 2, c1: 50, c2: 3, c3: 768})]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (230400, 1)
op262.sizes = ([2, 50, 3, 768], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3, 768], stride=[4608, 2304, 768, 1])
class op262_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 3, p3: 768}
    index0 = p2
    index1 = 38400*p0 + 768*p1 + p3 + 768*(((768*p0 + p3)//1536))
    index2 = 2304*p0 + 4608*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf261', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf260', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf259', get_index_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf262', get_index_6, add_1, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='permute_246', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op263.node.kernel = extern_kernels.mm


op264_op266_op267_op268: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op264_op266_op267_op268.writes = 
    [   MemoryDep('buf264', c0, {c0: 100}),
        MemoryDep('buf266', c0, {c0: 100}),
        MemoryDep('buf267', c0, {c0: 76800}),
        MemoryDep('buf268', c0, {c0: 100})]
op264_op266_op267_op268.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 76800}),
        MemoryDep('buf263', c0, {c0: 76800}),
        MemoryDep('buf265', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op264_op266_op267_op268.met_dependencies = 
    [   MemoryDep('primals_7', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_9', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_1', c0, {c0: 100})]
op264_op266_op267_op268.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf264.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[768, 1536, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[1, 2, 100])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op264_op266_op267_op268.snodes[0] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 100})]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 76800})]
op264.met_dependencies = [MemoryDep('primals_9', c1, {c0: 100, c1: 768})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf264.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (100, 768)
op264.sizes = ([100], [768])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op264_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_9', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_2, reduction)
        return store_reduction
op264_op266_op267_op268.snodes[1] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 100})]
op266.unmet_dependencies = 
    [   MemoryDep('buf263', c0, {c0: 76800}),
        MemoryDep('buf265', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op266.met_dependencies = [MemoryDep('primals_9', c1, {c0: 100, c1: 768})]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (100, 768)
op266.sizes = ([50, 2], [768])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op266_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p0 + 38400*p1 + p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_9', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf265', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf266', get_index_3, reduction)
        return store_reduction
op264_op266_op267_op268.snodes[2] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 76800})]
op267.unmet_dependencies = 
    [   MemoryDep('buf255', c0, {c0: 76800}),
        MemoryDep('buf263', c0, {c0: 76800}),
        MemoryDep('buf264', c0, {c0: 100}),
        MemoryDep('buf265', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf266', c0, {c0: 100})]
op267.met_dependencies = 
    [   MemoryDep('primals_7', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_9', c1, {c0: 100, c1: 768}),
        MemoryDep('rsqrt_1', c0, {c0: 100})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[768, 1536, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (76800, 1)
op267.sizes = ([50, 2, 768], [])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
rsqrt_1_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[768, 1536, 1])
class op267_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = 2*p0 + p1
    index2 = p2
    index3 = 768*p0 + 38400*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('rsqrt_1', get_index_1)
        constant = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf263', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_9', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        constant_1 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf264', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf265', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf266', get_index_6)
        mul_3 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_3)
        mul_4 = ops.mul(mul, sub_1)
        add = ops.add(load, mul_4)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('primals_7', get_index_7)
        mul_5 = ops.mul(add, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf267', get_index_8, mul_5, None)
        return store
op264_op266_op267_op268.snodes[3] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 100})]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 76800})]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[1, 2, 100])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (100, 768)
op268.sizes = ([100], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[768, 1536, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[1, 2, 100])
class op268_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, reduction)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 100})]
op269.unmet_dependencies = [MemoryDep('buf267', 768*c0 + 1536*c1 + c2, {c0: 2, c1: 50, c2: 768})]
op269.met_dependencies = 
    [   MemoryDep('cat', c0, {c0: 76800}),
        MemoryDep('getitem_1', c0, {c0: 100}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400}),
        MemoryDep('rsqrt', c0, {c0: 100})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (100, 768)
op269.sizes = ([2, 50], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[768, 1536, 1])
cat_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
getitem_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
rsqrt_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
class op269_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = 768*p0 + 1536*p1 + p2
    index1 = 38400*p0 + 768*p1 + p2
    index2 = 768*p1 + p2
    index3 = 50*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('cat', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_6', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('getitem_1', get_index_3)
        sub = ops.sub(add, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('rsqrt', get_index_4)
        mul = ops.mul(sub, load_4)
        mul_1 = ops.mul(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf269', get_index_5, reduction)
        return store_reduction


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 75264})]
op270.unmet_dependencies = 
    [   MemoryDep('buf267', 768*c0 + 1536*c1 + c2 + 1536, {c0: 2, c1: 49, c2: 768}),
        MemoryDep('buf268', c0 + 2*c1 + 2, {c0: 2, c1: 49}),
        MemoryDep('buf269', 50*c0 + c1 + 1, {c0: 2, c1: 49})]
op270.met_dependencies = 
    [   MemoryDep('cat', 38400*c0 + c1 + 768, {c0: 2, c1: 37632}),
        MemoryDep('getitem_1', 50*c0 + c1 + 1, {c0: 2, c1: 49}),
        MemoryDep('primals_6', c1 + 768, {c0: 2, c1: 37632}),
        MemoryDep('rsqrt', 50*c0 + c1 + 1, {c0: 2, c1: 49})]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (75264, 1)
op270.sizes = ([2, 49, 768], [])
rsqrt_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[768, 1536, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[1, 2, 100])
cat_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
getitem_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
buf270_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op270_loop_body:
    var_ranges = {p0: 2, p1: 49, p2: 768}
    index0 = 50*p0 + p1 + 1
    index1 = 768*p0 + 1536*p1 + p2 + 1536
    index2 = p0 + 2*p1 + 2
    index3 = 38400*p0 + 768*p1 + p2 + 768
    index4 = 768*p1 + p2 + 768
    index5 = 37632*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('rsqrt', get_index)
        constant = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf267', get_index_1)
        constant_1 = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf268', get_index_2)
        sub = ops.sub(mul_1, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('cat', get_index_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('primals_6', get_index_4)
        add = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('getitem_1', get_index_5)
        sub_1 = ops.sub(add, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('rsqrt', get_index_6)
        mul_2 = ops.mul(sub_1, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf269', get_index_7)
        mul_3 = ops.mul(mul_2, load_7)
        sub_2 = ops.sub(sub, mul_3)
        mul_4 = ops.mul(mul, sub_2)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf270', get_index_8, mul_4, None)
        return store


op271: ExternKernelSchedulerNode(FallbackKernel)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='div', mode=None), StarDep(name='primals_4', mode=None)]
op271.outputs = [
    buf271: FallbackKernel
    buf271.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = torch.ops.aten.convolution_backward.default


op272: ExternKernelSchedulerNode(MultiOutput)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: MultiOutput
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = None


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 301056})]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 301056})]
op273.met_dependencies = [MemoryDep('device_put_1', c1, {c0: 2, c1: 3})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (301056, 1)
op273.sizes = ([2, 3, 50176], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
device_put_1_layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op273_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 50176}
    index0 = 150528*p0 + 50176*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('device_put_1', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf273', get_index_2, truediv, None)
        return store


op274: ExternKernelSchedulerNode(FallbackKernel)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='add_10', mode=None)]
op274.outputs = [
    buf274: FallbackKernel
    buf274.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.node.kernel = torch.ops.aten._adaptive_avg_pool2d_backward.default


op275: ExternKernelSchedulerNode(MultiOutput)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: MultiOutput
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.node.kernel = None


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 216})]
op44.unmet_dependencies = [   MemoryDep('buf43', 6912*(((8192*c0 + c1)//6912)) + 768*(ModularIndexing(8192*c0 + c1, 1, 9)) + (ModularIndexing(8192*c0 + c1, 9, 768)), {c0: 216, c1: 8192})]
op44.met_dependencies = 
    [   MemoryDep('primals_156', c0, {c0: 1769472}),
        MemoryDep('sum_6', 0, {}),
        MemoryDep('tangents_2', c0, {c0: 1769472})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (216, 8192)
op44.sizes = ([216], [8192])
tangents_2_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
sum_6_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
class op44_loop_body:
    var_ranges = {p0: 216, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = 6912*(((8192*p0 + p1)//6912)) + 768*(ModularIndexing(8192*p0 + p1, 1, 9)) + (ModularIndexing(8192*p0 + p1, 9, 768))
    index2 = 0
    index3 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_156', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('sum_6', get_index_3)
        truediv = ops.truediv(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('sum_6', get_index_4)
        truediv_1 = ops.truediv(truediv, load_4)
        mul = ops.mul(neg, truediv_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf44', get_index_5, reduction)
        return store_reduction


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', 0, {})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 216})]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1, 216)
op45.sizes = ([], [216])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op45_loop_body:
    var_ranges = {p0: 216}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, reduction)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1769472})]
op46.unmet_dependencies = 
    [   MemoryDep('buf43', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9}),
        MemoryDep('buf45', 0, {})]
op46.met_dependencies = 
    [   MemoryDep('div_1', c1, {c0: 256, c1: 6912}),
        MemoryDep('div_2', c0, {c0: 256}),
        MemoryDep('sum_6', 0, {}),
        MemoryDep('tangents_2', c0, {c0: 1769472})]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf46.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1769472, 1)
op46.sizes = ([256, 768, 9], [])
tangents_2_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
sum_6_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
div_2_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
div_1_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op46_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    index2 = 0
    index3 = p0
    index4 = 9*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('sum_6', get_index_2)
        truediv = ops.truediv(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf45', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('div_2', get_index_4)
        mul = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('div_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        add_1 = ops.add(truediv, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf46', get_index_6, add_1, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op8.met_dependencies = [StarDep(name='mm', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.mm


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 16})]
op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 131072})]
op10.met_dependencies = 
    [   MemoryDep('primals_174', c0, {c0: 131072}),
        MemoryDep('sum_30', 0, {}),
        MemoryDep('tangents_6', c0, {c0: 131072})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (16, 8192)
op10.sizes = ([16], [8192])
tangents_6_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
sum_30_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
class op10_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = 0
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_174', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_30', get_index_3)
        truediv = ops.truediv(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_30', get_index_4)
        truediv_1 = ops.truediv(truediv, load_4)
        mul = ops.mul(neg, truediv_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf10', get_index_5, reduction)
        return store_reduction


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 0, {})]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 16})]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (1, 16)
op11.sizes = ([], [16])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op11_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf11', get_index_1, reduction)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 131072})]
op12.unmet_dependencies = [MemoryDep('buf11', 0, {}), MemoryDep('buf8', c0, {c0: 131072})]
op12.met_dependencies = 
    [   MemoryDep('div_13', c1, {c0: 256, c1: 512}),
        MemoryDep('div_14', c0, {c0: 256}),
        MemoryDep('sum_30', 0, {}),
        MemoryDep('tangents_6', c0, {c0: 131072})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
    buf12.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (131072, 1)
op12.sizes = ([256, 512], [])
tangents_6_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
sum_30_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
div_14_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
div_13_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
class op12_loop_body:
    var_ranges = {p0: 256, p1: 512}
    index0 = 512*p0 + p1
    index1 = 0
    index2 = p0
    index3 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_30', get_index_2)
        truediv = ops.truediv(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf11', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('div_14', get_index_4)
        mul = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('div_13', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        add_1 = ops.add(truediv, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf12', get_index_6, add_1, None)
        return store


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', 199712*c0 + c1, {c0: 2, c1: 199692})]
op276.unmet_dependencies = []
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (399384, 1)
op276.sizes = ([2, 199692], [])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
class op276_loop_body:
    var_ranges = {p0: 2, p1: 199692}
    index0 = 199712*p0 + p1
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf276', get_index, constant, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [   MemoryDep('buf277', c1 + 199712*tmp0 + 774*tmp1 + 3*tmp2, {c0: 2, c1: 3}, atomic_add)]
op277.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 393216}),
        StarDep(name='buf276', mode='atomic_add')]
op277.met_dependencies = 
    [   MemoryDep('clamp_max', 65536*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('clamp_max_1', 65536*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('index_put', 65536*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('view', c0, {c0: 2})]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
    buf277.mutations = ['buf276']
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (393216, 1)
op277.sizes = ([2, 3, 65536], [])
view_layout = FixedLayout('cuda:0', torch.int64, size=[2, 1, 1], stride=[1, 1, 1])
clamp_max_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
clamp_max_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
index_put_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
class op277_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 65536}
    index0 = p0
    index1 = 65536*p0 + p2
    index2 = 196608*p0 + 65536*p1 + p2
    index3 = 199712*indirect0 + 774*indirect1 + 3*indirect2 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('view', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('clamp_max', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('clamp_max_1', get_index_2)
        set_indirect2 = self.set_indirect2(load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_3, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('index_put', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf277', get_index_5, mul_1, 'atomic_add')
        return store


op278_op281: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op278_op281.writes = [MemoryDep('buf278', c0, {c0: 3072}), MemoryDep('buf281', c0, {c0: 3072})]
op278_op281.unmet_dependencies = [   MemoryDep('buf277', 199712*c0 + (((8192*c1 + c2)//65536)) + 3*(ModularIndexing(c2, 1, 256)) + 774*(ModularIndexing(8192*c1 + c2, 256, 256)) + 777, {c0: 2, c1: 24, c2: 8192})]
op278_op281.met_dependencies = [MemoryDep('inductor_random_default', c0, {c0: 2})]
op278_op281.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op278_op281.snodes[0] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 3072})]
op278.unmet_dependencies = [   MemoryDep('buf277', 199712*c0 + (((8192*c1 + c2)//65536)) + 3*(ModularIndexing(c2, 1, 256)) + 774*(ModularIndexing(8192*c1 + c2, 256, 256)) + 777, {c0: 2, c1: 24, c2: 8192})]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (3072, 128)
op278.sizes = ([2, 24, 64], [128])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
class op278_loop_body:
    var_ranges = {p0: 2, p1: 24, p2: 64, p3: 128}
    index0 = (ModularIndexing(8192*p1 + 128*p2 + p3, 256, 256)) + 1
    index1 = (ModularIndexing(128*p2 + p3, 1, 256)) + 1
    index2 = 199712*p0 + (((8192*p1 + 128*p2 + p3)//65536)) + 3*(ModularIndexing(128*p2 + p3, 1, 256)) + 774*(ModularIndexing(8192*p1 + 128*p2 + p3, 256, 256)) + 777
    index3 = 1536*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(258, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(258, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf278', get_index_4, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf276', get_index)
        return load
op278_op281.snodes[1] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 3072})]
op281.unmet_dependencies = [   MemoryDep('buf277', 199712*c0 + (((8192*c1 + c2)//65536)) + 3*(ModularIndexing(c2, 1, 256)) + 774*(ModularIndexing(8192*c1 + c2, 256, 256)) + 777, {c0: 2, c1: 24, c2: 8192})]
op281.met_dependencies = [MemoryDep('inductor_random_default', c0, {c0: 2})]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (3072, 128)
op281.sizes = ([2, 24, 64], [128])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
inductor_random_default_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
class op281_loop_body:
    var_ranges = {p0: 2, p1: 24, p2: 64, p3: 128}
    index0 = (ModularIndexing(8192*p1 + 128*p2 + p3, 256, 256)) + 1
    index1 = (ModularIndexing(128*p2 + p3, 1, 256)) + 1
    index2 = 199712*p0 + (((8192*p1 + 128*p2 + p3)//65536)) + 3*(ModularIndexing(128*p2 + p3, 1, 256)) + 774*(ModularIndexing(8192*p1 + 128*p2 + p3, 256, 256)) + 777
    index3 = p0
    index4 = 1536*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(258, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(258, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        load = ops.load('inductor_random_default', get_index_4)
        constant_4 = ops.constant(0.5, torch.float32)
        add = ops.add(load, constant_4)
        mul = ops.mul(masked_subblock1, add)
        neg = ops.neg(mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', neg)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf281', get_index_5, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf276', get_index)
        return load


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 48})]
op279.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 3072})]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (48, 64)
op279.sizes = ([48], [64])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
class op279_loop_body:
    var_ranges = {p0: 48, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf279', get_index_1, reduction)
        return store_reduction


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 48})]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 3072})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (48, 64)
op282.sizes = ([48], [64])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24, 64], stride=[1536, 3072, 3072, 3072, 64, 1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
class op282_loop_body:
    var_ranges = {p0: 48, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf282', get_index_1, reduction)
        return store_reduction


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 2})]
op280.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 48})]
op280.met_dependencies = []
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op280.group.device = cuda:0
op280.group.iteration = (2, 24)
op280.sizes = ([2], [24])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op280_loop_body:
    var_ranges = {p0: 2, p1: 24}
    index0 = 24*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf280', get_index_1, reduction)
        return store_reduction


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 2})]
op283.unmet_dependencies = [MemoryDep('buf282', c0, {c0: 48})]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (2, 24)
op283.sizes = ([2], [24])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op283_loop_body:
    var_ranges = {p0: 2, p1: 24}
    index0 = 24*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf283', get_index_1, reduction)
        return store_reduction


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 131072})]
op284.unmet_dependencies = 
    [   MemoryDep('buf277', 199712*c0 + 774*c1 + 3*c2 + 777, {c0: 2, c1: 256, c2: 256}),
        MemoryDep('buf277', 199712*c0 + 774*c1 + 3*c2 + 778, {c0: 2, c1: 256, c2: 256}),
        MemoryDep('buf277', 199712*c0 + 774*c1 + 3*c2 + 779, {c0: 2, c1: 256, c2: 256}),
        MemoryDep('buf280', c0, {c0: 2}),
        MemoryDep('buf283', c0, {c0: 2})]
op284.met_dependencies = [MemoryDep('inductor_random_default', c0, {c0: 2})]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 256, 256], stride=[65536, 131072, 256, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (131072, 1)
op284.sizes = ([2, 256, 256], [])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
inductor_random_default_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 256, 256], stride=[65536, 131072, 256, 1])
class op284_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 256}
    index0 = p1 + 1
    index1 = p2 + 1
    index2 = 199712*p0 + 774*p1 + 3*p2 + 777
    index3 = p0
    index4 = 199712*p0 + 774*p1 + 3*p2 + 778
    index5 = 199712*p0 + 774*p1 + 3*p2 + 779
    index6 = 65536*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(258, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(258, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        load = ops.load('inductor_random_default', get_index_4)
        constant_4 = ops.constant(0.5, torch.float32)
        add = ops.add(load, constant_4)
        mul = ops.mul(masked_subblock1, add)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('buf280', get_index_5)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('buf283', get_index_6)
        add_1 = ops.add(load_1, load_2)
        constant_5 = ops.constant(5.086263020833333e-06, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        add_2 = ops.add(mul, mul_1)
        get_index_7 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_6)
        get_index_8 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        constant_7 = ops.constant(258, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_7)
        get_index_9 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_9, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_8)
        get_index_10 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_10, torch.int64)
        constant_9 = ops.constant(258, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_9)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        get_index_11 = self.get_index('index3')
        load_3 = ops.load('inductor_random_default', get_index_11)
        constant_10 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(load_3, constant_10)
        mul_2 = ops.mul(masked_subblock2, add_3)
        get_index_12 = self.get_index('index3')
        load_4 = ops.load('buf280', get_index_12)
        get_index_13 = self.get_index('index3')
        load_5 = ops.load('buf283', get_index_13)
        add_4 = ops.add(load_4, load_5)
        constant_11 = ops.constant(5.086263020833333e-06, torch.float32)
        mul_3 = ops.mul(add_4, constant_11)
        add_5 = ops.add(mul_2, mul_3)
        add_6 = ops.add(add_2, add_5)
        get_index_14 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_14, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_12)
        get_index_15 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_15, torch.int64)
        constant_13 = ops.constant(258, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_13)
        get_index_16 = self.get_index('index1')
        index_expr_10 = ops.index_expr(get_index_16, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_14)
        get_index_17 = self.get_index('index1')
        index_expr_11 = ops.index_expr(get_index_17, torch.int64)
        constant_15 = ops.constant(258, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_15)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        get_index_18 = self.get_index('index3')
        load_6 = ops.load('inductor_random_default', get_index_18)
        constant_16 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(load_6, constant_16)
        mul_4 = ops.mul(masked_subblock3, add_7)
        get_index_19 = self.get_index('index3')
        load_7 = ops.load('buf280', get_index_19)
        get_index_20 = self.get_index('index3')
        load_8 = ops.load('buf283', get_index_20)
        add_8 = ops.add(load_7, load_8)
        constant_17 = ops.constant(5.086263020833333e-06, torch.float32)
        mul_5 = ops.mul(add_8, constant_17)
        add_9 = ops.add(mul_4, mul_5)
        add_10 = ops.add(add_6, add_9)
        get_index_21 = self.get_index('index6')
        store = ops.store('buf284', get_index_21, add_10, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf276', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf276', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf276', get_index)
        return load


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 393216})]
op285.unmet_dependencies = 
    [   MemoryDep('buf277', 199712*c0 + 774*c1 + c2 + 777, {c0: 2, c1: 256, c2: 768}),
        MemoryDep('buf280', c0, {c0: 2}),
        MemoryDep('buf283', c0, {c0: 2})]
op285.met_dependencies = 
    [   MemoryDep('inductor_random_default', c0, {c0: 2}),
        MemoryDep('inductor_random_default_1', c0, {c0: 2})]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (393216, 1)
op285.sizes = ([2, 256, 256, 3], [])
buf277_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 258, 258, 3], stride=[199712, 774, 3, 1])
inductor_random_default_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
inductor_random_default_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
class op285_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 256, p3: 3}
    index0 = p1 + 1
    index1 = p2 + 1
    index2 = 199712*p0 + 774*p1 + 3*p2 + p3 + 777
    index3 = p0
    index4 = 196608*p0 + 768*p1 + 3*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(258, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(258, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        load = ops.load('inductor_random_default', get_index_4)
        constant_4 = ops.constant(0.5, torch.float32)
        add = ops.add(load, constant_4)
        mul = ops.mul(masked_subblock1, add)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('buf280', get_index_5)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('buf283', get_index_6)
        add_1 = ops.add(load_1, load_2)
        constant_5 = ops.constant(5.086263020833333e-06, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        add_2 = ops.add(mul, mul_1)
        get_index_7 = self.get_index('index3')
        load_3 = ops.load('inductor_random_default_1', get_index_7)
        constant_6 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_3, constant_6)
        mul_3 = ops.mul(add_2, mul_2)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf285', get_index_8, mul_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf276', get_index)
        return load


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 393216})]
op286.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 131072}),
        MemoryDep('buf285', 3*c0 + 1, {c0: 131072}),
        MemoryDep('buf285', 3*c0 + 2, {c0: 131072}),
        MemoryDep('buf285', 3*c0, {c0: 131072}),
        MemoryDep('buf285', c0, {c0: 393216})]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf286.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (393216, 1)
op286.sizes = ([131072, 3], [])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 256, 256], stride=[65536, 131072, 256, 1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
class op286_loop_body:
    var_ranges = {p0: 131072, p1: 3}
    index0 = 3*p0 + p1
    index1 = p0
    index2 = 3*p0
    index3 = 3*p0 + 1
    index4 = 3*p0 + 2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf284', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf285', get_index_2)
        neg = ops.neg(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf285', get_index_3)
        neg_1 = ops.neg(load_3)
        add = ops.add(neg, neg_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf285', get_index_4)
        neg_2 = ops.neg(load_4)
        add_1 = ops.add(add, neg_2)
        add_2 = ops.add(load_1, add_1)
        constant = ops.constant(0.3333333333333333, torch.float32)
        mul = ops.mul(add_2, constant)
        add_3 = ops.add(load, mul)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf286', get_index_5, add_3, None)
        return store


