op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('addmm_49', c0, {c0: 2}), MemoryDep('tangents_1', c0, {c0: 2})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (2, 1)
op0.sizes = ([2], [])
addmm_49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
class op0_loop_body:
    var_ranges = {p0: 2}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('addmm_49', get_index)
        sigmoid = ops.sigmoid(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('tangents_1', get_index_1)
        mul = ops.mul(sigmoid, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf0', get_index_2, mul, None)
        return store


op12_op13: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op12_op13.writes = [MemoryDep('buf12', c0, {c0: 18}), MemoryDep('buf13', 0, {})]
op12_op13.unmet_dependencies = []
op12_op13.met_dependencies = [MemoryDep('convolution_6', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op12_op13.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf13.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op12_op13.snodes[0] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 18})]
op12.unmet_dependencies = []
op12.met_dependencies = [MemoryDep('convolution_6', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (18, 1)
op12.sizes = ([2, 9], [])
convolution_6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_6', get_index)
        sigmoid = ops.sigmoid(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('tangents_1', get_index_1)
        constant = ops.constant(0.1111111111111111, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(sigmoid, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf12', get_index_2, mul_1, None)
        return store
op12_op13.snodes[1] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 0, {})]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 18})]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf13.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (1, 18)
op13.sizes = ([], [18])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op13_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf13', get_index_1, reduction)
        return store_reduction


op28_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op28_op29.writes = [MemoryDep('buf28', c0, {c0: 18}), MemoryDep('buf29', 0, {})]
op28_op29.unmet_dependencies = []
op28_op29.met_dependencies = [MemoryDep('convolution_3', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op28_op29.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf29.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op28_op29.snodes[0] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 18})]
op28.unmet_dependencies = []
op28.met_dependencies = [MemoryDep('convolution_3', c0, {c0: 18}), MemoryDep('tangents_1', c0, {c0: 2})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (18, 1)
op28.sizes = ([2, 9], [])
convolution_3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
class op28_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convolution_3', get_index)
        sigmoid = ops.sigmoid(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('tangents_1', get_index_1)
        constant = ops.constant(0.1111111111111111, torch.float32)
        mul = ops.mul(load_1, constant)
        mul_1 = ops.mul(sigmoid, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf28', get_index_2, mul_1, None)
        return store
op28_op29.snodes[1] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', 0, {})]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 18})]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf29.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1, 18)
op29.sizes = ([], [18])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 3], stride=[9, 3, 1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op29_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_1, reduction)
        return store_reduction


op1: ExternKernelSchedulerNode(ExternKernelOut)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op1.met_dependencies = [StarDep(name='permute_125', mode=None)]
op1.outputs = [
    buf1: ExternKernelOut
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op1.node.kernel = extern_kernels.mm


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op2.met_dependencies = [StarDep(name='where_2', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.mm


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 0, {})]
op3.unmet_dependencies = [MemoryDep('buf0', 0, {}), MemoryDep('buf0', 1, {})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1], stride=[1, 1])
    buf3.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (1, 1)
op3.sizes = ([], [])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1], stride=[1, 1])
class op3_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf3', get_index_2, add, None)
        return store


op14: ExternKernelSchedulerNode(FallbackKernel)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op14.met_dependencies = [StarDep(name='convolution_5', mode=None), StarDep(name='div_12', mode=None)]
op14.outputs = [
    buf14: FallbackKernel
    buf14.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf14.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op14.node.kernel = torch.ops.aten.convolution_backward.default


op30: ExternKernelSchedulerNode(FallbackKernel)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op30.met_dependencies = [StarDep(name='convolution_2', mode=None), StarDep(name='div_6', mode=None)]
op30.outputs = [
    buf30: FallbackKernel
    buf30.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf30.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op30.node.kernel = torch.ops.aten.convolution_backward.default


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 512})]
op6.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 512})]
op6.met_dependencies = [MemoryDep('where_2', c0, {c0: 512})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (512, 1)
op6.sizes = ([512], [])
where_2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
class op6_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('where_2', get_index)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1', get_index_2)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(load_2, constant_1)
        where = ops.where(gt, load_1, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf6', get_index_3, where, None)
        return store


op4_op5_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op4_op5_op58.writes = 
    [   MemoryDep('buf4', 0, {}),
        MemoryDep('buf5', c0, {c0: 256}),
        MemoryDep('buf58', 0, {})]
op4_op5_op58.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 256})]
op4_op5_op58.met_dependencies = 
    [   MemoryDep('clamp_min_14', 0, {}),
        MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('primals_179', 0, {}),
        MemoryDep('sum_33', 0, {}),
        MemoryDep('tangents_7', c0, {c0: 256}),
        StarDep(name='primals_179', mode=None),
        WeakDep(name='buf5', mutating_buf='buf58')]
op4_op5_op58.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf58: ComputedBuffer
    buf58.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf58.mutations = ['primals_179']
    buf58.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op4_op5_op58.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 0, {})]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 256})]
op4.met_dependencies = 
    [   MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('sum_33', 0, {}),
        MemoryDep('tangents_7', c0, {c0: 256})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1, 256)
op4.sizes = ([], [256])
tangents_7_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
sum_33_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op4_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_178', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_33', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_33', get_index_4)
        mul = ops.mul(load_4, load_4)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_3, maximum)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('sum_33', get_index_5)
        mul_1 = ops.mul(truediv, load_5)
        truediv_1 = ops.truediv(load_2, mul_1)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_33', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_33', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('sum_33', get_index_8)
        mul_3 = ops.mul(truediv_2, load_8)
        truediv_3 = ops.truediv(truediv_1, mul_3)
        mul_4 = ops.mul(neg, truediv_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_4)
        get_index_9 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_9, reduction)
        return store_reduction
op4_op5_op58.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 256})]
op5.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 256}), MemoryDep('buf4', 0, {})]
op5.met_dependencies = 
    [   MemoryDep('clamp_min_14', 0, {}),
        MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('primals_179', 0, {}),
        MemoryDep('sum_33', 0, {}),
        MemoryDep('tangents_7', c0, {c0: 256})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (256, 1)
op5.sizes = ([256], [])
tangents_7_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
sum_33_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
clamp_min_14_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
class op5_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_33', get_index_3)
        mul = ops.mul(load_3, load_3)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_2, maximum)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_33', get_index_4)
        mul_1 = ops.mul(truediv, load_4)
        truediv_1 = ops.truediv(add, mul_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf4', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_33', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_33', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        mul_3 = ops.mul(load_5, truediv_2)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_178', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_179', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('clamp_min_14', get_index_10)
        truediv_3 = ops.truediv(mul_4, load_10)
        mul_5 = ops.mul(mul_3, truediv_3)
        add_1 = ops.add(truediv_1, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf5', get_index_11, add_1, None)
        return store
op4_op5_op58.snodes[2] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', 0, {})]
op58.unmet_dependencies = [WeakDep(name='buf5', mutating_buf='buf58')]
op58.met_dependencies = [MemoryDep('sum_33', 0, {}), StarDep(name='primals_179', mode=None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf58.mutations = ['primals_179']
    buf58.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1, 1)
op58.sizes = ([], [])
sum_33_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf58_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op58_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('sum_33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sum_33', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf58', get_index_2, truediv, None)
        return store


op15: ExternKernelSchedulerNode(MultiOutput)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: MultiOutput
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op15.node.kernel = None


op16: ExternKernelSchedulerNode(MultiOutput)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: MultiOutput
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op16.node.kernel = None


op31: ExternKernelSchedulerNode(MultiOutput)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: MultiOutput
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = None


op32: ExternKernelSchedulerNode(MultiOutput)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: MultiOutput
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = None


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='mm', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op7.node.kernel = extern_kernels.mm


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 256})]
op8.unmet_dependencies = [MemoryDep('buf6', c0 + 256, {c0: 256}), MemoryDep('buf6', c0, {c0: 256})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf8.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (256, 1)
op8.sizes = ([256], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
class op8_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = p0 + 256
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf6', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, add, None)
        return store


op19: ExternKernelSchedulerNode(FallbackKernel)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op19.met_dependencies = 
    [   StarDep(name='constant_pad_nd_2', mode=None),
        StarDep(name='primals_169', mode=None)]
op19.outputs = [
    buf19: FallbackKernel
    buf19.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.node.kernel = torch.ops.aten.convolution_backward.default


op17_op18_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op53.writes = 
    [   MemoryDep('buf17', 0, {}),
        MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf53', 0, {})]
op17_op18_op53.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 256})]
op17_op18_op53.met_dependencies = 
    [   MemoryDep('clamp_min_10', 0, {}),
        MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('primals_171', 0, {}),
        MemoryDep('sum_21', 0, {}),
        MemoryDep('tangents_5', c0, {c0: 256}),
        StarDep(name='primals_171', mode=None),
        WeakDep(name='buf18', mutating_buf='buf53')]
op17_op18_op53.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf53: ComputedBuffer
    buf53.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf53.mutations = ['primals_171']
    buf53.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op17_op18_op53.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', 0, {})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 256})]
op17.met_dependencies = 
    [   MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('sum_21', 0, {}),
        MemoryDep('tangents_5', c0, {c0: 256})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1, 256)
op17.sizes = ([], [256])
tangents_5_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
sum_21_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op17_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_170', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_21', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_21', get_index_4)
        mul = ops.mul(load_4, load_4)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_3, maximum)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('sum_21', get_index_5)
        mul_1 = ops.mul(truediv, load_5)
        truediv_1 = ops.truediv(load_2, mul_1)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_21', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_21', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('sum_21', get_index_8)
        mul_3 = ops.mul(truediv_2, load_8)
        truediv_3 = ops.truediv(truediv_1, mul_3)
        mul_4 = ops.mul(neg, truediv_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_4)
        get_index_9 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_9, reduction)
        return store_reduction
op17_op18_op53.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 256})]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 256}), MemoryDep('buf17', 0, {})]
op18.met_dependencies = 
    [   MemoryDep('clamp_min_10', 0, {}),
        MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('primals_171', 0, {}),
        MemoryDep('sum_21', 0, {}),
        MemoryDep('tangents_5', c0, {c0: 256})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (256, 1)
op18.sizes = ([256], [])
tangents_5_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
sum_21_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
clamp_min_10_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
class op18_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_21', get_index_3)
        mul = ops.mul(load_3, load_3)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_2, maximum)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_21', get_index_4)
        mul_1 = ops.mul(truediv, load_4)
        truediv_1 = ops.truediv(add, mul_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf17', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_21', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_21', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        mul_3 = ops.mul(load_5, truediv_2)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_170', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_171', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('clamp_min_10', get_index_10)
        truediv_3 = ops.truediv(mul_4, load_10)
        mul_5 = ops.mul(mul_3, truediv_3)
        add_1 = ops.add(truediv_1, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf18', get_index_11, add_1, None)
        return store
op17_op18_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', 0, {})]
op53.unmet_dependencies = [WeakDep(name='buf18', mutating_buf='buf53')]
op53.met_dependencies = [MemoryDep('sum_21', 0, {}), StarDep(name='primals_171', mode=None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf53.mutations = ['primals_171']
    buf53.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (1, 1)
op53.sizes = ([], [])
sum_21_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf53_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op53_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('sum_21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sum_21', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf53', get_index_2, truediv, None)
        return store


op35: ExternKernelSchedulerNode(FallbackKernel)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op35.met_dependencies = 
    [   StarDep(name='constant_pad_nd_1', mode=None),
        StarDep(name='primals_160', mode=None)]
op35.outputs = [
    buf35: FallbackKernel
    buf35.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.node.kernel = torch.ops.aten.convolution_backward.default


op33_op34_op48: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op33_op34_op48.writes = 
    [   MemoryDep('buf33', 0, {}),
        MemoryDep('buf34', c0, {c0: 256}),
        MemoryDep('buf48', 0, {})]
op33_op34_op48.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 256})]
op33_op34_op48.met_dependencies = 
    [   MemoryDep('clamp_min_6', 0, {}),
        MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('primals_162', 0, {}),
        MemoryDep('sum_9', 0, {}),
        MemoryDep('tangents_3', c0, {c0: 256}),
        StarDep(name='primals_162', mode=None),
        WeakDep(name='buf34', mutating_buf='buf48')]
op33_op34_op48.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf48: ComputedBuffer
    buf48.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf48.mutations = ['primals_162']
    buf48.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op33_op34_op48.snodes[0] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', 0, {})]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 256})]
op33.met_dependencies = 
    [   MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('sum_9', 0, {}),
        MemoryDep('tangents_3', c0, {c0: 256})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1, 256)
op33.sizes = ([], [256])
tangents_3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
sum_9_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op33_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf32', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_161', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_9', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_9', get_index_4)
        mul = ops.mul(load_4, load_4)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_3, maximum)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('sum_9', get_index_5)
        mul_1 = ops.mul(truediv, load_5)
        truediv_1 = ops.truediv(load_2, mul_1)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_9', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_9', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('sum_9', get_index_8)
        mul_3 = ops.mul(truediv_2, load_8)
        truediv_3 = ops.truediv(truediv_1, mul_3)
        mul_4 = ops.mul(neg, truediv_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_4)
        get_index_9 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_9, reduction)
        return store_reduction
op33_op34_op48.snodes[1] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 256})]
op34.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 256}), MemoryDep('buf33', 0, {})]
op34.met_dependencies = 
    [   MemoryDep('clamp_min_6', 0, {}),
        MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('primals_162', 0, {}),
        MemoryDep('sum_9', 0, {}),
        MemoryDep('tangents_3', c0, {c0: 256})]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=True),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (256, 1)
op34.sizes = ([256], [])
tangents_3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
sum_9_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
clamp_min_6_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256])
class op34_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf32', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_9', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_9', get_index_3)
        mul = ops.mul(load_3, load_3)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_2, maximum)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_9', get_index_4)
        mul_1 = ops.mul(truediv, load_4)
        truediv_1 = ops.truediv(add, mul_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf33', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('sum_9', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('sum_9', get_index_7)
        mul_2 = ops.mul(load_7, load_7)
        sqrt_1 = ops.sqrt(mul_2)
        constant_1 = ops.constant(1e-12, torch.float32)
        maximum_1 = ops.maximum(sqrt_1, constant_1)
        truediv_2 = ops.truediv(load_6, maximum_1)
        mul_3 = ops.mul(load_5, truediv_2)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_161', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_162', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('clamp_min_6', get_index_10)
        truediv_3 = ops.truediv(mul_4, load_10)
        mul_5 = ops.mul(mul_3, truediv_3)
        add_1 = ops.add(truediv_1, mul_5)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf34', get_index_11, add_1, None)
        return store
op33_op34_op48.snodes[2] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', 0, {})]
op48.unmet_dependencies = [WeakDep(name='buf34', mutating_buf='buf48')]
op48.met_dependencies = [MemoryDep('sum_9', 0, {}), StarDep(name='primals_162', mode=None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf48.mutations = ['primals_162']
    buf48.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (1, 1)
op48.sizes = ([], [])
sum_9_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf48_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op48_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('sum_9', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sum_9', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, truediv, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 16})]
op9.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 131072})]
op9.met_dependencies = 
    [   MemoryDep('primals_174', c0, {c0: 131072}),
        MemoryDep('sum_30', 0, {}),
        MemoryDep('tangents_6', c0, {c0: 131072})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (16, 8192)
op9.sizes = ([16], [8192])
tangents_6_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
sum_30_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
class op9_loop_body:
    var_ranges = {p0: 16, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = 0
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_174', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('sum_30', get_index_3)
        truediv = ops.truediv(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('sum_30', get_index_4)
        truediv_1 = ops.truediv(truediv, load_4)
        mul = ops.mul(neg, truediv_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf9', get_index_5, reduction)
        return store_reduction


op20: ExternKernelSchedulerNode(MultiOutput)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: MultiOutput
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = None


op36: ExternKernelSchedulerNode(MultiOutput)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: MultiOutput
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = None


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 0, {})]
op10.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 16})]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1, 16)
op10.sizes = ([], [16])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op10_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_1, reduction)
        return store_reduction


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 131072})]
op11.unmet_dependencies = [MemoryDep('buf10', 0, {}), MemoryDep('buf7', c0, {c0: 131072})]
op11.met_dependencies = 
    [   MemoryDep('div_13', c1, {c0: 256, c1: 512}),
        MemoryDep('div_14', c0, {c0: 256}),
        MemoryDep('sum_30', 0, {}),
        MemoryDep('tangents_6', c0, {c0: 131072})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
    buf11.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (131072, 1)
op11.sizes = ([256, 512], [])
tangents_6_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
sum_30_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
div_14_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
div_13_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
class op11_loop_body:
    var_ranges = {p0: 256, p1: 512}
    index0 = 512*p0 + p1
    index1 = 0
    index2 = p0
    index3 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('sum_30', get_index_2)
        truediv = ops.truediv(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf10', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('div_14', get_index_4)
        mul = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('div_13', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        add_1 = ops.add(truediv, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf11', get_index_6, add_1, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 25088})]
op21.unmet_dependencies = [MemoryDep('buf20', 20736*c0 + 2304*c1 + c2 + 2560, {c0: 2, c1: 7, c2: 1792})]
op21.met_dependencies = [MemoryDep('gt_4', c0, {c0: 25088})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (25088, 1)
op21.sizes = ([2, 7, 7, 256], [])
gt_4_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op21_loop_body:
    var_ranges = {p0: 2, p1: 7, p2: 7, p3: 256}
    index0 = 12544*p0 + 1792*p1 + 256*p2 + p3
    index1 = p1 + 1
    index2 = p2 + 1
    index3 = 20736*p0 + 2304*p1 + 256*p2 + p3 + 2560
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('gt_4', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(9, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(9, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(9, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_7 = self.get_index('index2')
        index_expr_6 = ops.index_expr(get_index_7, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_8 = self.get_index('index2')
        index_expr_7 = ops.index_expr(get_index_8, torch.int64)
        constant_7 = ops.constant(9, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        constant_8 = ops.constant(0.2, torch.float32)
        mul = ops.mul(masked_subblock2, constant_8)
        where = ops.where(load, masked_subblock1, mul)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf21', get_index_9, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf20', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf20', get_index)
        return load


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 25088})]
op37.unmet_dependencies = [MemoryDep('buf36', 20736*c0 + 2304*c1 + c2 + 2560, {c0: 2, c1: 7, c2: 1792})]
op37.met_dependencies = [MemoryDep('gt_5', c0, {c0: 25088})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (25088, 1)
op37.sizes = ([2, 7, 7, 256], [])
gt_5_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op37_loop_body:
    var_ranges = {p0: 2, p1: 7, p2: 7, p3: 256}
    index0 = 12544*p0 + 1792*p1 + 256*p2 + p3
    index1 = p1 + 1
    index2 = p2 + 1
    index3 = 20736*p0 + 2304*p1 + 256*p2 + p3 + 2560
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('gt_5', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(9, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(9, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(9, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_7 = self.get_index('index2')
        index_expr_6 = ops.index_expr(get_index_7, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_8 = self.get_index('index2')
        index_expr_7 = ops.index_expr(get_index_8, torch.int64)
        constant_7 = ops.constant(9, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        constant_8 = ops.constant(0.2, torch.float32)
        mul = ops.mul(masked_subblock2, constant_8)
        where = ops.where(load, masked_subblock1, mul)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf37', get_index_9, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf36', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf36', get_index)
        return load


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 256})]
op22.unmet_dependencies = [MemoryDep('buf21', c0 + 256*c1, {c0: 256, c1: 98})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf22.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (256, 98)
op22.sizes = ([256], [98])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op22_loop_body:
    var_ranges = {p0: 256, p1: 98}
    index0 = p0 + 256*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, reduction)
        return store_reduction


op23: ExternKernelSchedulerNode(FallbackKernel)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op23.met_dependencies = [StarDep(name='div_9', mode=None), StarDep(name='view_188', mode=None)]
op23.outputs = [
    buf23: FallbackKernel
    buf23.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.node.kernel = torch.ops.aten.convolution_backward.default


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 256})]
op38.unmet_dependencies = [MemoryDep('buf37', c0 + 256*c1, {c0: 256, c1: 98})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf38.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (256, 98)
op38.sizes = ([256], [98])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op38_loop_body:
    var_ranges = {p0: 256, p1: 98}
    index0 = p0 + 256*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf38', get_index_1, reduction)
        return store_reduction


op39: ExternKernelSchedulerNode(FallbackKernel)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op39.met_dependencies = [StarDep(name='div_3', mode=None), StarDep(name='view_187', mode=None)]
op39.outputs = [
    buf39: FallbackKernel
    buf39.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = torch.ops.aten.convolution_backward.default


op24: ExternKernelSchedulerNode(MultiOutput)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: MultiOutput
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = None


op40: ExternKernelSchedulerNode(MultiOutput)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: MultiOutput
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
    ]
]
op40.node.kernel = None


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 216})]
op25.unmet_dependencies = [   MemoryDep('buf24', 6912*(((8192*c0 + c1)//6912)) + 768*(ModularIndexing(8192*c0 + c1, 1, 9)) + (ModularIndexing(8192*c0 + c1, 9, 768)), {c0: 216, c1: 8192})]
op25.met_dependencies = 
    [   MemoryDep('primals_165', c0, {c0: 1769472}),
        MemoryDep('sum_18', 0, {}),
        MemoryDep('tangents_4', c0, {c0: 1769472})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (216, 8192)
op25.sizes = ([216], [8192])
tangents_4_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
sum_18_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
class op25_loop_body:
    var_ranges = {p0: 216, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = 6912*(((8192*p0 + p1)//6912)) + 768*(ModularIndexing(8192*p0 + p1, 1, 9)) + (ModularIndexing(8192*p0 + p1, 9, 768))
    index2 = 0
    index3 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_165', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('sum_18', get_index_3)
        truediv = ops.truediv(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('sum_18', get_index_4)
        truediv_1 = ops.truediv(truediv, load_4)
        mul = ops.mul(neg, truediv_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf25', get_index_5, reduction)
        return store_reduction


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 216})]
op41.unmet_dependencies = [   MemoryDep('buf40', 6912*(((8192*c0 + c1)//6912)) + 768*(ModularIndexing(8192*c0 + c1, 1, 9)) + (ModularIndexing(8192*c0 + c1, 9, 768)), {c0: 216, c1: 8192})]
op41.met_dependencies = 
    [   MemoryDep('primals_156', c0, {c0: 1769472}),
        MemoryDep('sum_6', 0, {}),
        MemoryDep('tangents_2', c0, {c0: 1769472})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (216, 8192)
op41.sizes = ([216], [8192])
tangents_2_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
sum_6_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
class op41_loop_body:
    var_ranges = {p0: 216, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = 6912*(((8192*p0 + p1)//6912)) + 768*(ModularIndexing(8192*p0 + p1, 1, 9)) + (ModularIndexing(8192*p0 + p1, 9, 768))
    index2 = 0
    index3 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        add = ops.add(load, load_1)
        neg = ops.neg(add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_156', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('sum_6', get_index_3)
        truediv = ops.truediv(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('sum_6', get_index_4)
        truediv_1 = ops.truediv(truediv, load_4)
        mul = ops.mul(neg, truediv_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf41', get_index_5, reduction)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 0, {})]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 216})]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1, 216)
op26.sizes = ([], [216])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op26_loop_body:
    var_ranges = {p0: 216}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_1, reduction)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1769472})]
op27.unmet_dependencies = 
    [   MemoryDep('buf24', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9}),
        MemoryDep('buf26', 0, {})]
op27.met_dependencies = 
    [   MemoryDep('div_7', c1, {c0: 256, c1: 6912}),
        MemoryDep('div_8', c0, {c0: 256}),
        MemoryDep('sum_18', 0, {}),
        MemoryDep('tangents_4', c0, {c0: 1769472})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf27.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1769472, 1)
op27.sizes = ([256, 768, 9], [])
tangents_4_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
sum_18_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
div_8_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
div_7_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op27_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    index2 = 0
    index3 = p0
    index4 = 9*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('sum_18', get_index_2)
        truediv = ops.truediv(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf26', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('div_8', get_index_4)
        mul = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('div_7', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        add_1 = ops.add(truediv, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf27', get_index_6, add_1, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', 0, {})]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 216})]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (1, 216)
op42.sizes = ([], [216])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[216], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op42_loop_body:
    var_ranges = {p0: 216}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf42', get_index_1, reduction)
        return store_reduction


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 1769472})]
op43.unmet_dependencies = 
    [   MemoryDep('buf40', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9}),
        MemoryDep('buf42', 0, {})]
op43.met_dependencies = 
    [   MemoryDep('div_1', c1, {c0: 256, c1: 6912}),
        MemoryDep('div_2', c0, {c0: 256}),
        MemoryDep('sum_6', 0, {}),
        MemoryDep('tangents_2', c0, {c0: 1769472})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf43.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (1769472, 1)
op43.sizes = ([256, 768, 9], [])
tangents_2_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
sum_6_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
div_2_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
div_1_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op43_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    index2 = 0
    index3 = p0
    index4 = 9*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('sum_6', get_index_2)
        truediv = ops.truediv(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf42', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('div_2', get_index_4)
        mul = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('div_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        add_1 = ops.add(truediv, mul_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf43', get_index_6, add_1, None)
        return store


