op0: ExternKernelSchedulerNode(RandomSeeds)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = []
op0.outputs = [
    buf0: RandomSeeds
    buf0.layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = aten.randint.low_out


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 2})]
op7.unmet_dependencies = []
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.int64, size=[2], stride=[1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (2, 1)
op7.sizes = ([2], [])
buf7_layout = FixedLayout('cuda:0', torch.int64, size=[2], stride=[1])
class op7_loop_body:
    var_ranges = {p0: 2}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, index_expr, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 131072})]
op10.unmet_dependencies = []
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (131072, 1)
op10.sizes = ([131072], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
class op10_loop_body:
    var_ranges = {p0: 131072}
    index0 = p0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf10', get_index, constant, None)
        return store


op14: ExternKernelSchedulerNode(DeviceCopy)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = []
op14.met_dependencies = [StarDep(name='primals_2', mode=None)]
op14.outputs = [
    buf14: DeviceCopy
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = None


op15: ExternKernelSchedulerNode(DeviceCopy)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = []
op15.met_dependencies = [StarDep(name='primals_3', mode=None)]
op15.outputs = [
    buf15: DeviceCopy
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op15.node.kernel = None


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 6912})]
op342.unmet_dependencies = []
op342.met_dependencies = 
    [   MemoryDep('primals_156', c0 + 6912*c1, {c0: 6912, c1: 256}),
        MemoryDep('primals_157', c1, {c0: 6912, c1: 256})]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=True),
    ]
]
op342.group.device = cuda:0
op342.group.iteration = (6912, 256)
op342.sizes = ([6912], [256])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
primals_157_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op342_loop_body:
    var_ranges = {p0: 6912, p1: 256}
    index0 = p0 + 6912*p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_157', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf342', get_index_2, reduction)
        return store_reduction


op354_op355_op356_op357_op430_op433_op432: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op354_op355_op356_op357_op430_op433_op432.writes = 
    [   MemoryDep('buf354', 0, {}),
        MemoryDep('buf355', 0, {}),
        MemoryDep('buf356', 0, {}),
        MemoryDep('buf357', c0, {c0: 256}),
        MemoryDep('buf430', c0, {c0: 256}),
        MemoryDep('buf432', 0, {}),
        MemoryDep('buf433', c0, {c0: 256})]
op354_op355_op356_op357_op430_op433_op432.unmet_dependencies = []
op354_op355_op356_op357_op430_op433_op432.met_dependencies = 
    [   MemoryDep('primals_161', c0, {c0: 256}),
        MemoryDep('primals_162', 0, {}),
        StarDep(name='primals_162', mode=None),
        StarDep(name='primals_163', mode=None)]
op354_op355_op356_op357_op430_op433_op432.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=True),
    ]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
    buf357.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False),
    ]
    buf433: ComputedBuffer
    buf433.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf433.mutations = ['primals_163']
    buf433.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf432: ComputedBuffer
    buf432.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf432.mutations = ['primals_162']
    buf432.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op354_op355_op356_op357_op430_op433_op432.snodes[0] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', 0, {})]
op354.unmet_dependencies = []
op354.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256}), MemoryDep('primals_162', 0, {})]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=True),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (1, 256)
op354.sizes = ([], [256])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op354_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_162', get_index_1)
        mul = ops.mul(load, load_1)
        mul_1 = ops.mul(mul, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf354', get_index_2, reduction)
        return store_reduction
op354_op355_op356_op357_op430_op433_op432.snodes[1] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', 0, {})]
op355.unmet_dependencies = [MemoryDep('buf354', 0, {})]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op355.group.device = cuda:0
op355.group.iteration = (1, 1)
op355.sizes = ([], [])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op355_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf355', get_index_1, maximum, None)
        return store
op354_op355_op356_op357_op430_op433_op432.snodes[2] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', 0, {})]
op356.unmet_dependencies = [MemoryDep('buf355', 0, {})]
op356.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256}), MemoryDep('primals_162', 0, {})]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (1, 256)
op356.sizes = ([], [256])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op356_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_162', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf355', get_index_3)
        truediv = ops.truediv(mul, load_3)
        mul_1 = ops.mul(load, truediv)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf356', get_index_4, reduction)
        return store_reduction
op354_op355_op356_op357_op430_op433_op432.snodes[3] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 256})]
op357.unmet_dependencies = [MemoryDep('buf356', 0, {})]
op357.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256})]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
    buf357.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op357.group.device = cuda:0
op357.group.iteration = (256, 1)
op357.sizes = ([256], [])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf357_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
class op357_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf356', get_index_2)
        mul = ops.mul(load_2, load_2)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_1, maximum)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf356', get_index_3)
        mul_1 = ops.mul(truediv, load_3)
        truediv_1 = ops.truediv(load, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf357', get_index_4, truediv_1, None)
        return store
op354_op355_op356_op357_op430_op433_op432.snodes[4] =
op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 256})]
op430.unmet_dependencies = [MemoryDep('buf355', 0, {})]
op430.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256}), MemoryDep('primals_162', 0, {})]
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False),
    ]
]
op430.group.device = cuda:0
op430.group.iteration = (256, 1)
op430.sizes = ([256], [])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf430_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op430_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_162', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf355', get_index_2)
        truediv = ops.truediv(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf430', get_index_3, truediv, None)
        return store
op354_op355_op356_op357_op430_op433_op432.snodes[5] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 256})]
op433.unmet_dependencies = [MemoryDep('buf430', c0, {c0: 256})]
op433.met_dependencies = [StarDep(name='primals_163', mode=None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf433.mutations = ['primals_163']
    buf433.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (256, 1)
op433.sizes = ([256], [])
buf430_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_163_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf433_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op433_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf433', get_index_1, load, None)
        return store
op354_op355_op356_op357_op430_op433_op432.snodes[6] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', 0, {})]
op432.unmet_dependencies = [MemoryDep('buf356', 0, {})]
op432.met_dependencies = [StarDep(name='primals_162', mode=None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf432.mutations = ['primals_162']
    buf432.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (1, 1)
op432.sizes = ([], [])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf432_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op432_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf356', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf432', get_index_2, truediv, None)
        return store


op373_op374_op375_op376_op440_op443_op442: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op373_op374_op375_op376_op440_op443_op442.writes = 
    [   MemoryDep('buf373', 0, {}),
        MemoryDep('buf374', 0, {}),
        MemoryDep('buf375', 0, {}),
        MemoryDep('buf376', c0, {c0: 256}),
        MemoryDep('buf440', c0, {c0: 256}),
        MemoryDep('buf442', 0, {}),
        MemoryDep('buf443', c0, {c0: 256})]
op373_op374_op375_op376_op440_op443_op442.unmet_dependencies = []
op373_op374_op375_op376_op440_op443_op442.met_dependencies = 
    [   MemoryDep('primals_170', c0, {c0: 256}),
        MemoryDep('primals_171', 0, {}),
        StarDep(name='primals_171', mode=None),
        StarDep(name='primals_172', mode=None),
        WeakDep(name='buf373', mutating_buf='buf442'),
        WeakDep(name='buf375', mutating_buf='buf442'),
        WeakDep(name='buf440', mutating_buf='buf442')]
op373_op374_op375_op376_op440_op443_op442.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=True),
    ]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
    buf443: ComputedBuffer
    buf443.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf443.mutations = ['primals_172']
    buf443.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf442: ComputedBuffer
    buf442.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf442.mutations = ['primals_171']
    buf442.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op373_op374_op375_op376_op440_op443_op442.snodes[0] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', 0, {})]
op373.unmet_dependencies = []
op373.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256}), MemoryDep('primals_171', 0, {})]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=True),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (1, 256)
op373.sizes = ([], [256])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op373_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_171', get_index_1)
        mul = ops.mul(load, load_1)
        mul_1 = ops.mul(mul, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf373', get_index_2, reduction)
        return store_reduction
op373_op374_op375_op376_op440_op443_op442.snodes[1] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', 0, {})]
op374.unmet_dependencies = [MemoryDep('buf373', 0, {})]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (1, 1)
op374.sizes = ([], [])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op374_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf374', get_index_1, maximum, None)
        return store
op373_op374_op375_op376_op440_op443_op442.snodes[2] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', 0, {})]
op375.unmet_dependencies = [MemoryDep('buf374', 0, {})]
op375.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256}), MemoryDep('primals_171', 0, {})]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op375.group.device = cuda:0
op375.group.iteration = (1, 256)
op375.sizes = ([], [256])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf375_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op375_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_170', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_171', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf374', get_index_3)
        truediv = ops.truediv(mul, load_3)
        mul_1 = ops.mul(load, truediv)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf375', get_index_4, reduction)
        return store_reduction
op373_op374_op375_op376_op440_op443_op442.snodes[3] =
op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 256})]
op376.unmet_dependencies = [MemoryDep('buf375', 0, {})]
op376.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256})]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (256, 1)
op376.sizes = ([256], [])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf375_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf376_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
class op376_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf375', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf375', get_index_2)
        mul = ops.mul(load_2, load_2)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_1, maximum)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf375', get_index_3)
        mul_1 = ops.mul(truediv, load_3)
        truediv_1 = ops.truediv(load, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf376', get_index_4, truediv_1, None)
        return store
op373_op374_op375_op376_op440_op443_op442.snodes[4] =
op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 256})]
op440.unmet_dependencies = [MemoryDep('buf374', 0, {})]
op440.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256}), MemoryDep('primals_171', 0, {})]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
]
op440.group.device = cuda:0
op440.group.iteration = (256, 1)
op440.sizes = ([256], [])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf440_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op440_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_171', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf374', get_index_2)
        truediv = ops.truediv(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf440', get_index_3, truediv, None)
        return store
op373_op374_op375_op376_op440_op443_op442.snodes[5] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 256})]
op443.unmet_dependencies = [MemoryDep('buf440', c0, {c0: 256})]
op443.met_dependencies = [StarDep(name='primals_172', mode=None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf443.mutations = ['primals_172']
    buf443.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (256, 1)
op443.sizes = ([256], [])
buf440_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_172_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf443_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op443_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf443', get_index_1, load, None)
        return store
op373_op374_op375_op376_op440_op443_op442.snodes[6] =
op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', 0, {})]
op442.unmet_dependencies = 
    [   MemoryDep('buf375', 0, {}),
        WeakDep(name='buf373', mutating_buf='buf442'),
        WeakDep(name='buf375', mutating_buf='buf442'),
        WeakDep(name='buf440', mutating_buf='buf442')]
op442.met_dependencies = [StarDep(name='primals_171', mode=None)]
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf442.mutations = ['primals_171']
    buf442.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (1, 1)
op442.sizes = ([], [])
buf375_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf442_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op442_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf375', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf442', get_index_2, truediv, None)
        return store


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 6912})]
op361.unmet_dependencies = []
op361.met_dependencies = 
    [   MemoryDep('primals_165', c0 + 6912*c1, {c0: 6912, c1: 256}),
        MemoryDep('primals_166', c1, {c0: 6912, c1: 256})]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=True),
    ]
]
op361.group.device = cuda:0
op361.group.iteration = (6912, 256)
op361.sizes = ([6912], [256])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
primals_166_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf361_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op361_loop_body:
    var_ranges = {p0: 6912, p1: 256}
    index0 = p0 + 6912*p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_166', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf361', get_index_2, reduction)
        return store_reduction


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 1024})]
op380.unmet_dependencies = []
op380.met_dependencies = 
    [   MemoryDep('primals_174', 65536*c0 + c1 + 512*c2, {c0: 2, c1: 512, c2: 128}),
        MemoryDep('primals_175', 128*c0 + c2, {c0: 2, c1: 512, c2: 128})]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda:0', torch.float32, size=[512, 2], stride=[1, 512])
    buf380.users = [
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=True),
    ]
]
op380.group.device = cuda:0
op380.group.iteration = (1024, 128)
op380.sizes = ([2, 512], [128])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
primals_175_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[512, 2], stride=[1, 512])
class op380_loop_body:
    var_ranges = {p0: 2, p1: 512, p2: 128}
    index0 = 65536*p0 + p1 + 512*p2
    index1 = 128*p0 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_175', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf380', get_index_2, reduction)
        return store_reduction


op391_op392_op393_op394_op450_op453_op452: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op391_op392_op393_op394_op450_op453_op452.writes = 
    [   MemoryDep('buf391', 0, {}),
        MemoryDep('buf392', 0, {}),
        MemoryDep('buf393', 0, {}),
        MemoryDep('buf394', c0, {c0: 256}),
        MemoryDep('buf450', c0, {c0: 256}),
        MemoryDep('buf452', 0, {}),
        MemoryDep('buf453', c0, {c0: 256})]
op391_op392_op393_op394_op450_op453_op452.unmet_dependencies = []
op391_op392_op393_op394_op450_op453_op452.met_dependencies = 
    [   MemoryDep('primals_178', c0, {c0: 256}),
        MemoryDep('primals_179', 0, {}),
        StarDep(name='primals_179', mode=None),
        StarDep(name='primals_180', mode=None),
        WeakDep(name='buf391', mutating_buf='buf452'),
        WeakDep(name='buf393', mutating_buf='buf452'),
        WeakDep(name='buf450', mutating_buf='buf452')]
op391_op392_op393_op394_op450_op453_op452.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=True),
    ]
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf394.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf450.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
    ]
    buf453: ComputedBuffer
    buf453.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf453.mutations = ['primals_180']
    buf453.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf452: ComputedBuffer
    buf452.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf452.mutations = ['primals_179']
    buf452.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op391_op392_op393_op394_op450_op453_op452.snodes[0] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', 0, {})]
op391.unmet_dependencies = []
op391.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256}), MemoryDep('primals_179', 0, {})]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=True),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (1, 256)
op391.sizes = ([], [256])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf391_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op391_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_179', get_index_1)
        mul = ops.mul(load, load_1)
        mul_1 = ops.mul(mul, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf391', get_index_2, reduction)
        return store_reduction
op391_op392_op393_op394_op450_op453_op452.snodes[1] =
op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', 0, {})]
op392.unmet_dependencies = [MemoryDep('buf391', 0, {})]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (1, 1)
op392.sizes = ([], [])
buf391_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf392_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op392_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf392', get_index_1, maximum, None)
        return store
op391_op392_op393_op394_op450_op453_op452.snodes[2] =
op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', 0, {})]
op393.unmet_dependencies = [MemoryDep('buf392', 0, {})]
op393.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256}), MemoryDep('primals_179', 0, {})]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op393.group.device = cuda:0
op393.group.iteration = (1, 256)
op393.sizes = ([], [256])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf392_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op393_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_179', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf392', get_index_3)
        truediv = ops.truediv(mul, load_3)
        mul_1 = ops.mul(load, truediv)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf393', get_index_4, reduction)
        return store_reduction
op391_op392_op393_op394_op450_op453_op452.snodes[3] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 256})]
op394.unmet_dependencies = [MemoryDep('buf393', 0, {})]
op394.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256})]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf394.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op394.group.device = cuda:0
op394.group.iteration = (256, 1)
op394.sizes = ([256], [])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf394_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
class op394_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf393', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf393', get_index_2)
        mul = ops.mul(load_2, load_2)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_1, maximum)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf393', get_index_3)
        mul_1 = ops.mul(truediv, load_3)
        truediv_1 = ops.truediv(load, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf394', get_index_4, truediv_1, None)
        return store
op391_op392_op393_op394_op450_op453_op452.snodes[4] =
op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 256})]
op450.unmet_dependencies = [MemoryDep('buf392', 0, {})]
op450.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256}), MemoryDep('primals_179', 0, {})]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf450.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
    ]
]
op450.group.device = cuda:0
op450.group.iteration = (256, 1)
op450.sizes = ([256], [])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf392_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op450_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_179', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf392', get_index_2)
        truediv = ops.truediv(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf450', get_index_3, truediv, None)
        return store
op391_op392_op393_op394_op450_op453_op452.snodes[5] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 256})]
op453.unmet_dependencies = [MemoryDep('buf450', c0, {c0: 256})]
op453.met_dependencies = [StarDep(name='primals_180', mode=None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf453.mutations = ['primals_180']
    buf453.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (256, 1)
op453.sizes = ([256], [])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_180_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf453_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op453_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf450', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf453', get_index_1, load, None)
        return store
op391_op392_op393_op394_op450_op453_op452.snodes[6] =
op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', 0, {})]
op452.unmet_dependencies = 
    [   MemoryDep('buf393', 0, {}),
        WeakDep(name='buf391', mutating_buf='buf452'),
        WeakDep(name='buf393', mutating_buf='buf452'),
        WeakDep(name='buf450', mutating_buf='buf452')]
op452.met_dependencies = [StarDep(name='primals_179', mode=None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf452.mutations = ['primals_179']
    buf452.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (1, 1)
op452.sizes = ([], [])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf452_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op452_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf393', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf452', get_index_2, truediv, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 2})]
op1.unmet_dependencies = [MemoryDep('buf0', 0, {})]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2, 1)
op1.sizes = ([2], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op1_loop_body:
    var_ranges = {p0: 2}
    index0 = 0
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, rand, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 2})]
op2.unmet_dependencies = [MemoryDep('buf0', 1, {})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (2, 1)
op2.sizes = ([2], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
class op2_loop_body:
    var_ranges = {p0: 2}
    index0 = 1
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 1)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, rand, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 2})]
op6.unmet_dependencies = [MemoryDep('buf0', 2, {})]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (2, 1)
op6.sizes = ([2], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
class op6_loop_body:
    var_ranges = {p0: 2}
    index0 = 2
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 2)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, rand, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 131072})]
op8.unmet_dependencies = [MemoryDep('buf0', 3, {})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (131072, 1)
op8.sizes = ([2, 256, 256], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
class op8_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 256}
    index0 = 3
    index1 = p0
    index2 = p1
    index3 = 65536*p0 + 256*p1 + p2
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 3)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(-32, torch.int64)
        constant_1 = ops.constant(33, torch.int64)
        randint64 = ops.randint64(load_seed, index_expr, constant, constant_1)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        add = ops.add(index_expr_1, randint64)
        constant_2 = ops.constant(1, torch.int64)
        add_1 = ops.add(add, constant_2)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_3)
        constant_4 = ops.constant(257, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf8', get_index_2, minimum, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 131072})]
op9.unmet_dependencies = [MemoryDep('buf0', 4, {})]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (131072, 1)
op9.sizes = ([2, 256, 256], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf9_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 256}
    index0 = 4
    index1 = p0
    index2 = p2
    index3 = 65536*p0 + 256*p1 + p2
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 4)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(-32, torch.int64)
        constant_1 = ops.constant(33, torch.int64)
        randint64 = ops.randint64(load_seed, index_expr, constant, constant_1)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        add = ops.add(index_expr_1, randint64)
        constant_2 = ops.constant(1, torch.int64)
        add_1 = ops.add(add, constant_2)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_3)
        constant_4 = ops.constant(257, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf9', get_index_2, minimum, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 65536*tmp0 + 256*tmp1 + tmp2, {})]
op11.unmet_dependencies = 
    [   MemoryDep('buf0', 5, {}),
        MemoryDep('buf0', 6, {}),
        MemoryDep('buf7', c0, {c0: 2}),
        StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
    buf11.mutations = ['buf10']
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (32768, 1)
op11.sizes = ([2, 128, 128], [])
buf7_layout = FixedLayout('cuda:0', torch.int64, size=[2], stride=[1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
buf11_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
class op11_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 128}
    index0 = p0
    index1 = 5
    index2 = p1
    index3 = 6
    index4 = p2
    index5 = 65536*indirect0 + 256*indirect1 + indirect2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        set_indirect0 = self.set_indirect0(load)
        load_seed = ops.load_seed('buf0', 5)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(257, torch.int64)
        randint64 = ops.randint64(load_seed, index_expr, constant, constant_1)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        add = ops.add(index_expr_1, randint64)
        constant_2 = ops.constant(64, torch.int64)
        sub = ops.sub(add, constant_2)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(sub, constant_3)
        constant_4 = ops.constant(255, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect1 = self.set_indirect1(minimum)
        load_seed_1 = ops.load_seed('buf0', 6)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int32)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(257, torch.int64)
        randint64_1 = ops.randint64(load_seed_1, index_expr_2, constant_5, constant_6)
        get_index_4 = self.get_index('index4')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        add_1 = ops.add(index_expr_3, randint64_1)
        constant_7 = ops.constant(64, torch.int64)
        sub_1 = ops.sub(add_1, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(sub_1, constant_8)
        constant_9 = ops.constant(255, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        set_indirect2 = self.set_indirect2(minimum_1)
        constant_10 = ops.constant(0.0, torch.float32)
        get_index_5 = self.get_index('index5')
        store = ops.store('buf11', get_index_5, constant_10, None)
        return store


op343_op344_op426: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op343_op344_op426.writes = 
    [   MemoryDep('buf343', 0, {}),
        MemoryDep('buf344', c0, {c0: 6912}),
        MemoryDep('buf426', c0, {c0: 6912})]
op343_op344_op426.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 6912})]
op343_op344_op426.met_dependencies = [StarDep(name='primals_158', mode=None)]
op343_op344_op426.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf426: ComputedBuffer
    buf426.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
    buf426.mutations = ['primals_158']
    buf426.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op343_op344_op426.snodes[0] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', 0, {})]
op343.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 6912})]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (1, 6912)
op343.sizes = ([], [6912])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op343_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf343', get_index_1, reduction)
        return store_reduction
op343_op344_op426.snodes[1] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 6912})]
op344.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 6912}), MemoryDep('buf343', 0, {})]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op344.group.device = cuda:0
op344.group.iteration = (6912, 1)
op344.sizes = ([6912], [])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op344_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf343', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf344', get_index_2, truediv, None)
        return store
op343_op344_op426.snodes[2] =
op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 6912})]
op426.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 6912})]
op426.met_dependencies = [StarDep(name='primals_158', mode=None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
    buf426.mutations = ['primals_158']
    buf426.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (6912, 1)
op426.sizes = ([6912], [])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
primals_158_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf426_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
class op426_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf426', get_index_1, load, None)
        return store


op362_op363_op436: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op362_op363_op436.writes = 
    [   MemoryDep('buf362', 0, {}),
        MemoryDep('buf363', c0, {c0: 6912}),
        MemoryDep('buf436', c0, {c0: 6912})]
op362_op363_op436.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 6912})]
op362_op363_op436.met_dependencies = [StarDep(name='primals_167', mode=None)]
op362_op363_op436.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf436: ComputedBuffer
    buf436.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
    buf436.mutations = ['primals_167']
    buf436.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op362_op363_op436.snodes[0] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', 0, {})]
op362.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 6912})]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (1, 6912)
op362.sizes = ([], [6912])
buf361_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op362_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf362', get_index_1, reduction)
        return store_reduction
op362_op363_op436.snodes[1] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 6912})]
op363.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 6912}), MemoryDep('buf362', 0, {})]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (6912, 1)
op363.sizes = ([6912], [])
buf361_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op363_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf362', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf363', get_index_2, truediv, None)
        return store
op362_op363_op436.snodes[2] =
op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 6912})]
op436.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 6912})]
op436.met_dependencies = [StarDep(name='primals_167', mode=None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
    buf436.mutations = ['primals_167']
    buf436.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (6912, 1)
op436.sizes = ([6912], [])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
primals_167_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf436_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
class op436_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf436', get_index_1, load, None)
        return store


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 512})]
op381.unmet_dependencies = [MemoryDep('buf380', c0 + 512*c1, {c0: 512, c1: 2})]
op381.met_dependencies = []
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False),
    ]
]
op381.group.device = cuda:0
op381.group.iteration = (512, 2)
op381.sizes = ([512], [2])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[512, 2], stride=[1, 512])
buf381_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
class op381_loop_body:
    var_ranges = {p0: 512, p1: 2}
    index0 = p0 + 512*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf381', get_index_1, reduction)
        return store_reduction


op3_op4: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op3_op4.writes = [MemoryDep('buf3', c0, {c0: 393216}), MemoryDep('buf4', c0, {c0: 48})]
op3_op4.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 2}), MemoryDep('buf2', c0, {c0: 2})]
op3_op4.met_dependencies = 
    [   MemoryDep('primals_1', 196608*c0 + c2 + 131072, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', 196608*c0 + c2 + 65536, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', 196608*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', c0, {c0: 393216})]
op3_op4.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3_op4.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 393216})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 2}), MemoryDep('buf2', c0, {c0: 2})]
op3.met_dependencies = 
    [   MemoryDep('primals_1', 196608*c0 + c2 + 131072, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', 196608*c0 + c2 + 65536, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', 196608*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', c0, {c0: 393216})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (393216, 1)
op3.sizes = ([2, 3, 65536], [])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
class op3_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 65536}
    index0 = 196608*p0 + 65536*p1 + p2
    index1 = p0
    index2 = 196608*p0 + p2
    index3 = 196608*p0 + p2 + 65536
    index4 = 196608*p0 + p2 + 131072
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        sub = ops.sub(load_1, constant)
        add = ops.add(load, sub)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_1 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(load_3, constant_1)
        add_1 = ops.add(load_2, sub_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_1', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_2 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(load_5, constant_2)
        add_2 = ops.add(load_4, sub_2)
        add_3 = ops.add(add_1, add_2)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('primals_1', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_3 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(load_7, constant_3)
        add_4 = ops.add(load_6, sub_3)
        add_5 = ops.add(add_3, add_4)
        constant_4 = ops.constant(3.0, torch.float32)
        truediv = ops.truediv(add_5, constant_4)
        sub_4 = ops.sub(add, truediv)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf2', get_index_8)
        constant_5 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_8, constant_5)
        mul_1 = ops.mul(sub_4, mul)
        get_index_9 = self.get_index('index2')
        load_9 = ops.load('primals_1', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf1', get_index_10)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(load_10, constant_6)
        add_6 = ops.add(load_9, sub_5)
        get_index_11 = self.get_index('index3')
        load_11 = ops.load('primals_1', get_index_11)
        get_index_12 = self.get_index('index1')
        load_12 = ops.load('buf1', get_index_12)
        constant_7 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(load_12, constant_7)
        add_7 = ops.add(load_11, sub_6)
        add_8 = ops.add(add_6, add_7)
        get_index_13 = self.get_index('index4')
        load_13 = ops.load('primals_1', get_index_13)
        get_index_14 = self.get_index('index1')
        load_14 = ops.load('buf1', get_index_14)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(load_14, constant_8)
        add_9 = ops.add(load_13, sub_7)
        add_10 = ops.add(add_8, add_9)
        constant_9 = ops.constant(3.0, torch.float32)
        truediv_1 = ops.truediv(add_10, constant_9)
        add_11 = ops.add(mul_1, truediv_1)
        get_index_15 = self.get_index('index0')
        store = ops.store('buf3', get_index_15, add_11, None)
        return store
op3_op4.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 48})]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 393216})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (48, 8192)
op4.sizes = ([48], [8192])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
class op4_loop_body:
    var_ranges = {p0: 48, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, reduction)
        return store_reduction


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 256})]
op345.unmet_dependencies = [MemoryDep('buf344', c1, {c0: 256, c1: 6912})]
op345.met_dependencies = [MemoryDep('primals_156', c0, {c0: 1769472})]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (256, 6912)
op345.sizes = ([256], [6912])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op345_loop_body:
    var_ranges = {p0: 256, p1: 6912}
    index0 = 6912*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf344', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf345', get_index_2, reduction)
        return store_reduction


op346_op347_op425_op348: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op346_op347_op425_op348.writes = 
    [   MemoryDep('buf346', 0, {}),
        MemoryDep('buf347', c0, {c0: 256}),
        MemoryDep('buf348', 0, {}),
        MemoryDep('buf425', c0, {c0: 256})]
op346_op347_op425_op348.unmet_dependencies = 
    [   MemoryDep('buf345', c0, {c0: 256}),
        WeakDep(name='buf342', mutating_buf='buf425')]
op346_op347_op425_op348.met_dependencies = [StarDep(name='primals_157', mode=None)]
op346_op347_op425_op348.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf425: ComputedBuffer
    buf425.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf425.mutations = ['primals_157']
    buf425.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op346_op347_op425_op348.snodes[0] =
op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', 0, {})]
op346.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 256})]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (1, 256)
op346.sizes = ([], [256])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op346_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf346', get_index_1, reduction)
        return store_reduction
op346_op347_op425_op348.snodes[1] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 256})]
op347.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 256}), MemoryDep('buf346', 0, {})]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op347.group.device = cuda:0
op347.group.iteration = (256, 1)
op347.sizes = ([256], [])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op347_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf346', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf347', get_index_2, truediv, None)
        return store
op346_op347_op425_op348.snodes[2] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 256})]
op425.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 256}),
        WeakDep(name='buf342', mutating_buf='buf425')]
op425.met_dependencies = [StarDep(name='primals_157', mode=None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf425.mutations = ['primals_157']
    buf425.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (256, 1)
op425.sizes = ([256], [])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_157_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf425_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op425_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf425', get_index_1, load, None)
        return store
op346_op347_op425_op348.snodes[3] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', 0, {})]
op348.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 256}), MemoryDep('buf347', c0, {c0: 256})]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op348.group.device = cuda:0
op348.group.iteration = (1, 256)
op348.sizes = ([], [256])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op348_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf345', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf348', get_index_2, reduction)
        return store_reduction


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 256})]
op364.unmet_dependencies = [MemoryDep('buf363', c1, {c0: 256, c1: 6912})]
op364.met_dependencies = [MemoryDep('primals_165', c0, {c0: 1769472})]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (256, 6912)
op364.sizes = ([256], [6912])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op364_loop_body:
    var_ranges = {p0: 256, p1: 6912}
    index0 = 6912*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf363', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf364', get_index_2, reduction)
        return store_reduction


op365_op366_op435_op367: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op365_op366_op435_op367.writes = 
    [   MemoryDep('buf365', 0, {}),
        MemoryDep('buf366', c0, {c0: 256}),
        MemoryDep('buf367', 0, {}),
        MemoryDep('buf435', c0, {c0: 256})]
op365_op366_op435_op367.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 256}),
        WeakDep(name='buf361', mutating_buf='buf435')]
op365_op366_op435_op367.met_dependencies = [StarDep(name='primals_166', mode=None)]
op365_op366_op435_op367.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf435: ComputedBuffer
    buf435.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf435.mutations = ['primals_166']
    buf435.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op365_op366_op435_op367.snodes[0] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', 0, {})]
op365.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 256})]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (1, 256)
op365.sizes = ([], [256])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op365_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf365', get_index_1, reduction)
        return store_reduction
op365_op366_op435_op367.snodes[1] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 256})]
op366.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 256}), MemoryDep('buf365', 0, {})]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op366.group.device = cuda:0
op366.group.iteration = (256, 1)
op366.sizes = ([256], [])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf366_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op366_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf365', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, truediv, None)
        return store
op365_op366_op435_op367.snodes[2] =
op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 256})]
op435.unmet_dependencies = 
    [   MemoryDep('buf366', c0, {c0: 256}),
        WeakDep(name='buf361', mutating_buf='buf435')]
op435.met_dependencies = [StarDep(name='primals_166', mode=None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf435.mutations = ['primals_166']
    buf435.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (256, 1)
op435.sizes = ([256], [])
buf366_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_166_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf435_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op435_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf435', get_index_1, load, None)
        return store
op365_op366_op435_op367.snodes[3] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', 0, {})]
op367.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 256}), MemoryDep('buf366', c0, {c0: 256})]
op367.met_dependencies = []
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op367.group.device = cuda:0
op367.group.iteration = (1, 256)
op367.sizes = ([], [256])
buf366_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op367_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf364', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf367', get_index_2, reduction)
        return store_reduction


op382_op383_op446: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op382_op383_op446.writes = 
    [   MemoryDep('buf382', 0, {}),
        MemoryDep('buf383', c0, {c0: 512}),
        MemoryDep('buf446', c0, {c0: 512})]
op382_op383_op446.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 512})]
op382_op383_op446.met_dependencies = [StarDep(name='primals_176', mode=None)]
op382_op383_op446.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf446: ComputedBuffer
    buf446.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[512], stride=[1])
    buf446.mutations = ['primals_176']
    buf446.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op382_op383_op446.snodes[0] =
op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', 0, {})]
op382.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 512})]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (1, 512)
op382.sizes = ([], [512])
buf381_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf382_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op382_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf382', get_index_1, reduction)
        return store_reduction
op382_op383_op446.snodes[1] =
op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 512})]
op383.unmet_dependencies = [MemoryDep('buf381', c0, {c0: 512}), MemoryDep('buf382', 0, {})]
op383.met_dependencies = []
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op383.group.device = cuda:0
op383.group.iteration = (512, 1)
op383.sizes = ([512], [])
buf381_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf382_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
class op383_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf382', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf383', get_index_2, truediv, None)
        return store
op382_op383_op446.snodes[2] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 512})]
op446.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 512})]
op446.met_dependencies = [StarDep(name='primals_176', mode=None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[512], stride=[1])
    buf446.mutations = ['primals_176']
    buf446.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (512, 1)
op446.sizes = ([512], [])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_176_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf446_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[512], stride=[1])
class op446_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf446', get_index_1, load, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 2})]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 48})]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf5.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (2, 24)
op5.sizes = ([2], [24])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op5_loop_body:
    var_ranges = {p0: 2, p1: 24}
    index0 = 24*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_1, reduction)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 393216})]
op12.unmet_dependencies = 
    [   MemoryDep('buf11', 65536*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('buf3', 65536*c1 + 196608*tmp0 + 256*tmp1 + tmp2 - 257, {c0: 2, c1: 3}),
        MemoryDep('buf5', tmp0, {}),
        MemoryDep('buf6', tmp0, {}),
        MemoryDep('buf7', c0, {c0: 2}),
        MemoryDep('buf8', 65536*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('buf9', 65536*c0 + c2, {c0: 2, c1: 3, c2: 65536})]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (393216, 1)
op12.sizes = ([2, 3, 65536], [])
buf7_layout = FixedLayout('cuda:0', torch.int64, size=[2], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
buf9_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 256], stride=[65536, 256, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 1, 1, 1])
buf11_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 65536}
    index0 = p0
    index1 = 65536*p0 + p2
    index2 = indirect1 - 1
    index3 = indirect2 - 1
    index4 = 196608*indirect0 + 256*indirect1 + indirect2 + 65536*p1 - 257
    index5 = indirect0
    index6 = 196608*p0 + 65536*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf9', get_index_2)
        set_indirect2 = self.set_indirect2(load_2)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_4 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_5 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_5, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_6 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('buf10', get_index_7)
        mul = ops.mul(masked_subblock4, load_3)
        constant_4 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(mul, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        add = ops.add(mul_1, constant_5)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf12', get_index_8, add, None)
        return store
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('buf5', get_index_1)
        constant = ops.constant(196608.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        sub = ops.sub(load, truediv)
        get_index_2 = self.get_index('index5')
        load_2 = ops.load('buf6', get_index_2)
        constant_1 = ops.constant(0.5, torch.float32)
        add = ops.add(load_2, constant_1)
        mul = ops.mul(sub, add)
        get_index_3 = self.get_index('index5')
        load_3 = ops.load('buf5', get_index_3)
        constant_2 = ops.constant(196608.0, torch.float32)
        truediv_1 = ops.truediv(load_3, constant_2)
        add_1 = ops.add(mul, truediv_1)
        return add_1


op13_op16: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op13_op16.writes = [MemoryDep('buf13', c0, {c0: 301056}), MemoryDep('buf16', c0, {c0: 301056})]
op13_op16.unmet_dependencies = 
    [   MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 1, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 2, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 256, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 257, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 258, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 512, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 513, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 514, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)), {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf14', c1, {c0: 2, c1: 3}),
        MemoryDep('buf15', c1, {c0: 2, c1: 3})]
op13_op16.met_dependencies = []
op13_op16.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf16.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13_op16.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 301056})]
op13.unmet_dependencies = 
    [   MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 1, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 2, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 256, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 257, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 258, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 512, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 513, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)) + 514, {c0: 6, c1: 224, c2: 224}),
        MemoryDep('buf12', 65536*c0 + 256*(((8*c1)//7)) + (((8*c2)//7)), {c0: 6, c1: 224, c2: 224})]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (301056, 1)
op13.sizes = ([6, 224, 224], [])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op13_loop_body:
    var_ranges = {p0: 6, p1: 224, p2: 224}
    index0 = ((8*p1)//7)
    index1 = ((256*p1 + 479)//224)
    index2 = ((8*p2)//7)
    index3 = ((256*p2 + 479)//224)
    index4 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7))
    index5 = (((8*p2)//7)) + 1
    index6 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 1
    index7 = (((8*p2)//7)) + 2
    index8 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 2
    index9 = (((8*p1)//7)) + 1
    index10 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 256
    index11 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 257
    index12 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 258
    index13 = (((8*p1)//7)) + 2
    index14 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 512
    index15 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 513
    index16 = 65536*p0 + 256*(((8*p1)//7)) + (((8*p2)//7)) + 514
    index17 = 50176*p0 + 224*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        get_index_2 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        lt_1 = ops.lt(index_expr_2, index_expr_3)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        get_index_5 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        lt_2 = ops.lt(index_expr_4, index_expr_5)
        get_index_6 = self.get_index('index5')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        lt_3 = ops.lt(index_expr_6, index_expr_7)
        and__1 = ops.and_(lt_2, lt_3)
        masked_subblock2 = self.masked_subblock2(and__1, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        get_index_9 = self.get_index('index1')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        lt_4 = ops.lt(index_expr_8, index_expr_9)
        get_index_10 = self.get_index('index7')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        get_index_11 = self.get_index('index3')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        lt_5 = ops.lt(index_expr_10, index_expr_11)
        and__2 = ops.and_(lt_4, lt_5)
        masked_subblock3 = self.masked_subblock3(and__2, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index9')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        get_index_13 = self.get_index('index1')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        lt_6 = ops.lt(index_expr_12, index_expr_13)
        get_index_14 = self.get_index('index2')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        get_index_15 = self.get_index('index3')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        lt_7 = ops.lt(index_expr_14, index_expr_15)
        and__3 = ops.and_(lt_6, lt_7)
        masked_subblock4 = self.masked_subblock4(and__3, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index9')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        get_index_17 = self.get_index('index1')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        lt_8 = ops.lt(index_expr_16, index_expr_17)
        get_index_18 = self.get_index('index5')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        lt_9 = ops.lt(index_expr_18, index_expr_19)
        and__4 = ops.and_(lt_8, lt_9)
        masked_subblock5 = self.masked_subblock5(and__4, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index9')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        get_index_21 = self.get_index('index1')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        lt_10 = ops.lt(index_expr_20, index_expr_21)
        get_index_22 = self.get_index('index7')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        get_index_23 = self.get_index('index3')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        lt_11 = ops.lt(index_expr_22, index_expr_23)
        and__5 = ops.and_(lt_10, lt_11)
        masked_subblock6 = self.masked_subblock6(and__5, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index13')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        get_index_25 = self.get_index('index1')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        lt_12 = ops.lt(index_expr_24, index_expr_25)
        get_index_26 = self.get_index('index2')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        get_index_27 = self.get_index('index3')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        lt_13 = ops.lt(index_expr_26, index_expr_27)
        and__6 = ops.and_(lt_12, lt_13)
        masked_subblock7 = self.masked_subblock7(and__6, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index13')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        get_index_29 = self.get_index('index1')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        lt_14 = ops.lt(index_expr_28, index_expr_29)
        get_index_30 = self.get_index('index5')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        lt_15 = ops.lt(index_expr_30, index_expr_31)
        and__7 = ops.and_(lt_14, lt_15)
        masked_subblock8 = self.masked_subblock8(and__7, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index13')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        get_index_33 = self.get_index('index1')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        lt_16 = ops.lt(index_expr_32, index_expr_33)
        get_index_34 = self.get_index('index7')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        get_index_35 = self.get_index('index3')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        lt_17 = ops.lt(index_expr_34, index_expr_35)
        and__8 = ops.and_(lt_16, lt_17)
        masked_subblock9 = self.masked_subblock9(and__8, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index0')
        index_expr_36 = ops.index_expr(get_index_36, torch.int64)
        get_index_37 = self.get_index('index1')
        index_expr_37 = ops.index_expr(get_index_37, torch.int64)
        lt_18 = ops.lt(index_expr_36, index_expr_37)
        get_index_38 = self.get_index('index2')
        index_expr_38 = ops.index_expr(get_index_38, torch.int64)
        get_index_39 = self.get_index('index3')
        index_expr_39 = ops.index_expr(get_index_39, torch.int64)
        lt_19 = ops.lt(index_expr_38, index_expr_39)
        and__9 = ops.and_(lt_18, lt_19)
        masked_subblock10 = self.masked_subblock10(and__9, 0.0)
        get_index_40 = self.get_index('index0')
        index_expr_40 = ops.index_expr(get_index_40, torch.int64)
        get_index_41 = self.get_index('index1')
        index_expr_41 = ops.index_expr(get_index_41, torch.int64)
        lt_20 = ops.lt(index_expr_40, index_expr_41)
        get_index_42 = self.get_index('index5')
        index_expr_42 = ops.index_expr(get_index_42, torch.int64)
        get_index_43 = self.get_index('index3')
        index_expr_43 = ops.index_expr(get_index_43, torch.int64)
        lt_21 = ops.lt(index_expr_42, index_expr_43)
        and__10 = ops.and_(lt_20, lt_21)
        masked_subblock11 = self.masked_subblock11(and__10, 0.0)
        add_8 = ops.add(masked_subblock11, masked_subblock10)
        get_index_44 = self.get_index('index0')
        index_expr_44 = ops.index_expr(get_index_44, torch.int64)
        get_index_45 = self.get_index('index1')
        index_expr_45 = ops.index_expr(get_index_45, torch.int64)
        lt_22 = ops.lt(index_expr_44, index_expr_45)
        get_index_46 = self.get_index('index7')
        index_expr_46 = ops.index_expr(get_index_46, torch.int64)
        get_index_47 = self.get_index('index3')
        index_expr_47 = ops.index_expr(get_index_47, torch.int64)
        lt_23 = ops.lt(index_expr_46, index_expr_47)
        and__11 = ops.and_(lt_22, lt_23)
        masked_subblock12 = self.masked_subblock12(and__11, 0.0)
        add_9 = ops.add(masked_subblock12, add_8)
        get_index_48 = self.get_index('index9')
        index_expr_48 = ops.index_expr(get_index_48, torch.int64)
        get_index_49 = self.get_index('index1')
        index_expr_49 = ops.index_expr(get_index_49, torch.int64)
        lt_24 = ops.lt(index_expr_48, index_expr_49)
        get_index_50 = self.get_index('index2')
        index_expr_50 = ops.index_expr(get_index_50, torch.int64)
        get_index_51 = self.get_index('index3')
        index_expr_51 = ops.index_expr(get_index_51, torch.int64)
        lt_25 = ops.lt(index_expr_50, index_expr_51)
        and__12 = ops.and_(lt_24, lt_25)
        masked_subblock13 = self.masked_subblock13(and__12, 0.0)
        add_10 = ops.add(masked_subblock13, add_9)
        get_index_52 = self.get_index('index9')
        index_expr_52 = ops.index_expr(get_index_52, torch.int64)
        get_index_53 = self.get_index('index1')
        index_expr_53 = ops.index_expr(get_index_53, torch.int64)
        lt_26 = ops.lt(index_expr_52, index_expr_53)
        get_index_54 = self.get_index('index5')
        index_expr_54 = ops.index_expr(get_index_54, torch.int64)
        get_index_55 = self.get_index('index3')
        index_expr_55 = ops.index_expr(get_index_55, torch.int64)
        lt_27 = ops.lt(index_expr_54, index_expr_55)
        and__13 = ops.and_(lt_26, lt_27)
        masked_subblock14 = self.masked_subblock14(and__13, 0.0)
        add_11 = ops.add(masked_subblock14, add_10)
        get_index_56 = self.get_index('index9')
        index_expr_56 = ops.index_expr(get_index_56, torch.int64)
        get_index_57 = self.get_index('index1')
        index_expr_57 = ops.index_expr(get_index_57, torch.int64)
        lt_28 = ops.lt(index_expr_56, index_expr_57)
        get_index_58 = self.get_index('index7')
        index_expr_58 = ops.index_expr(get_index_58, torch.int64)
        get_index_59 = self.get_index('index3')
        index_expr_59 = ops.index_expr(get_index_59, torch.int64)
        lt_29 = ops.lt(index_expr_58, index_expr_59)
        and__14 = ops.and_(lt_28, lt_29)
        masked_subblock15 = self.masked_subblock15(and__14, 0.0)
        add_12 = ops.add(masked_subblock15, add_11)
        get_index_60 = self.get_index('index13')
        index_expr_60 = ops.index_expr(get_index_60, torch.int64)
        get_index_61 = self.get_index('index1')
        index_expr_61 = ops.index_expr(get_index_61, torch.int64)
        lt_30 = ops.lt(index_expr_60, index_expr_61)
        get_index_62 = self.get_index('index2')
        index_expr_62 = ops.index_expr(get_index_62, torch.int64)
        get_index_63 = self.get_index('index3')
        index_expr_63 = ops.index_expr(get_index_63, torch.int64)
        lt_31 = ops.lt(index_expr_62, index_expr_63)
        and__15 = ops.and_(lt_30, lt_31)
        masked_subblock16 = self.masked_subblock16(and__15, 0.0)
        add_13 = ops.add(masked_subblock16, add_12)
        get_index_64 = self.get_index('index13')
        index_expr_64 = ops.index_expr(get_index_64, torch.int64)
        get_index_65 = self.get_index('index1')
        index_expr_65 = ops.index_expr(get_index_65, torch.int64)
        lt_32 = ops.lt(index_expr_64, index_expr_65)
        get_index_66 = self.get_index('index5')
        index_expr_66 = ops.index_expr(get_index_66, torch.int64)
        get_index_67 = self.get_index('index3')
        index_expr_67 = ops.index_expr(get_index_67, torch.int64)
        lt_33 = ops.lt(index_expr_66, index_expr_67)
        and__16 = ops.and_(lt_32, lt_33)
        masked_subblock17 = self.masked_subblock17(and__16, 0.0)
        add_14 = ops.add(masked_subblock17, add_13)
        get_index_68 = self.get_index('index13')
        index_expr_68 = ops.index_expr(get_index_68, torch.int64)
        get_index_69 = self.get_index('index1')
        index_expr_69 = ops.index_expr(get_index_69, torch.int64)
        lt_34 = ops.lt(index_expr_68, index_expr_69)
        get_index_70 = self.get_index('index7')
        index_expr_70 = ops.index_expr(get_index_70, torch.int64)
        get_index_71 = self.get_index('index3')
        index_expr_71 = ops.index_expr(get_index_71, torch.int64)
        lt_35 = ops.lt(index_expr_70, index_expr_71)
        and__17 = ops.and_(lt_34, lt_35)
        masked_subblock18 = self.masked_subblock18(and__17, 0.0)
        add_15 = ops.add(masked_subblock18, add_14)
        truediv = ops.truediv(add_7, add_15)
        get_index_72 = self.get_index('index17')
        store = ops.store('buf13', get_index_72, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index11')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index15')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index16')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock10(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock11(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock12(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock13(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock14(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock15(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock16(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock17(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock18(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op13_op16.snodes[1] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 301056})]
op16.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 301056}),
        MemoryDep('buf14', c1, {c0: 2, c1: 3}),
        MemoryDep('buf15', c1, {c0: 2, c1: 3})]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf16.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (301056, 1)
op16.sizes = ([2, 3, 50176], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op16_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 50176}
    index0 = 150528*p0 + 50176*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf14', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf15', get_index_2)
        truediv = ops.truediv(sub, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf16', get_index_3, truediv, None)
        return store


op349_op350: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op349_op350.writes = 
    [   MemoryDep('buf349', c0, {c0: 1769472}),
        MemoryDep('buf350', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9})]
op349_op350.unmet_dependencies = [MemoryDep('buf348', 0, {})]
op349_op350.met_dependencies = [MemoryDep('primals_156', c0, {c0: 1769472})]
op349_op350.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op349_op350.snodes[0] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 1769472})]
op349.unmet_dependencies = [MemoryDep('buf348', 0, {})]
op349.met_dependencies = [MemoryDep('primals_156', c0, {c0: 1769472})]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (1769472, 1)
op349.sizes = ([1769472], [])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op349_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf348', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf349', get_index_2, truediv, None)
        return store
op349_op350.snodes[1] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9})]
op350.unmet_dependencies = [MemoryDep('buf349', c0, {c0: 1769472})]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (1769472, 1)
op350.sizes = ([256, 768, 9], [])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf350_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
class op350_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf350', get_index_1, load, None)
        return store


op368_op369: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op368_op369.writes = 
    [   MemoryDep('buf368', c0, {c0: 1769472}),
        MemoryDep('buf369', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9})]
op368_op369.unmet_dependencies = [MemoryDep('buf367', 0, {})]
op368_op369.met_dependencies = [MemoryDep('primals_165', c0, {c0: 1769472})]
op368_op369.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op368_op369.snodes[0] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 1769472})]
op368.unmet_dependencies = [MemoryDep('buf367', 0, {})]
op368.met_dependencies = [MemoryDep('primals_165', c0, {c0: 1769472})]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (1769472, 1)
op368.sizes = ([1769472], [])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op368_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf367', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf368', get_index_2, truediv, None)
        return store
op368_op369.snodes[1] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9})]
op369.unmet_dependencies = [MemoryDep('buf368', c0, {c0: 1769472})]
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (1769472, 1)
op369.sizes = ([256, 768, 9], [])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
class op369_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf369', get_index_1, load, None)
        return store


op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 256})]
op384.unmet_dependencies = [MemoryDep('buf383', c1, {c0: 256, c1: 512})]
op384.met_dependencies = [MemoryDep('primals_174', c0, {c0: 131072})]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (256, 512)
op384.sizes = ([256], [512])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf384_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op384_loop_body:
    var_ranges = {p0: 256, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf383', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf384', get_index_2, reduction)
        return store_reduction


op385_op386_op445_op387: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op385_op386_op445_op387.writes = 
    [   MemoryDep('buf385', 0, {}),
        MemoryDep('buf386', c0, {c0: 256}),
        MemoryDep('buf387', 0, {}),
        MemoryDep('buf445', c0, {c0: 256})]
op385_op386_op445_op387.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 256}),
        WeakDep(name='buf380', mutating_buf='buf445')]
op385_op386_op445_op387.met_dependencies = [StarDep(name='primals_175', mode=None)]
op385_op386_op445_op387.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf445: ComputedBuffer
    buf445.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf445.mutations = ['primals_175']
    buf445.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op385_op386_op445_op387.snodes[0] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', 0, {})]
op385.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 256})]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (1, 256)
op385.sizes = ([], [256])
buf384_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf385_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op385_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf385', get_index_1, reduction)
        return store_reduction
op385_op386_op445_op387.snodes[1] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 256})]
op386.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 256}), MemoryDep('buf385', 0, {})]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op386.group.device = cuda:0
op386.group.iteration = (256, 1)
op386.sizes = ([256], [])
buf384_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf385_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf386_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op386_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf385', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf386', get_index_2, truediv, None)
        return store
op385_op386_op445_op387.snodes[2] =
op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 256})]
op445.unmet_dependencies = 
    [   MemoryDep('buf386', c0, {c0: 256}),
        WeakDep(name='buf380', mutating_buf='buf445')]
op445.met_dependencies = [StarDep(name='primals_175', mode=None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf445.mutations = ['primals_175']
    buf445.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (256, 1)
op445.sizes = ([256], [])
buf386_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_175_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf445_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op445_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf445', get_index_1, load, None)
        return store
op385_op386_op445_op387.snodes[3] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', 0, {})]
op387.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 256}), MemoryDep('buf386', c0, {c0: 256})]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (1, 256)
op387.sizes = ([], [256])
buf386_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf384_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf387_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op387_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf387', get_index_2, reduction)
        return store_reduction


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='primals_4', mode=None)]
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 131072})]
op388.unmet_dependencies = [MemoryDep('buf387', 0, {})]
op388.met_dependencies = [MemoryDep('primals_174', c0, {c0: 131072})]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
    buf388.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op388.group.device = cuda:0
op388.group.iteration = (131072, 1)
op388.sizes = ([131072], [])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf387_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf388_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
class op388_loop_body:
    var_ranges = {p0: 131072}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf387', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf388', get_index_2, truediv, None)
        return store


op18_op19_op20_op22_op23_op25: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op18_op19_op20_op22_op23_op25.writes = 
    [   MemoryDep('buf18', c0, {c0: 76800}),
        MemoryDep('buf19', c0, {c0: 100}),
        MemoryDep('buf20', c0, {c0: 100}),
        MemoryDep('buf22', c0, {c0: 100}),
        MemoryDep('buf23', c0, {c0: 76800}),
        MemoryDep('buf25', c0, {c0: 100})]
op18_op19_op20_op22_op23_op25.unmet_dependencies = [MemoryDep('buf17', 37632*c0 + 49*c2 + (I), {c0: 2, c1: 50, c2: 768})]
op18_op19_op20_op22_op23_op25.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400}),
        MemoryDep('primals_7', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_8', c1, {c0: 100, c1: 768})]
op18_op19_op20_op22_op23_op25.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op18_op19_op20_op22_op23_op25.snodes[0] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 76800})]
op18.unmet_dependencies = [MemoryDep('buf17', 37632*c0 + 49*c2 + (I), {c0: 2, c1: 50, c2: 768})]
op18.met_dependencies = [MemoryDep('primals_5', c1, {c0: 100, c1: 768})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (76800, 1)
op18.sizes = ([2, 50, 768], [])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
class op18_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = p1
    index1 = p2
    index2 = 37632*p0 + 49*p2 + (I)
    index3 = 38400*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf18', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_5', get_index)
        constant = ops.constant(0.0, torch.float32)
        add = ops.add(load, constant)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf17', get_index)
        return load
op18_op19_op20_op22_op23_op25.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 100})]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 76800})]
op19.met_dependencies = [MemoryDep('primals_6', c1, {c0: 2, c1: 38400})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (100, 768)
op19.sizes = ([2, 50], [768])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
class op19_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = 38400*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 50*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_2, getitem)
        return store_reduction
op18_op19_op20_op22_op23_op25.snodes[2] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 100})]
op20.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 76800})]
op20.met_dependencies = [MemoryDep('primals_6', c1, {c0: 2, c1: 38400})]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (100, 768)
op20.sizes = ([2, 50], [768])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
class op20_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = 38400*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 50*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf20', get_index_2, getitem_1)
        return store_reduction
op18_op19_op20_op22_op23_op25.snodes[3] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 100})]
op22.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 100})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (100, 1)
op22.sizes = ([100], [])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
class op22_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, rsqrt, None)
        return store
op18_op19_op20_op22_op23_op25.snodes[4] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 76800})]
op23.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 76800}),
        MemoryDep('buf19', c0, {c0: 100}),
        MemoryDep('buf22', c0, {c0: 100})]
op23.met_dependencies = 
    [   MemoryDep('primals_6', c1, {c0: 2, c1: 38400}),
        MemoryDep('primals_7', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_8', c1, {c0: 100, c1: 768})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (76800, 1)
op23.sizes = ([2, 50, 768], [])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
class op23_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = 38400*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 50*p0 + p1
    index3 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf19', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf22', get_index_3)
        mul = ops.mul(sub, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_7', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_8', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf23', get_index_6, add_1, None)
        return store
op18_op19_op20_op22_op23_op25.snodes[5] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 100})]
op25.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 76800})]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (100, 768)
op25.sizes = ([100], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
class op25_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, getitem_1)
        return store_reduction


op27_op24_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op27_op24_op28.writes = 
    [   MemoryDep('buf24', c0, {c0: 100}),
        MemoryDep('buf27', c0, {c0: 100}),
        MemoryDep('buf28', c0, {c0: 76800})]
op27_op24_op28.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf25', c0 + 50*c1, {c0: 50, c1: 2})]
op27_op24_op28.met_dependencies = 
    [   MemoryDep('primals_10', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_9', c1, {c0: 100, c1: 768})]
op27_op24_op28.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27_op24_op28.snodes[0] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 100})]
op27.unmet_dependencies = [MemoryDep('buf25', c0 + 50*c1, {c0: 50, c1: 2})]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (100, 1)
op27.sizes = ([50, 2], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op27_loop_body:
    var_ranges = {p0: 50, p1: 2}
    index0 = p0 + 50*p1
    index1 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf27', get_index_1, rsqrt, None)
        return store
op27_op24_op28.snodes[1] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 100})]
op24.unmet_dependencies = [MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (100, 768)
op24.sizes = ([50, 2], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op24_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem)
        return store_reduction
op27_op24_op28.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 76800})]
op28.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf24', c0, {c0: 100}),
        MemoryDep('buf27', c0, {c0: 100})]
op28.met_dependencies = 
    [   MemoryDep('primals_10', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_9', c1, {c0: 100, c1: 768})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (76800, 1)
op28.sizes = ([50, 2, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op28_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 2*p0 + p1
    index2 = p2
    index3 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf27', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_9', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_10', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf28', get_index_5, add, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='primals_12', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 230400})]
op30.unmet_dependencies = [MemoryDep('buf29', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op30.met_dependencies = [MemoryDep('primals_11', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (230400, 1)
op30.sizes = ([3, 100, 768], [])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op30_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, add, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 76800})]
op31.unmet_dependencies = [MemoryDep('buf30', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (76800, 1)
op31.sizes = ([50, 2, 768], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op31_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 76800})]
op32.unmet_dependencies = [   MemoryDep('buf30', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (76800, 1)
op32.sizes = ([50, 2, 768], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op32_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 76800})]
op33.unmet_dependencies = [   MemoryDep('buf30', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf33.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (76800, 1)
op33.sizes = ([50, 2, 768], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op33_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, load, None)
        return store


op34: ExternKernelSchedulerNode(FallbackKernel)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = 
    [   StarDep(name='buf31', mode=None),
        StarDep(name='buf32', mode=None),
        StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: FallbackKernel
    buf34.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op34.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op35: ExternKernelSchedulerNode(MultiOutput)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: MultiOutput
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op35.node.kernel = None


op36: ExternKernelSchedulerNode(MultiOutput)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: MultiOutput
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf36.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op36.node.kernel = None


op37: ExternKernelSchedulerNode(MultiOutput)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: MultiOutput
    buf37.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf37.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op37.node.kernel = None


op38: ExternKernelSchedulerNode(MultiOutput)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: MultiOutput
    buf38.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf38.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op38.node.kernel = None


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 76800})]
op39.unmet_dependencies = [MemoryDep('buf35', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (76800, 1)
op39.sizes = ([50, 2, 768], [])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op39_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='primals_13', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41_op42_op44_op45_op423: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op41_op42_op44_op45_op423.writes = 
    [   MemoryDep('buf41', c0, {c0: 100}),
        MemoryDep('buf42', c0, {c0: 100}),
        MemoryDep('buf423', c0, {c0: 100}),
        MemoryDep('buf44', c0, {c0: 76800}),
        MemoryDep('buf45', c0, {c0: 76800})]
op41_op42_op44_op45_op423.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf40', c0, {c0: 76800})]
op41_op42_op44_op45_op423.met_dependencies = 
    [   MemoryDep('primals_14', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_15', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_16', c1, {c0: 100, c1: 768})]
op41_op42_op44_op45_op423.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False),
    ]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf423.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op41_op42_op44_op45_op423.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 100})]
op41.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf40', c0, {c0: 76800})]
op41.met_dependencies = [MemoryDep('primals_14', c1, {c0: 100, c1: 768})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (100, 768)
op41.sizes = ([50, 2], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op41_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem)
        return store_reduction
op41_op42_op44_op45_op423.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 100})]
op42.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf40', c0, {c0: 76800})]
op42.met_dependencies = [MemoryDep('primals_14', c1, {c0: 100, c1: 768})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (100, 768)
op42.sizes = ([50, 2], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op42_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf42', get_index_3, getitem_1)
        return store_reduction
op41_op42_op44_op45_op423.snodes[2] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 76800})]
op44.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf40', c0, {c0: 76800}),
        MemoryDep('buf41', c0, {c0: 100}),
        MemoryDep('buf42', c0, {c0: 100})]
op44.met_dependencies = [MemoryDep('primals_14', c1, {c0: 100, c1: 768})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (76800, 1)
op44.sizes = ([50, 2, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op44_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf41', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf42', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf44', get_index_5, mul, None)
        return store
op41_op42_op44_op45_op423.snodes[3] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 76800})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 76800})]
op45.met_dependencies = 
    [   MemoryDep('primals_15', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_16', c1, {c0: 100, c1: 768})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (76800, 1)
op45.sizes = ([100, 768], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op45_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_15', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_16', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf45', get_index_3, add, None)
        return store
op41_op42_op44_op45_op423.snodes[4] =
op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 100})]
op423.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 100})]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf423.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (100, 1)
op423.sizes = ([100], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf423_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op423_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf423', get_index_1, mul, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='primals_17', mode=None), StarDep(name='primals_18', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.addmm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 307200})]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 307200})]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (307200, 1)
op47.sizes = ([307200], [])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op47_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf47', get_index_2, mul_1, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='primals_19', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
]
op48.node.kernel = extern_kernels.mm


op49_op50_op51_op53_op54_op422: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op49_op50_op51_op53_op54_op422.writes = 
    [   MemoryDep('buf422', c0, {c0: 100}),
        MemoryDep('buf49', c0, {c0: 76800}),
        MemoryDep('buf50', c0, {c0: 100}),
        MemoryDep('buf51', c0, {c0: 100}),
        MemoryDep('buf53', c0, {c0: 76800}),
        MemoryDep('buf54', c0, {c0: 76800})]
op49_op50_op51_op53_op54_op422.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf40', c0, {c0: 76800}),
        MemoryDep('buf48', c0, {c0: 76800})]
op49_op50_op51_op53_op54_op422.met_dependencies = 
    [   MemoryDep('primals_14', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_20', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_21', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_22', c1, {c0: 100, c1: 768})]
op49_op50_op51_op53_op54_op422.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
    ]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf422.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op49_op50_op51_op53_op54_op422.snodes[0] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 76800})]
op49.unmet_dependencies = 
    [   MemoryDep('buf23', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf40', c0, {c0: 76800}),
        MemoryDep('buf48', c0, {c0: 76800})]
op49.met_dependencies = 
    [   MemoryDep('primals_14', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_20', c1, {c0: 100, c1: 768})]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op49.group.device = cuda:0
op49.group.iteration = (76800, 1)
op49.sizes = ([50, 2, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op49_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf48', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_20', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf49', get_index_5, add_3, None)
        return store
op49_op50_op51_op53_op54_op422.snodes[1] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 100})]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 76800})]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (100, 768)
op50.sizes = ([100], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op50_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_1, getitem)
        return store_reduction
op49_op50_op51_op53_op54_op422.snodes[2] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 100})]
op51.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 76800})]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (100, 768)
op51.sizes = ([100], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op51_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, getitem_1)
        return store_reduction
op49_op50_op51_op53_op54_op422.snodes[3] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 76800})]
op53.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 76800}),
        MemoryDep('buf50', c0, {c0: 100}),
        MemoryDep('buf51', c0, {c0: 100})]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (76800, 1)
op53.sizes = ([100, 768], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op53_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf50', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf51', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf53', get_index_3, mul, None)
        return store
op49_op50_op51_op53_op54_op422.snodes[4] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 76800})]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 76800})]
op54.met_dependencies = 
    [   MemoryDep('primals_21', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_22', c1, {c0: 100, c1: 768})]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (76800, 1)
op54.sizes = ([100, 768], [])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op54_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_21', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_22', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf54', get_index_3, add, None)
        return store
op49_op50_op51_op53_op54_op422.snodes[5] =
op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 100})]
op422.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 100})]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf422.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (100, 1)
op422.sizes = ([100], [])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf422_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op422_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf422', get_index_1, mul, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='primals_24', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 230400})]
op56.unmet_dependencies = [MemoryDep('buf55', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op56.met_dependencies = [MemoryDep('primals_23', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (230400, 1)
op56.sizes = ([3, 100, 768], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op56_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_23', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, add, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 76800})]
op57.unmet_dependencies = [MemoryDep('buf56', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (76800, 1)
op57.sizes = ([50, 2, 768], [])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op57_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, load, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 76800})]
op58.unmet_dependencies = [   MemoryDep('buf56', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (76800, 1)
op58.sizes = ([50, 2, 768], [])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op58_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 76800})]
op59.unmet_dependencies = [   MemoryDep('buf56', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (76800, 1)
op59.sizes = ([50, 2, 768], [])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op59_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf59', get_index_1, load, None)
        return store


op60: ExternKernelSchedulerNode(FallbackKernel)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = 
    [   StarDep(name='buf57', mode=None),
        StarDep(name='buf58', mode=None),
        StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: FallbackKernel
    buf60.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op60.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op61: ExternKernelSchedulerNode(MultiOutput)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: MultiOutput
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = None


op62: ExternKernelSchedulerNode(MultiOutput)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: MultiOutput
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf62.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op62.node.kernel = None


op63: ExternKernelSchedulerNode(MultiOutput)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: MultiOutput
    buf63.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf63.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op63.node.kernel = None


op64: ExternKernelSchedulerNode(MultiOutput)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: MultiOutput
    buf64.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf64.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op64.node.kernel = None


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 76800})]
op65.unmet_dependencies = [MemoryDep('buf61', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (76800, 1)
op65.sizes = ([50, 2, 768], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op65_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='primals_25', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op66.node.kernel = extern_kernels.mm


op67_op68_op70_op71_op421: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op67_op68_op70_op71_op421.writes = 
    [   MemoryDep('buf421', c0, {c0: 100}),
        MemoryDep('buf67', c0, {c0: 100}),
        MemoryDep('buf68', c0, {c0: 100}),
        MemoryDep('buf70', c0, {c0: 76800}),
        MemoryDep('buf71', c0, {c0: 76800})]
op67_op68_op70_op71_op421.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 76800}), MemoryDep('buf66', c0, {c0: 76800})]
op67_op68_op70_op71_op421.met_dependencies = 
    [   MemoryDep('primals_26', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_27', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_28', c1, {c0: 100, c1: 768})]
op67_op68_op70_op71_op421.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
    ]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf421.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op67_op68_op70_op71_op421.snodes[0] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 100})]
op67.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 76800}), MemoryDep('buf66', c0, {c0: 76800})]
op67.met_dependencies = [MemoryDep('primals_26', c1, {c0: 100, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (100, 768)
op67.sizes = ([100], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op67_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_3, getitem)
        return store_reduction
op67_op68_op70_op71_op421.snodes[1] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 100})]
op68.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 76800}), MemoryDep('buf66', c0, {c0: 76800})]
op68.met_dependencies = [MemoryDep('primals_26', c1, {c0: 100, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (100, 768)
op68.sizes = ([100], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op68_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem_1)
        return store_reduction
op67_op68_op70_op71_op421.snodes[2] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 76800})]
op70.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 76800}),
        MemoryDep('buf66', c0, {c0: 76800}),
        MemoryDep('buf67', c0, {c0: 100}),
        MemoryDep('buf68', c0, {c0: 100})]
op70.met_dependencies = [MemoryDep('primals_26', c1, {c0: 100, c1: 768})]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (76800, 1)
op70.sizes = ([100, 768], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op70_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf67', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf68', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf70', get_index_5, mul, None)
        return store
op67_op68_op70_op71_op421.snodes[3] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 76800})]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 76800})]
op71.met_dependencies = 
    [   MemoryDep('primals_27', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_28', c1, {c0: 100, c1: 768})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (76800, 1)
op71.sizes = ([100, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op71_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_27', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_28', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf71', get_index_3, add, None)
        return store
op67_op68_op70_op71_op421.snodes[4] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 100})]
op421.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 100})]
op421.met_dependencies = []
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf421.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (100, 1)
op421.sizes = ([100], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf421_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op421_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf421', get_index_1, mul, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='primals_29', mode=None), StarDep(name='primals_30', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.addmm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 307200})]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 307200})]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (307200, 1)
op73.sizes = ([307200], [])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op73_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf72', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf73', get_index_2, mul_1, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='primals_31', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.mm


op75_op76_op77_op79_op80_op420: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op75_op76_op77_op79_op80_op420.writes = 
    [   MemoryDep('buf420', c0, {c0: 100}),
        MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf76', c0, {c0: 100}),
        MemoryDep('buf77', c0, {c0: 100}),
        MemoryDep('buf79', c0, {c0: 76800}),
        MemoryDep('buf80', c0, {c0: 76800})]
op75_op76_op77_op79_op80_op420.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 76800}),
        MemoryDep('buf66', c0, {c0: 76800}),
        MemoryDep('buf74', c0, {c0: 76800})]
op75_op76_op77_op79_op80_op420.met_dependencies = 
    [   MemoryDep('primals_26', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_32', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_33', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_34', c1, {c0: 100, c1: 768})]
op75_op76_op77_op79_op80_op420.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf76.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
    ]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf420.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op75_op76_op77_op79_op80_op420.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 76800})]
op75.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 76800}),
        MemoryDep('buf66', c0, {c0: 76800}),
        MemoryDep('buf74', c0, {c0: 76800})]
op75.met_dependencies = 
    [   MemoryDep('primals_26', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_32', c1, {c0: 100, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (76800, 1)
op75.sizes = ([100, 768], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_32_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op75_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf74', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_32', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, add_3, None)
        return store
op75_op76_op77_op79_op80_op420.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 100})]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800})]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf76.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (100, 768)
op76.sizes = ([100], [768])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op76_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_1, getitem)
        return store_reduction
op75_op76_op77_op79_op80_op420.snodes[2] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 100})]
op77.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800})]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (100, 768)
op77.sizes = ([100], [768])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op77_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_1, getitem_1)
        return store_reduction
op75_op76_op77_op79_op80_op420.snodes[3] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 76800})]
op79.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf76', c0, {c0: 100}),
        MemoryDep('buf77', c0, {c0: 100})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (76800, 1)
op79.sizes = ([100, 768], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op79_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf77', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf79', get_index_3, mul, None)
        return store
op75_op76_op77_op79_op80_op420.snodes[4] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 76800})]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 76800})]
op80.met_dependencies = 
    [   MemoryDep('primals_33', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_34', c1, {c0: 100, c1: 768})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (76800, 1)
op80.sizes = ([100, 768], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op80_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_33', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_34', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf80', get_index_3, add, None)
        return store
op75_op76_op77_op79_op80_op420.snodes[5] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 100})]
op420.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 100})]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf420.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (100, 1)
op420.sizes = ([100], [])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf420_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op420_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf420', get_index_1, mul, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='primals_36', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 230400})]
op82.unmet_dependencies = [MemoryDep('buf81', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op82.met_dependencies = [MemoryDep('primals_35', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (230400, 1)
op82.sizes = ([3, 100, 768], [])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op82_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_35', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, add, None)
        return store


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 76800})]
op83.unmet_dependencies = [MemoryDep('buf82', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (76800, 1)
op83.sizes = ([50, 2, 768], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op83_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 76800})]
op84.unmet_dependencies = [   MemoryDep('buf82', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (76800, 1)
op84.sizes = ([50, 2, 768], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op84_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf84', get_index_1, load, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 76800})]
op85.unmet_dependencies = [   MemoryDep('buf82', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (76800, 1)
op85.sizes = ([50, 2, 768], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op85_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, load, None)
        return store


op86: ExternKernelSchedulerNode(FallbackKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = 
    [   StarDep(name='buf83', mode=None),
        StarDep(name='buf84', mode=None),
        StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: FallbackKernel
    buf86.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op87: ExternKernelSchedulerNode(MultiOutput)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: MultiOutput
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87.node.kernel = None


op88: ExternKernelSchedulerNode(MultiOutput)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: MultiOutput
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf88.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op88.node.kernel = None


op89: ExternKernelSchedulerNode(MultiOutput)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: MultiOutput
    buf89.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf89.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op89.node.kernel = None


op90: ExternKernelSchedulerNode(MultiOutput)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: MultiOutput
    buf90.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf90.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op90.node.kernel = None


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 76800})]
op91.unmet_dependencies = [MemoryDep('buf87', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (76800, 1)
op91.sizes = ([50, 2, 768], [])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op91_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, load, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='primals_37', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op92.node.kernel = extern_kernels.mm


op93_op94_op96_op97_op419: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op93_op94_op96_op97_op419.writes = 
    [   MemoryDep('buf419', c0, {c0: 100}),
        MemoryDep('buf93', c0, {c0: 100}),
        MemoryDep('buf94', c0, {c0: 100}),
        MemoryDep('buf96', c0, {c0: 76800}),
        MemoryDep('buf97', c0, {c0: 76800})]
op93_op94_op96_op97_op419.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800}), MemoryDep('buf92', c0, {c0: 76800})]
op93_op94_op96_op97_op419.met_dependencies = 
    [   MemoryDep('primals_38', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_39', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_40', c1, {c0: 100, c1: 768})]
op93_op94_op96_op97_op419.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False),
    ]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf419.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op93_op94_op96_op97_op419.snodes[0] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 100})]
op93.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800}), MemoryDep('buf92', c0, {c0: 76800})]
op93.met_dependencies = [MemoryDep('primals_38', c1, {c0: 100, c1: 768})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (100, 768)
op93.sizes = ([100], [768])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op93_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf93', get_index_3, getitem)
        return store_reduction
op93_op94_op96_op97_op419.snodes[1] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 100})]
op94.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 76800}), MemoryDep('buf92', c0, {c0: 76800})]
op94.met_dependencies = [MemoryDep('primals_38', c1, {c0: 100, c1: 768})]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (100, 768)
op94.sizes = ([100], [768])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op94_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_3, getitem_1)
        return store_reduction
op93_op94_op96_op97_op419.snodes[2] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 76800})]
op96.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf92', c0, {c0: 76800}),
        MemoryDep('buf93', c0, {c0: 100}),
        MemoryDep('buf94', c0, {c0: 100})]
op96.met_dependencies = [MemoryDep('primals_38', c1, {c0: 100, c1: 768})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (76800, 1)
op96.sizes = ([100, 768], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op96_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf93', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf94', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, mul, None)
        return store
op93_op94_op96_op97_op419.snodes[3] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 76800})]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 76800})]
op97.met_dependencies = 
    [   MemoryDep('primals_39', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_40', c1, {c0: 100, c1: 768})]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (76800, 1)
op97.sizes = ([100, 768], [])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op97_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_39', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_40', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf97', get_index_3, add, None)
        return store
op93_op94_op96_op97_op419.snodes[4] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 100})]
op419.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 100})]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf419.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (100, 1)
op419.sizes = ([100], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf419_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op419_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf419', get_index_1, mul, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='primals_41', mode=None), StarDep(name='primals_42', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.addmm


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 307200})]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 307200})]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (307200, 1)
op99.sizes = ([307200], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op99_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf99', get_index_2, mul_1, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='primals_43', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op101_op102_op103_op105_op106_op418: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op101_op102_op103_op105_op106_op418.writes = 
    [   MemoryDep('buf101', c0, {c0: 76800}),
        MemoryDep('buf102', c0, {c0: 100}),
        MemoryDep('buf103', c0, {c0: 100}),
        MemoryDep('buf105', c0, {c0: 76800}),
        MemoryDep('buf106', c0, {c0: 76800}),
        MemoryDep('buf418', c0, {c0: 100})]
op101_op102_op103_op105_op106_op418.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 76800}),
        MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf92', c0, {c0: 76800})]
op101_op102_op103_op105_op106_op418.met_dependencies = 
    [   MemoryDep('primals_38', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_44', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_45', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_46', c1, {c0: 100, c1: 768})]
op101_op102_op103_op105_op106_op418.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf102.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
    ]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf418.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op101_op102_op103_op105_op106_op418.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 76800})]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 76800}),
        MemoryDep('buf75', c0, {c0: 76800}),
        MemoryDep('buf92', c0, {c0: 76800})]
op101.met_dependencies = 
    [   MemoryDep('primals_38', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_44', c1, {c0: 100, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (76800, 1)
op101.sizes = ([100, 768], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_44_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op101_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf100', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_44', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_3, None)
        return store
op101_op102_op103_op105_op106_op418.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 100})]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf102.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (100, 768)
op102.sizes = ([100], [768])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op102_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf102', get_index_1, getitem)
        return store_reduction
op101_op102_op103_op105_op106_op418.snodes[2] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 100})]
op103.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800})]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (100, 768)
op103.sizes = ([100], [768])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op103_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, getitem_1)
        return store_reduction
op101_op102_op103_op105_op106_op418.snodes[3] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 76800})]
op105.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 76800}),
        MemoryDep('buf102', c0, {c0: 100}),
        MemoryDep('buf103', c0, {c0: 100})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (76800, 1)
op105.sizes = ([100, 768], [])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op105_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf103', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf105', get_index_3, mul, None)
        return store
op101_op102_op103_op105_op106_op418.snodes[4] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 76800})]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 76800})]
op106.met_dependencies = 
    [   MemoryDep('primals_45', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_46', c1, {c0: 100, c1: 768})]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (76800, 1)
op106.sizes = ([100, 768], [])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op106_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_45', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_46', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf106', get_index_3, add, None)
        return store
op101_op102_op103_op105_op106_op418.snodes[5] =
op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 100})]
op418.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 100})]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf418.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (100, 1)
op418.sizes = ([100], [])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf418_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op418_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf418', get_index_1, mul, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='primals_48', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 230400})]
op108.unmet_dependencies = [MemoryDep('buf107', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op108.met_dependencies = [MemoryDep('primals_47', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (230400, 1)
op108.sizes = ([3, 100, 768], [])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op108_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf108', get_index_2, add, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 76800})]
op109.unmet_dependencies = [MemoryDep('buf108', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf109.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (76800, 1)
op109.sizes = ([50, 2, 768], [])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op109_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, load, None)
        return store


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 76800})]
op110.unmet_dependencies = [   MemoryDep('buf108', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (76800, 1)
op110.sizes = ([50, 2, 768], [])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op110_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 76800})]
op111.unmet_dependencies = [   MemoryDep('buf108', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (76800, 1)
op111.sizes = ([50, 2, 768], [])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op111_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: ExternKernelSchedulerNode(FallbackKernel)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = 
    [   StarDep(name='buf109', mode=None),
        StarDep(name='buf110', mode=None),
        StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: FallbackKernel
    buf112.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op113: ExternKernelSchedulerNode(MultiOutput)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: MultiOutput
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op113.node.kernel = None


op114: ExternKernelSchedulerNode(MultiOutput)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: MultiOutput
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf114.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op114.node.kernel = None


op115: ExternKernelSchedulerNode(MultiOutput)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: MultiOutput
    buf115.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf115.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op115.node.kernel = None


op116: ExternKernelSchedulerNode(MultiOutput)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: MultiOutput
    buf116.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf116.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op116.node.kernel = None


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 76800})]
op117.unmet_dependencies = [MemoryDep('buf113', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (76800, 1)
op117.sizes = ([50, 2, 768], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op117_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf117', get_index_1, load, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='primals_49', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
]
op118.node.kernel = extern_kernels.mm


op119_op120_op122_op123_op417: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op119_op120_op122_op123_op417.writes = 
    [   MemoryDep('buf119', c0, {c0: 100}),
        MemoryDep('buf120', c0, {c0: 100}),
        MemoryDep('buf122', c0, {c0: 76800}),
        MemoryDep('buf123', c0, {c0: 76800}),
        MemoryDep('buf417', c0, {c0: 100})]
op119_op120_op122_op123_op417.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800}), MemoryDep('buf118', c0, {c0: 76800})]
op119_op120_op122_op123_op417.met_dependencies = 
    [   MemoryDep('primals_50', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_51', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_52', c1, {c0: 100, c1: 768})]
op119_op120_op122_op123_op417.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
    ]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf417.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op119_op120_op122_op123_op417.snodes[0] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 100})]
op119.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800}), MemoryDep('buf118', c0, {c0: 76800})]
op119.met_dependencies = [MemoryDep('primals_50', c1, {c0: 100, c1: 768})]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (100, 768)
op119.sizes = ([100], [768])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op119_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction
op119_op120_op122_op123_op417.snodes[1] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 100})]
op120.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 76800}), MemoryDep('buf118', c0, {c0: 76800})]
op120.met_dependencies = [MemoryDep('primals_50', c1, {c0: 100, c1: 768})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (100, 768)
op120.sizes = ([100], [768])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op120_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction
op119_op120_op122_op123_op417.snodes[2] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 76800})]
op122.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 76800}),
        MemoryDep('buf118', c0, {c0: 76800}),
        MemoryDep('buf119', c0, {c0: 100}),
        MemoryDep('buf120', c0, {c0: 100})]
op122.met_dependencies = [MemoryDep('primals_50', c1, {c0: 100, c1: 768})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (76800, 1)
op122.sizes = ([100, 768], [])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op122_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf122', get_index_5, mul, None)
        return store
op119_op120_op122_op123_op417.snodes[3] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 76800})]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 76800})]
op123.met_dependencies = 
    [   MemoryDep('primals_51', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_52', c1, {c0: 100, c1: 768})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (76800, 1)
op123.sizes = ([100, 768], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op123_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_51', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_52', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf123', get_index_3, add, None)
        return store
op119_op120_op122_op123_op417.snodes[4] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 100})]
op417.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 100})]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf417.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (100, 1)
op417.sizes = ([100], [])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf417_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op417_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf417', get_index_1, mul, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='primals_53', mode=None), StarDep(name='primals_54', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.addmm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 307200})]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 307200})]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (307200, 1)
op125.sizes = ([307200], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op125_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf125', get_index_2, mul_1, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='primals_55', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.mm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op127.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 76800}),
        MemoryDep('buf118', c0, {c0: 76800}),
        MemoryDep('buf126', c0, {c0: 76800})]
op127.met_dependencies = 
    [   MemoryDep('primals_50', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_56', c1, {c0: 100, c1: 768})]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (76800, 1)
op127.sizes = ([50, 2, 768], [])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_56_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
class op127_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p0 + 38400*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf126', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_56', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf127', get_index_5, add_3, None)
        return store


op351: ExternKernelSchedulerNode(ExternKernelAlloc)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf127', mode=None), StarDep(name='buf350', mode=None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ExternKernelAlloc
    buf351.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False),
    ]
]
op351.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 100})]
op129.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 76800})]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (100, 768)
op129.sizes = ([100], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
class op129_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, getitem_1)
        return store_reduction


op131_op128_op132: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op131_op128_op132.writes = 
    [   MemoryDep('buf128', c0, {c0: 100}),
        MemoryDep('buf131', c0, {c0: 100}),
        MemoryDep('buf132', c0, {c0: 76800})]
op131_op128_op132.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf129', c0 + 50*c1, {c0: 50, c1: 2})]
op131_op128_op132.met_dependencies = 
    [   MemoryDep('primals_57', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_58', c1, {c0: 100, c1: 768})]
op131_op128_op132.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131_op128_op132.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 100})]
op131.unmet_dependencies = [MemoryDep('buf129', c0 + 50*c1, {c0: 50, c1: 2})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (100, 1)
op131.sizes = ([50, 2], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op131_loop_body:
    var_ranges = {p0: 50, p1: 2}
    index0 = p0 + 50*p1
    index1 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf131', get_index_1, rsqrt, None)
        return store
op131_op128_op132.snodes[1] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 100})]
op128.unmet_dependencies = [MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (100, 768)
op128.sizes = ([50, 2], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op128_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf128', get_index_1, getitem)
        return store_reduction
op131_op128_op132.snodes[2] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 76800})]
op132.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf128', c0, {c0: 100}),
        MemoryDep('buf131', c0, {c0: 100})]
op132.met_dependencies = 
    [   MemoryDep('primals_57', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_58', c1, {c0: 100, c1: 768})]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (76800, 1)
op132.sizes = ([50, 2, 768], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op132_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 2*p0 + p1
    index2 = p2
    index3 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf128', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf131', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_57', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_58', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf132', get_index_5, add, None)
        return store


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 41472})]
op352.unmet_dependencies = [MemoryDep('buf351', 12544*c0 + 1792*c1 + c2 - 2048, {c0: 2, c1: 9, c2: 2304})]
op352.met_dependencies = [MemoryDep('primals_159', c1, {c0: 162, c1: 256})]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf352.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (41472, 1)
op352.sizes = ([2, 9, 9, 256], [])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_159_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
class op352_loop_body:
    var_ranges = {p0: 2, p1: 9, p2: 9, p3: 256}
    index0 = p1 - 1
    index1 = p2 - 1
    index2 = 12544*p0 + 1792*p1 + 256*p2 + p3 - 2048
    index3 = p3
    index4 = 20736*p0 + 2304*p1 + 256*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf352', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('primals_159', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf351', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_159', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf351', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_159', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        return where


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 25088})]
op401.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 25088})]
op401.met_dependencies = [MemoryDep('primals_159', c1, {c0: 98, c1: 256})]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf401.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (25088, 1)
op401.sizes = ([98, 256], [])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_159_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf401_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op401_loop_body:
    var_ranges = {p0: 98, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_159', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf351', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_159', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf351', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_159', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        constant_2 = ops.constant(0.0, torch.float32)
        gt_1 = ops.gt(where, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf401', get_index_6, gt_1, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='primals_60', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.mm


op353: ExternKernelSchedulerNode(ExternKernelAlloc)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='primals_160', mode=None)]
op353.outputs = [
    buf353: ExternKernelAlloc
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op353.node.kernel = extern_kernels.convolution


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 230400})]
op134.unmet_dependencies = [MemoryDep('buf133', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op134.met_dependencies = [MemoryDep('primals_59', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (230400, 1)
op134.sizes = ([3, 100, 768], [])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op134_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_59', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf134', get_index_2, add, None)
        return store


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 18432})]
op358.unmet_dependencies = [MemoryDep('buf353', 1536*c0 + c1 + 256*c2, {c0: 12, c1: 256, c2: 6})]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (18432, 1)
op358.sizes = ([12, 256, 6], [])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
buf358_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
class op358_loop_body:
    var_ranges = {p0: 12, p1: 256, p2: 6}
    index0 = 1536*p0 + p1 + 256*p2
    index1 = 1536*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf358', get_index_1, load, None)
        return store


op359: ExternKernelSchedulerNode(ExternKernelAlloc)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf357', mode=None), StarDep(name='buf358', mode=None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ExternKernelAlloc
    buf359.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf359.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False)]
]
op359.node.kernel = extern_kernels.convolution


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 76800})]
op135.unmet_dependencies = [MemoryDep('buf134', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (76800, 1)
op135.sizes = ([50, 2, 768], [])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op135_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf135', get_index_1, load, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 76800})]
op136.unmet_dependencies = [   MemoryDep('buf134', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op136.group.device = cuda:0
op136.group.iteration = (76800, 1)
op136.sizes = ([50, 2, 768], [])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op136_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf136', get_index_1, load, None)
        return store


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 76800})]
op137.unmet_dependencies = [   MemoryDep('buf134', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (76800, 1)
op137.sizes = ([50, 2, 768], [])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op137_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf137', get_index_1, load, None)
        return store


op138: ExternKernelSchedulerNode(FallbackKernel)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = 
    [   StarDep(name='buf135', mode=None),
        StarDep(name='buf136', mode=None),
        StarDep(name='buf137', mode=None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: FallbackKernel
    buf138.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf138.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op138.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op139: ExternKernelSchedulerNode(MultiOutput)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: MultiOutput
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op139.node.kernel = None


op140: ExternKernelSchedulerNode(MultiOutput)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: MultiOutput
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf140.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op140.node.kernel = None


op141: ExternKernelSchedulerNode(MultiOutput)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: MultiOutput
    buf141.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf141.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op141.node.kernel = None


op142: ExternKernelSchedulerNode(MultiOutput)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: MultiOutput
    buf142.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf142.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op142.node.kernel = None


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 76800})]
op143.unmet_dependencies = [MemoryDep('buf139', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (76800, 1)
op143.sizes = ([50, 2, 768], [])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op143_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='primals_61', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op144.node.kernel = extern_kernels.mm


op145_op146_op148_op149_op416: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op145_op146_op148_op149_op416.writes = 
    [   MemoryDep('buf145', c0, {c0: 100}),
        MemoryDep('buf146', c0, {c0: 100}),
        MemoryDep('buf148', c0, {c0: 76800}),
        MemoryDep('buf149', c0, {c0: 76800}),
        MemoryDep('buf416', c0, {c0: 100})]
op145_op146_op148_op149_op416.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf144', c0, {c0: 76800})]
op145_op146_op148_op149_op416.met_dependencies = 
    [   MemoryDep('primals_62', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_63', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_64', c1, {c0: 100, c1: 768})]
op145_op146_op148_op149_op416.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf145.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf416.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op145_op146_op148_op149_op416.snodes[0] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 100})]
op145.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf144', c0, {c0: 76800})]
op145.met_dependencies = [MemoryDep('primals_62', c1, {c0: 100, c1: 768})]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf145.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (100, 768)
op145.sizes = ([50, 2], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op145_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf144', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf145', get_index_3, getitem)
        return store_reduction
op145_op146_op148_op149_op416.snodes[1] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 100})]
op146.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf144', c0, {c0: 76800})]
op146.met_dependencies = [MemoryDep('primals_62', c1, {c0: 100, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (100, 768)
op146.sizes = ([50, 2], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op146_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf144', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf146', get_index_3, getitem_1)
        return store_reduction
op145_op146_op148_op149_op416.snodes[2] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 76800})]
op148.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf144', c0, {c0: 76800}),
        MemoryDep('buf145', c0, {c0: 100}),
        MemoryDep('buf146', c0, {c0: 100})]
op148.met_dependencies = [MemoryDep('primals_62', c1, {c0: 100, c1: 768})]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (76800, 1)
op148.sizes = ([50, 2, 768], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op148_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf144', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf145', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf146', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf148', get_index_5, mul, None)
        return store
op145_op146_op148_op149_op416.snodes[3] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 76800})]
op149.unmet_dependencies = [MemoryDep('buf148', c0, {c0: 76800})]
op149.met_dependencies = 
    [   MemoryDep('primals_63', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_64', c1, {c0: 100, c1: 768})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (76800, 1)
op149.sizes = ([100, 768], [])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op149_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_64', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf149', get_index_3, add, None)
        return store
op145_op146_op148_op149_op416.snodes[4] =
op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 100})]
op416.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 100})]
op416.met_dependencies = []
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf416.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (100, 1)
op416.sizes = ([100], [])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf416_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op416_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf416', get_index_1, mul, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='primals_65', mode=None), StarDep(name='primals_66', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op150.node.kernel = extern_kernels.addmm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 307200})]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 307200})]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (307200, 1)
op151.sizes = ([307200], [])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op151_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf150', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf151', get_index_2, mul_1, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='primals_67', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153_op154_op155_op157_op158_op415: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op153_op154_op155_op157_op158_op415.writes = 
    [   MemoryDep('buf153', c0, {c0: 76800}),
        MemoryDep('buf154', c0, {c0: 100}),
        MemoryDep('buf155', c0, {c0: 100}),
        MemoryDep('buf157', c0, {c0: 76800}),
        MemoryDep('buf158', c0, {c0: 76800}),
        MemoryDep('buf415', c0, {c0: 100})]
op153_op154_op155_op157_op158_op415.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf144', c0, {c0: 76800}),
        MemoryDep('buf152', c0, {c0: 76800})]
op153_op154_op155_op157_op158_op415.met_dependencies = 
    [   MemoryDep('primals_62', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_68', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_69', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_70', c1, {c0: 100, c1: 768})]
op153_op154_op155_op157_op158_op415.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False),
    ]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf415.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op153_op154_op155_op157_op158_op415.snodes[0] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 76800})]
op153.unmet_dependencies = 
    [   MemoryDep('buf127', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf144', c0, {c0: 76800}),
        MemoryDep('buf152', c0, {c0: 76800})]
op153.met_dependencies = 
    [   MemoryDep('primals_62', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_68', c1, {c0: 100, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (76800, 1)
op153.sizes = ([50, 2, 768], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_68_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op153_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf144', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf152', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_68', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf153', get_index_5, add_3, None)
        return store
op153_op154_op155_op157_op158_op415.snodes[1] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 100})]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 76800})]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (100, 768)
op154.sizes = ([100], [768])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op154_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_1, getitem)
        return store_reduction
op153_op154_op155_op157_op158_op415.snodes[2] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 100})]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 76800})]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (100, 768)
op155.sizes = ([100], [768])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op155_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_1, getitem_1)
        return store_reduction
op153_op154_op155_op157_op158_op415.snodes[3] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 76800})]
op157.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 76800}),
        MemoryDep('buf154', c0, {c0: 100}),
        MemoryDep('buf155', c0, {c0: 100})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (76800, 1)
op157.sizes = ([100, 768], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op157_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf157', get_index_3, mul, None)
        return store
op153_op154_op155_op157_op158_op415.snodes[4] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 76800})]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 76800})]
op158.met_dependencies = 
    [   MemoryDep('primals_69', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_70', c1, {c0: 100, c1: 768})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (76800, 1)
op158.sizes = ([100, 768], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op158_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_69', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_70', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf158', get_index_3, add, None)
        return store
op153_op154_op155_op157_op158_op415.snodes[5] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 100})]
op415.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 100})]
op415.met_dependencies = []
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf415.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (100, 1)
op415.sizes = ([100], [])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf415_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op415_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf415', get_index_1, mul, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='primals_72', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 230400})]
op160.unmet_dependencies = [MemoryDep('buf159', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op160.met_dependencies = [MemoryDep('primals_71', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (230400, 1)
op160.sizes = ([3, 100, 768], [])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op160_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf160', get_index_2, add, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 76800})]
op161.unmet_dependencies = [MemoryDep('buf160', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf161.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (76800, 1)
op161.sizes = ([50, 2, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op161_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf161', get_index_1, load, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 76800})]
op162.unmet_dependencies = [   MemoryDep('buf160', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (76800, 1)
op162.sizes = ([50, 2, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op162_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, load, None)
        return store


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 76800})]
op163.unmet_dependencies = [   MemoryDep('buf160', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (76800, 1)
op163.sizes = ([50, 2, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op163_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(FallbackKernel)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = 
    [   StarDep(name='buf161', mode=None),
        StarDep(name='buf162', mode=None),
        StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: FallbackKernel
    buf164.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op164.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op165: ExternKernelSchedulerNode(MultiOutput)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: MultiOutput
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op165.node.kernel = None


op166: ExternKernelSchedulerNode(MultiOutput)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: MultiOutput
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf166.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op166.node.kernel = None


op167: ExternKernelSchedulerNode(MultiOutput)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: MultiOutput
    buf167.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf167.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op167.node.kernel = None


op168: ExternKernelSchedulerNode(MultiOutput)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: MultiOutput
    buf168.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf168.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op168.node.kernel = None


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 76800})]
op169.unmet_dependencies = [MemoryDep('buf165', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (76800, 1)
op169.sizes = ([50, 2, 768], [])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op169_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf169', get_index_1, load, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='primals_73', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op170.node.kernel = extern_kernels.mm


op171_op172_op174_op175_op414: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op171_op172_op174_op175_op414.writes = 
    [   MemoryDep('buf171', c0, {c0: 100}),
        MemoryDep('buf172', c0, {c0: 100}),
        MemoryDep('buf174', c0, {c0: 76800}),
        MemoryDep('buf175', c0, {c0: 76800}),
        MemoryDep('buf414', c0, {c0: 100})]
op171_op172_op174_op175_op414.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 76800}), MemoryDep('buf170', c0, {c0: 76800})]
op171_op172_op174_op175_op414.met_dependencies = 
    [   MemoryDep('primals_74', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_75', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_76', c1, {c0: 100, c1: 768})]
op171_op172_op174_op175_op414.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf171.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
    ]
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf414.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op171_op172_op174_op175_op414.snodes[0] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 100})]
op171.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 76800}), MemoryDep('buf170', c0, {c0: 76800})]
op171.met_dependencies = [MemoryDep('primals_74', c1, {c0: 100, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf171.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (100, 768)
op171.sizes = ([100], [768])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op171_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem)
        return store_reduction
op171_op172_op174_op175_op414.snodes[1] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 100})]
op172.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 76800}), MemoryDep('buf170', c0, {c0: 76800})]
op172.met_dependencies = [MemoryDep('primals_74', c1, {c0: 100, c1: 768})]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (100, 768)
op172.sizes = ([100], [768])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op172_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem_1)
        return store_reduction
op171_op172_op174_op175_op414.snodes[2] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 76800})]
op174.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 76800}),
        MemoryDep('buf170', c0, {c0: 76800}),
        MemoryDep('buf171', c0, {c0: 100}),
        MemoryDep('buf172', c0, {c0: 100})]
op174.met_dependencies = [MemoryDep('primals_74', c1, {c0: 100, c1: 768})]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (76800, 1)
op174.sizes = ([100, 768], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op174_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf171', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf172', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf174', get_index_5, mul, None)
        return store
op171_op172_op174_op175_op414.snodes[3] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 76800})]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 76800})]
op175.met_dependencies = 
    [   MemoryDep('primals_75', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_76', c1, {c0: 100, c1: 768})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (76800, 1)
op175.sizes = ([100, 768], [])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op175_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_75', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_76', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf175', get_index_3, add, None)
        return store
op171_op172_op174_op175_op414.snodes[4] =
op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 100})]
op414.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 100})]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf414.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (100, 1)
op414.sizes = ([100], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf414_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op414_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf414', get_index_1, mul, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='primals_77', mode=None), StarDep(name='primals_78', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op176.node.kernel = extern_kernels.addmm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 307200})]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 307200})]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (307200, 1)
op177.sizes = ([307200], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op177_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf176', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf177', get_index_2, mul_1, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='primals_79', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179_op180_op181_op183_op184_op413: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op179_op180_op181_op183_op184_op413.writes = 
    [   MemoryDep('buf179', c0, {c0: 76800}),
        MemoryDep('buf180', c0, {c0: 100}),
        MemoryDep('buf181', c0, {c0: 100}),
        MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf184', c0, {c0: 76800}),
        MemoryDep('buf413', c0, {c0: 100})]
op179_op180_op181_op183_op184_op413.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 76800}),
        MemoryDep('buf170', c0, {c0: 76800}),
        MemoryDep('buf178', c0, {c0: 76800})]
op179_op180_op181_op183_op184_op413.met_dependencies = 
    [   MemoryDep('primals_74', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_80', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_81', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_82', c1, {c0: 100, c1: 768})]
op179_op180_op181_op183_op184_op413.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
    ]
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False),
    ]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf413.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op179_op180_op181_op183_op184_op413.snodes[0] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 76800})]
op179.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 76800}),
        MemoryDep('buf170', c0, {c0: 76800}),
        MemoryDep('buf178', c0, {c0: 76800})]
op179.met_dependencies = 
    [   MemoryDep('primals_74', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_80', c1, {c0: 100, c1: 768})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (76800, 1)
op179.sizes = ([100, 768], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_80_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op179_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf178', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_80', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, add_3, None)
        return store
op179_op180_op181_op183_op184_op413.snodes[1] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 100})]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 76800})]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (100, 768)
op180.sizes = ([100], [768])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op180_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_1, getitem)
        return store_reduction
op179_op180_op181_op183_op184_op413.snodes[2] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 100})]
op181.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 76800})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (100, 768)
op181.sizes = ([100], [768])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op181_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, getitem_1)
        return store_reduction
op179_op180_op181_op183_op184_op413.snodes[3] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 76800})]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 76800}),
        MemoryDep('buf180', c0, {c0: 100}),
        MemoryDep('buf181', c0, {c0: 100})]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (76800, 1)
op183.sizes = ([100, 768], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op183_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf180', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf181', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf183', get_index_3, mul, None)
        return store
op179_op180_op181_op183_op184_op413.snodes[4] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 76800})]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 76800})]
op184.met_dependencies = 
    [   MemoryDep('primals_81', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_82', c1, {c0: 100, c1: 768})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (76800, 1)
op184.sizes = ([100, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_82_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op184_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_81', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_82', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf184', get_index_3, add, None)
        return store
op179_op180_op181_op183_op184_op413.snodes[5] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 100})]
op413.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 100})]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf413.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (100, 1)
op413.sizes = ([100], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf413_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op413_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf413', get_index_1, mul, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='primals_84', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.mm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 230400})]
op186.unmet_dependencies = [MemoryDep('buf185', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op186.met_dependencies = [MemoryDep('primals_83', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op186.group.device = cuda:0
op186.group.iteration = (230400, 1)
op186.sizes = ([3, 100, 768], [])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op186_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_83', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf186', get_index_2, add, None)
        return store


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 76800})]
op187.unmet_dependencies = [MemoryDep('buf186', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (76800, 1)
op187.sizes = ([50, 2, 768], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op187_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf187', get_index_1, load, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 76800})]
op188.unmet_dependencies = [   MemoryDep('buf186', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (76800, 1)
op188.sizes = ([50, 2, 768], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op188_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 76800})]
op189.unmet_dependencies = [   MemoryDep('buf186', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (76800, 1)
op189.sizes = ([50, 2, 768], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op189_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf189', get_index_1, load, None)
        return store


op190: ExternKernelSchedulerNode(FallbackKernel)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = 
    [   StarDep(name='buf187', mode=None),
        StarDep(name='buf188', mode=None),
        StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: FallbackKernel
    buf190.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False),
    ]
]
op190.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op191: ExternKernelSchedulerNode(MultiOutput)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: MultiOutput
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op191.node.kernel = None


op192: ExternKernelSchedulerNode(MultiOutput)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: MultiOutput
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf192.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op192.node.kernel = None


op193: ExternKernelSchedulerNode(MultiOutput)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: MultiOutput
    buf193.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf193.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op193.node.kernel = None


op194: ExternKernelSchedulerNode(MultiOutput)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: MultiOutput
    buf194.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf194.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op194.node.kernel = None


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 76800})]
op195.unmet_dependencies = [MemoryDep('buf191', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (76800, 1)
op195.sizes = ([50, 2, 768], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op195_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf195', get_index_1, load, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op196.met_dependencies = [StarDep(name='primals_85', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
    ]
]
op196.node.kernel = extern_kernels.mm


op197_op198_op200_op201_op412: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op197_op198_op200_op201_op412.writes = 
    [   MemoryDep('buf197', c0, {c0: 100}),
        MemoryDep('buf198', c0, {c0: 100}),
        MemoryDep('buf200', c0, {c0: 76800}),
        MemoryDep('buf201', c0, {c0: 76800}),
        MemoryDep('buf412', c0, {c0: 100})]
op197_op198_op200_op201_op412.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 76800}), MemoryDep('buf196', c0, {c0: 76800})]
op197_op198_op200_op201_op412.met_dependencies = 
    [   MemoryDep('primals_86', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_87', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_88', c1, {c0: 100, c1: 768})]
op197_op198_op200_op201_op412.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf197.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
    ]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf412.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op197_op198_op200_op201_op412.snodes[0] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 100})]
op197.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 76800}), MemoryDep('buf196', c0, {c0: 76800})]
op197.met_dependencies = [MemoryDep('primals_86', c1, {c0: 100, c1: 768})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf197.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (100, 768)
op197.sizes = ([100], [768])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op197_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf196', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf197', get_index_3, getitem)
        return store_reduction
op197_op198_op200_op201_op412.snodes[1] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 100})]
op198.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 76800}), MemoryDep('buf196', c0, {c0: 76800})]
op198.met_dependencies = [MemoryDep('primals_86', c1, {c0: 100, c1: 768})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (100, 768)
op198.sizes = ([100], [768])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op198_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf196', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf198', get_index_3, getitem_1)
        return store_reduction
op197_op198_op200_op201_op412.snodes[2] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 76800})]
op200.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 76800}),
        MemoryDep('buf196', c0, {c0: 76800}),
        MemoryDep('buf197', c0, {c0: 100}),
        MemoryDep('buf198', c0, {c0: 100})]
op200.met_dependencies = [MemoryDep('primals_86', c1, {c0: 100, c1: 768})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (76800, 1)
op200.sizes = ([100, 768], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op200_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf196', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf197', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf198', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf200', get_index_5, mul, None)
        return store
op197_op198_op200_op201_op412.snodes[3] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 76800})]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 76800})]
op201.met_dependencies = 
    [   MemoryDep('primals_87', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_88', c1, {c0: 100, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (76800, 1)
op201.sizes = ([100, 768], [])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_88_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op201_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_87', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_88', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf201', get_index_3, add, None)
        return store
op197_op198_op200_op201_op412.snodes[4] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 100})]
op412.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 100})]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf412.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (100, 1)
op412.sizes = ([100], [])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf412_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op412_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf412', get_index_1, mul, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='primals_89', mode=None), StarDep(name='primals_90', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.addmm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 307200})]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 307200})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (307200, 1)
op203.sizes = ([307200], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op203_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf203', get_index_2, mul_1, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='primals_91', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205_op206_op207_op209_op210_op411: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op205_op206_op207_op209_op210_op411.writes = 
    [   MemoryDep('buf205', c0, {c0: 76800}),
        MemoryDep('buf206', c0, {c0: 100}),
        MemoryDep('buf207', c0, {c0: 100}),
        MemoryDep('buf209', c0, {c0: 76800}),
        MemoryDep('buf210', c0, {c0: 76800}),
        MemoryDep('buf411', c0, {c0: 100})]
op205_op206_op207_op209_op210_op411.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 76800}),
        MemoryDep('buf196', c0, {c0: 76800}),
        MemoryDep('buf204', c0, {c0: 76800})]
op205_op206_op207_op209_op210_op411.met_dependencies = 
    [   MemoryDep('primals_86', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_92', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_93', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_94', c1, {c0: 100, c1: 768})]
op205_op206_op207_op209_op210_op411.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf206.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf411.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op205_op206_op207_op209_op210_op411.snodes[0] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 76800})]
op205.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 76800}),
        MemoryDep('buf196', c0, {c0: 76800}),
        MemoryDep('buf204', c0, {c0: 76800})]
op205.met_dependencies = 
    [   MemoryDep('primals_86', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_92', c1, {c0: 100, c1: 768})]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (76800, 1)
op205.sizes = ([100, 768], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_92_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op205_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf196', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf204', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_92', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf205', get_index_5, add_3, None)
        return store
op205_op206_op207_op209_op210_op411.snodes[1] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 100})]
op206.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 76800})]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf206.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (100, 768)
op206.sizes = ([100], [768])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op206_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf206', get_index_1, getitem)
        return store_reduction
op205_op206_op207_op209_op210_op411.snodes[2] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 100})]
op207.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 76800})]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
]
op207.group.device = cuda:0
op207.group.iteration = (100, 768)
op207.sizes = ([100], [768])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op207_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_1, getitem_1)
        return store_reduction
op205_op206_op207_op209_op210_op411.snodes[3] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 76800})]
op209.unmet_dependencies = 
    [   MemoryDep('buf205', c0, {c0: 76800}),
        MemoryDep('buf206', c0, {c0: 100}),
        MemoryDep('buf207', c0, {c0: 100})]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (76800, 1)
op209.sizes = ([100, 768], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op209_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf206', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf207', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf209', get_index_3, mul, None)
        return store
op205_op206_op207_op209_op210_op411.snodes[4] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 76800})]
op210.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 76800})]
op210.met_dependencies = 
    [   MemoryDep('primals_93', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_94', c1, {c0: 100, c1: 768})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (76800, 1)
op210.sizes = ([100, 768], [])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_94_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op210_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_93', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_94', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf210', get_index_3, add, None)
        return store
op205_op206_op207_op209_op210_op411.snodes[5] =
op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 100})]
op411.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 100})]
op411.met_dependencies = []
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf411.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (100, 1)
op411.sizes = ([100], [])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf411_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op411_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf411', get_index_1, mul, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='primals_96', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 230400})]
op212.unmet_dependencies = [MemoryDep('buf211', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op212.met_dependencies = [MemoryDep('primals_95', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (230400, 1)
op212.sizes = ([3, 100, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op212_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf212', get_index_2, add, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 76800})]
op213.unmet_dependencies = [MemoryDep('buf212', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (76800, 1)
op213.sizes = ([50, 2, 768], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op213_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf213', get_index_1, load, None)
        return store


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 76800})]
op214.unmet_dependencies = [   MemoryDep('buf212', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (76800, 1)
op214.sizes = ([50, 2, 768], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op214_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf214', get_index_1, load, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 76800})]
op215.unmet_dependencies = [   MemoryDep('buf212', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf215.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (76800, 1)
op215.sizes = ([50, 2, 768], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op215_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(FallbackKernel)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = 
    [   StarDep(name='buf213', mode=None),
        StarDep(name='buf214', mode=None),
        StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: FallbackKernel
    buf216.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf216.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
    ]
]
op216.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op217: ExternKernelSchedulerNode(MultiOutput)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: MultiOutput
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op217.node.kernel = None


op218: ExternKernelSchedulerNode(MultiOutput)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: MultiOutput
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf218.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op218.node.kernel = None


op219: ExternKernelSchedulerNode(MultiOutput)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: MultiOutput
    buf219.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf219.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op219.node.kernel = None


op220: ExternKernelSchedulerNode(MultiOutput)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: MultiOutput
    buf220.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf220.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op220.node.kernel = None


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 76800})]
op221.unmet_dependencies = [MemoryDep('buf217', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (76800, 1)
op221.sizes = ([50, 2, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op221_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf221', get_index_1, load, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='primals_97', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf222.users = [
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op222.node.kernel = extern_kernels.mm


op223_op224_op226_op227_op410: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op223_op224_op226_op227_op410.writes = 
    [   MemoryDep('buf223', c0, {c0: 100}),
        MemoryDep('buf224', c0, {c0: 100}),
        MemoryDep('buf226', c0, {c0: 76800}),
        MemoryDep('buf227', c0, {c0: 76800}),
        MemoryDep('buf410', c0, {c0: 100})]
op223_op224_op226_op227_op410.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 76800}), MemoryDep('buf222', c0, {c0: 76800})]
op223_op224_op226_op227_op410.met_dependencies = 
    [   MemoryDep('primals_100', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_98', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op223_op224_op226_op227_op410.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
    ]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf410.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op223_op224_op226_op227_op410.snodes[0] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 100})]
op223.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 76800}), MemoryDep('buf222', c0, {c0: 76800})]
op223.met_dependencies = [MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (100, 768)
op223.sizes = ([100], [768])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op223_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem)
        return store_reduction
op223_op224_op226_op227_op410.snodes[1] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 100})]
op224.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 76800}), MemoryDep('buf222', c0, {c0: 76800})]
op224.met_dependencies = [MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (100, 768)
op224.sizes = ([100], [768])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op224_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf224', get_index_3, getitem_1)
        return store_reduction
op223_op224_op226_op227_op410.snodes[2] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 76800})]
op226.unmet_dependencies = 
    [   MemoryDep('buf205', c0, {c0: 76800}),
        MemoryDep('buf222', c0, {c0: 76800}),
        MemoryDep('buf223', c0, {c0: 100}),
        MemoryDep('buf224', c0, {c0: 100})]
op226.met_dependencies = [MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (76800, 1)
op226.sizes = ([100, 768], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op226_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf223', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf224', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf226', get_index_5, mul, None)
        return store
op223_op224_op226_op227_op410.snodes[3] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 76800})]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 76800})]
op227.met_dependencies = 
    [   MemoryDep('primals_100', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (76800, 1)
op227.sizes = ([100, 768], [])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_100_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op227_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_99', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_100', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf227', get_index_3, add, None)
        return store
op223_op224_op226_op227_op410.snodes[4] =
op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 100})]
op410.unmet_dependencies = [MemoryDep('buf224', c0, {c0: 100})]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf410.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (100, 1)
op410.sizes = ([100], [])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf410_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op410_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf410', get_index_1, mul, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='primals_101', mode=None), StarDep(name='primals_102', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op228.node.kernel = extern_kernels.addmm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 307200})]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 307200})]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (307200, 1)
op229.sizes = ([307200], [])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op229_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf229', get_index_2, mul_1, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='primals_103', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op231.unmet_dependencies = 
    [   MemoryDep('buf205', c0, {c0: 76800}),
        MemoryDep('buf222', c0, {c0: 76800}),
        MemoryDep('buf230', c0, {c0: 76800})]
op231.met_dependencies = 
    [   MemoryDep('primals_104', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (76800, 1)
op231.sizes = ([50, 2, 768], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_104_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
class op231_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p0 + 38400*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_104', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf231', get_index_5, add_3, None)
        return store


op370: ExternKernelSchedulerNode(ExternKernelAlloc)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf369', mode=None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ExternKernelAlloc
    buf370.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=True, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.convolution


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 100})]
op233.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 76800})]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (100, 768)
op233.sizes = ([100], [768])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
class op233_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem_1)
        return store_reduction


op235_op232_op236: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op235_op232_op236.writes = 
    [   MemoryDep('buf232', c0, {c0: 100}),
        MemoryDep('buf235', c0, {c0: 100}),
        MemoryDep('buf236', c0, {c0: 76800})]
op235_op232_op236.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf233', c0 + 50*c1, {c0: 50, c1: 2})]
op235_op232_op236.met_dependencies = 
    [   MemoryDep('primals_105', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_106', c1, {c0: 100, c1: 768})]
op235_op232_op236.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235_op232_op236.snodes[0] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 100})]
op235.unmet_dependencies = [MemoryDep('buf233', c0 + 50*c1, {c0: 50, c1: 2})]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (100, 1)
op235.sizes = ([50, 2], [])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op235_loop_body:
    var_ranges = {p0: 50, p1: 2}
    index0 = p0 + 50*p1
    index1 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf235', get_index_1, rsqrt, None)
        return store
op235_op232_op236.snodes[1] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 100})]
op232.unmet_dependencies = [MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (100, 768)
op232.sizes = ([50, 2], [768])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op232_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_1, getitem)
        return store_reduction
op235_op232_op236.snodes[2] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 76800})]
op236.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf232', c0, {c0: 100}),
        MemoryDep('buf235', c0, {c0: 100})]
op236.met_dependencies = 
    [   MemoryDep('primals_105', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_106', c1, {c0: 100, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (76800, 1)
op236.sizes = ([50, 2, 768], [])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_106_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op236_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 2*p0 + p1
    index2 = p2
    index3 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_105', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_106', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf236', get_index_5, add, None)
        return store


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 41472})]
op371.unmet_dependencies = [MemoryDep('buf370', 12544*c0 + 1792*c1 + c2 - 2048, {c0: 2, c1: 9, c2: 2304})]
op371.met_dependencies = [MemoryDep('primals_168', c1, {c0: 162, c1: 256})]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf371.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op371.group.device = cuda:0
op371.group.iteration = (41472, 1)
op371.sizes = ([2, 9, 9, 256], [])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_168_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf371_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
class op371_loop_body:
    var_ranges = {p0: 2, p1: 9, p2: 9, p3: 256}
    index0 = p1 - 1
    index1 = p2 - 1
    index2 = 12544*p0 + 1792*p1 + 256*p2 + p3 - 2048
    index3 = p3
    index4 = 20736*p0 + 2304*p1 + 256*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf371', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('primals_168', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf370', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_168', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf370', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_168', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        return where


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 25088})]
op400.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 25088})]
op400.met_dependencies = [MemoryDep('primals_168', c1, {c0: 98, c1: 256})]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf400.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (25088, 1)
op400.sizes = ([98, 256], [])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_168_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf400_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op400_loop_body:
    var_ranges = {p0: 98, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_168', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf370', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_168', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf370', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_168', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        constant_2 = ops.constant(0.0, torch.float32)
        gt_1 = ops.gt(where, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf400', get_index_6, gt_1, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='primals_108', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.mm


op372: ExternKernelSchedulerNode(ExternKernelAlloc)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf371', mode=None)]
op372.met_dependencies = [StarDep(name='primals_169', mode=None)]
op372.outputs = [
    buf372: ExternKernelAlloc
    buf372.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op372.node.kernel = extern_kernels.convolution


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 230400})]
op238.unmet_dependencies = [MemoryDep('buf237', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op238.met_dependencies = [MemoryDep('primals_107', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (230400, 1)
op238.sizes = ([3, 100, 768], [])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op238_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_107', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf238', get_index_2, add, None)
        return store


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 18432})]
op377.unmet_dependencies = [MemoryDep('buf372', 1536*c0 + c1 + 256*c2, {c0: 12, c1: 256, c2: 6})]
op377.met_dependencies = []
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (18432, 1)
op377.sizes = ([12, 256, 6], [])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
buf377_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
class op377_loop_body:
    var_ranges = {p0: 12, p1: 256, p2: 6}
    index0 = 1536*p0 + p1 + 256*p2
    index1 = 1536*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf377', get_index_1, load, None)
        return store


op378: ExternKernelSchedulerNode(ExternKernelAlloc)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf376', mode=None), StarDep(name='buf377', mode=None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ExternKernelAlloc
    buf378.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf378.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=True, is_weak=False)]
]
op378.node.kernel = extern_kernels.convolution


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 76800})]
op239.unmet_dependencies = [MemoryDep('buf238', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (76800, 1)
op239.sizes = ([50, 2, 768], [])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op239_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf239', get_index_1, load, None)
        return store


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 76800})]
op240.unmet_dependencies = [   MemoryDep('buf238', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (76800, 1)
op240.sizes = ([50, 2, 768], [])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op240_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 76800})]
op241.unmet_dependencies = [   MemoryDep('buf238', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf241.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op241.group.device = cuda:0
op241.group.iteration = (76800, 1)
op241.sizes = ([50, 2, 768], [])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op241_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf241', get_index_1, load, None)
        return store


op242: ExternKernelSchedulerNode(FallbackKernel)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = 
    [   StarDep(name='buf239', mode=None),
        StarDep(name='buf240', mode=None),
        StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: FallbackKernel
    buf242.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
    ]
]
op242.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op243: ExternKernelSchedulerNode(MultiOutput)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: MultiOutput
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op243.node.kernel = None


op244: ExternKernelSchedulerNode(MultiOutput)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: MultiOutput
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf244.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op244.node.kernel = None


op245: ExternKernelSchedulerNode(MultiOutput)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: MultiOutput
    buf245.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf245.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op245.node.kernel = None


op246: ExternKernelSchedulerNode(MultiOutput)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: MultiOutput
    buf246.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf246.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op246.node.kernel = None


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 76800})]
op247.unmet_dependencies = [MemoryDep('buf243', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (76800, 1)
op247.sizes = ([50, 2, 768], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op247_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf247', get_index_1, load, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='primals_109', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.mm


op249_op250_op252_op253_op409: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op249_op250_op252_op253_op409.writes = 
    [   MemoryDep('buf249', c0, {c0: 100}),
        MemoryDep('buf250', c0, {c0: 100}),
        MemoryDep('buf252', c0, {c0: 76800}),
        MemoryDep('buf253', c0, {c0: 76800}),
        MemoryDep('buf409', c0, {c0: 100})]
op249_op250_op252_op253_op409.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf248', c0, {c0: 76800})]
op249_op250_op252_op253_op409.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_111', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_112', c1, {c0: 100, c1: 768})]
op249_op250_op252_op253_op409.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
    ]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf409.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op249_op250_op252_op253_op409.snodes[0] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 100})]
op249.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf248', c0, {c0: 76800})]
op249.met_dependencies = [MemoryDep('primals_110', c1, {c0: 100, c1: 768})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (100, 768)
op249.sizes = ([50, 2], [768])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op249_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf248', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf249', get_index_3, getitem)
        return store_reduction
op249_op250_op252_op253_op409.snodes[1] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 100})]
op250.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf248', c0, {c0: 76800})]
op250.met_dependencies = [MemoryDep('primals_110', c1, {c0: 100, c1: 768})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (100, 768)
op250.sizes = ([50, 2], [768])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op250_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf248', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem_1)
        return store_reduction
op249_op250_op252_op253_op409.snodes[2] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 76800})]
op252.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf248', c0, {c0: 76800}),
        MemoryDep('buf249', c0, {c0: 100}),
        MemoryDep('buf250', c0, {c0: 100})]
op252.met_dependencies = [MemoryDep('primals_110', c1, {c0: 100, c1: 768})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (76800, 1)
op252.sizes = ([50, 2, 768], [])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op252_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf248', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf249', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf250', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf252', get_index_5, mul, None)
        return store
op249_op250_op252_op253_op409.snodes[3] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 76800})]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800})]
op253.met_dependencies = 
    [   MemoryDep('primals_111', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_112', c1, {c0: 100, c1: 768})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (76800, 1)
op253.sizes = ([100, 768], [])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_112_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op253_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_111', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_112', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf253', get_index_3, add, None)
        return store
op249_op250_op252_op253_op409.snodes[4] =
op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 100})]
op409.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 100})]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf409.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (100, 1)
op409.sizes = ([100], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf409_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op409_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf409', get_index_1, mul, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='primals_113', mode=None), StarDep(name='primals_114', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op254.node.kernel = extern_kernels.addmm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 307200})]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 307200})]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (307200, 1)
op255.sizes = ([307200], [])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op255_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf255', get_index_2, mul_1, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='primals_115', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op256.node.kernel = extern_kernels.mm


op257_op258_op259_op261_op262_op408: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op257_op258_op259_op261_op262_op408.writes = 
    [   MemoryDep('buf257', c0, {c0: 76800}),
        MemoryDep('buf258', c0, {c0: 100}),
        MemoryDep('buf259', c0, {c0: 100}),
        MemoryDep('buf261', c0, {c0: 76800}),
        MemoryDep('buf262', c0, {c0: 76800}),
        MemoryDep('buf408', c0, {c0: 100})]
op257_op258_op259_op261_op262_op408.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf248', c0, {c0: 76800}),
        MemoryDep('buf256', c0, {c0: 76800})]
op257_op258_op259_op261_op262_op408.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_116', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_117', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_118', c1, {c0: 100, c1: 768})]
op257_op258_op259_op261_op262_op408.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=True, is_weak=False),
    ]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf408.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op257_op258_op259_op261_op262_op408.snodes[0] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 76800})]
op257.unmet_dependencies = 
    [   MemoryDep('buf231', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf248', c0, {c0: 76800}),
        MemoryDep('buf256', c0, {c0: 76800})]
op257.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_116', c1, {c0: 100, c1: 768})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (76800, 1)
op257.sizes = ([50, 2, 768], [])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[768, 38400, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op257_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf248', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf256', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_116', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf257', get_index_5, add_3, None)
        return store
op257_op258_op259_op261_op262_op408.snodes[1] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 100})]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 76800})]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (100, 768)
op258.sizes = ([100], [768])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op258_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf258', get_index_1, getitem)
        return store_reduction
op257_op258_op259_op261_op262_op408.snodes[2] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 100})]
op259.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 76800})]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=True, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (100, 768)
op259.sizes = ([100], [768])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op259_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_1, getitem_1)
        return store_reduction
op257_op258_op259_op261_op262_op408.snodes[3] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 76800})]
op261.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 76800}),
        MemoryDep('buf258', c0, {c0: 100}),
        MemoryDep('buf259', c0, {c0: 100})]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (76800, 1)
op261.sizes = ([100, 768], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op261_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf259', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf261', get_index_3, mul, None)
        return store
op257_op258_op259_op261_op262_op408.snodes[4] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 76800})]
op262.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 76800})]
op262.met_dependencies = 
    [   MemoryDep('primals_117', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_118', c1, {c0: 100, c1: 768})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (76800, 1)
op262.sizes = ([100, 768], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_118_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op262_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_117', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_118', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf262', get_index_3, add, None)
        return store
op257_op258_op259_op261_op262_op408.snodes[5] =
op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 100})]
op408.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 100})]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf408.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (100, 1)
op408.sizes = ([100], [])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf408_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op408_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf408', get_index_1, mul, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='primals_120', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.node.kernel = extern_kernels.mm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 230400})]
op264.unmet_dependencies = [MemoryDep('buf263', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op264.met_dependencies = [MemoryDep('primals_119', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (230400, 1)
op264.sizes = ([3, 100, 768], [])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op264_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_119', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf264', get_index_2, add, None)
        return store


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 76800})]
op265.unmet_dependencies = [MemoryDep('buf264', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (76800, 1)
op265.sizes = ([50, 2, 768], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op265_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 76800})]
op266.unmet_dependencies = [   MemoryDep('buf264', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op266.group.device = cuda:0
op266.group.iteration = (76800, 1)
op266.sizes = ([50, 2, 768], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op266_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf266', get_index_1, load, None)
        return store


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 76800})]
op267.unmet_dependencies = [   MemoryDep('buf264', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf267.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (76800, 1)
op267.sizes = ([50, 2, 768], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op267_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf267', get_index_1, load, None)
        return store


op268: ExternKernelSchedulerNode(FallbackKernel)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = 
    [   StarDep(name='buf265', mode=None),
        StarDep(name='buf266', mode=None),
        StarDep(name='buf267', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: FallbackKernel
    buf268.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf268.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
    ]
]
op268.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op269: ExternKernelSchedulerNode(MultiOutput)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: MultiOutput
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op269.node.kernel = None


op270: ExternKernelSchedulerNode(MultiOutput)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: MultiOutput
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf270.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op270.node.kernel = None


op271: ExternKernelSchedulerNode(MultiOutput)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: MultiOutput
    buf271.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf271.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op271.node.kernel = None


op272: ExternKernelSchedulerNode(MultiOutput)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: MultiOutput
    buf272.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf272.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op272.node.kernel = None


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 76800})]
op273.unmet_dependencies = [MemoryDep('buf269', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (76800, 1)
op273.sizes = ([50, 2, 768], [])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op273_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf273', get_index_1, load, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='primals_121', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275_op276_op278_op279_op407: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op275_op276_op278_op279_op407.writes = 
    [   MemoryDep('buf275', c0, {c0: 100}),
        MemoryDep('buf276', c0, {c0: 100}),
        MemoryDep('buf278', c0, {c0: 76800}),
        MemoryDep('buf279', c0, {c0: 76800}),
        MemoryDep('buf407', c0, {c0: 100})]
op275_op276_op278_op279_op407.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 76800}), MemoryDep('buf274', c0, {c0: 76800})]
op275_op276_op278_op279_op407.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_123', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_124', c1, {c0: 100, c1: 768})]
op275_op276_op278_op279_op407.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
    ]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf407.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op275_op276_op278_op279_op407.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 100})]
op275.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 76800}), MemoryDep('buf274', c0, {c0: 76800})]
op275.met_dependencies = [MemoryDep('primals_122', c1, {c0: 100, c1: 768})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (100, 768)
op275.sizes = ([100], [768])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op275_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem)
        return store_reduction
op275_op276_op278_op279_op407.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 100})]
op276.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 76800}), MemoryDep('buf274', c0, {c0: 76800})]
op276.met_dependencies = [MemoryDep('primals_122', c1, {c0: 100, c1: 768})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (100, 768)
op276.sizes = ([100], [768])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op276_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem_1)
        return store_reduction
op275_op276_op278_op279_op407.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 76800})]
op278.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 76800}),
        MemoryDep('buf274', c0, {c0: 76800}),
        MemoryDep('buf275', c0, {c0: 100}),
        MemoryDep('buf276', c0, {c0: 100})]
op278.met_dependencies = [MemoryDep('primals_122', c1, {c0: 100, c1: 768})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (76800, 1)
op278.sizes = ([100, 768], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op278_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf276', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf278', get_index_5, mul, None)
        return store
op275_op276_op278_op279_op407.snodes[3] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 76800})]
op279.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 76800})]
op279.met_dependencies = 
    [   MemoryDep('primals_123', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_124', c1, {c0: 100, c1: 768})]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (76800, 1)
op279.sizes = ([100, 768], [])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_124_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op279_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_123', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_124', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf279', get_index_3, add, None)
        return store
op275_op276_op278_op279_op407.snodes[4] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 100})]
op407.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 100})]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf407.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (100, 1)
op407.sizes = ([100], [])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op407_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf407', get_index_1, mul, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='primals_125', mode=None), StarDep(name='primals_126', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.addmm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 307200})]
op281.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 307200})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (307200, 1)
op281.sizes = ([307200], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op281_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf280', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf281', get_index_2, mul_1, None)
        return store


op282: ExternKernelSchedulerNode(ExternKernelOut)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op282.met_dependencies = [StarDep(name='primals_127', mode=None)]
op282.outputs = [
    buf282: ExternKernelOut
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
]
op282.node.kernel = extern_kernels.mm


op283_op284_op285_op287_op288_op406: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op283_op284_op285_op287_op288_op406.writes = 
    [   MemoryDep('buf283', c0, {c0: 76800}),
        MemoryDep('buf284', c0, {c0: 100}),
        MemoryDep('buf285', c0, {c0: 100}),
        MemoryDep('buf287', c0, {c0: 76800}),
        MemoryDep('buf288', c0, {c0: 76800}),
        MemoryDep('buf406', c0, {c0: 100})]
op283_op284_op285_op287_op288_op406.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 76800}),
        MemoryDep('buf274', c0, {c0: 76800}),
        MemoryDep('buf282', c0, {c0: 76800})]
op283_op284_op285_op287_op288_op406.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_128', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_129', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_130', c1, {c0: 100, c1: 768})]
op283_op284_op285_op287_op288_op406.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False),
    ]
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf406.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op283_op284_op285_op287_op288_op406.snodes[0] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 76800})]
op283.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 76800}),
        MemoryDep('buf274', c0, {c0: 76800}),
        MemoryDep('buf282', c0, {c0: 76800})]
op283.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_128', c1, {c0: 100, c1: 768})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (76800, 1)
op283.sizes = ([100, 768], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_128_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op283_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf282', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_128', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf283', get_index_5, add_3, None)
        return store
op283_op284_op285_op287_op288_op406.snodes[1] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 100})]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 76800})]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (100, 768)
op284.sizes = ([100], [768])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op284_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf284', get_index_1, getitem)
        return store_reduction
op283_op284_op285_op287_op288_op406.snodes[2] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 100})]
op285.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 76800})]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (100, 768)
op285.sizes = ([100], [768])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op285_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf285', get_index_1, getitem_1)
        return store_reduction
op283_op284_op285_op287_op288_op406.snodes[3] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 76800})]
op287.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 76800}),
        MemoryDep('buf284', c0, {c0: 100}),
        MemoryDep('buf285', c0, {c0: 100})]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (76800, 1)
op287.sizes = ([100, 768], [])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op287_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf284', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf285', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf287', get_index_3, mul, None)
        return store
op283_op284_op285_op287_op288_op406.snodes[4] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 76800})]
op288.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 76800})]
op288.met_dependencies = 
    [   MemoryDep('primals_129', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_130', c1, {c0: 100, c1: 768})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (76800, 1)
op288.sizes = ([100, 768], [])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_130_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op288_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_129', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_130', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf288', get_index_3, add, None)
        return store
op283_op284_op285_op287_op288_op406.snodes[5] =
op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 100})]
op406.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 100})]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf406.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (100, 1)
op406.sizes = ([100], [])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op406_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf406', get_index_1, mul, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op289.met_dependencies = [StarDep(name='primals_132', mode=None)]
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.mm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 230400})]
op290.unmet_dependencies = [MemoryDep('buf289', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op290.met_dependencies = [MemoryDep('primals_131', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf290.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
    ]
]
op290.group.device = cuda:0
op290.group.iteration = (230400, 1)
op290.sizes = ([3, 100, 768], [])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op290_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf290', get_index_2, add, None)
        return store


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 76800})]
op291.unmet_dependencies = [MemoryDep('buf290', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op291.met_dependencies = []
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf291.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (76800, 1)
op291.sizes = ([50, 2, 768], [])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op291_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf291', get_index_1, load, None)
        return store


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 76800})]
op292.unmet_dependencies = [   MemoryDep('buf290', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (76800, 1)
op292.sizes = ([50, 2, 768], [])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op292_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf292', get_index_1, load, None)
        return store


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 76800})]
op293.unmet_dependencies = [   MemoryDep('buf290', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (76800, 1)
op293.sizes = ([50, 2, 768], [])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op293_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf293', get_index_1, load, None)
        return store


op294: ExternKernelSchedulerNode(FallbackKernel)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = 
    [   StarDep(name='buf291', mode=None),
        StarDep(name='buf292', mode=None),
        StarDep(name='buf293', mode=None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: FallbackKernel
    buf294.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf294.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
]
op294.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op295: ExternKernelSchedulerNode(MultiOutput)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: MultiOutput
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op295.node.kernel = None


op296: ExternKernelSchedulerNode(MultiOutput)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: MultiOutput
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf296.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op296.node.kernel = None


op297: ExternKernelSchedulerNode(MultiOutput)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: MultiOutput
    buf297.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf297.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op297.node.kernel = None


op298: ExternKernelSchedulerNode(MultiOutput)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: MultiOutput
    buf298.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf298.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op298.node.kernel = None


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 76800})]
op299.unmet_dependencies = [MemoryDep('buf295', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (76800, 1)
op299.sizes = ([50, 2, 768], [])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op299_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf299', get_index_1, load, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='primals_133', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False),
    ]
]
op300.node.kernel = extern_kernels.mm


op301_op302_op304_op305_op405: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op301_op302_op304_op305_op405.writes = 
    [   MemoryDep('buf301', c0, {c0: 100}),
        MemoryDep('buf302', c0, {c0: 100}),
        MemoryDep('buf304', c0, {c0: 76800}),
        MemoryDep('buf305', c0, {c0: 76800}),
        MemoryDep('buf405', c0, {c0: 100})]
op301_op302_op304_op305_op405.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 76800}), MemoryDep('buf300', c0, {c0: 76800})]
op301_op302_op304_op305_op405.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_135', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_136', c1, {c0: 100, c1: 768})]
op301_op302_op304_op305_op405.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
    ]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf304.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf405.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op301_op302_op304_op305_op405.snodes[0] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 100})]
op301.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 76800}), MemoryDep('buf300', c0, {c0: 76800})]
op301.met_dependencies = [MemoryDep('primals_134', c1, {c0: 100, c1: 768})]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (100, 768)
op301.sizes = ([100], [768])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op301_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem)
        return store_reduction
op301_op302_op304_op305_op405.snodes[1] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 100})]
op302.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 76800}), MemoryDep('buf300', c0, {c0: 76800})]
op302.met_dependencies = [MemoryDep('primals_134', c1, {c0: 100, c1: 768})]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (100, 768)
op302.sizes = ([100], [768])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op302_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf302', get_index_3, getitem_1)
        return store_reduction
op301_op302_op304_op305_op405.snodes[2] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 76800})]
op304.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 76800}),
        MemoryDep('buf300', c0, {c0: 76800}),
        MemoryDep('buf301', c0, {c0: 100}),
        MemoryDep('buf302', c0, {c0: 100})]
op304.met_dependencies = [MemoryDep('primals_134', c1, {c0: 100, c1: 768})]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf304.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op304.group.device = cuda:0
op304.group.iteration = (76800, 1)
op304.sizes = ([100, 768], [])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op304_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf301', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf302', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf304', get_index_5, mul, None)
        return store
op301_op302_op304_op305_op405.snodes[3] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 76800})]
op305.unmet_dependencies = [MemoryDep('buf304', c0, {c0: 76800})]
op305.met_dependencies = 
    [   MemoryDep('primals_135', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_136', c1, {c0: 100, c1: 768})]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (76800, 1)
op305.sizes = ([100, 768], [])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_136_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op305_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_135', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_136', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf305', get_index_3, add, None)
        return store
op301_op302_op304_op305_op405.snodes[4] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 100})]
op405.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 100})]
op405.met_dependencies = []
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf405.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (100, 1)
op405.sizes = ([100], [])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf405_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op405_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf405', get_index_1, mul, None)
        return store


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op306.met_dependencies = [StarDep(name='primals_137', mode=None), StarDep(name='primals_138', mode=None)]
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op306.node.kernel = extern_kernels.addmm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 307200})]
op307.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 307200})]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (307200, 1)
op307.sizes = ([307200], [])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf307_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op307_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf306', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf307', get_index_2, mul_1, None)
        return store


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op308.met_dependencies = [StarDep(name='primals_139', mode=None)]
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf308.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False)]
]
op308.node.kernel = extern_kernels.mm


op309_op310_op311_op313_op314_op404: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op309_op310_op311_op313_op314_op404.writes = 
    [   MemoryDep('buf309', c0, {c0: 76800}),
        MemoryDep('buf310', c0, {c0: 100}),
        MemoryDep('buf311', c0, {c0: 100}),
        MemoryDep('buf313', c0, {c0: 76800}),
        MemoryDep('buf314', c0, {c0: 76800}),
        MemoryDep('buf404', c0, {c0: 100})]
op309_op310_op311_op313_op314_op404.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 76800}),
        MemoryDep('buf300', c0, {c0: 76800}),
        MemoryDep('buf308', c0, {c0: 76800})]
op309_op310_op311_op313_op314_op404.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_140', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_141', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_142', c1, {c0: 100, c1: 768})]
op309_op310_op311_op313_op314_op404.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
    ]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf404.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op309_op310_op311_op313_op314_op404.snodes[0] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 76800})]
op309.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 76800}),
        MemoryDep('buf300', c0, {c0: 76800}),
        MemoryDep('buf308', c0, {c0: 76800})]
op309.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_140', c1, {c0: 100, c1: 768})]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (76800, 1)
op309.sizes = ([100, 768], [])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_140_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op309_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf300', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf308', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_140', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf309', get_index_5, add_3, None)
        return store
op309_op310_op311_op313_op314_op404.snodes[1] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 100})]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 76800})]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (100, 768)
op310.sizes = ([100], [768])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op310_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf310', get_index_1, getitem)
        return store_reduction
op309_op310_op311_op313_op314_op404.snodes[2] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 100})]
op311.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 76800})]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
    ]
]
op311.group.device = cuda:0
op311.group.iteration = (100, 768)
op311.sizes = ([100], [768])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op311_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf311', get_index_1, getitem_1)
        return store_reduction
op309_op310_op311_op313_op314_op404.snodes[3] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 76800})]
op313.unmet_dependencies = 
    [   MemoryDep('buf309', c0, {c0: 76800}),
        MemoryDep('buf310', c0, {c0: 100}),
        MemoryDep('buf311', c0, {c0: 100})]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (76800, 1)
op313.sizes = ([100, 768], [])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf313_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op313_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf310', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf311', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf313', get_index_3, mul, None)
        return store
op309_op310_op311_op313_op314_op404.snodes[4] =
op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 76800})]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 76800})]
op314.met_dependencies = 
    [   MemoryDep('primals_141', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_142', c1, {c0: 100, c1: 768})]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (76800, 1)
op314.sizes = ([100, 768], [])
buf313_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_142_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf314_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op314_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_141', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_142', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf314', get_index_3, add, None)
        return store
op309_op310_op311_op313_op314_op404.snodes[5] =
op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 100})]
op404.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 100})]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf404.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (100, 1)
op404.sizes = ([100], [])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf404_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op404_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf404', get_index_1, mul, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='primals_144', mode=None)]
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf315.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = extern_kernels.mm


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 230400})]
op316.unmet_dependencies = [MemoryDep('buf315', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 100, c2: 768})]
op316.met_dependencies = [MemoryDep('primals_143', 768*c0 + c2, {c0: 3, c1: 100, c2: 768})]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (230400, 1)
op316.sizes = ([3, 100, 768], [])
buf315_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
class op316_loop_body:
    var_ranges = {p0: 3, p1: 100, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 76800*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_143', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf316', get_index_2, add, None)
        return store


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 76800})]
op317.unmet_dependencies = [MemoryDep('buf316', 1536*c0 + c1 + 1536*((c1//1536)), {c0: 50, c1: 1536})]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (76800, 1)
op317.sizes = ([50, 2, 768], [])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op317_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536))
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf317', get_index_1, load, None)
        return store


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 76800})]
op318.unmet_dependencies = [   MemoryDep('buf316', 1536*c0 + c1 + 1536*((c1//1536)) + 76800, {c0: 50, c1: 1536})]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf318.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (76800, 1)
op318.sizes = ([50, 2, 768], [])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op318_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 76800
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf318', get_index_1, load, None)
        return store


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 76800})]
op319.unmet_dependencies = [   MemoryDep('buf316', 1536*c0 + c1 + 1536*((c1//1536)) + 153600, {c0: 50, c1: 1536})]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf319.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (76800, 1)
op319.sizes = ([50, 2, 768], [])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[3, 50, 2, 768], stride=[76800, 1536, 768, 1])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op319_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 1536*p0 + 768*p1 + p2 + 1536*(((768*p1 + p2)//1536)) + 153600
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf319', get_index_1, load, None)
        return store


op320: ExternKernelSchedulerNode(FallbackKernel)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = 
    [   StarDep(name='buf317', mode=None),
        StarDep(name='buf318', mode=None),
        StarDep(name='buf319', mode=None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: FallbackKernel
    buf320.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf320.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op320.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op321: ExternKernelSchedulerNode(MultiOutput)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: MultiOutput
    buf321.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op321.node.kernel = None


op322: ExternKernelSchedulerNode(MultiOutput)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: MultiOutput
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64], stride=[768, 64, 1])
    buf322.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op322.node.kernel = None


op323: ExternKernelSchedulerNode(MultiOutput)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: MultiOutput
    buf323.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf323.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op323.node.kernel = None


op324: ExternKernelSchedulerNode(MultiOutput)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: MultiOutput
    buf324.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf324.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op324.node.kernel = None


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 76800})]
op325.unmet_dependencies = [MemoryDep('buf321', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (76800, 1)
op325.sizes = ([50, 2, 768], [])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op325_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf325', get_index_1, load, None)
        return store


op326: ExternKernelSchedulerNode(ExternKernelOut)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf325', mode=None)]
op326.met_dependencies = [StarDep(name='primals_145', mode=None)]
op326.outputs = [
    buf326: ExternKernelOut
    buf326.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf326.users = [
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
]
op326.node.kernel = extern_kernels.mm


op327_op328_op330_op331_op403: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op327_op328_op330_op331_op403.writes = 
    [   MemoryDep('buf327', c0, {c0: 100}),
        MemoryDep('buf328', c0, {c0: 100}),
        MemoryDep('buf330', c0, {c0: 76800}),
        MemoryDep('buf331', c0, {c0: 76800}),
        MemoryDep('buf403', c0, {c0: 100})]
op327_op328_op330_op331_op403.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 76800}), MemoryDep('buf326', c0, {c0: 76800})]
op327_op328_op330_op331_op403.met_dependencies = 
    [   MemoryDep('primals_146', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_147', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_148', c1, {c0: 100, c1: 768})]
op327_op328_op330_op331_op403.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf327.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
    ]
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf403.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op327_op328_op330_op331_op403.snodes[0] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 100})]
op327.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 76800}), MemoryDep('buf326', c0, {c0: 76800})]
op327.met_dependencies = [MemoryDep('primals_146', c1, {c0: 100, c1: 768})]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf327.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (100, 768)
op327.sizes = ([100], [768])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op327_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf327', get_index_3, getitem)
        return store_reduction
op327_op328_op330_op331_op403.snodes[1] =
op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 100})]
op328.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 76800}), MemoryDep('buf326', c0, {c0: 76800})]
op328.met_dependencies = [MemoryDep('primals_146', c1, {c0: 100, c1: 768})]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (100, 768)
op328.sizes = ([100], [768])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op328_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf328', get_index_3, getitem_1)
        return store_reduction
op327_op328_op330_op331_op403.snodes[2] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 76800})]
op330.unmet_dependencies = 
    [   MemoryDep('buf309', c0, {c0: 76800}),
        MemoryDep('buf326', c0, {c0: 76800}),
        MemoryDep('buf327', c0, {c0: 100}),
        MemoryDep('buf328', c0, {c0: 100})]
op330.met_dependencies = [MemoryDep('primals_146', c1, {c0: 100, c1: 768})]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (76800, 1)
op330.sizes = ([100, 768], [])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op330_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf327', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf328', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf330', get_index_5, mul, None)
        return store
op327_op328_op330_op331_op403.snodes[3] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 76800})]
op331.unmet_dependencies = [MemoryDep('buf330', c0, {c0: 76800})]
op331.met_dependencies = 
    [   MemoryDep('primals_147', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_148', c1, {c0: 100, c1: 768})]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (76800, 1)
op331.sizes = ([100, 768], [])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_148_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op331_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_147', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_148', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf331', get_index_3, add, None)
        return store
op327_op328_op330_op331_op403.snodes[4] =
op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 100})]
op403.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 100})]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
    buf403.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (100, 1)
op403.sizes = ([100], [])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf403_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 1])
class op403_loop_body:
    var_ranges = {p0: 100}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf403', get_index_1, mul, None)
        return store


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='primals_149', mode=None), StarDep(name='primals_150', mode=None)]
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op332.node.kernel = extern_kernels.addmm


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 307200})]
op333.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 307200})]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf333.users = [NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (307200, 1)
op333.sizes = ([307200], [])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op333_loop_body:
    var_ranges = {p0: 307200}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(load_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf333', get_index_2, mul_1, None)
        return store


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf333', mode=None)]
op334.met_dependencies = [StarDep(name='primals_151', mode=None)]
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf334.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False)]
]
op334.node.kernel = extern_kernels.mm


op335_op336_op337_op339_op340_op402: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op335_op336_op337_op339_op340_op402.writes = 
    [   MemoryDep('buf335', c0, {c0: 1536}),
        MemoryDep('buf336', c0, {c0: 2}),
        MemoryDep('buf337', c0, {c0: 2}),
        MemoryDep('buf339', c0, {c0: 1536}),
        MemoryDep('buf340', c0, {c0: 1536}),
        MemoryDep('buf402', c0, {c0: 2})]
op335_op336_op337_op339_op340_op402.unmet_dependencies = 
    [   MemoryDep('buf309', c0, {c0: 1536}),
        MemoryDep('buf326', c0, {c0: 1536}),
        MemoryDep('buf334', c0, {c0: 1536})]
op335_op336_op337_op339_op340_op402.met_dependencies = 
    [   MemoryDep('primals_146', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_152', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_153', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_154', c1, {c0: 2, c1: 768})]
op335_op336_op337_op339_op340_op402.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False),
    ]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf402.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op335_op336_op337_op339_op340_op402.snodes[0] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 1536})]
op335.unmet_dependencies = 
    [   MemoryDep('buf309', c0, {c0: 1536}),
        MemoryDep('buf326', c0, {c0: 1536}),
        MemoryDep('buf334', c0, {c0: 1536})]
op335.met_dependencies = 
    [   MemoryDep('primals_146', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_152', c1, {c0: 2, c1: 768})]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (1536, 1)
op335.sizes = ([2, 768], [])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_152_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op335_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf334', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_152', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf335', get_index_5, add_3, None)
        return store
op335_op336_op337_op339_op340_op402.snodes[1] =
op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 2})]
op336.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 1536})]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (2, 768)
op336.sizes = ([2], [768])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
class op336_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf336', get_index_1, getitem)
        return store_reduction
op335_op336_op337_op339_op340_op402.snodes[2] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2})]
op337.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 1536})]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (2, 768)
op337.sizes = ([2], [768])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
class op337_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf337', get_index_1, getitem_1)
        return store_reduction
op335_op336_op337_op339_op340_op402.snodes[3] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 1536})]
op339.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 1536}),
        MemoryDep('buf336', c0, {c0: 2}),
        MemoryDep('buf337', c0, {c0: 2})]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (1536, 1)
op339.sizes = ([2, 768], [])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op339_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf336', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf337', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf339', get_index_3, mul, None)
        return store
op335_op336_op337_op339_op340_op402.snodes[4] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1536})]
op340.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 1536})]
op340.met_dependencies = 
    [   MemoryDep('primals_153', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_154', c1, {c0: 2, c1: 768})]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1536, 1)
op340.sizes = ([2, 768], [])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
primals_153_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_154_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf340_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op340_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_153', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_154', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf340', get_index_3, add, None)
        return store
op335_op336_op337_op339_op340_op402.snodes[5] =
op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 2})]
op402.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 2})]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf402.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (2, 1)
op402.sizes = ([2], [])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
class op402_loop_body:
    var_ranges = {p0: 2}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf402', get_index_1, mul, None)
        return store


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op341.met_dependencies = [StarDep(name='primals_155', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda:0', torch.float32, size=[2, 512], stride=[512, 1])
    buf341.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op341.node.kernel = extern_kernels.mm


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf341', mode=None), StarDep(name='buf388', mode=None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False)]
]
op389.node.kernel = extern_kernels.mm


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 512})]
op390.unmet_dependencies = [MemoryDep('buf389', c0, {c0: 512})]
op390.met_dependencies = [MemoryDep('primals_177', c1, {c0: 2, c1: 256})]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf390.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op390.group.device = cuda:0
op390.group.iteration = (512, 1)
op390.sizes = ([2, 256], [])
buf389_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
primals_177_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf390_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
class op390_loop_body:
    var_ranges = {p0: 2, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_177', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf389', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_177', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf389', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_177', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf390', get_index_6, where, None)
        return store


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf390', mode=None), StarDep(name='buf394', mode=None)]
op396.met_dependencies = [StarDep(name='primals_181', mode=None)]
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op396.node.kernel = extern_kernels.addmm


op360_op397_op379_op398_op399: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op360_op397_op379_op398_op399.writes = 
    [   MemoryDep('buf360', c0, {c0: 18}),
        MemoryDep('buf379', c0, {c0: 18}),
        MemoryDep('buf397', c0, {c0: 2}),
        MemoryDep('buf398', c0, {c0: 2}),
        MemoryDep('buf399', c0, {c0: 2})]
op360_op397_op379_op398_op399.unmet_dependencies = 
    [   MemoryDep('buf359', c0, {c0: 18}),
        MemoryDep('buf378', c0, {c0: 18}),
        MemoryDep('buf396', c0, {c0: 2})]
op360_op397_op379_op398_op399.met_dependencies = [MemoryDep('primals_164', 0, {}), MemoryDep('primals_173', 0, {})]
op360_op397_op379_op398_op399.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf399.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op360_op397_op379_op398_op399.snodes[0] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 18})]
op360.unmet_dependencies = [MemoryDep('buf359', c0, {c0: 18})]
op360.met_dependencies = [MemoryDep('primals_164', 0, {})]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op360.group.device = cuda:0
op360.group.iteration = (18, 1)
op360.sizes = ([18], [])
buf359_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
primals_164_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf360_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
class op360_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_164', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf360', get_index_2, add, None)
        return store
op360_op397_op379_op398_op399.snodes[1] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 2})]
op397.unmet_dependencies = [MemoryDep('buf360', c0, {c0: 18})]
op397.met_dependencies = []
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (2, 9)
op397.sizes = ([2], [9])
buf360_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
buf397_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
class op397_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        constant = ops.constant(0.0, torch.float32)
        mul = ops.mul(constant, load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf360', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        abs_1 = ops.abs(load_2)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub = ops.sub(minimum, log1p)
        sub_1 = ops.sub(mul, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub_1)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf397', get_index_3, reduction)
        return store_reduction
op360_op397_op379_op398_op399.snodes[2] =
op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 18})]
op379.unmet_dependencies = [MemoryDep('buf378', c0, {c0: 18})]
op379.met_dependencies = [MemoryDep('primals_173', 0, {})]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op379.group.device = cuda:0
op379.group.iteration = (18, 1)
op379.sizes = ([18], [])
buf378_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
primals_173_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
class op379_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_173', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf379', get_index_2, add, None)
        return store
op360_op397_op379_op398_op399.snodes[3] =
op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 2})]
op398.unmet_dependencies = [MemoryDep('buf379', c0, {c0: 18})]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (2, 9)
op398.sizes = ([2], [9])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
buf398_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
class op398_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        constant = ops.constant(0.0, torch.float32)
        mul = ops.mul(constant, load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf379', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf379', get_index_2)
        abs_1 = ops.abs(load_2)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub = ops.sub(minimum, log1p)
        sub_1 = ops.sub(mul, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub_1)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf398', get_index_3, reduction)
        return store_reduction
op360_op397_op379_op398_op399.snodes[4] =
op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 2})]
op399.unmet_dependencies = 
    [   MemoryDep('buf396', c0, {c0: 2}),
        MemoryDep('buf397', c0, {c0: 2}),
        MemoryDep('buf398', c0, {c0: 2})]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf399.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (2, 1)
op399.sizes = ([2], [])
buf397_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
buf398_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
buf396_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf399_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
class op399_loop_body:
    var_ranges = {p0: 2}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        constant = ops.constant(9.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        add = ops.add(truediv, constant_1)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf398', get_index_1)
        constant_2 = ops.constant(9.0, torch.float32)
        truediv_1 = ops.truediv(load_1, constant_2)
        add_1 = ops.add(add, truediv_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf396', get_index_2)
        constant_3 = ops.constant(0.0, torch.float32)
        mul = ops.mul(constant_3, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf396', get_index_3)
        constant_4 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_4, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf396', get_index_4)
        abs_1 = ops.abs(load_4)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub = ops.sub(minimum, log1p)
        sub_1 = ops.sub(mul, sub)
        add_2 = ops.add(add_1, sub_1)
        constant_5 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(add_2, constant_5)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf399', get_index_5, add_3, None)
        return store


