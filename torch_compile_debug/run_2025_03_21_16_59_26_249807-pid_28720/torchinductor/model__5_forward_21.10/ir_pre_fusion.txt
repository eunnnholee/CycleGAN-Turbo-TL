op0: ExternKernelSchedulerNode(RandomSeeds)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = []
op0.outputs = [
    buf0: RandomSeeds
    buf0.layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = aten.randint.low_out


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 2})]
op1.unmet_dependencies = [MemoryDep('buf0', 0, {})]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2, 1)
op1.sizes = ([2], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op1_loop_body:
    var_ranges = {p0: 2}
    index0 = 0
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, rand, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 2})]
op2.unmet_dependencies = [MemoryDep('buf0', 1, {})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (2, 1)
op2.sizes = ([2], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op2_loop_body:
    var_ranges = {p0: 2}
    index0 = 1
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 1)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, rand, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 393216})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 2}), MemoryDep('buf2', c0, {c0: 2})]
op3.met_dependencies = 
    [   MemoryDep('primals_1', 196608*c0 + c2 + 131072, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', 196608*c0 + c2 + 65536, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', 196608*c0 + c2, {c0: 2, c1: 3, c2: 65536}),
        MemoryDep('primals_1', c0, {c0: 393216})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (393216, 1)
op3.sizes = ([2, 3, 65536], [])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
class op3_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 65536}
    index0 = 196608*p0 + 65536*p1 + p2
    index1 = p0
    index2 = 196608*p0 + p2
    index3 = 196608*p0 + p2 + 65536
    index4 = 196608*p0 + p2 + 131072
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        sub = ops.sub(load_1, constant)
        add = ops.add(load, sub)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_1 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(load_3, constant_1)
        add_1 = ops.add(load_2, sub_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_1', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_2 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(load_5, constant_2)
        add_2 = ops.add(load_4, sub_2)
        add_3 = ops.add(add_1, add_2)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('primals_1', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_3 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(load_7, constant_3)
        add_4 = ops.add(load_6, sub_3)
        add_5 = ops.add(add_3, add_4)
        constant_4 = ops.constant(3.0, torch.float32)
        truediv = ops.truediv(add_5, constant_4)
        sub_4 = ops.sub(add, truediv)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf2', get_index_8)
        constant_5 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_8, constant_5)
        mul_1 = ops.mul(sub_4, mul)
        get_index_9 = self.get_index('index2')
        load_9 = ops.load('primals_1', get_index_9)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf1', get_index_10)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(load_10, constant_6)
        add_6 = ops.add(load_9, sub_5)
        get_index_11 = self.get_index('index3')
        load_11 = ops.load('primals_1', get_index_11)
        get_index_12 = self.get_index('index1')
        load_12 = ops.load('buf1', get_index_12)
        constant_7 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(load_12, constant_7)
        add_7 = ops.add(load_11, sub_6)
        add_8 = ops.add(add_6, add_7)
        get_index_13 = self.get_index('index4')
        load_13 = ops.load('primals_1', get_index_13)
        get_index_14 = self.get_index('index1')
        load_14 = ops.load('buf1', get_index_14)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(load_14, constant_8)
        add_9 = ops.add(load_13, sub_7)
        add_10 = ops.add(add_8, add_9)
        constant_9 = ops.constant(3.0, torch.float32)
        truediv_1 = ops.truediv(add_10, constant_9)
        add_11 = ops.add(mul_1, truediv_1)
        get_index_15 = self.get_index('index0')
        store = ops.store('buf3', get_index_15, add_11, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 48})]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 393216})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (48, 8192)
op4.sizes = ([48], [8192])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
class op4_loop_body:
    var_ranges = {p0: 48, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, reduction)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 2})]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 48})]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (2, 24)
op5.sizes = ([2], [24])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1, 24], stride=[24, 48, 48, 48, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op5_loop_body:
    var_ranges = {p0: 2, p1: 24}
    index0 = 24*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_1, reduction)
        return store_reduction


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 2})]
op6.unmet_dependencies = [MemoryDep('buf0', 2, {})]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (2, 1)
op6.sizes = ([2], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
class op6_loop_body:
    var_ranges = {p0: 2}
    index0 = 2
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 2)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, rand, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 393216})]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 3, {}),
        MemoryDep('buf0', 4, {}),
        MemoryDep('buf3', 196608*c0 + 65536*c2 + 256*tmp0 + tmp1 - 257, {c0: 2, c1: 65536, c2: 3}),
        MemoryDep('buf5', c0, {c0: 2}),
        MemoryDep('buf6', c0, {c0: 2})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256, 3], stride=[196608, 768, 3, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (393216, 1)
op7.sizes = ([2, 256, 256, 3], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 1, 1], stride=[1, 2, 2, 2])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256, 3], stride=[196608, 768, 3, 1])
class op7_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 256, p3: 3}
    index0 = p0
    index1 = 2
    index2 = 3
    index3 = p1
    index4 = 4
    index5 = p2
    index6 = indirect0 - 1
    index7 = indirect1 - 1
    index8 = 256*indirect0 + indirect1 + 196608*p0 + 65536*p3 - 257
    index9 = 196608*p0 + 768*p1 + 3*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        load_seed = ops.load_seed('buf0', 3)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(-32, torch.int64)
        constant_1 = ops.constant(33, torch.int64)
        randint64 = ops.randint64(load_seed, index_expr, constant, constant_1)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        add = ops.add(index_expr_1, randint64)
        constant_2 = ops.constant(1, torch.int64)
        add_1 = ops.add(add, constant_2)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_3)
        constant_4 = ops.constant(257, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect0 = self.set_indirect0(minimum)
        load_seed_1 = ops.load_seed('buf0', 4)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_5 = ops.constant(-32, torch.int64)
        constant_6 = ops.constant(33, torch.int64)
        randint64_1 = ops.randint64(load_seed_1, index_expr_2, constant_5, constant_6)
        get_index_5 = self.get_index('index5')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        add_2 = ops.add(index_expr_3, randint64_1)
        constant_7 = ops.constant(1, torch.int64)
        add_3 = ops.add(add_2, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_3, constant_8)
        constant_9 = ops.constant(257, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_6 = self.get_index('index6')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr_4, constant_10)
        get_index_7 = self.get_index('index6')
        index_expr_5 = ops.index_expr(get_index_7, torch.int64)
        constant_11 = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr_5, constant_11)
        get_index_8 = self.get_index('index7')
        index_expr_6 = ops.index_expr(get_index_8, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_6, constant_12)
        get_index_9 = self.get_index('index7')
        index_expr_7 = ops.index_expr(get_index_9, torch.int64)
        constant_13 = ops.constant(256, torch.int64)
        lt_1 = ops.lt(index_expr_7, constant_13)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock3 = self.masked_subblock3(and__2, 0.0)
        get_index_10 = self.get_index('index9')
        store = ops.store('buf7', get_index_10, masked_subblock3, None)
        return store
    def masked_subblock3(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf5', get_index_1)
        constant = ops.constant(196608.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        sub = ops.sub(load, truediv)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf6', get_index_2)
        constant_1 = ops.constant(0.5, torch.float32)
        add = ops.add(load_2, constant_1)
        mul = ops.mul(sub, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf5', get_index_3)
        constant_2 = ops.constant(196608.0, torch.float32)
        truediv_1 = ops.truediv(load_3, constant_2)
        add_1 = ops.add(mul, truediv_1)
        return add_1


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 131072})]
op8.unmet_dependencies = []
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (131072, 1)
op8.sizes = ([131072], [])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
class op8_loop_body:
    var_ranges = {p0: 131072}
    index0 = p0
    def body(self, ops):
        constant = ops.constant(1.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf8', get_index, constant, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 65536*c0 + 256*tmp0 + tmp1, {c0: 2})]
op9.unmet_dependencies = 
    [   MemoryDep('buf0', 5, {}),
        MemoryDep('buf0', 6, {}),
        StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
    buf9.mutations = ['buf8']
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (32768, 1)
op9.sizes = ([2, 128, 128], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[7], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
buf9_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 128}
    index0 = p0
    index1 = 2
    index2 = 5
    index3 = p1
    index4 = 6
    index5 = p2
    index6 = 256*indirect0 + indirect1 + 65536*p0
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        load_seed = ops.load_seed('buf0', 5)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(257, torch.int64)
        randint64 = ops.randint64(load_seed, index_expr, constant, constant_1)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        add = ops.add(index_expr_1, randint64)
        constant_2 = ops.constant(64, torch.int64)
        sub = ops.sub(add, constant_2)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(sub, constant_3)
        constant_4 = ops.constant(255, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect0 = self.set_indirect0(minimum)
        load_seed_1 = ops.load_seed('buf0', 6)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_5 = ops.constant(0, torch.int64)
        constant_6 = ops.constant(257, torch.int64)
        randint64_1 = ops.randint64(load_seed_1, index_expr_2, constant_5, constant_6)
        get_index_5 = self.get_index('index5')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        add_1 = ops.add(index_expr_3, randint64_1)
        constant_7 = ops.constant(64, torch.int64)
        sub_1 = ops.sub(add_1, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(sub_1, constant_8)
        constant_9 = ops.constant(255, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        set_indirect1 = self.set_indirect1(minimum_1)
        constant_10 = ops.constant(0.0, torch.float32)
        get_index_6 = self.get_index('index6')
        store = ops.store('buf9', get_index_6, constant_10, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 393216})]
op10.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 393216}), MemoryDep('buf9', c0, {c0: 131072})]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (393216, 1)
op10.sizes = ([131072, 3], [])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 256, 3], stride=[196608, 768, 3, 1])
buf9_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[2, 256, 256], stride=[65536, 256, 1])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
class op10_loop_body:
    var_ranges = {p0: 131072, p1: 3}
    index0 = 3*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        mul = ops.mul(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(mul, constant)
        constant_1 = ops.constant(0.5, torch.float32)
        add = ops.add(mul_1, constant_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf10', get_index_2, add, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 301056})]
op11.unmet_dependencies = 
    [   MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 1536, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 1539, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 1542, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 3, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 6, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 768, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 771, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)) + 774, {c0: 2, c1: 224, c2: 224, c3: 3}),
        MemoryDep('buf10', 196608*c0 + c3 + 768*(((8*c1)//7)) + 3*(((8*c2)//7)), {c0: 2, c1: 224, c2: 224, c3: 3})]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf11.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (301056, 1)
op11.sizes = ([2, 224, 224, 3], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 256, 256], stride=[196608, 1, 768, 3])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 1, 672, 3])
class op11_loop_body:
    var_ranges = {p0: 2, p1: 224, p2: 224, p3: 3}
    index0 = ((8*p1)//7)
    index1 = ((256*p1 + 479)//224)
    index2 = ((8*p2)//7)
    index3 = ((256*p2 + 479)//224)
    index4 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7))
    index5 = (((8*p2)//7)) + 1
    index6 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 3
    index7 = (((8*p2)//7)) + 2
    index8 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 6
    index9 = (((8*p1)//7)) + 1
    index10 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 768
    index11 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 771
    index12 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 774
    index13 = (((8*p1)//7)) + 2
    index14 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 1536
    index15 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 1539
    index16 = 196608*p0 + p3 + 768*(((8*p1)//7)) + 3*(((8*p2)//7)) + 1542
    index17 = 150528*p0 + 672*p1 + 3*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        get_index_2 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        lt_1 = ops.lt(index_expr_2, index_expr_3)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        get_index_5 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        lt_2 = ops.lt(index_expr_4, index_expr_5)
        get_index_6 = self.get_index('index5')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        lt_3 = ops.lt(index_expr_6, index_expr_7)
        and__1 = ops.and_(lt_2, lt_3)
        masked_subblock2 = self.masked_subblock2(and__1, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        get_index_9 = self.get_index('index1')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        lt_4 = ops.lt(index_expr_8, index_expr_9)
        get_index_10 = self.get_index('index7')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        get_index_11 = self.get_index('index3')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        lt_5 = ops.lt(index_expr_10, index_expr_11)
        and__2 = ops.and_(lt_4, lt_5)
        masked_subblock3 = self.masked_subblock3(and__2, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index9')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        get_index_13 = self.get_index('index1')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        lt_6 = ops.lt(index_expr_12, index_expr_13)
        get_index_14 = self.get_index('index2')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        get_index_15 = self.get_index('index3')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        lt_7 = ops.lt(index_expr_14, index_expr_15)
        and__3 = ops.and_(lt_6, lt_7)
        masked_subblock4 = self.masked_subblock4(and__3, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index9')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        get_index_17 = self.get_index('index1')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        lt_8 = ops.lt(index_expr_16, index_expr_17)
        get_index_18 = self.get_index('index5')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        lt_9 = ops.lt(index_expr_18, index_expr_19)
        and__4 = ops.and_(lt_8, lt_9)
        masked_subblock5 = self.masked_subblock5(and__4, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index9')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        get_index_21 = self.get_index('index1')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        lt_10 = ops.lt(index_expr_20, index_expr_21)
        get_index_22 = self.get_index('index7')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        get_index_23 = self.get_index('index3')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        lt_11 = ops.lt(index_expr_22, index_expr_23)
        and__5 = ops.and_(lt_10, lt_11)
        masked_subblock6 = self.masked_subblock6(and__5, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index13')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        get_index_25 = self.get_index('index1')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        lt_12 = ops.lt(index_expr_24, index_expr_25)
        get_index_26 = self.get_index('index2')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        get_index_27 = self.get_index('index3')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        lt_13 = ops.lt(index_expr_26, index_expr_27)
        and__6 = ops.and_(lt_12, lt_13)
        masked_subblock7 = self.masked_subblock7(and__6, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index13')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        get_index_29 = self.get_index('index1')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        lt_14 = ops.lt(index_expr_28, index_expr_29)
        get_index_30 = self.get_index('index5')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        lt_15 = ops.lt(index_expr_30, index_expr_31)
        and__7 = ops.and_(lt_14, lt_15)
        masked_subblock8 = self.masked_subblock8(and__7, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index13')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        get_index_33 = self.get_index('index1')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        lt_16 = ops.lt(index_expr_32, index_expr_33)
        get_index_34 = self.get_index('index7')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        get_index_35 = self.get_index('index3')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        lt_17 = ops.lt(index_expr_34, index_expr_35)
        and__8 = ops.and_(lt_16, lt_17)
        masked_subblock9 = self.masked_subblock9(and__8, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index0')
        index_expr_36 = ops.index_expr(get_index_36, torch.int64)
        get_index_37 = self.get_index('index1')
        index_expr_37 = ops.index_expr(get_index_37, torch.int64)
        lt_18 = ops.lt(index_expr_36, index_expr_37)
        get_index_38 = self.get_index('index2')
        index_expr_38 = ops.index_expr(get_index_38, torch.int64)
        get_index_39 = self.get_index('index3')
        index_expr_39 = ops.index_expr(get_index_39, torch.int64)
        lt_19 = ops.lt(index_expr_38, index_expr_39)
        and__9 = ops.and_(lt_18, lt_19)
        masked_subblock10 = self.masked_subblock10(and__9, 0.0)
        get_index_40 = self.get_index('index0')
        index_expr_40 = ops.index_expr(get_index_40, torch.int64)
        get_index_41 = self.get_index('index1')
        index_expr_41 = ops.index_expr(get_index_41, torch.int64)
        lt_20 = ops.lt(index_expr_40, index_expr_41)
        get_index_42 = self.get_index('index5')
        index_expr_42 = ops.index_expr(get_index_42, torch.int64)
        get_index_43 = self.get_index('index3')
        index_expr_43 = ops.index_expr(get_index_43, torch.int64)
        lt_21 = ops.lt(index_expr_42, index_expr_43)
        and__10 = ops.and_(lt_20, lt_21)
        masked_subblock11 = self.masked_subblock11(and__10, 0.0)
        add_8 = ops.add(masked_subblock11, masked_subblock10)
        get_index_44 = self.get_index('index0')
        index_expr_44 = ops.index_expr(get_index_44, torch.int64)
        get_index_45 = self.get_index('index1')
        index_expr_45 = ops.index_expr(get_index_45, torch.int64)
        lt_22 = ops.lt(index_expr_44, index_expr_45)
        get_index_46 = self.get_index('index7')
        index_expr_46 = ops.index_expr(get_index_46, torch.int64)
        get_index_47 = self.get_index('index3')
        index_expr_47 = ops.index_expr(get_index_47, torch.int64)
        lt_23 = ops.lt(index_expr_46, index_expr_47)
        and__11 = ops.and_(lt_22, lt_23)
        masked_subblock12 = self.masked_subblock12(and__11, 0.0)
        add_9 = ops.add(masked_subblock12, add_8)
        get_index_48 = self.get_index('index9')
        index_expr_48 = ops.index_expr(get_index_48, torch.int64)
        get_index_49 = self.get_index('index1')
        index_expr_49 = ops.index_expr(get_index_49, torch.int64)
        lt_24 = ops.lt(index_expr_48, index_expr_49)
        get_index_50 = self.get_index('index2')
        index_expr_50 = ops.index_expr(get_index_50, torch.int64)
        get_index_51 = self.get_index('index3')
        index_expr_51 = ops.index_expr(get_index_51, torch.int64)
        lt_25 = ops.lt(index_expr_50, index_expr_51)
        and__12 = ops.and_(lt_24, lt_25)
        masked_subblock13 = self.masked_subblock13(and__12, 0.0)
        add_10 = ops.add(masked_subblock13, add_9)
        get_index_52 = self.get_index('index9')
        index_expr_52 = ops.index_expr(get_index_52, torch.int64)
        get_index_53 = self.get_index('index1')
        index_expr_53 = ops.index_expr(get_index_53, torch.int64)
        lt_26 = ops.lt(index_expr_52, index_expr_53)
        get_index_54 = self.get_index('index5')
        index_expr_54 = ops.index_expr(get_index_54, torch.int64)
        get_index_55 = self.get_index('index3')
        index_expr_55 = ops.index_expr(get_index_55, torch.int64)
        lt_27 = ops.lt(index_expr_54, index_expr_55)
        and__13 = ops.and_(lt_26, lt_27)
        masked_subblock14 = self.masked_subblock14(and__13, 0.0)
        add_11 = ops.add(masked_subblock14, add_10)
        get_index_56 = self.get_index('index9')
        index_expr_56 = ops.index_expr(get_index_56, torch.int64)
        get_index_57 = self.get_index('index1')
        index_expr_57 = ops.index_expr(get_index_57, torch.int64)
        lt_28 = ops.lt(index_expr_56, index_expr_57)
        get_index_58 = self.get_index('index7')
        index_expr_58 = ops.index_expr(get_index_58, torch.int64)
        get_index_59 = self.get_index('index3')
        index_expr_59 = ops.index_expr(get_index_59, torch.int64)
        lt_29 = ops.lt(index_expr_58, index_expr_59)
        and__14 = ops.and_(lt_28, lt_29)
        masked_subblock15 = self.masked_subblock15(and__14, 0.0)
        add_12 = ops.add(masked_subblock15, add_11)
        get_index_60 = self.get_index('index13')
        index_expr_60 = ops.index_expr(get_index_60, torch.int64)
        get_index_61 = self.get_index('index1')
        index_expr_61 = ops.index_expr(get_index_61, torch.int64)
        lt_30 = ops.lt(index_expr_60, index_expr_61)
        get_index_62 = self.get_index('index2')
        index_expr_62 = ops.index_expr(get_index_62, torch.int64)
        get_index_63 = self.get_index('index3')
        index_expr_63 = ops.index_expr(get_index_63, torch.int64)
        lt_31 = ops.lt(index_expr_62, index_expr_63)
        and__15 = ops.and_(lt_30, lt_31)
        masked_subblock16 = self.masked_subblock16(and__15, 0.0)
        add_13 = ops.add(masked_subblock16, add_12)
        get_index_64 = self.get_index('index13')
        index_expr_64 = ops.index_expr(get_index_64, torch.int64)
        get_index_65 = self.get_index('index1')
        index_expr_65 = ops.index_expr(get_index_65, torch.int64)
        lt_32 = ops.lt(index_expr_64, index_expr_65)
        get_index_66 = self.get_index('index5')
        index_expr_66 = ops.index_expr(get_index_66, torch.int64)
        get_index_67 = self.get_index('index3')
        index_expr_67 = ops.index_expr(get_index_67, torch.int64)
        lt_33 = ops.lt(index_expr_66, index_expr_67)
        and__16 = ops.and_(lt_32, lt_33)
        masked_subblock17 = self.masked_subblock17(and__16, 0.0)
        add_14 = ops.add(masked_subblock17, add_13)
        get_index_68 = self.get_index('index13')
        index_expr_68 = ops.index_expr(get_index_68, torch.int64)
        get_index_69 = self.get_index('index1')
        index_expr_69 = ops.index_expr(get_index_69, torch.int64)
        lt_34 = ops.lt(index_expr_68, index_expr_69)
        get_index_70 = self.get_index('index7')
        index_expr_70 = ops.index_expr(get_index_70, torch.int64)
        get_index_71 = self.get_index('index3')
        index_expr_71 = ops.index_expr(get_index_71, torch.int64)
        lt_35 = ops.lt(index_expr_70, index_expr_71)
        and__17 = ops.and_(lt_34, lt_35)
        masked_subblock18 = self.masked_subblock18(and__17, 0.0)
        add_15 = ops.add(masked_subblock18, add_14)
        truediv = ops.truediv(add_7, add_15)
        get_index_72 = self.get_index('index17')
        store = ops.store('buf11', get_index_72, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index11')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index15')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index16')
        load = ops.load('buf10', get_index)
        return load
    def masked_subblock10(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock11(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock12(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock13(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock14(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock15(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock16(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock17(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock18(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op12: ExternKernelSchedulerNode(DeviceCopy)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = []
op12.met_dependencies = [StarDep(name='primals_2', mode=None)]
op12.outputs = [
    buf12: DeviceCopy
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
    buf12.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.node.kernel = None


op13: ExternKernelSchedulerNode(DeviceCopy)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = []
op13.met_dependencies = [StarDep(name='primals_3', mode=None)]
op13.outputs = [
    buf13: DeviceCopy
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = None


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 301056})]
op14.unmet_dependencies = 
    [   MemoryDep('buf11', 150528*c0 + c1 + 3*c2, {c0: 2, c1: 3, c2: 50176}),
        MemoryDep('buf12', c1, {c0: 2, c1: 3}),
        MemoryDep('buf13', c1, {c0: 2, c1: 3})]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (301056, 1)
op14.sizes = ([2, 3, 50176], [])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 1, 672, 3])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[3, 1, 1], stride=[1, 1, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[2, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op14_loop_body:
    var_ranges = {p0: 2, p1: 3, p2: 50176}
    index0 = 150528*p0 + p1 + 3*p2
    index1 = p1
    index2 = 150528*p0 + 50176*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf13', get_index_2)
        truediv = ops.truediv(sub, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf14', get_index_3, truediv, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='primals_4', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.convolution


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 600})]
op16.unmet_dependencies = [MemoryDep('buf15', 37632*c0 + 49*c2 + (I), {c0: 2, c1: 50, c2: 768})]
op16.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (600, 128)
op16.sizes = ([2, 50, 6], [128])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
class op16_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 6, p3: 128}
    index0 = p1
    index1 = 128*p2 + p3
    index2 = 37632*p0 + 6272*p2 + 49*p3 + (I)
    index3 = 768*p1 + 128*p2 + p3
    index4 = 300*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('primals_6', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf16', get_index_5, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_5', get_index)
        constant = ops.constant(0.0, torch.float32)
        add = ops.add(load, constant)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf15', get_index)
        return load


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 600})]
op17.unmet_dependencies = [MemoryDep('buf15', 37632*c0 + 49*c2 + (I), {c0: 2, c1: 50, c2: 768})]
op17.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (600, 128)
op17.sizes = ([2, 50, 6], [128])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
class op17_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 6, p3: 128}
    index0 = p1
    index1 = 128*p2 + p3
    index2 = 37632*p0 + 6272*p2 + 49*p3 + (I)
    index3 = 768*p1 + 128*p2 + p3
    index4 = 300*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('primals_6', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf17', get_index_5, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_5', get_index)
        constant = ops.constant(0.0, torch.float32)
        add = ops.add(load, constant)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf15', get_index)
        return load


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 600})]
op18.unmet_dependencies = [MemoryDep('buf15', 37632*c0 + 49*c2 + (I), {c0: 2, c1: 50, c2: 768})]
op18.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (600, 128)
op18.sizes = ([2, 50, 6], [128])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
class op18_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 6, p3: 128}
    index0 = p1
    index1 = 128*p2 + p3
    index2 = 37632*p0 + 6272*p2 + 49*p3 + (I)
    index3 = 768*p1 + 128*p2 + p3
    index4 = 300*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('primals_6', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf18', get_index_5, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_5', get_index)
        constant = ops.constant(0.0, torch.float32)
        add = ops.add(load, constant)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf15', get_index)
        return load


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 100})]
op19.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 600}),
        MemoryDep('buf17', c0, {c0: 600}),
        MemoryDep('buf18', c0, {c0: 600})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
    buf19.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (100, 6)
op19.sizes = ([100], [6])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
class op19_loop_body:
    var_ranges = {p0: 100, p1: 6}
    index0 = 6*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 100})]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 600}),
        MemoryDep('buf17', c0, {c0: 600}),
        MemoryDep('buf18', c0, {c0: 600})]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (100, 6)
op20.sizes = ([100], [6])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1, 6], stride=[300, 6, 600, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
class op20_loop_body:
    var_ranges = {p0: 100, p1: 6}
    index0 = 6*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_3, getitem_1)
        return store_reduction


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 76800})]
op22.unmet_dependencies = 
    [   MemoryDep('buf15', 37632*c0 + 49*c2 + (I), {c0: 2, c1: 50, c2: 768}),
        MemoryDep('buf19', c0, {c0: 100}),
        MemoryDep('buf20', c0, {c0: 100})]
op22.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 2, c1: 38400}),
        MemoryDep('primals_7', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_8', c1, {c0: 100, c1: 768})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (76800, 1)
op22.sizes = ([2, 50, 768], [])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 49, 7, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[50, 768], stride=[768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 1], stride=[50, 1, 100])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
class op22_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = p1
    index1 = p2
    index2 = 37632*p0 + 49*p2 + (I)
    index3 = 768*p1 + p2
    index4 = 50*p0 + p1
    index5 = 38400*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('primals_6', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf19', get_index_5)
        sub = ops.sub(add, load_1)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('buf20', get_index_6)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('primals_7', get_index_7)
        mul_1 = ops.mul(mul, load_3)
        get_index_8 = self.get_index('index1')
        load_4 = ops.load('primals_8', get_index_8)
        add_2 = ops.add(mul_1, load_4)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf22', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_5', get_index)
        constant = ops.constant(0.0, torch.float32)
        add = ops.add(load, constant)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf15', get_index)
        return load


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 100})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 76800})]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (100, 768)
op23.sizes = ([100], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
class op23_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, getitem)
        return store_reduction


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 100})]
op24.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 76800})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (100, 768)
op24.sizes = ([100], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
class op24_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem_1)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 768*c0 + 1536*c1 + c2, {c0: 2, c1: 50, c2: 768})]
op26.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 76800}),
        MemoryDep('buf23', c0, {c0: 100}),
        MemoryDep('buf24', c0, {c0: 100})]
op26.met_dependencies = 
    [   MemoryDep('primals_10', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_9', c1, {c0: 100, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (76800, 1)
op26.sizes = ([2, 50, 768], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[1, 50, 100])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op26_loop_body:
    var_ranges = {p0: 2, p1: 50, p2: 768}
    index0 = 38400*p0 + 768*p1 + p2
    index1 = 50*p0 + p1
    index2 = p2
    index3 = 768*p0 + 1536*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf24', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_9', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_10', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf26', get_index_5, add_1, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='primals_12', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 76800})]
op28.unmet_dependencies = [   MemoryDep('buf27', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op28.met_dependencies = [MemoryDep('primals_11', c1, {c0: 100, c1: 768})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (76800, 1)
op28.sizes = ([50, 2, 768], [])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op28_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf28', get_index_2, add, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 76800})]
op29.unmet_dependencies = [   MemoryDep('buf27', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op29.met_dependencies = [MemoryDep('primals_11', c1 + 768, {c0: 100, c1: 768})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (76800, 1)
op29.sizes = ([50, 2, 768], [])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op29_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf29', get_index_2, add, None)
        return store


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 76800})]
op30.unmet_dependencies = [   MemoryDep('buf27', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op30.met_dependencies = [MemoryDep('primals_11', c1 + 1536, {c0: 100, c1: 768})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (76800, 1)
op30.sizes = ([50, 2, 768], [])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op30_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, add, None)
        return store


op31: ExternKernelSchedulerNode(FallbackKernel)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = 
    [   StarDep(name='buf28', mode=None),
        StarDep(name='buf29', mode=None),
        StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: FallbackKernel
    buf31.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op32: ExternKernelSchedulerNode(MultiOutput)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: MultiOutput
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = None


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 76800})]
op36.unmet_dependencies = [MemoryDep('buf32', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (76800, 1)
op36.sizes = ([50, 2, 768], [])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op36_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf36', get_index_1, load, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='primals_13', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
    ]
]
op37.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 100})]
op38.unmet_dependencies = 
    [   MemoryDep('buf22', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf37', c0, {c0: 76800})]
op38.met_dependencies = [MemoryDep('primals_14', c1, {c0: 100, c1: 768})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf38.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (100, 768)
op38.sizes = ([50, 2], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op38_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf37', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf38', get_index_3, getitem)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 100})]
op39.unmet_dependencies = 
    [   MemoryDep('buf22', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf37', c0, {c0: 76800})]
op39.met_dependencies = [MemoryDep('primals_14', c1, {c0: 100, c1: 768})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf39.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (100, 768)
op39.sizes = ([50, 2], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op39_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf37', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf39', get_index_3, getitem_1)
        return store_reduction


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 76800})]
op41.unmet_dependencies = 
    [   MemoryDep('buf22', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf37', c0, {c0: 76800}),
        MemoryDep('buf38', c0, {c0: 100}),
        MemoryDep('buf39', c0, {c0: 100})]
op41.met_dependencies = 
    [   MemoryDep('primals_14', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_15', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_16', c1, {c0: 100, c1: 768})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (76800, 1)
op41.sizes = ([50, 2, 768], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op41_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    index3 = 2*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf37', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf38', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf39', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('primals_15', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('primals_16', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        store = ops.store('buf41', get_index_7, add_3, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='primals_17', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 307200})]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 307200})]
op43.met_dependencies = [MemoryDep('primals_18', c1, {c0: 100, c1: 3072})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (307200, 1)
op43.sizes = ([100, 3072], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op43_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_18', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf42', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_18', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf43', get_index_4, mul_1, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='primals_19', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 76800})]
op45.unmet_dependencies = 
    [   MemoryDep('buf22', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768}),
        MemoryDep('buf37', c0, {c0: 76800}),
        MemoryDep('buf44', c0, {c0: 76800})]
op45.met_dependencies = 
    [   MemoryDep('primals_14', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_20', c1, {c0: 100, c1: 768})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (76800, 1)
op45.sizes = ([50, 2, 768], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 50, 768], stride=[38400, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op45_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf37', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_14', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf44', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_20', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf45', get_index_5, add_3, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 100})]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 76800})]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf46.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (100, 768)
op46.sizes = ([100], [768])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op46_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf46', get_index_1, getitem)
        return store_reduction


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 100})]
op47.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 76800})]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf47.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (100, 768)
op47.sizes = ([100], [768])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op47_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf47', get_index_1, getitem_1)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 76800})]
op49.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 76800}),
        MemoryDep('buf46', c0, {c0: 100}),
        MemoryDep('buf47', c0, {c0: 100})]
op49.met_dependencies = 
    [   MemoryDep('primals_21', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_22', c1, {c0: 100, c1: 768})]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (76800, 1)
op49.sizes = ([100, 768], [])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op49_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf47', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_21', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_22', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf49', get_index_5, add_1, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='primals_24', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op50.node.kernel = extern_kernels.mm


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 76800})]
op51.unmet_dependencies = [   MemoryDep('buf50', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op51.met_dependencies = [MemoryDep('primals_23', c1, {c0: 100, c1: 768})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (76800, 1)
op51.sizes = ([50, 2, 768], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op51_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_23', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf51', get_index_2, add, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 76800})]
op52.unmet_dependencies = [   MemoryDep('buf50', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op52.met_dependencies = [MemoryDep('primals_23', c1 + 768, {c0: 100, c1: 768})]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (76800, 1)
op52.sizes = ([50, 2, 768], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op52_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_23', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf52', get_index_2, add, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 76800})]
op53.unmet_dependencies = [   MemoryDep('buf50', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op53.met_dependencies = [MemoryDep('primals_23', c1 + 1536, {c0: 100, c1: 768})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (76800, 1)
op53.sizes = ([50, 2, 768], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op53_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_23', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf53', get_index_2, add, None)
        return store


op54: ExternKernelSchedulerNode(FallbackKernel)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = 
    [   StarDep(name='buf51', mode=None),
        StarDep(name='buf52', mode=None),
        StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: FallbackKernel
    buf54.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op55: ExternKernelSchedulerNode(MultiOutput)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: MultiOutput
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = None


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 76800})]
op59.unmet_dependencies = [MemoryDep('buf55', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (76800, 1)
op59.sizes = ([50, 2, 768], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op59_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf59', get_index_1, load, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='primals_25', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op60.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 100})]
op61.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 76800}), MemoryDep('buf60', c0, {c0: 76800})]
op61.met_dependencies = [MemoryDep('primals_26', c1, {c0: 100, c1: 768})]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (100, 768)
op61.sizes = ([100], [768])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op61_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf61', get_index_3, getitem)
        return store_reduction


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 100})]
op62.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 76800}), MemoryDep('buf60', c0, {c0: 76800})]
op62.met_dependencies = [MemoryDep('primals_26', c1, {c0: 100, c1: 768})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (100, 768)
op62.sizes = ([100], [768])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op62_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem_1)
        return store_reduction


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 76800})]
op64.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 76800}),
        MemoryDep('buf60', c0, {c0: 76800}),
        MemoryDep('buf61', c0, {c0: 100}),
        MemoryDep('buf62', c0, {c0: 100})]
op64.met_dependencies = 
    [   MemoryDep('primals_26', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_27', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_28', c1, {c0: 100, c1: 768})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (76800, 1)
op64.sizes = ([100, 768], [])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op64_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf61', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf62', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_27', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_28', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf64', get_index_7, add_3, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='primals_29', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.mm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 307200})]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 307200})]
op66.met_dependencies = [MemoryDep('primals_30', c1, {c0: 100, c1: 3072})]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (307200, 1)
op66.sizes = ([100, 3072], [])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op66_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_30', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf65', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_30', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf66', get_index_4, mul_1, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='primals_31', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 76800})]
op68.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 76800}),
        MemoryDep('buf60', c0, {c0: 76800}),
        MemoryDep('buf67', c0, {c0: 76800})]
op68.met_dependencies = 
    [   MemoryDep('primals_26', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_32', c1, {c0: 100, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (76800, 1)
op68.sizes = ([100, 768], [])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_32_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op68_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf67', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_32', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, add_3, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 100})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 76800})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (100, 768)
op69.sizes = ([100], [768])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op69_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 100})]
op70.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 76800})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (100, 768)
op70.sizes = ([100], [768])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op70_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, getitem_1)
        return store_reduction


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 76800})]
op72.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 76800}),
        MemoryDep('buf69', c0, {c0: 100}),
        MemoryDep('buf70', c0, {c0: 100})]
op72.met_dependencies = 
    [   MemoryDep('primals_33', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_34', c1, {c0: 100, c1: 768})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (76800, 1)
op72.sizes = ([100, 768], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op72_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf69', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf70', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_33', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_34', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, add_1, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='primals_36', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 76800})]
op74.unmet_dependencies = [   MemoryDep('buf73', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op74.met_dependencies = [MemoryDep('primals_35', c1, {c0: 100, c1: 768})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (76800, 1)
op74.sizes = ([50, 2, 768], [])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op74_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_35', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf74', get_index_2, add, None)
        return store


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 76800})]
op75.unmet_dependencies = [   MemoryDep('buf73', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op75.met_dependencies = [MemoryDep('primals_35', c1 + 768, {c0: 100, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (76800, 1)
op75.sizes = ([50, 2, 768], [])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op75_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_35', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf75', get_index_2, add, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 76800})]
op76.unmet_dependencies = [   MemoryDep('buf73', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op76.met_dependencies = [MemoryDep('primals_35', c1 + 1536, {c0: 100, c1: 768})]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (76800, 1)
op76.sizes = ([50, 2, 768], [])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op76_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_35', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf76', get_index_2, add, None)
        return store


op77: ExternKernelSchedulerNode(FallbackKernel)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = 
    [   StarDep(name='buf74', mode=None),
        StarDep(name='buf75', mode=None),
        StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: FallbackKernel
    buf77.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op78: ExternKernelSchedulerNode(MultiOutput)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: MultiOutput
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = None


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 76800})]
op82.unmet_dependencies = [MemoryDep('buf78', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (76800, 1)
op82.sizes = ([50, 2, 768], [])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op82_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf82', get_index_1, load, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='primals_37', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 100})]
op84.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 76800}), MemoryDep('buf83', c0, {c0: 76800})]
op84.met_dependencies = [MemoryDep('primals_38', c1, {c0: 100, c1: 768})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf84.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (100, 768)
op84.sizes = ([100], [768])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op84_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, getitem)
        return store_reduction


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 100})]
op85.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 76800}), MemoryDep('buf83', c0, {c0: 76800})]
op85.met_dependencies = [MemoryDep('primals_38', c1, {c0: 100, c1: 768})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (100, 768)
op85.sizes = ([100], [768])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op85_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf85', get_index_3, getitem_1)
        return store_reduction


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 76800})]
op87.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 76800}),
        MemoryDep('buf83', c0, {c0: 76800}),
        MemoryDep('buf84', c0, {c0: 100}),
        MemoryDep('buf85', c0, {c0: 100})]
op87.met_dependencies = 
    [   MemoryDep('primals_38', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_39', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_40', c1, {c0: 100, c1: 768})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (76800, 1)
op87.sizes = ([100, 768], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op87_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf85', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_39', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_40', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf87', get_index_7, add_3, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='primals_41', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 307200})]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 307200})]
op89.met_dependencies = [MemoryDep('primals_42', c1, {c0: 100, c1: 3072})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (307200, 1)
op89.sizes = ([100, 3072], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_42_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op89_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_42', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_42', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf89', get_index_4, mul_1, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='primals_43', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.mm


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 76800})]
op91.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 76800}),
        MemoryDep('buf83', c0, {c0: 76800}),
        MemoryDep('buf90', c0, {c0: 76800})]
op91.met_dependencies = 
    [   MemoryDep('primals_38', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_44', c1, {c0: 100, c1: 768})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (76800, 1)
op91.sizes = ([100, 768], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_44_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op91_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf90', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_44', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, add_3, None)
        return store


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 100})]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 76800})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (100, 768)
op92.sizes = ([100], [768])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op92_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf92', get_index_1, getitem)
        return store_reduction


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 100})]
op93.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 76800})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (100, 768)
op93.sizes = ([100], [768])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op93_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem_1)
        return store_reduction


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 76800})]
op95.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 76800}),
        MemoryDep('buf92', c0, {c0: 100}),
        MemoryDep('buf93', c0, {c0: 100})]
op95.met_dependencies = 
    [   MemoryDep('primals_45', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_46', c1, {c0: 100, c1: 768})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (76800, 1)
op95.sizes = ([100, 768], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op95_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf93', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_45', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_46', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf95', get_index_5, add_1, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='primals_48', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 76800})]
op97.unmet_dependencies = [   MemoryDep('buf96', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op97.met_dependencies = [MemoryDep('primals_47', c1, {c0: 100, c1: 768})]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (76800, 1)
op97.sizes = ([50, 2, 768], [])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op97_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf97', get_index_2, add, None)
        return store


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 76800})]
op98.unmet_dependencies = [   MemoryDep('buf96', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op98.met_dependencies = [MemoryDep('primals_47', c1 + 768, {c0: 100, c1: 768})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (76800, 1)
op98.sizes = ([50, 2, 768], [])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op98_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf98', get_index_2, add, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 76800})]
op99.unmet_dependencies = [   MemoryDep('buf96', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op99.met_dependencies = [MemoryDep('primals_47', c1 + 1536, {c0: 100, c1: 768})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (76800, 1)
op99.sizes = ([50, 2, 768], [])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op99_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf99', get_index_2, add, None)
        return store


op100: ExternKernelSchedulerNode(FallbackKernel)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = 
    [   StarDep(name='buf97', mode=None),
        StarDep(name='buf98', mode=None),
        StarDep(name='buf99', mode=None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: FallbackKernel
    buf100.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op101: ExternKernelSchedulerNode(MultiOutput)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: MultiOutput
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = None


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 76800})]
op105.unmet_dependencies = [MemoryDep('buf101', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (76800, 1)
op105.sizes = ([50, 2, 768], [])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op105_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='primals_49', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 100})]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 76800}), MemoryDep('buf91', c0, {c0: 76800})]
op107.met_dependencies = [MemoryDep('primals_50', c1, {c0: 100, c1: 768})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (100, 768)
op107.sizes = ([100], [768])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op107_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 100})]
op108.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 76800}), MemoryDep('buf91', c0, {c0: 76800})]
op108.met_dependencies = [MemoryDep('primals_50', c1, {c0: 100, c1: 768})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (100, 768)
op108.sizes = ([100], [768])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op108_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, getitem_1)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 76800})]
op110.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 76800}),
        MemoryDep('buf107', c0, {c0: 100}),
        MemoryDep('buf108', c0, {c0: 100}),
        MemoryDep('buf91', c0, {c0: 76800})]
op110.met_dependencies = 
    [   MemoryDep('primals_50', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_51', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_52', c1, {c0: 100, c1: 768})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (76800, 1)
op110.sizes = ([100, 768], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op110_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf107', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf108', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_51', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_52', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf110', get_index_7, add_3, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='primals_53', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 307200})]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 307200})]
op112.met_dependencies = [MemoryDep('primals_54', c1, {c0: 100, c1: 3072})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (307200, 1)
op112.sizes = ([100, 3072], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_54_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op112_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_54', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_54', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf112', get_index_4, mul_1, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='primals_55', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 76800})]
op114.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 76800}),
        MemoryDep('buf113', c0, {c0: 76800}),
        MemoryDep('buf91', c0, {c0: 76800})]
op114.met_dependencies = 
    [   MemoryDep('primals_50', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_56', c1, {c0: 100, c1: 768})]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (76800, 1)
op114.sizes = ([100, 768], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_56_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op114_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf113', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_56', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf114', get_index_5, add_3, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 100})]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 76800})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (100, 768)
op115.sizes = ([100], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op115_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf115', get_index_1, getitem)
        return store_reduction


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 100})]
op116.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 76800})]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf116.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (100, 768)
op116.sizes = ([100], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op116_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf116', get_index_1, getitem_1)
        return store_reduction


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 76800})]
op118.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 76800}),
        MemoryDep('buf115', c0, {c0: 100}),
        MemoryDep('buf116', c0, {c0: 100})]
op118.met_dependencies = 
    [   MemoryDep('primals_57', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_58', c1, {c0: 100, c1: 768})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (76800, 1)
op118.sizes = ([100, 768], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op118_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf115', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf116', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_57', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_58', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_1, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='primals_60', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
    ]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 76800})]
op120.unmet_dependencies = [   MemoryDep('buf119', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op120.met_dependencies = [MemoryDep('primals_59', c1, {c0: 100, c1: 768})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (76800, 1)
op120.sizes = ([50, 2, 768], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op120_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_59', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf120', get_index_2, add, None)
        return store


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 76800})]
op121.unmet_dependencies = [   MemoryDep('buf119', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op121.met_dependencies = [MemoryDep('primals_59', c1 + 768, {c0: 100, c1: 768})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (76800, 1)
op121.sizes = ([50, 2, 768], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op121_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_59', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf121', get_index_2, add, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 76800})]
op122.unmet_dependencies = [   MemoryDep('buf119', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op122.met_dependencies = [MemoryDep('primals_59', c1 + 1536, {c0: 100, c1: 768})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (76800, 1)
op122.sizes = ([50, 2, 768], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op122_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_59', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf122', get_index_2, add, None)
        return store


op123: ExternKernelSchedulerNode(FallbackKernel)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = 
    [   StarDep(name='buf120', mode=None),
        StarDep(name='buf121', mode=None),
        StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: FallbackKernel
    buf123.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op124: ExternKernelSchedulerNode(MultiOutput)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: MultiOutput
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = None


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 76800})]
op128.unmet_dependencies = [MemoryDep('buf124', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (76800, 1)
op128.sizes = ([50, 2, 768], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op128_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf128', get_index_1, load, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='primals_61', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 100})]
op130.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 76800}), MemoryDep('buf129', c0, {c0: 76800})]
op130.met_dependencies = [MemoryDep('primals_62', c1, {c0: 100, c1: 768})]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (100, 768)
op130.sizes = ([100], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op130_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf129', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf130', get_index_3, getitem)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 100})]
op131.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 76800}), MemoryDep('buf129', c0, {c0: 76800})]
op131.met_dependencies = [MemoryDep('primals_62', c1, {c0: 100, c1: 768})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (100, 768)
op131.sizes = ([100], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op131_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf129', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf131', get_index_3, getitem_1)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 76800})]
op133.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 76800}),
        MemoryDep('buf129', c0, {c0: 76800}),
        MemoryDep('buf130', c0, {c0: 100}),
        MemoryDep('buf131', c0, {c0: 100})]
op133.met_dependencies = 
    [   MemoryDep('primals_62', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_63', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_64', c1, {c0: 100, c1: 768})]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (76800, 1)
op133.sizes = ([100, 768], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op133_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf129', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf130', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf131', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_63', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_64', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf133', get_index_7, add_3, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='primals_65', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 307200})]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 307200})]
op135.met_dependencies = [MemoryDep('primals_66', c1, {c0: 100, c1: 3072})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (307200, 1)
op135.sizes = ([100, 3072], [])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_66_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op135_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_66', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf134', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_66', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf135', get_index_4, mul_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='primals_67', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 76800})]
op137.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 76800}),
        MemoryDep('buf129', c0, {c0: 76800}),
        MemoryDep('buf136', c0, {c0: 76800})]
op137.met_dependencies = 
    [   MemoryDep('primals_62', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_68', c1, {c0: 100, c1: 768})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (76800, 1)
op137.sizes = ([100, 768], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_68_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op137_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf129', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_62', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf136', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_68', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf137', get_index_5, add_3, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 100})]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 76800})]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (100, 768)
op138.sizes = ([100], [768])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op138_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf138', get_index_1, getitem)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 100})]
op139.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 76800})]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf139.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (100, 768)
op139.sizes = ([100], [768])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op139_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_1, getitem_1)
        return store_reduction


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 76800})]
op141.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 76800}),
        MemoryDep('buf138', c0, {c0: 100}),
        MemoryDep('buf139', c0, {c0: 100})]
op141.met_dependencies = 
    [   MemoryDep('primals_69', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_70', c1, {c0: 100, c1: 768})]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (76800, 1)
op141.sizes = ([100, 768], [])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op141_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf138', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf139', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_69', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_70', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf141', get_index_5, add_1, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='primals_72', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 76800})]
op143.unmet_dependencies = [   MemoryDep('buf142', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op143.met_dependencies = [MemoryDep('primals_71', c1, {c0: 100, c1: 768})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (76800, 1)
op143.sizes = ([50, 2, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op143_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf143', get_index_2, add, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 76800})]
op144.unmet_dependencies = [   MemoryDep('buf142', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op144.met_dependencies = [MemoryDep('primals_71', c1 + 768, {c0: 100, c1: 768})]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (76800, 1)
op144.sizes = ([50, 2, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op144_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf144', get_index_2, add, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 76800})]
op145.unmet_dependencies = [   MemoryDep('buf142', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op145.met_dependencies = [MemoryDep('primals_71', c1 + 1536, {c0: 100, c1: 768})]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (76800, 1)
op145.sizes = ([50, 2, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op145_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf145', get_index_2, add, None)
        return store


op146: ExternKernelSchedulerNode(FallbackKernel)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = 
    [   StarDep(name='buf143', mode=None),
        StarDep(name='buf144', mode=None),
        StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: FallbackKernel
    buf146.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op147: ExternKernelSchedulerNode(MultiOutput)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: MultiOutput
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = None


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 76800})]
op151.unmet_dependencies = [MemoryDep('buf147', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (76800, 1)
op151.sizes = ([50, 2, 768], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op151_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf151', get_index_1, load, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='primals_73', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
    ]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 100})]
op153.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 76800}), MemoryDep('buf152', c0, {c0: 76800})]
op153.met_dependencies = [MemoryDep('primals_74', c1, {c0: 100, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf153.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (100, 768)
op153.sizes = ([100], [768])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op153_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf153', get_index_3, getitem)
        return store_reduction


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 100})]
op154.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 76800}), MemoryDep('buf152', c0, {c0: 76800})]
op154.met_dependencies = [MemoryDep('primals_74', c1, {c0: 100, c1: 768})]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (100, 768)
op154.sizes = ([100], [768])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op154_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_3, getitem_1)
        return store_reduction


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 76800})]
op156.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 76800}),
        MemoryDep('buf152', c0, {c0: 76800}),
        MemoryDep('buf153', c0, {c0: 100}),
        MemoryDep('buf154', c0, {c0: 100})]
op156.met_dependencies = 
    [   MemoryDep('primals_74', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_75', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_76', c1, {c0: 100, c1: 768})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (76800, 1)
op156.sizes = ([100, 768], [])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op156_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf153', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf154', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_75', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_76', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf156', get_index_7, add_3, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='primals_77', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 307200})]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 307200})]
op158.met_dependencies = [MemoryDep('primals_78', c1, {c0: 100, c1: 3072})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (307200, 1)
op158.sizes = ([100, 3072], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_78_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op158_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_78', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_78', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf158', get_index_4, mul_1, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='primals_79', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 76800})]
op160.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 76800}),
        MemoryDep('buf152', c0, {c0: 76800}),
        MemoryDep('buf159', c0, {c0: 76800})]
op160.met_dependencies = 
    [   MemoryDep('primals_74', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_80', c1, {c0: 100, c1: 768})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (76800, 1)
op160.sizes = ([100, 768], [])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_80_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op160_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf159', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_80', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_3, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 100})]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 76800})]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (100, 768)
op161.sizes = ([100], [768])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op161_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf161', get_index_1, getitem)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 100})]
op162.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 76800})]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (100, 768)
op162.sizes = ([100], [768])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op162_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_1, getitem_1)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 76800})]
op164.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 76800}),
        MemoryDep('buf161', c0, {c0: 100}),
        MemoryDep('buf162', c0, {c0: 100})]
op164.met_dependencies = 
    [   MemoryDep('primals_81', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_82', c1, {c0: 100, c1: 768})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (76800, 1)
op164.sizes = ([100, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_82_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op164_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf161', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf162', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_81', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_82', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf164', get_index_5, add_1, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='primals_84', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 76800})]
op166.unmet_dependencies = [   MemoryDep('buf165', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op166.met_dependencies = [MemoryDep('primals_83', c1, {c0: 100, c1: 768})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (76800, 1)
op166.sizes = ([50, 2, 768], [])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op166_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_83', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf166', get_index_2, add, None)
        return store


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 76800})]
op167.unmet_dependencies = [   MemoryDep('buf165', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op167.met_dependencies = [MemoryDep('primals_83', c1 + 768, {c0: 100, c1: 768})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (76800, 1)
op167.sizes = ([50, 2, 768], [])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op167_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_83', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf167', get_index_2, add, None)
        return store


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 76800})]
op168.unmet_dependencies = [   MemoryDep('buf165', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op168.met_dependencies = [MemoryDep('primals_83', c1 + 1536, {c0: 100, c1: 768})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (76800, 1)
op168.sizes = ([50, 2, 768], [])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op168_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_83', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf168', get_index_2, add, None)
        return store


op169: ExternKernelSchedulerNode(FallbackKernel)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = 
    [   StarDep(name='buf166', mode=None),
        StarDep(name='buf167', mode=None),
        StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: FallbackKernel
    buf169.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op170: ExternKernelSchedulerNode(MultiOutput)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: MultiOutput
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op170.node.kernel = None


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 76800})]
op174.unmet_dependencies = [MemoryDep('buf170', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (76800, 1)
op174.sizes = ([50, 2, 768], [])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op174_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='primals_85', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 100})]
op176.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 76800}), MemoryDep('buf175', c0, {c0: 76800})]
op176.met_dependencies = [MemoryDep('primals_86', c1, {c0: 100, c1: 768})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf176.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (100, 768)
op176.sizes = ([100], [768])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op176_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem)
        return store_reduction


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 100})]
op177.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 76800}), MemoryDep('buf175', c0, {c0: 76800})]
op177.met_dependencies = [MemoryDep('primals_86', c1, {c0: 100, c1: 768})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (100, 768)
op177.sizes = ([100], [768])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op177_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf177', get_index_3, getitem_1)
        return store_reduction


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 76800})]
op179.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 76800}),
        MemoryDep('buf175', c0, {c0: 76800}),
        MemoryDep('buf176', c0, {c0: 100}),
        MemoryDep('buf177', c0, {c0: 100})]
op179.met_dependencies = 
    [   MemoryDep('primals_86', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_87', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_88', c1, {c0: 100, c1: 768})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (76800, 1)
op179.sizes = ([100, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_88_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op179_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf176', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf177', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_87', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_88', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf179', get_index_7, add_3, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='primals_89', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 307200})]
op181.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 307200})]
op181.met_dependencies = [MemoryDep('primals_90', c1, {c0: 100, c1: 3072})]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (307200, 1)
op181.sizes = ([100, 3072], [])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_90_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op181_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_90', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_90', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf181', get_index_4, mul_1, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='primals_91', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 76800})]
op183.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 76800}),
        MemoryDep('buf175', c0, {c0: 76800}),
        MemoryDep('buf182', c0, {c0: 76800})]
op183.met_dependencies = 
    [   MemoryDep('primals_86', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_92', c1, {c0: 100, c1: 768})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (76800, 1)
op183.sizes = ([100, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_92_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op183_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf182', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_92', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf183', get_index_5, add_3, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 100})]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 76800})]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (100, 768)
op184.sizes = ([100], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op184_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf184', get_index_1, getitem)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 100})]
op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 76800})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (100, 768)
op185.sizes = ([100], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op185_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf185', get_index_1, getitem_1)
        return store_reduction


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 76800})]
op187.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf184', c0, {c0: 100}),
        MemoryDep('buf185', c0, {c0: 100})]
op187.met_dependencies = 
    [   MemoryDep('primals_93', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_94', c1, {c0: 100, c1: 768})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (76800, 1)
op187.sizes = ([100, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_94_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op187_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf184', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_93', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_94', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf187', get_index_5, add_1, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='primals_96', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
    ]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 76800})]
op189.unmet_dependencies = [   MemoryDep('buf188', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op189.met_dependencies = [MemoryDep('primals_95', c1, {c0: 100, c1: 768})]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (76800, 1)
op189.sizes = ([50, 2, 768], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op189_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf189', get_index_2, add, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 76800})]
op190.unmet_dependencies = [   MemoryDep('buf188', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op190.met_dependencies = [MemoryDep('primals_95', c1 + 768, {c0: 100, c1: 768})]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (76800, 1)
op190.sizes = ([50, 2, 768], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op190_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf190', get_index_2, add, None)
        return store


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 76800})]
op191.unmet_dependencies = [   MemoryDep('buf188', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op191.met_dependencies = [MemoryDep('primals_95', c1 + 1536, {c0: 100, c1: 768})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (76800, 1)
op191.sizes = ([50, 2, 768], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op191_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf191', get_index_2, add, None)
        return store


op192: ExternKernelSchedulerNode(FallbackKernel)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = 
    [   StarDep(name='buf189', mode=None),
        StarDep(name='buf190', mode=None),
        StarDep(name='buf191', mode=None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: FallbackKernel
    buf192.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op193: ExternKernelSchedulerNode(MultiOutput)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: MultiOutput
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf193.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op193.node.kernel = None


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 76800})]
op197.unmet_dependencies = [MemoryDep('buf193', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (76800, 1)
op197.sizes = ([50, 2, 768], [])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op197_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf197', get_index_1, load, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='primals_97', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op198.node.kernel = extern_kernels.mm


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 100})]
op199.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 76800}), MemoryDep('buf198', c0, {c0: 76800})]
op199.met_dependencies = [MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (100, 768)
op199.sizes = ([100], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op199_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf199', get_index_3, getitem)
        return store_reduction


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 100})]
op200.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 76800}), MemoryDep('buf198', c0, {c0: 76800})]
op200.met_dependencies = [MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (100, 768)
op200.sizes = ([100], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op200_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem_1)
        return store_reduction


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 76800})]
op202.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf198', c0, {c0: 76800}),
        MemoryDep('buf199', c0, {c0: 100}),
        MemoryDep('buf200', c0, {c0: 100})]
op202.met_dependencies = 
    [   MemoryDep('primals_100', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_98', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_99', c1, {c0: 100, c1: 768})]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (76800, 1)
op202.sizes = ([100, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_100_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op202_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf199', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf200', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_99', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_100', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf202', get_index_7, add_3, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='primals_101', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 307200})]
op204.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 307200})]
op204.met_dependencies = [MemoryDep('primals_102', c1, {c0: 100, c1: 3072})]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (307200, 1)
op204.sizes = ([100, 3072], [])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_102_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op204_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_102', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf203', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_102', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf204', get_index_4, mul_1, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='primals_103', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 76800})]
op206.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 76800}),
        MemoryDep('buf198', c0, {c0: 76800}),
        MemoryDep('buf205', c0, {c0: 76800})]
op206.met_dependencies = 
    [   MemoryDep('primals_104', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_98', c1, {c0: 100, c1: 768})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (76800, 1)
op206.sizes = ([100, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_104_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op206_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_104', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf206', get_index_5, add_3, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 100})]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 76800})]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf207.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (100, 768)
op207.sizes = ([100], [768])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op207_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_1, getitem)
        return store_reduction


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 100})]
op208.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 76800})]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf208.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (100, 768)
op208.sizes = ([100], [768])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op208_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf208', get_index_1, getitem_1)
        return store_reduction


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 76800})]
op210.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 76800}),
        MemoryDep('buf207', c0, {c0: 100}),
        MemoryDep('buf208', c0, {c0: 100})]
op210.met_dependencies = 
    [   MemoryDep('primals_105', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_106', c1, {c0: 100, c1: 768})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (76800, 1)
op210.sizes = ([100, 768], [])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_106_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op210_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf207', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf208', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_105', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_106', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, add_1, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='primals_108', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 76800})]
op212.unmet_dependencies = [   MemoryDep('buf211', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op212.met_dependencies = [MemoryDep('primals_107', c1, {c0: 100, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (76800, 1)
op212.sizes = ([50, 2, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op212_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_107', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf212', get_index_2, add, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 76800})]
op213.unmet_dependencies = [   MemoryDep('buf211', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op213.met_dependencies = [MemoryDep('primals_107', c1 + 768, {c0: 100, c1: 768})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (76800, 1)
op213.sizes = ([50, 2, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op213_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_107', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf213', get_index_2, add, None)
        return store


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 76800})]
op214.unmet_dependencies = [   MemoryDep('buf211', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op214.met_dependencies = [MemoryDep('primals_107', c1 + 1536, {c0: 100, c1: 768})]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (76800, 1)
op214.sizes = ([50, 2, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op214_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_107', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf214', get_index_2, add, None)
        return store


op215: ExternKernelSchedulerNode(FallbackKernel)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = 
    [   StarDep(name='buf212', mode=None),
        StarDep(name='buf213', mode=None),
        StarDep(name='buf214', mode=None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: FallbackKernel
    buf215.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op216: ExternKernelSchedulerNode(MultiOutput)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: MultiOutput
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op216.node.kernel = None


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 76800})]
op220.unmet_dependencies = [MemoryDep('buf216', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (76800, 1)
op220.sizes = ([50, 2, 768], [])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op220_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf220', get_index_1, load, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='primals_109', mode=None)]
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op221.node.kernel = extern_kernels.mm


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 100})]
op222.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 76800}), MemoryDep('buf221', c0, {c0: 76800})]
op222.met_dependencies = [MemoryDep('primals_110', c1, {c0: 100, c1: 768})]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf222.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (100, 768)
op222.sizes = ([100], [768])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op222_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem)
        return store_reduction


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 100})]
op223.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 76800}), MemoryDep('buf221', c0, {c0: 76800})]
op223.met_dependencies = [MemoryDep('primals_110', c1, {c0: 100, c1: 768})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (100, 768)
op223.sizes = ([100], [768])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op223_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem_1)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 76800})]
op225.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 76800}),
        MemoryDep('buf221', c0, {c0: 76800}),
        MemoryDep('buf222', c0, {c0: 100}),
        MemoryDep('buf223', c0, {c0: 100})]
op225.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_111', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_112', c1, {c0: 100, c1: 768})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (76800, 1)
op225.sizes = ([100, 768], [])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_112_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op225_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf222', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf223', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_111', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_112', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf225', get_index_7, add_3, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = [StarDep(name='primals_113', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False)]
]
op226.node.kernel = extern_kernels.mm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 307200})]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 307200})]
op227.met_dependencies = [MemoryDep('primals_114', c1, {c0: 100, c1: 3072})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (307200, 1)
op227.sizes = ([100, 3072], [])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_114_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op227_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_114', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf226', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_114', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf227', get_index_4, mul_1, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='primals_115', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 76800})]
op229.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 76800}),
        MemoryDep('buf221', c0, {c0: 76800}),
        MemoryDep('buf228', c0, {c0: 76800})]
op229.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_116', c1, {c0: 100, c1: 768})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (76800, 1)
op229.sizes = ([100, 768], [])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op229_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_110', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_116', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, add_3, None)
        return store


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 100})]
op230.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 76800})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf230.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (100, 768)
op230.sizes = ([100], [768])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op230_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_1, getitem)
        return store_reduction


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 100})]
op231.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 76800})]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf231.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (100, 768)
op231.sizes = ([100], [768])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op231_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf231', get_index_1, getitem_1)
        return store_reduction


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 76800})]
op233.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 76800}),
        MemoryDep('buf230', c0, {c0: 100}),
        MemoryDep('buf231', c0, {c0: 100})]
op233.met_dependencies = 
    [   MemoryDep('primals_117', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_118', c1, {c0: 100, c1: 768})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (76800, 1)
op233.sizes = ([100, 768], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_118_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op233_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf230', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf231', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_117', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_118', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf233', get_index_5, add_1, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = [StarDep(name='primals_120', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op234.node.kernel = extern_kernels.mm


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 76800})]
op235.unmet_dependencies = [   MemoryDep('buf234', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op235.met_dependencies = [MemoryDep('primals_119', c1, {c0: 100, c1: 768})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (76800, 1)
op235.sizes = ([50, 2, 768], [])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op235_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_119', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf235', get_index_2, add, None)
        return store


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 76800})]
op236.unmet_dependencies = [   MemoryDep('buf234', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op236.met_dependencies = [MemoryDep('primals_119', c1 + 768, {c0: 100, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (76800, 1)
op236.sizes = ([50, 2, 768], [])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op236_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_119', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf236', get_index_2, add, None)
        return store


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 76800})]
op237.unmet_dependencies = [   MemoryDep('buf234', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op237.met_dependencies = [MemoryDep('primals_119', c1 + 1536, {c0: 100, c1: 768})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (76800, 1)
op237.sizes = ([50, 2, 768], [])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op237_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_119', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf237', get_index_2, add, None)
        return store


op238: ExternKernelSchedulerNode(FallbackKernel)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = 
    [   StarDep(name='buf235', mode=None),
        StarDep(name='buf236', mode=None),
        StarDep(name='buf237', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: FallbackKernel
    buf238.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op239: ExternKernelSchedulerNode(MultiOutput)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: MultiOutput
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = None


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 76800})]
op243.unmet_dependencies = [MemoryDep('buf239', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (76800, 1)
op243.sizes = ([50, 2, 768], [])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op243_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf243', get_index_1, load, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='primals_121', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 100})]
op245.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 76800}), MemoryDep('buf244', c0, {c0: 76800})]
op245.met_dependencies = [MemoryDep('primals_122', c1, {c0: 100, c1: 768})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (100, 768)
op245.sizes = ([100], [768])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op245_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_3, getitem)
        return store_reduction


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 100})]
op246.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 76800}), MemoryDep('buf244', c0, {c0: 76800})]
op246.met_dependencies = [MemoryDep('primals_122', c1, {c0: 100, c1: 768})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (100, 768)
op246.sizes = ([100], [768])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op246_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf246', get_index_3, getitem_1)
        return store_reduction


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 76800})]
op248.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 76800}),
        MemoryDep('buf244', c0, {c0: 76800}),
        MemoryDep('buf245', c0, {c0: 100}),
        MemoryDep('buf246', c0, {c0: 100})]
op248.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_123', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_124', c1, {c0: 100, c1: 768})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (76800, 1)
op248.sizes = ([100, 768], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_124_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op248_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf245', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf246', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_123', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_124', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf248', get_index_7, add_3, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='primals_125', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 307200})]
op250.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 307200})]
op250.met_dependencies = [MemoryDep('primals_126', c1, {c0: 100, c1: 3072})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (307200, 1)
op250.sizes = ([100, 3072], [])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_126_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op250_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_126', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf249', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_126', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf250', get_index_4, mul_1, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='primals_127', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 76800})]
op252.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 76800}),
        MemoryDep('buf244', c0, {c0: 76800}),
        MemoryDep('buf251', c0, {c0: 76800})]
op252.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_128', c1, {c0: 100, c1: 768})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (76800, 1)
op252.sizes = ([100, 768], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_128_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op252_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf251', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_128', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, add_3, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 100})]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800})]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf253.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (100, 768)
op253.sizes = ([100], [768])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op253_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, getitem)
        return store_reduction


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 100})]
op254.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800})]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf254.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (100, 768)
op254.sizes = ([100], [768])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op254_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_1, getitem_1)
        return store_reduction


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 76800})]
op256.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 76800}),
        MemoryDep('buf253', c0, {c0: 100}),
        MemoryDep('buf254', c0, {c0: 100})]
op256.met_dependencies = 
    [   MemoryDep('primals_129', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_130', c1, {c0: 100, c1: 768})]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (76800, 1)
op256.sizes = ([100, 768], [])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_130_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op256_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf254', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_129', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_130', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf256', get_index_5, add_1, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='primals_132', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op257.node.kernel = extern_kernels.mm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 76800})]
op258.unmet_dependencies = [   MemoryDep('buf257', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op258.met_dependencies = [MemoryDep('primals_131', c1, {c0: 100, c1: 768})]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (76800, 1)
op258.sizes = ([50, 2, 768], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op258_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf258', get_index_2, add, None)
        return store


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 76800})]
op259.unmet_dependencies = [   MemoryDep('buf257', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op259.met_dependencies = [MemoryDep('primals_131', c1 + 768, {c0: 100, c1: 768})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (76800, 1)
op259.sizes = ([50, 2, 768], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op259_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf259', get_index_2, add, None)
        return store


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 76800})]
op260.unmet_dependencies = [   MemoryDep('buf257', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op260.met_dependencies = [MemoryDep('primals_131', c1 + 1536, {c0: 100, c1: 768})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (76800, 1)
op260.sizes = ([50, 2, 768], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op260_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_131', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf260', get_index_2, add, None)
        return store


op261: ExternKernelSchedulerNode(FallbackKernel)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = 
    [   StarDep(name='buf258', mode=None),
        StarDep(name='buf259', mode=None),
        StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: FallbackKernel
    buf261.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op262: ExternKernelSchedulerNode(MultiOutput)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: MultiOutput
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op262.node.kernel = None


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 76800})]
op266.unmet_dependencies = [MemoryDep('buf262', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (76800, 1)
op266.sizes = ([50, 2, 768], [])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op266_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf266', get_index_1, load, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='primals_133', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
    ]
]
op267.node.kernel = extern_kernels.mm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 100})]
op268.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800}), MemoryDep('buf267', c0, {c0: 76800})]
op268.met_dependencies = [MemoryDep('primals_134', c1, {c0: 100, c1: 768})]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (100, 768)
op268.sizes = ([100], [768])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op268_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf267', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf268', get_index_3, getitem)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 100})]
op269.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 76800}), MemoryDep('buf267', c0, {c0: 76800})]
op269.met_dependencies = [MemoryDep('primals_134', c1, {c0: 100, c1: 768})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (100, 768)
op269.sizes = ([100], [768])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op269_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf267', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf269', get_index_3, getitem_1)
        return store_reduction


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 76800})]
op271.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 76800}),
        MemoryDep('buf267', c0, {c0: 76800}),
        MemoryDep('buf268', c0, {c0: 100}),
        MemoryDep('buf269', c0, {c0: 100})]
op271.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_135', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_136', c1, {c0: 100, c1: 768})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (76800, 1)
op271.sizes = ([100, 768], [])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_136_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op271_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf267', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf268', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf269', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_135', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_136', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf271', get_index_7, add_3, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='primals_137', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 307200})]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 307200})]
op273.met_dependencies = [MemoryDep('primals_138', c1, {c0: 100, c1: 3072})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (307200, 1)
op273.sizes = ([100, 3072], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_138_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op273_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_138', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf273', get_index_4, mul_1, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='primals_139', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 76800})]
op275.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 76800}),
        MemoryDep('buf267', c0, {c0: 76800}),
        MemoryDep('buf274', c0, {c0: 76800})]
op275.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_140', c1, {c0: 100, c1: 768})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (76800, 1)
op275.sizes = ([100, 768], [])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_140_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op275_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf267', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf274', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_140', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf275', get_index_5, add_3, None)
        return store


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 100})]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 76800})]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (100, 768)
op276.sizes = ([100], [768])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op276_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_1, getitem)
        return store_reduction


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 100})]
op277.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 76800})]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (100, 768)
op277.sizes = ([100], [768])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op277_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_1, getitem_1)
        return store_reduction


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 76800})]
op279.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 76800}),
        MemoryDep('buf276', c0, {c0: 100}),
        MemoryDep('buf277', c0, {c0: 100})]
op279.met_dependencies = 
    [   MemoryDep('primals_141', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_142', c1, {c0: 100, c1: 768})]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (76800, 1)
op279.sizes = ([100, 768], [])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_142_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op279_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf276', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf277', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_141', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_142', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf279', get_index_5, add_1, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='primals_144', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 76800})]
op281.unmet_dependencies = [   MemoryDep('buf280', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)), {c0: 50, c1: 2, c2: 768})]
op281.met_dependencies = [MemoryDep('primals_143', c1, {c0: 100, c1: 768})]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (76800, 1)
op281.sizes = ([50, 2, 768], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op281_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536))
    index1 = p2
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_143', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf281', get_index_2, add, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 76800})]
op282.unmet_dependencies = [   MemoryDep('buf280', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 768, {c0: 50, c1: 2, c2: 768})]
op282.met_dependencies = [MemoryDep('primals_143', c1 + 768, {c0: 100, c1: 768})]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (76800, 1)
op282.sizes = ([50, 2, 768], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op282_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 768
    index1 = p2 + 768
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_143', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf282', get_index_2, add, None)
        return store


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 76800})]
op283.unmet_dependencies = [   MemoryDep('buf280', 4608*c0 + 2304*c1 + c2 + 4608*(((768*c1 + c2)//1536)) + 1536, {c0: 50, c1: 2, c2: 768})]
op283.met_dependencies = [MemoryDep('primals_143', c1 + 1536, {c0: 100, c1: 768})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (76800, 1)
op283.sizes = ([50, 2, 768], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[100, 2304], stride=[2304, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[768, 64, 1536, 1])
class op283_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 4608*p0 + 2304*p1 + p2 + 4608*(((768*p1 + p2)//1536)) + 1536
    index1 = p2 + 1536
    index2 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_143', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf283', get_index_2, add, None)
        return store


op284: ExternKernelSchedulerNode(FallbackKernel)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = 
    [   StarDep(name='buf281', mode=None),
        StarDep(name='buf282', mode=None),
        StarDep(name='buf283', mode=None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: FallbackKernel
    buf284.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op285: ExternKernelSchedulerNode(MultiOutput)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: MultiOutput
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
    buf285.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op285.node.kernel = None


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 76800})]
op289.unmet_dependencies = [MemoryDep('buf285', 768*c0 + 38400*c1 + c2, {c0: 50, c1: 2, c2: 768})]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (76800, 1)
op289.sizes = ([50, 2, 768], [])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 50, 64], stride=[38400, 64, 768, 1])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 12, 64], stride=[1536, 768, 64, 1])
class op289_loop_body:
    var_ranges = {p0: 50, p1: 2, p2: 768}
    index0 = 768*p0 + 38400*p1 + p2
    index1 = 1536*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf289', get_index_1, load, None)
        return store


op290: ExternKernelSchedulerNode(ExternKernelOut)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = [StarDep(name='primals_145', mode=None)]
op290.outputs = [
    buf290: ExternKernelOut
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf290.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op290.node.kernel = extern_kernels.mm


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 100})]
op291.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 76800}), MemoryDep('buf290', c0, {c0: 76800})]
op291.met_dependencies = [MemoryDep('primals_146', c1, {c0: 100, c1: 768})]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf291.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (100, 768)
op291.sizes = ([100], [768])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op291_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf290', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf291', get_index_3, getitem)
        return store_reduction


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 100})]
op292.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 76800}), MemoryDep('buf290', c0, {c0: 76800})]
op292.met_dependencies = [MemoryDep('primals_146', c1, {c0: 100, c1: 768})]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
    buf292.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (100, 768)
op292.sizes = ([100], [768])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
class op292_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf290', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf292', get_index_3, getitem_1)
        return store_reduction


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 76800})]
op294.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 76800}),
        MemoryDep('buf290', c0, {c0: 76800}),
        MemoryDep('buf291', c0, {c0: 100}),
        MemoryDep('buf292', c0, {c0: 100})]
op294.met_dependencies = 
    [   MemoryDep('primals_146', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_147', c1, {c0: 100, c1: 768}),
        MemoryDep('primals_148', c1, {c0: 100, c1: 768})]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (76800, 1)
op294.sizes = ([100, 768], [])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 1], stride=[2, 1, 100])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_148_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
class op294_loop_body:
    var_ranges = {p0: 100, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf290', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf291', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf292', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_147', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_148', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf294', get_index_7, add_3, None)
        return store


op295: ExternKernelSchedulerNode(ExternKernelOut)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op295.met_dependencies = [StarDep(name='primals_149', mode=None)]
op295.outputs = [
    buf295: ExternKernelOut
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False)]
]
op295.node.kernel = extern_kernels.mm


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 307200})]
op296.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 307200})]
op296.met_dependencies = [MemoryDep('primals_150', c1, {c0: 100, c1: 3072})]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (307200, 1)
op296.sizes = ([100, 3072], [])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[100, 3072], stride=[3072, 1])
primals_150_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 3072], stride=[6144, 3072, 1])
class op296_loop_body:
    var_ranges = {p0: 100, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_150', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf295', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_150', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(1.702, torch.float32)
        mul = ops.mul(add_1, constant)
        sigmoid = ops.sigmoid(mul)
        mul_1 = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf296', get_index_4, mul_1, None)
        return store


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='primals_151', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 1536})]
op298.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 1536}),
        MemoryDep('buf290', c0, {c0: 1536}),
        MemoryDep('buf297', c0, {c0: 1536})]
op298.met_dependencies = 
    [   MemoryDep('primals_146', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_152', c1, {c0: 2, c1: 768})]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (1536, 1)
op298.sizes = ([2, 768], [])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf297_layout = FixedLayout('cuda:0', torch.float32, size=[100, 768], stride=[768, 1])
primals_152_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op298_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf290', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf297', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_152', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf298', get_index_5, add_3, None)
        return store


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 2})]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 1536})]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf299.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (2, 768)
op299.sizes = ([2], [768])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
class op299_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf299', get_index_1, getitem)
        return store_reduction


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 2})]
op300.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 1536})]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
    buf300.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (2, 768)
op300.sizes = ([2], [768])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
class op300_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_1, getitem_1)
        return store_reduction


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 1536})]
op302.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 1536}),
        MemoryDep('buf299', c0, {c0: 2}),
        MemoryDep('buf300', c0, {c0: 2})]
op302.met_dependencies = 
    [   MemoryDep('primals_153', c1, {c0: 2, c1: 768}),
        MemoryDep('primals_154', c1, {c0: 2, c1: 768})]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (1536, 1)
op302.sizes = ([2, 768], [])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 2])
primals_153_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_154_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op302_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf300', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_153', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_154', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf302', get_index_5, add_1, None)
        return store


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='primals_155', mode=None)]
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[2, 512], stride=[512, 1])
    buf303.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.node.kernel = extern_kernels.mm


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 75264})]
op304.unmet_dependencies = [MemoryDep('buf114', 768*c0 + 1536*c1 + c2 + 1536, {c0: 2, c1: 49, c2: 768})]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf304.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op304.group.device = cuda:0
op304.group.iteration = (75264, 1)
op304.sizes = ([2, 49, 768], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op304_loop_body:
    var_ranges = {p0: 2, p1: 49, p2: 768}
    index0 = 768*p0 + 1536*p1 + p2 + 1536
    index1 = 37632*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf304', get_index_1, load, None)
        return store


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 75264})]
op305.unmet_dependencies = [MemoryDep('buf206', 768*c0 + 1536*c1 + c2 + 1536, {c0: 2, c1: 49, c2: 768})]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf305.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (75264, 1)
op305.sizes = ([2, 49, 768], [])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[50, 2, 768], stride=[1536, 768, 1])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op305_loop_body:
    var_ranges = {p0: 2, p1: 49, p2: 768}
    index0 = 768*p0 + 1536*p1 + p2 + 1536
    index1 = 37632*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf305', get_index_1, load, None)
        return store


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 6912})]
op306.unmet_dependencies = []
op306.met_dependencies = 
    [   MemoryDep('primals_156', c0 + 6912*c1, {c0: 6912, c1: 256}),
        MemoryDep('primals_157', c1, {c0: 6912, c1: 256})]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=True),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (6912, 256)
op306.sizes = ([6912], [256])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
primals_157_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op306_loop_body:
    var_ranges = {p0: 6912, p1: 256}
    index0 = p0 + 6912*p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_157', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf306', get_index_2, reduction)
        return store_reduction


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', 0, {})]
op307.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 6912})]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (1, 6912)
op307.sizes = ([], [6912])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf307_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op307_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf307', get_index_1, reduction)
        return store_reduction


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 6912})]
op308.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 6912}), MemoryDep('buf307', 0, {})]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (6912, 1)
op308.sizes = ([6912], [])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf307_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op308_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf307', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf308', get_index_2, truediv, None)
        return store


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 256})]
op309.unmet_dependencies = [MemoryDep('buf308', c1, {c0: 256, c1: 6912})]
op309.met_dependencies = [MemoryDep('primals_156', c0, {c0: 1769472})]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (256, 6912)
op309.sizes = ([256], [6912])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op309_loop_body:
    var_ranges = {p0: 256, p1: 6912}
    index0 = 6912*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf308', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf309', get_index_2, reduction)
        return store_reduction


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', 0, {})]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 256})]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf310.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (1, 256)
op310.sizes = ([], [256])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op310_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf310', get_index_1, reduction)
        return store_reduction


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 256})]
op311.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 256}), MemoryDep('buf310', 0, {})]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op311.group.device = cuda:0
op311.group.iteration = (256, 1)
op311.sizes = ([256], [])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op311_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf310', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf311', get_index_2, truediv, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', 0, {})]
op312.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 256}), MemoryDep('buf311', c0, {c0: 256})]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (1, 256)
op312.sizes = ([], [256])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf312_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op312_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf312', get_index_2, reduction)
        return store_reduction


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 1769472})]
op313.unmet_dependencies = [MemoryDep('buf312', 0, {})]
op313.met_dependencies = [MemoryDep('primals_156', c0, {c0: 1769472})]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (1769472, 1)
op313.sizes = ([1769472], [])
primals_156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf312_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf313_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op313_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf312', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf313', get_index_2, truediv, None)
        return store


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9})]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 1769472})]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (1769472, 1)
op314.sizes = ([256, 768, 9], [])
buf313_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf314_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
class op314_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf314', get_index_1, load, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelAlloc)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf304', mode=None), StarDep(name='buf314', mode=None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ExternKernelAlloc
    buf315.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
    ]
]
op315.node.kernel = extern_kernels.convolution


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 41472})]
op316.unmet_dependencies = [MemoryDep('buf315', 12544*c0 + 1792*c1 + c2 - 2048, {c0: 2, c1: 9, c2: 2304})]
op316.met_dependencies = [MemoryDep('primals_159', c1, {c0: 162, c1: 256})]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (41472, 1)
op316.sizes = ([2, 9, 9, 256], [])
buf315_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_159_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
class op316_loop_body:
    var_ranges = {p0: 2, p1: 9, p2: 9, p3: 256}
    index0 = p1 - 1
    index1 = p2 - 1
    index2 = 12544*p0 + 1792*p1 + 256*p2 + p3 - 2048
    index3 = p3
    index4 = 20736*p0 + 2304*p1 + 256*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf316', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('primals_159', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf315', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_159', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf315', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_159', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        return where


op317: ExternKernelSchedulerNode(ExternKernelAlloc)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='primals_160', mode=None)]
op317.outputs = [
    buf317: ExternKernelAlloc
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op317.node.kernel = extern_kernels.convolution


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', 0, {})]
op318.unmet_dependencies = []
op318.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256}), MemoryDep('primals_162', 0, {})]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=True),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (1, 256)
op318.sizes = ([], [256])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op318_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_162', get_index_1)
        mul = ops.mul(load, load_1)
        mul_1 = ops.mul(mul, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf318', get_index_2, reduction)
        return store_reduction


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', 0, {})]
op319.unmet_dependencies = [MemoryDep('buf318', 0, {})]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (1, 1)
op319.sizes = ([], [])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op319_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf319', get_index_1, maximum, None)
        return store


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', 0, {})]
op320.unmet_dependencies = [MemoryDep('buf319', 0, {})]
op320.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256}), MemoryDep('primals_162', 0, {})]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (1, 256)
op320.sizes = ([], [256])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op320_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_161', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_162', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf319', get_index_3)
        truediv = ops.truediv(mul, load_3)
        mul_1 = ops.mul(load, truediv)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf320', get_index_4, reduction)
        return store_reduction


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 256})]
op321.unmet_dependencies = [MemoryDep('buf320', 0, {})]
op321.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256})]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
    buf321.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (256, 1)
op321.sizes = ([256], [])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
class op321_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf320', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf320', get_index_2)
        mul = ops.mul(load_2, load_2)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_1, maximum)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf320', get_index_3)
        mul_1 = ops.mul(truediv, load_3)
        truediv_1 = ops.truediv(load, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf321', get_index_4, truediv_1, None)
        return store


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 18432})]
op322.unmet_dependencies = [MemoryDep('buf317', 1536*c0 + c1 + 256*c2, {c0: 12, c1: 256, c2: 6})]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (18432, 1)
op322.sizes = ([12, 256, 6], [])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
class op322_loop_body:
    var_ranges = {p0: 12, p1: 256, p2: 6}
    index0 = 1536*p0 + p1 + 256*p2
    index1 = 1536*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf322', get_index_1, load, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelAlloc)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf321', mode=None), StarDep(name='buf322', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ExternKernelAlloc
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False)]
]
op323.node.kernel = extern_kernels.convolution


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 18})]
op324.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 18})]
op324.met_dependencies = [MemoryDep('primals_164', 0, {})]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf324.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op324.group.device = cuda:0
op324.group.iteration = (18, 1)
op324.sizes = ([18], [])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
primals_164_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
class op324_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_164', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf324', get_index_2, add, None)
        return store


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 6912})]
op325.unmet_dependencies = []
op325.met_dependencies = 
    [   MemoryDep('primals_165', c0 + 6912*c1, {c0: 6912, c1: 256}),
        MemoryDep('primals_166', c1, {c0: 6912, c1: 256})]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=True),
    ]
]
op325.group.device = cuda:0
op325.group.iteration = (6912, 256)
op325.sizes = ([6912], [256])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
primals_166_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op325_loop_body:
    var_ranges = {p0: 6912, p1: 256}
    index0 = p0 + 6912*p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_166', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf325', get_index_2, reduction)
        return store_reduction


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', 0, {})]
op326.unmet_dependencies = [MemoryDep('buf325', c0, {c0: 6912})]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (1, 6912)
op326.sizes = ([], [6912])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op326_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf326', get_index_1, reduction)
        return store_reduction


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 6912})]
op327.unmet_dependencies = [MemoryDep('buf325', c0, {c0: 6912}), MemoryDep('buf326', 0, {})]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op327.group.device = cuda:0
op327.group.iteration = (6912, 1)
op327.sizes = ([6912], [])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
class op327_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf326', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf327', get_index_2, truediv, None)
        return store


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 256})]
op328.unmet_dependencies = [MemoryDep('buf327', c1, {c0: 256, c1: 6912})]
op328.met_dependencies = [MemoryDep('primals_165', c0, {c0: 1769472})]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (256, 6912)
op328.sizes = ([256], [6912])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op328_loop_body:
    var_ranges = {p0: 256, p1: 6912}
    index0 = 6912*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf327', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf328', get_index_2, reduction)
        return store_reduction


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', 0, {})]
op329.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 256})]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (1, 256)
op329.sizes = ([], [256])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op329_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf329', get_index_1, reduction)
        return store_reduction


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 256})]
op330.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 256}), MemoryDep('buf329', 0, {})]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (256, 1)
op330.sizes = ([256], [])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op330_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf329', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf330', get_index_2, truediv, None)
        return store


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', 0, {})]
op331.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 256}), MemoryDep('buf330', c0, {c0: 256})]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (1, 256)
op331.sizes = ([], [256])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op331_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf328', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf331', get_index_2, reduction)
        return store_reduction


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1769472})]
op332.unmet_dependencies = [MemoryDep('buf331', 0, {})]
op332.met_dependencies = [MemoryDep('primals_165', c0, {c0: 1769472})]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (1769472, 1)
op332.sizes = ([1769472], [])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
class op332_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf331', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf332', get_index_2, truediv, None)
        return store


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', 6912*c0 + c1 + 768*c2, {c0: 256, c1: 768, c2: 9})]
op333.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 1769472})]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
    buf333.users = [NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (1769472, 1)
op333.sizes = ([256, 768, 9], [])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 9, 3, 1])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[256, 768, 3, 3], stride=[6912, 1, 2304, 768])
class op333_loop_body:
    var_ranges = {p0: 256, p1: 768, p2: 9}
    index0 = 6912*p0 + 9*p1 + p2
    index1 = 6912*p0 + p1 + 768*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf333', get_index_1, load, None)
        return store


op334: ExternKernelSchedulerNode(ExternKernelAlloc)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf305', mode=None), StarDep(name='buf333', mode=None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ExternKernelAlloc
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
    ]
]
op334.node.kernel = extern_kernels.convolution


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 41472})]
op335.unmet_dependencies = [MemoryDep('buf334', 12544*c0 + 1792*c1 + c2 - 2048, {c0: 2, c1: 9, c2: 2304})]
op335.met_dependencies = [MemoryDep('primals_168', c1, {c0: 162, c1: 256})]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
    buf335.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (41472, 1)
op335.sizes = ([2, 9, 9, 256], [])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_168_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 9, 9], stride=[20736, 1, 2304, 256])
class op335_loop_body:
    var_ranges = {p0: 2, p1: 9, p2: 9, p3: 256}
    index0 = p1 - 1
    index1 = p2 - 1
    index2 = 12544*p0 + 1792*p1 + 256*p2 + p3 - 2048
    index3 = p3
    index4 = 20736*p0 + 2304*p1 + 256*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf335', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('primals_168', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf334', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_168', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf334', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('primals_168', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        return where


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='primals_169', mode=None)]
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', 0, {})]
op337.unmet_dependencies = []
op337.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256}), MemoryDep('primals_171', 0, {})]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=True),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (1, 256)
op337.sizes = ([], [256])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op337_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_171', get_index_1)
        mul = ops.mul(load, load_1)
        mul_1 = ops.mul(mul, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf337', get_index_2, reduction)
        return store_reduction


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', 0, {})]
op338.unmet_dependencies = [MemoryDep('buf337', 0, {})]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (1, 1)
op338.sizes = ([], [])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op338_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, maximum, None)
        return store


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', 0, {})]
op339.unmet_dependencies = [MemoryDep('buf338', 0, {})]
op339.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256}), MemoryDep('primals_171', 0, {})]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (1, 256)
op339.sizes = ([], [256])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op339_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_170', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_171', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf338', get_index_3)
        truediv = ops.truediv(mul, load_3)
        mul_1 = ops.mul(load, truediv)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf339', get_index_4, reduction)
        return store_reduction


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 256})]
op340.unmet_dependencies = [MemoryDep('buf339', 0, {})]
op340.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256})]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
    buf340.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (256, 1)
op340.sizes = ([256], [])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf340_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
class op340_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf339', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf339', get_index_2)
        mul = ops.mul(load_2, load_2)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_1, maximum)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf339', get_index_3)
        mul_1 = ops.mul(truediv, load_3)
        truediv_1 = ops.truediv(load, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf340', get_index_4, truediv_1, None)
        return store


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 18432})]
op341.unmet_dependencies = [MemoryDep('buf336', 1536*c0 + c1 + 256*c2, {c0: 12, c1: 256, c2: 6})]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (18432, 1)
op341.sizes = ([12, 256, 6], [])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 1, 1536, 256])
buf341_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 6, 6], stride=[9216, 6, 1536, 1])
class op341_loop_body:
    var_ranges = {p0: 12, p1: 256, p2: 6}
    index0 = 1536*p0 + p1 + 256*p2
    index1 = 1536*p0 + 6*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf341', get_index_1, load, None)
        return store


op342: ExternKernelSchedulerNode(ExternKernelAlloc)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf340', mode=None), StarDep(name='buf341', mode=None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ExternKernelAlloc
    buf342.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op342.node.kernel = extern_kernels.convolution


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 18})]
op343.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 18})]
op343.met_dependencies = [MemoryDep('primals_173', 0, {})]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (18, 1)
op343.sizes = ([18], [])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
primals_173_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
class op343_loop_body:
    var_ranges = {p0: 18}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_173', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf343', get_index_2, add, None)
        return store


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1024})]
op344.unmet_dependencies = []
op344.met_dependencies = 
    [   MemoryDep('primals_174', 65536*c0 + c1 + 512*c2, {c0: 2, c1: 512, c2: 128}),
        MemoryDep('primals_175', 128*c0 + c2, {c0: 2, c1: 512, c2: 128})]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[512, 2], stride=[1, 512])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=True),
    ]
]
op344.group.device = cuda:0
op344.group.iteration = (1024, 128)
op344.sizes = ([2, 512], [128])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
primals_175_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[512, 2], stride=[1, 512])
class op344_loop_body:
    var_ranges = {p0: 2, p1: 512, p2: 128}
    index0 = 65536*p0 + p1 + 512*p2
    index1 = 128*p0 + p2
    index2 = 512*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_175', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf344', get_index_2, reduction)
        return store_reduction


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 512})]
op345.unmet_dependencies = [MemoryDep('buf344', c0 + 512*c1, {c0: 512, c1: 2})]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (512, 2)
op345.sizes = ([512], [2])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[512, 2], stride=[1, 512])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
class op345_loop_body:
    var_ranges = {p0: 512, p1: 2}
    index0 = p0 + 512*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf345', get_index_1, reduction)
        return store_reduction


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', 0, {})]
op346.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 512})]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (1, 512)
op346.sizes = ([], [512])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op346_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf346', get_index_1, reduction)
        return store_reduction


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 512})]
op347.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 512}), MemoryDep('buf346', 0, {})]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op347.group.device = cuda:0
op347.group.iteration = (512, 1)
op347.sizes = ([512], [])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
class op347_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf346', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf347', get_index_2, truediv, None)
        return store


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 256})]
op348.unmet_dependencies = [MemoryDep('buf347', c1, {c0: 256, c1: 512})]
op348.met_dependencies = [MemoryDep('primals_174', c0, {c0: 131072})]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
    ]
]
op348.group.device = cuda:0
op348.group.iteration = (256, 512)
op348.sizes = ([256], [512])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op348_loop_body:
    var_ranges = {p0: 256, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf347', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf348', get_index_2, reduction)
        return store_reduction


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', 0, {})]
op349.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 256})]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (1, 256)
op349.sizes = ([], [256])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op349_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf349', get_index_1, reduction)
        return store_reduction


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 256})]
op350.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 256}), MemoryDep('buf349', 0, {})]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op350.group.device = cuda:0
op350.group.iteration = (256, 1)
op350.sizes = ([256], [])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf350_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op350_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf349', get_index_1)
        sqrt = ops.sqrt(load_1)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf350', get_index_2, truediv, None)
        return store


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', 0, {})]
op351.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 256}), MemoryDep('buf350', c0, {c0: 256})]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op351.group.device = cuda:0
op351.group.iteration = (1, 256)
op351.sizes = ([], [256])
buf350_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op351_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf348', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf351', get_index_2, reduction)
        return store_reduction


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 131072})]
op352.unmet_dependencies = [MemoryDep('buf351', 0, {})]
op352.met_dependencies = [MemoryDep('primals_174', c0, {c0: 131072})]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
    buf352.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (131072, 1)
op352.sizes = ([131072], [])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[256, 512], stride=[512, 1])
class op352_loop_body:
    var_ranges = {p0: 131072}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf351', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf352', get_index_2, truediv, None)
        return store


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf303', mode=None), StarDep(name='buf352', mode=None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 512})]
op354.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 512})]
op354.met_dependencies = [MemoryDep('primals_177', c1, {c0: 2, c1: 256})]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
    buf354.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (512, 1)
op354.sizes = ([2, 256], [])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
primals_177_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256], stride=[256, 1])
class op354_loop_body:
    var_ranges = {p0: 2, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_177', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf353', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_177', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf353', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_177', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf354', get_index_6, where, None)
        return store


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', 0, {})]
op355.unmet_dependencies = []
op355.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256}), MemoryDep('primals_179', 0, {})]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=True),
    ]
]
op355.group.device = cuda:0
op355.group.iteration = (1, 256)
op355.sizes = ([], [256])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op355_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_179', get_index_1)
        mul = ops.mul(load, load_1)
        mul_1 = ops.mul(mul, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf355', get_index_2, reduction)
        return store_reduction


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', 0, {})]
op356.unmet_dependencies = [MemoryDep('buf355', 0, {})]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (1, 1)
op356.sizes = ([], [])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op356_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf356', get_index_1, maximum, None)
        return store


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', 0, {})]
op357.unmet_dependencies = [MemoryDep('buf356', 0, {})]
op357.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256}), MemoryDep('primals_179', 0, {})]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op357.group.device = cuda:0
op357.group.iteration = (1, 256)
op357.sizes = ([], [256])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf357_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
class op357_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_179', get_index_2)
        mul = ops.mul(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf356', get_index_3)
        truediv = ops.truediv(mul, load_3)
        mul_1 = ops.mul(load, truediv)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf357', get_index_4, reduction)
        return store_reduction


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 256})]
op358.unmet_dependencies = [MemoryDep('buf357', 0, {})]
op358.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256})]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
    buf358.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op358.group.device = cuda:0
op358.group.iteration = (256, 1)
op358.sizes = ([256], [])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
buf357_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf358_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
class op358_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf357', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf357', get_index_2)
        mul = ops.mul(load_2, load_2)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load_1, maximum)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf357', get_index_3)
        mul_1 = ops.mul(truediv, load_3)
        truediv_1 = ops.truediv(load, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf358', get_index_4, truediv_1, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelOut)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf354', mode=None), StarDep(name='buf358', mode=None)]
op360.met_dependencies = [StarDep(name='primals_181', mode=None)]
op360.outputs = [
    buf360: ExternKernelOut
    buf360.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op360.node.kernel = extern_kernels.addmm


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 2})]
op361.unmet_dependencies = [MemoryDep('buf324', c0, {c0: 18})]
op361.met_dependencies = []
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (2, 9)
op361.sizes = ([2], [9])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
buf361_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
class op361_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        constant = ops.constant(0.0, torch.float32)
        mul = ops.mul(constant, load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf324', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf324', get_index_2)
        abs_1 = ops.abs(load_2)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub = ops.sub(minimum, log1p)
        sub_1 = ops.sub(mul, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub_1)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf361', get_index_3, reduction)
        return store_reduction


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 2})]
op362.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 18})]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (2, 9)
op362.sizes = ([2], [9])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1, 3, 3], stride=[9, 1, 3, 1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
class op362_loop_body:
    var_ranges = {p0: 2, p1: 9}
    index0 = 9*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        constant = ops.constant(0.0, torch.float32)
        mul = ops.mul(constant, load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_1, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        abs_1 = ops.abs(load_2)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub = ops.sub(minimum, log1p)
        sub_1 = ops.sub(mul, sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub_1)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf362', get_index_3, reduction)
        return store_reduction


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 2})]
op363.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2}),
        MemoryDep('buf361', c0, {c0: 2}),
        MemoryDep('buf362', c0, {c0: 2})]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
    buf363.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (2, 1)
op363.sizes = ([2], [])
buf361_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[2], stride=[1])
buf360_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[2, 1], stride=[1, 1])
class op363_loop_body:
    var_ranges = {p0: 2}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        constant = ops.constant(9.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        add = ops.add(truediv, constant_1)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        constant_2 = ops.constant(9.0, torch.float32)
        truediv_1 = ops.truediv(load_1, constant_2)
        add_1 = ops.add(add, truediv_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        constant_3 = ops.constant(0.0, torch.float32)
        mul = ops.mul(constant_3, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf360', get_index_3)
        constant_4 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_4, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf360', get_index_4)
        abs_1 = ops.abs(load_4)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub = ops.sub(minimum, log1p)
        sub_1 = ops.sub(mul, sub)
        add_2 = ops.add(add_1, sub_1)
        constant_5 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(add_2, constant_5)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf363', get_index_5, add_3, None)
        return store


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 25088})]
op364.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 25088})]
op364.met_dependencies = [MemoryDep('primals_168', c1, {c0: 98, c1: 256})]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf364.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (25088, 1)
op364.sizes = ([98, 256], [])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_168_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf364_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op364_loop_body:
    var_ranges = {p0: 98, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_168', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf334', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_168', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf334', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_168', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        constant_2 = ops.constant(0.0, torch.float32)
        gt_1 = ops.gt(where, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf364', get_index_6, gt_1, None)
        return store


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 25088})]
op365.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 25088})]
op365.met_dependencies = [MemoryDep('primals_159', c1, {c0: 98, c1: 256})]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf365.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (25088, 1)
op365.sizes = ([98, 256], [])
buf315_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
primals_159_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf365_layout = FixedLayout('cuda:0', torch.bool, size=[2, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op365_loop_body:
    var_ranges = {p0: 98, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_159', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        gt = ops.gt(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf315', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_159', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf315', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_159', get_index_5)
        add_2 = ops.add(load_4, load_5)
        constant_1 = ops.constant(0.2, torch.float32)
        mul = ops.mul(add_2, constant_1)
        where = ops.where(gt, add_1, mul)
        constant_2 = ops.constant(0.0, torch.float32)
        gt_1 = ops.gt(where, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf365', get_index_6, gt_1, None)
        return store


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 256})]
op367.unmet_dependencies = 
    [   MemoryDep('buf311', c0, {c0: 256}),
        WeakDep(name='buf306', mutating_buf='buf367')]
op367.met_dependencies = [StarDep(name='primals_157', mode=None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf367.mutations = ['primals_157']
    buf367.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (256, 1)
op367.sizes = ([256], [])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_157_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf367_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op367_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf367', get_index_1, load, None)
        return store


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 6912})]
op368.unmet_dependencies = [MemoryDep('buf308', c0, {c0: 6912})]
op368.met_dependencies = [StarDep(name='primals_158', mode=None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
    buf368.mutations = ['primals_158']
    buf368.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (6912, 1)
op368.sizes = ([6912], [])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
primals_158_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf368_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
class op368_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf368', get_index_1, load, None)
        return store


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 256})]
op372.unmet_dependencies = [MemoryDep('buf319', 0, {})]
op372.met_dependencies = [MemoryDep('primals_161', c0, {c0: 256}), MemoryDep('primals_162', 0, {})]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (256, 1)
op372.sizes = ([256], [])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op372_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_162', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf319', get_index_2)
        truediv = ops.truediv(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf372', get_index_3, truediv, None)
        return store


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', 0, {})]
op374.unmet_dependencies = 
    [   MemoryDep('buf320', 0, {}),
        WeakDep(name='buf318', mutating_buf='buf374'),
        WeakDep(name='buf320', mutating_buf='buf374'),
        WeakDep(name='buf372', mutating_buf='buf374')]
op374.met_dependencies = [StarDep(name='primals_162', mode=None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf374.mutations = ['primals_162']
    buf374.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (1, 1)
op374.sizes = ([], [])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_162_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf374_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op374_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf320', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf374', get_index_2, truediv, None)
        return store


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 256})]
op375.unmet_dependencies = [MemoryDep('buf372', c0, {c0: 256})]
op375.met_dependencies = [StarDep(name='primals_163', mode=None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf375.mutations = ['primals_163']
    buf375.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (256, 1)
op375.sizes = ([256], [])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_163_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf375_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op375_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf375', get_index_1, load, None)
        return store


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 256})]
op377.unmet_dependencies = 
    [   MemoryDep('buf330', c0, {c0: 256}),
        WeakDep(name='buf325', mutating_buf='buf377')]
op377.met_dependencies = [StarDep(name='primals_166', mode=None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf377.mutations = ['primals_166']
    buf377.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (256, 1)
op377.sizes = ([256], [])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_166_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf377_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op377_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf377', get_index_1, load, None)
        return store


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 6912})]
op378.unmet_dependencies = [MemoryDep('buf327', c0, {c0: 6912})]
op378.met_dependencies = [StarDep(name='primals_167', mode=None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
    buf378.mutations = ['primals_167']
    buf378.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (6912, 1)
op378.sizes = ([6912], [])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
primals_167_layout = FixedLayout('cuda:0', torch.float32, size=[6912], stride=[1])
buf378_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[6912], stride=[1])
class op378_loop_body:
    var_ranges = {p0: 6912}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf378', get_index_1, load, None)
        return store


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 256})]
op382.unmet_dependencies = [MemoryDep('buf338', 0, {})]
op382.met_dependencies = [MemoryDep('primals_170', c0, {c0: 256}), MemoryDep('primals_171', 0, {})]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf382.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
    ]
]
op382.group.device = cuda:0
op382.group.iteration = (256, 1)
op382.sizes = ([256], [])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf382_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op382_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_171', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf338', get_index_2)
        truediv = ops.truediv(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf382', get_index_3, truediv, None)
        return store


op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', 0, {})]
op384.unmet_dependencies = 
    [   MemoryDep('buf339', 0, {}),
        WeakDep(name='buf337', mutating_buf='buf384'),
        WeakDep(name='buf339', mutating_buf='buf384'),
        WeakDep(name='buf382', mutating_buf='buf384')]
op384.met_dependencies = [StarDep(name='primals_171', mode=None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf384.mutations = ['primals_171']
    buf384.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (1, 1)
op384.sizes = ([], [])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf384_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op384_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf339', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf384', get_index_2, truediv, None)
        return store


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 256})]
op385.unmet_dependencies = [MemoryDep('buf382', c0, {c0: 256})]
op385.met_dependencies = [StarDep(name='primals_172', mode=None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf385.mutations = ['primals_172']
    buf385.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (256, 1)
op385.sizes = ([256], [])
buf382_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_172_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf385_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op385_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf385', get_index_1, load, None)
        return store


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 256})]
op387.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 256}),
        WeakDep(name='buf344', mutating_buf='buf387')]
op387.met_dependencies = [StarDep(name='primals_175', mode=None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf387.mutations = ['primals_175']
    buf387.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (256, 1)
op387.sizes = ([256], [])
buf350_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_175_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf387_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op387_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf387', get_index_1, load, None)
        return store


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 512})]
op388.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 512})]
op388.met_dependencies = [StarDep(name='primals_176', mode=None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[512], stride=[1])
    buf388.mutations = ['primals_176']
    buf388.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (512, 1)
op388.sizes = ([512], [])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_176_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf388_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[512], stride=[1])
class op388_loop_body:
    var_ranges = {p0: 512}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf388', get_index_1, load, None)
        return store


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 256})]
op392.unmet_dependencies = [MemoryDep('buf356', 0, {})]
op392.met_dependencies = [MemoryDep('primals_178', c0, {c0: 256}), MemoryDep('primals_179', 0, {})]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=True),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (256, 1)
op392.sizes = ([256], [])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[1, 256], stride=[256, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf392_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
class op392_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_179', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf356', get_index_2)
        truediv = ops.truediv(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf392', get_index_3, truediv, None)
        return store


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', 0, {})]
op394.unmet_dependencies = 
    [   MemoryDep('buf357', 0, {}),
        WeakDep(name='buf355', mutating_buf='buf394'),
        WeakDep(name='buf357', mutating_buf='buf394'),
        WeakDep(name='buf392', mutating_buf='buf394')]
op394.met_dependencies = [StarDep(name='primals_179', mode=None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
    buf394.mutations = ['primals_179']
    buf394.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (1, 1)
op394.sizes = ([], [])
buf357_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[1], stride=[1])
buf394_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[1], stride=[1])
class op394_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf357', get_index_1)
        mul = ops.mul(load_1, load_1)
        sqrt = ops.sqrt(mul)
        constant = ops.constant(1e-12, torch.float32)
        maximum = ops.maximum(sqrt, constant)
        truediv = ops.truediv(load, maximum)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf394', get_index_2, truediv, None)
        return store


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 256})]
op395.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 256})]
op395.met_dependencies = [StarDep(name='primals_180', mode=None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
    buf395.mutations = ['primals_180']
    buf395.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (256, 1)
op395.sizes = ([256], [])
buf392_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_180_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf395_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[256], stride=[1])
class op395_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf395', get_index_1, load, None)
        return store


