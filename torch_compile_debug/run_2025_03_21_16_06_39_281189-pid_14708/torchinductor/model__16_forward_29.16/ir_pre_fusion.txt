op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 27*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 9})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('primals_5', c0, {c0: 1728})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[64, 3, 3, 3], stride=[27, 1, 9, 3])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (1728, 1)
op0.sizes = ([64, 3, 9], [])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[64, 3, 3, 3], stride=[27, 9, 3, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[64, 3, 3, 3], stride=[27, 1, 9, 3])
class op0_loop_body:
    var_ranges = {p0: 64, p1: 3, p2: 9}
    index0 = 27*p0 + 9*p1 + p2
    index1 = 27*p0 + p1 + 3*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_5', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9})]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('primals_7', c0, {c0: 36864})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (36864, 1)
op1.sizes = ([64, 64, 9], [])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op1_loop_body:
    var_ranges = {p0: 64, p1: 64, p2: 9}
    index0 = 576*p0 + 9*p1 + p2
    index1 = 576*p0 + p1 + 64*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_7', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 576*c0 + c1 + 64*c2, {c0: 128, c1: 64, c2: 9})]
op2.unmet_dependencies = []
op2.met_dependencies = [MemoryDep('primals_9', c0, {c0: 73728})]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[128, 64, 3, 3], stride=[576, 1, 192, 64])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (73728, 1)
op2.sizes = ([128, 64, 9], [])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[128, 64, 3, 3], stride=[576, 1, 192, 64])
class op2_loop_body:
    var_ranges = {p0: 128, p1: 64, p2: 9}
    index0 = 576*p0 + 9*p1 + p2
    index1 = 576*p0 + p1 + 64*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_9', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, load, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9})]
op3.unmet_dependencies = []
op3.met_dependencies = [MemoryDep('primals_11', c0, {c0: 147456})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (147456, 1)
op3.sizes = ([128, 128, 9], [])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op3_loop_body:
    var_ranges = {p0: 128, p1: 128, p2: 9}
    index0 = 1152*p0 + 9*p1 + p2
    index1 = 1152*p0 + p1 + 128*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf3', get_index_1, load, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 1152*c0 + c1 + 128*c2, {c0: 256, c1: 128, c2: 9})]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('primals_13', c0, {c0: 294912})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[256, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (294912, 1)
op4.sizes = ([256, 128, 9], [])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[256, 128, 3, 3], stride=[1152, 1, 384, 128])
class op4_loop_body:
    var_ranges = {p0: 256, p1: 128, p2: 9}
    index0 = 1152*p0 + 9*p1 + p2
    index1 = 1152*p0 + p1 + 128*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
op5.unmet_dependencies = []
op5.met_dependencies = [MemoryDep('primals_15', c0, {c0: 589824})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (589824, 1)
op5.sizes = ([256, 256, 9], [])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op5_loop_body:
    var_ranges = {p0: 256, p1: 256, p2: 9}
    index0 = 2304*p0 + 9*p1 + p2
    index1 = 2304*p0 + p1 + 256*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_15', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
op6.unmet_dependencies = []
op6.met_dependencies = [MemoryDep('primals_17', c0, {c0: 589824})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (589824, 1)
op6.sizes = ([256, 256, 9], [])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op6_loop_body:
    var_ranges = {p0: 256, p1: 256, p2: 9}
    index0 = 2304*p0 + 9*p1 + p2
    index1 = 2304*p0 + p1 + 256*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_17', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, load, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 2304*c0 + c1 + 256*c2, {c0: 512, c1: 256, c2: 9})]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('primals_19', c0, {c0: 1179648})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[512, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (1179648, 1)
op7.sizes = ([512, 256, 9], [])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[512, 256, 3, 3], stride=[2304, 1, 768, 256])
class op7_loop_body:
    var_ranges = {p0: 512, p1: 256, p2: 9}
    index0 = 2304*p0 + 9*p1 + p2
    index1 = 2304*p0 + p1 + 256*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_19', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op8.unmet_dependencies = []
op8.met_dependencies = [MemoryDep('primals_21', c0, {c0: 2359296})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf8.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (2359296, 1)
op8.sizes = ([512, 512, 9], [])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op8_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_21', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf8', get_index_1, load, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('primals_23', c0, {c0: 2359296})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (2359296, 1)
op9.sizes = ([512, 512, 9], [])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op9_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_23', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op10.unmet_dependencies = []
op10.met_dependencies = [MemoryDep('primals_25', c0, {c0: 2359296})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (2359296, 1)
op10.sizes = ([512, 512, 9], [])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op10_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op11.unmet_dependencies = []
op11.met_dependencies = [MemoryDep('primals_27', c0, {c0: 2359296})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (2359296, 1)
op11.sizes = ([512, 512, 9], [])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op11_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op12.unmet_dependencies = []
op12.met_dependencies = [MemoryDep('primals_29', c0, {c0: 2359296})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (2359296, 1)
op12.sizes = ([512, 512, 9], [])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op12_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 196608*c0 + c1 + 3*c2, {c0: 4, c1: 3, c2: 65536})]
op13.unmet_dependencies = []
op13.met_dependencies = 
    [   MemoryDep('primals_1', c1, {c0: 4, c1: 3}),
        MemoryDep('primals_2', c0, {c0: 786432}),
        MemoryDep('primals_3', c1, {c0: 4, c1: 3})]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (786432, 1)
op13.sizes = ([4, 3, 65536], [])
primals_2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[1, 3, 1, 1], stride=[3, 1, 1, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 3, 1, 1], stride=[3, 1, 1, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 1, 768, 3])
class op13_loop_body:
    var_ranges = {p0: 4, p1: 3, p2: 65536}
    index0 = 196608*p0 + 65536*p1 + p2
    index1 = p1
    index2 = 196608*p0 + p1 + 3*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_3', get_index_2)
        truediv = ops.truediv(sub, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf13', get_index_3, truediv, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 16777216})]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 16777216})]
op15.met_dependencies = [MemoryDep('primals_6', c1, {c0: 262144, c1: 64})]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (16777216, 1)
op15.sizes = ([262144, 64], [])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[64], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op15_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf15', get_index_2, relu, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf1', mode=None), StarDep(name='buf15', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 16777216})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 16777216})]
op17.met_dependencies = [MemoryDep('primals_8', c1, {c0: 262144, c1: 64})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (16777216, 1)
op17.sizes = ([262144, 64], [])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[64], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op17_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_8', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf17', get_index_2, relu, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4194304})]
op18.unmet_dependencies = 
    [   MemoryDep('buf17', 32768*c0 + 128*c1 + c2 + 16384, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf17', 32768*c0 + 128*c1 + c2 + 16448, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf17', 32768*c0 + 128*c1 + c2 + 64, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf17', 32768*c0 + 128*c1 + c2, {c0: 512, c1: 128, c2: 64})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (4194304, 1)
op18.sizes = ([512, 128, 64], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op18_loop_body:
    var_ranges = {p0: 512, p1: 128, p2: 64}
    index0 = 32768*p0 + 128*p1 + p2
    index1 = 32768*p0 + 128*p1 + p2 + 64
    index2 = 32768*p0 + 128*p1 + p2 + 16384
    index3 = 32768*p0 + 128*p1 + p2 + 16448
    index4 = 8192*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf17', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf17', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf18', get_index_4, maximum_2, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 4194304})]
op19.unmet_dependencies = 
    [   MemoryDep('buf17', 32768*c0 + 128*c1 + c2 + 16384, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf17', 32768*c0 + 128*c1 + c2 + 16448, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf17', 32768*c0 + 128*c1 + c2 + 64, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf17', 32768*c0 + 128*c1 + c2, {c0: 512, c1: 128, c2: 64})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.int8, size=[4, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf19.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (4194304, 1)
op19.sizes = ([512, 128, 64], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf19_layout = FixedLayout('cuda:0', torch.int8, size=[4, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op19_loop_body:
    var_ranges = {p0: 512, p1: 128, p2: 64}
    index0 = 32768*p0 + 128*p1 + p2
    index1 = 32768*p0 + 128*p1 + p2 + 64
    index2 = 32768*p0 + 128*p1 + p2 + 16384
    index3 = 32768*p0 + 128*p1 + p2 + 16448
    index4 = 8192*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        gt = ops.gt(load_1, load)
        constant = ops.constant(1, torch.int8)
        constant_1 = ops.constant(0, torch.int8)
        where = ops.where(gt, constant, constant_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf17', get_index_2)
        gt_1 = ops.gt(load_2, maximum)
        constant_2 = ops.constant(2, torch.int8)
        where_1 = ops.where(gt_1, constant_2, where)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf17', get_index_3)
        gt_2 = ops.gt(load_3, maximum_1)
        constant_3 = ops.constant(3, torch.int8)
        where_2 = ops.where(gt_2, constant_3, where_1)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf19', get_index_4, where_2, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf18', mode=None), StarDep(name='buf2', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 8388608})]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 8388608})]
op21.met_dependencies = [MemoryDep('primals_10', c1, {c0: 65536, c1: 128})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf21.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (8388608, 1)
op21.sizes = ([65536, 128], [])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op21_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_10', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf21', get_index_2, relu, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None), StarDep(name='buf3', mode=None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 8388608})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 8388608})]
op23.met_dependencies = [MemoryDep('primals_12', c1, {c0: 65536, c1: 128})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (8388608, 1)
op23.sizes = ([65536, 128], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op23_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_12', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, relu, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 2097152})]
op24.unmet_dependencies = 
    [   MemoryDep('buf23', 32768*c0 + 256*c1 + c2 + 128, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf23', 32768*c0 + 256*c1 + c2 + 16384, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf23', 32768*c0 + 256*c1 + c2 + 16512, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf23', 32768*c0 + 256*c1 + c2, {c0: 256, c1: 64, c2: 128})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (2097152, 1)
op24.sizes = ([256, 64, 128], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op24_loop_body:
    var_ranges = {p0: 256, p1: 64, p2: 128}
    index0 = 32768*p0 + 256*p1 + p2
    index1 = 32768*p0 + 256*p1 + p2 + 128
    index2 = 32768*p0 + 256*p1 + p2 + 16384
    index3 = 32768*p0 + 256*p1 + p2 + 16512
    index4 = 8192*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf23', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf23', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf24', get_index_4, maximum_2, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 2097152})]
op25.unmet_dependencies = 
    [   MemoryDep('buf23', 32768*c0 + 256*c1 + c2 + 128, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf23', 32768*c0 + 256*c1 + c2 + 16384, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf23', 32768*c0 + 256*c1 + c2 + 16512, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf23', 32768*c0 + 256*c1 + c2, {c0: 256, c1: 64, c2: 128})]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.int8, size=[4, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf25.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (2097152, 1)
op25.sizes = ([256, 64, 128], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf25_layout = FixedLayout('cuda:0', torch.int8, size=[4, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op25_loop_body:
    var_ranges = {p0: 256, p1: 64, p2: 128}
    index0 = 32768*p0 + 256*p1 + p2
    index1 = 32768*p0 + 256*p1 + p2 + 128
    index2 = 32768*p0 + 256*p1 + p2 + 16384
    index3 = 32768*p0 + 256*p1 + p2 + 16512
    index4 = 8192*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf23', get_index_1)
        gt = ops.gt(load_1, load)
        constant = ops.constant(1, torch.int8)
        constant_1 = ops.constant(0, torch.int8)
        where = ops.where(gt, constant, constant_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf23', get_index_2)
        gt_1 = ops.gt(load_2, maximum)
        constant_2 = ops.constant(2, torch.int8)
        where_1 = ops.where(gt_1, constant_2, where)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf23', get_index_3)
        gt_2 = ops.gt(load_3, maximum_1)
        constant_3 = ops.constant(3, torch.int8)
        where_2 = ops.where(gt_2, constant_3, where_1)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf25', get_index_4, where_2, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf4', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 4194304})]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 4194304})]
op27.met_dependencies = [MemoryDep('primals_14', c1, {c0: 16384, c1: 256})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf27.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (4194304, 1)
op27.sizes = ([16384, 256], [])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op27_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf27', get_index_2, relu, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None), StarDep(name='buf5', mode=None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 4194304})]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 4194304})]
op29.met_dependencies = [MemoryDep('primals_16', c1, {c0: 16384, c1: 256})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (4194304, 1)
op29.sizes = ([16384, 256], [])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op29_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf29', get_index_2, relu, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None), StarDep(name='buf6', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 4194304})]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 4194304})]
op31.met_dependencies = [MemoryDep('primals_18', c1, {c0: 16384, c1: 256})]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (4194304, 1)
op31.sizes = ([16384, 256], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op31_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_18', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf31', get_index_2, relu, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1048576})]
op32.unmet_dependencies = 
    [   MemoryDep('buf31', 32768*c0 + 512*c1 + c2 + 16384, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf31', 32768*c0 + 512*c1 + c2 + 16640, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf31', 32768*c0 + 512*c1 + c2 + 256, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf31', 32768*c0 + 512*c1 + c2, {c0: 128, c1: 32, c2: 256})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (1048576, 1)
op32.sizes = ([128, 32, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op32_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 256}
    index0 = 32768*p0 + 512*p1 + p2
    index1 = 32768*p0 + 512*p1 + p2 + 256
    index2 = 32768*p0 + 512*p1 + p2 + 16384
    index3 = 32768*p0 + 512*p1 + p2 + 16640
    index4 = 8192*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf31', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf31', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf31', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf32', get_index_4, maximum_2, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1048576})]
op33.unmet_dependencies = 
    [   MemoryDep('buf31', 32768*c0 + 512*c1 + c2 + 16384, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf31', 32768*c0 + 512*c1 + c2 + 16640, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf31', 32768*c0 + 512*c1 + c2 + 256, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf31', 32768*c0 + 512*c1 + c2, {c0: 128, c1: 32, c2: 256})]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.int8, size=[4, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf33.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1048576, 1)
op33.sizes = ([128, 32, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf33_layout = FixedLayout('cuda:0', torch.int8, size=[4, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op33_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 256}
    index0 = 32768*p0 + 512*p1 + p2
    index1 = 32768*p0 + 512*p1 + p2 + 256
    index2 = 32768*p0 + 512*p1 + p2 + 16384
    index3 = 32768*p0 + 512*p1 + p2 + 16640
    index4 = 8192*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf31', get_index_1)
        gt = ops.gt(load_1, load)
        constant = ops.constant(1, torch.int8)
        constant_1 = ops.constant(0, torch.int8)
        where = ops.where(gt, constant, constant_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf31', get_index_2)
        gt_1 = ops.gt(load_2, maximum)
        constant_2 = ops.constant(2, torch.int8)
        where_1 = ops.where(gt_1, constant_2, where)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf31', get_index_3)
        gt_2 = ops.gt(load_3, maximum_1)
        constant_3 = ops.constant(3, torch.int8)
        where_2 = ops.where(gt_2, constant_3, where_1)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf33', get_index_4, where_2, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None), StarDep(name='buf7', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2097152})]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 2097152})]
op35.met_dependencies = [MemoryDep('primals_20', c1, {c0: 4096, c1: 512})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf35.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (2097152, 1)
op35.sizes = ([4096, 512], [])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op35_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_20', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf35', get_index_2, relu, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelAlloc)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None), StarDep(name='buf8', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ExternKernelAlloc
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.convolution


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 2097152})]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 2097152})]
op37.met_dependencies = [MemoryDep('primals_22', c1, {c0: 4096, c1: 512})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (2097152, 1)
op37.sizes = ([4096, 512], [])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op37_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf37', get_index_2, relu, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf9', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 2097152})]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 2097152})]
op39.met_dependencies = [MemoryDep('primals_24', c1, {c0: 4096, c1: 512})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (2097152, 1)
op39.sizes = ([4096, 512], [])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op39_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_24', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf39', get_index_2, relu, None)
        return store


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 524288})]
op40.unmet_dependencies = 
    [   MemoryDep('buf39', 32768*c0 + 1024*c1 + c2 + 16384, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf39', 32768*c0 + 1024*c1 + c2 + 16896, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf39', 32768*c0 + 1024*c1 + c2 + 512, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf39', 32768*c0 + 1024*c1 + c2, {c0: 64, c1: 16, c2: 512})]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (524288, 1)
op40.sizes = ([64, 16, 512], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op40_loop_body:
    var_ranges = {p0: 64, p1: 16, p2: 512}
    index0 = 32768*p0 + 1024*p1 + p2
    index1 = 32768*p0 + 1024*p1 + p2 + 512
    index2 = 32768*p0 + 1024*p1 + p2 + 16384
    index3 = 32768*p0 + 1024*p1 + p2 + 16896
    index4 = 8192*p0 + 512*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf39', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf39', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf40', get_index_4, maximum_2, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 524288})]
op41.unmet_dependencies = 
    [   MemoryDep('buf39', 32768*c0 + 1024*c1 + c2 + 16384, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf39', 32768*c0 + 1024*c1 + c2 + 16896, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf39', 32768*c0 + 1024*c1 + c2 + 512, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf39', 32768*c0 + 1024*c1 + c2, {c0: 64, c1: 16, c2: 512})]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.int8, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf41.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (524288, 1)
op41.sizes = ([64, 16, 512], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf41_layout = FixedLayout('cuda:0', torch.int8, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op41_loop_body:
    var_ranges = {p0: 64, p1: 16, p2: 512}
    index0 = 32768*p0 + 1024*p1 + p2
    index1 = 32768*p0 + 1024*p1 + p2 + 512
    index2 = 32768*p0 + 1024*p1 + p2 + 16384
    index3 = 32768*p0 + 1024*p1 + p2 + 16896
    index4 = 8192*p0 + 512*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_1)
        gt = ops.gt(load_1, load)
        constant = ops.constant(1, torch.int8)
        constant_1 = ops.constant(0, torch.int8)
        where = ops.where(gt, constant, constant_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf39', get_index_2)
        gt_1 = ops.gt(load_2, maximum)
        constant_2 = ops.constant(2, torch.int8)
        where_1 = ops.where(gt_1, constant_2, where)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf39', get_index_3)
        gt_2 = ops.gt(load_3, maximum_1)
        constant_3 = ops.constant(3, torch.int8)
        where_2 = ops.where(gt_2, constant_3, where_1)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf41', get_index_4, where_2, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf40', mode=None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 524288})]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 524288})]
op43.met_dependencies = [MemoryDep('primals_26', c1, {c0: 1024, c1: 512})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (524288, 1)
op43.sizes = ([1024, 512], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op43_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_26', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf43', get_index_2, relu, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf43', mode=None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 524288})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 524288})]
op45.met_dependencies = [MemoryDep('primals_28', c1, {c0: 1024, c1: 512})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (524288, 1)
op45.sizes = ([1024, 512], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op45_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, relu, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 524288})]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 524288})]
op47.met_dependencies = [MemoryDep('primals_30', c1, {c0: 1024, c1: 512})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (524288, 1)
op47.sizes = ([1024, 512], [])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op47_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_30', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf47', get_index_2, add, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', 196608*c0 + c1 + 3*c2, {c0: 4, c1: 3, c2: 65536})]
op48.unmet_dependencies = []
op48.met_dependencies = 
    [   MemoryDep('primals_1', c1, {c0: 4, c1: 3}),
        MemoryDep('primals_3', c1, {c0: 4, c1: 3}),
        MemoryDep('primals_4', c0, {c0: 786432})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (786432, 1)
op48.sizes = ([4, 3, 65536], [])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[1, 3, 1, 1], stride=[3, 1, 1, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[1, 3, 1, 1], stride=[3, 1, 1, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 1, 768, 3])
class op48_loop_body:
    var_ranges = {p0: 4, p1: 3, p2: 65536}
    index0 = 196608*p0 + 65536*p1 + p2
    index1 = p1
    index2 = 196608*p0 + p1 + 3*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_3', get_index_2)
        truediv = ops.truediv(sub, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf48', get_index_3, truediv, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.convolution


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 16777216})]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 16777216})]
op50.met_dependencies = [MemoryDep('primals_6', c1, {c0: 262144, c1: 64})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (16777216, 1)
op50.sizes = ([262144, 64], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[64], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op50_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf50', get_index_2, relu, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf1', mode=None), StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.convolution


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 16777216})]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 16777216})]
op52.met_dependencies = [MemoryDep('primals_8', c1, {c0: 262144, c1: 64})]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (16777216, 1)
op52.sizes = ([262144, 64], [])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[64], stride=[1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op52_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_8', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf52', get_index_2, relu, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 4194304})]
op53.unmet_dependencies = 
    [   MemoryDep('buf52', 32768*c0 + 128*c1 + c2 + 16384, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf52', 32768*c0 + 128*c1 + c2 + 16448, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf52', 32768*c0 + 128*c1 + c2 + 64, {c0: 512, c1: 128, c2: 64}),
        MemoryDep('buf52', 32768*c0 + 128*c1 + c2, {c0: 512, c1: 128, c2: 64})]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (4194304, 1)
op53.sizes = ([512, 128, 64], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op53_loop_body:
    var_ranges = {p0: 512, p1: 128, p2: 64}
    index0 = 32768*p0 + 128*p1 + p2
    index1 = 32768*p0 + 128*p1 + p2 + 64
    index2 = 32768*p0 + 128*p1 + p2 + 16384
    index3 = 32768*p0 + 128*p1 + p2 + 16448
    index4 = 8192*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf52', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf52', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf53', get_index_4, maximum_2, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf2', mode=None), StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 8388608})]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 8388608})]
op55.met_dependencies = [MemoryDep('primals_10', c1, {c0: 65536, c1: 128})]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (8388608, 1)
op55.sizes = ([65536, 128], [])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op55_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_10', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf55', get_index_2, relu, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf3', mode=None), StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 8388608})]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 8388608})]
op57.met_dependencies = [MemoryDep('primals_12', c1, {c0: 65536, c1: 128})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (8388608, 1)
op57.sizes = ([65536, 128], [])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op57_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_12', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf57', get_index_2, relu, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2097152})]
op58.unmet_dependencies = 
    [   MemoryDep('buf57', 32768*c0 + 256*c1 + c2 + 128, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf57', 32768*c0 + 256*c1 + c2 + 16384, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf57', 32768*c0 + 256*c1 + c2 + 16512, {c0: 256, c1: 64, c2: 128}),
        MemoryDep('buf57', 32768*c0 + 256*c1 + c2, {c0: 256, c1: 64, c2: 128})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (2097152, 1)
op58.sizes = ([256, 64, 128], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op58_loop_body:
    var_ranges = {p0: 256, p1: 64, p2: 128}
    index0 = 32768*p0 + 256*p1 + p2
    index1 = 32768*p0 + 256*p1 + p2 + 128
    index2 = 32768*p0 + 256*p1 + p2 + 16384
    index3 = 32768*p0 + 256*p1 + p2 + 16512
    index4 = 8192*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf57', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf57', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf58', get_index_4, maximum_2, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf58', mode=None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 4194304})]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 4194304})]
op60.met_dependencies = [MemoryDep('primals_14', c1, {c0: 16384, c1: 256})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (4194304, 1)
op60.sizes = ([16384, 256], [])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op60_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, relu, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf5', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 4194304})]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 4194304})]
op62.met_dependencies = [MemoryDep('primals_16', c1, {c0: 16384, c1: 256})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (4194304, 1)
op62.sizes = ([16384, 256], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op62_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf62', get_index_2, relu, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf62', mode=None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 4194304})]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 4194304})]
op64.met_dependencies = [MemoryDep('primals_18', c1, {c0: 16384, c1: 256})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (4194304, 1)
op64.sizes = ([16384, 256], [])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op64_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_18', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf64', get_index_2, relu, None)
        return store


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1048576})]
op65.unmet_dependencies = 
    [   MemoryDep('buf64', 32768*c0 + 512*c1 + c2 + 16384, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf64', 32768*c0 + 512*c1 + c2 + 16640, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf64', 32768*c0 + 512*c1 + c2 + 256, {c0: 128, c1: 32, c2: 256}),
        MemoryDep('buf64', 32768*c0 + 512*c1 + c2, {c0: 128, c1: 32, c2: 256})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1048576, 1)
op65.sizes = ([128, 32, 256], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op65_loop_body:
    var_ranges = {p0: 128, p1: 32, p2: 256}
    index0 = 32768*p0 + 512*p1 + p2
    index1 = 32768*p0 + 512*p1 + p2 + 256
    index2 = 32768*p0 + 512*p1 + p2 + 16384
    index3 = 32768*p0 + 512*p1 + p2 + 16640
    index4 = 8192*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf64', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf64', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf64', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf65', get_index_4, maximum_2, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None), StarDep(name='buf7', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 2097152})]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 2097152})]
op67.met_dependencies = [MemoryDep('primals_20', c1, {c0: 4096, c1: 512})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (2097152, 1)
op67.sizes = ([4096, 512], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op67_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_20', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf67', get_index_2, relu, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None), StarDep(name='buf8', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2097152})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 2097152})]
op69.met_dependencies = [MemoryDep('primals_22', c1, {c0: 4096, c1: 512})]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (2097152, 1)
op69.sizes = ([4096, 512], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op69_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, relu, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None), StarDep(name='buf9', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 2097152})]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 2097152})]
op71.met_dependencies = [MemoryDep('primals_24', c1, {c0: 4096, c1: 512})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (2097152, 1)
op71.sizes = ([4096, 512], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op71_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_24', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf71', get_index_2, relu, None)
        return store


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 524288})]
op72.unmet_dependencies = 
    [   MemoryDep('buf71', 32768*c0 + 1024*c1 + c2 + 16384, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf71', 32768*c0 + 1024*c1 + c2 + 16896, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf71', 32768*c0 + 1024*c1 + c2 + 512, {c0: 64, c1: 16, c2: 512}),
        MemoryDep('buf71', 32768*c0 + 1024*c1 + c2, {c0: 64, c1: 16, c2: 512})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (524288, 1)
op72.sizes = ([64, 16, 512], [])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op72_loop_body:
    var_ranges = {p0: 64, p1: 16, p2: 512}
    index0 = 32768*p0 + 1024*p1 + p2
    index1 = 32768*p0 + 1024*p1 + p2 + 512
    index2 = 32768*p0 + 1024*p1 + p2 + 16384
    index3 = 32768*p0 + 1024*p1 + p2 + 16896
    index4 = 8192*p0 + 512*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf71', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf71', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf72', get_index_4, maximum_2, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelAlloc)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf72', mode=None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ExternKernelAlloc
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
]
op73.node.kernel = extern_kernels.convolution


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 524288})]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 524288})]
op74.met_dependencies = [MemoryDep('primals_26', c1, {c0: 1024, c1: 512})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (524288, 1)
op74.sizes = ([1024, 512], [])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op74_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_26', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf74', get_index_2, relu, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 524288})]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 524288})]
op76.met_dependencies = [MemoryDep('primals_28', c1, {c0: 1024, c1: 512})]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (524288, 1)
op76.sizes = ([1024, 512], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op76_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf76', get_index_2, relu, None)
        return store


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 524288})]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 524288})]
op78.met_dependencies = [MemoryDep('primals_30', c1, {c0: 1024, c1: 512})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (524288, 1)
op78.sizes = ([1024, 512], [])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op78_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_30', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, add, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 262144})]
op79.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 16777216})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (262144, 64)
op79.sizes = ([262144], [64])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
class op79_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, reduction)
        return store_reduction


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 262144})]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 262144})]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (262144, 1)
op80.sizes = ([262144], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
class op80_loop_body:
    var_ranges = {p0: 262144}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        sqrt = ops.sqrt(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf80', get_index_1, sqrt, None)
        return store


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 262144})]
op81.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 16777216})]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (262144, 64)
op81.sizes = ([262144], [64])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
class op81_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf81', get_index_1, reduction)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 16777216})]
op82.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 16777216}),
        MemoryDep('buf52', c0, {c0: 16777216}),
        MemoryDep('buf80', c0, {c0: 262144}),
        MemoryDep('buf81', c0, {c0: 262144})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (16777216, 1)
op82.sizes = ([262144, 64], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op82_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf80', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf81', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf82', get_index_4, mul, None)
        return store


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 65536})]
op83.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 8388608})]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (65536, 128)
op83.sizes = ([65536], [128])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
class op83_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf83', get_index_1, reduction)
        return store_reduction


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 65536})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 65536})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (65536, 1)
op84.sizes = ([65536], [])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
class op84_loop_body:
    var_ranges = {p0: 65536}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        sqrt = ops.sqrt(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf84', get_index_1, sqrt, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 65536})]
op85.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 8388608})]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (65536, 128)
op85.sizes = ([65536], [128])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
class op85_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_1, reduction)
        return store_reduction


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 8388608})]
op86.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 8388608}),
        MemoryDep('buf57', c0, {c0: 8388608}),
        MemoryDep('buf84', c0, {c0: 65536}),
        MemoryDep('buf85', c0, {c0: 65536})]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (8388608, 1)
op86.sizes = ([65536, 128], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op86_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf85', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf86', get_index_4, mul, None)
        return store


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 16384})]
op87.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 4194304})]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (16384, 256)
op87.sizes = ([16384], [256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
class op87_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, reduction)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 16384})]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 16384})]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op88.group.device = cuda:0
op88.group.iteration = (16384, 1)
op88.sizes = ([16384], [])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
class op88_loop_body:
    var_ranges = {p0: 16384}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        sqrt = ops.sqrt(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf88', get_index_1, sqrt, None)
        return store


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 16384})]
op89.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 4194304})]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (16384, 256)
op89.sizes = ([16384], [256])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
class op89_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_1, reduction)
        return store_reduction


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 4194304})]
op90.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 4194304}),
        MemoryDep('buf64', c0, {c0: 4194304}),
        MemoryDep('buf88', c0, {c0: 16384}),
        MemoryDep('buf89', c0, {c0: 16384})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (4194304, 1)
op90.sizes = ([16384, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op90_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf64', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf89', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf90', get_index_4, mul, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 4096})]
op91.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 2097152})]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (4096, 512)
op91.sizes = ([4096], [512])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
class op91_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf91', get_index_1, reduction)
        return store_reduction


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 4096})]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 4096})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (4096, 1)
op92.sizes = ([4096], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
class op92_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        sqrt = ops.sqrt(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, sqrt, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 4096})]
op93.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 2097152})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (4096, 512)
op93.sizes = ([4096], [512])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
class op93_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, reduction)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 2097152})]
op94.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 2097152}),
        MemoryDep('buf71', c0, {c0: 2097152}),
        MemoryDep('buf92', c0, {c0: 4096}),
        MemoryDep('buf93', c0, {c0: 4096})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (2097152, 1)
op94.sizes = ([4096, 512], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op94_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf93', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf94', get_index_4, mul, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1024})]
op95.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 524288})]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1024, 16, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1024, 512)
op95.sizes = ([1024], [512])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1024, 16, 1])
class op95_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        relu = ops.relu(load)
        mul = ops.mul(relu, relu)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, reduction)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1024})]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 1024})]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (1024, 1)
op96.sizes = ([1024], [])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1024, 16, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
class op96_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        sqrt = ops.sqrt(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf96', get_index_1, sqrt, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 1024})]
op97.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 524288})]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1024, 16, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (1024, 512)
op97.sizes = ([1024], [512])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1024, 16, 1])
class op97_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        relu = ops.relu(load)
        mul = ops.mul(relu, relu)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_1, reduction)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1024})]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 1024})]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (1024, 1)
op98.sizes = ([1024], [])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1024, 16, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
class op98_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        sqrt = ops.sqrt(load)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(sqrt, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf98', get_index_1, add, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 524288})]
op99.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 524288}),
        MemoryDep('buf78', c0, {c0: 524288}),
        MemoryDep('buf96', c0, {c0: 1024}),
        MemoryDep('buf98', c0, {c0: 1024})]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (524288, 1)
op99.sizes = ([1024, 512], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op99_loop_body:
    var_ranges = {p0: 1024, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf96', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(relu, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        relu_1 = ops.relu(load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf98', get_index_3)
        truediv_1 = ops.truediv(relu_1, load_3)
        sub = ops.sub(truediv, truediv_1)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf99', get_index_4, mul, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op100.met_dependencies = [StarDep(name='primals_31', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 32})]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 262144})]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1, 8], stride=[8, 32, 32, 32, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (32, 8192)
op101.sizes = ([32], [8192])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1, 8], stride=[8, 32, 32, 32, 1])
class op101_loop_body:
    var_ranges = {p0: 32, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf101', get_index_1, reduction)
        return store_reduction


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 4})]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 32})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
    buf102.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (4, 8)
op102.sizes = ([4], [8])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1, 8], stride=[8, 32, 32, 32, 1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
class op102_loop_body:
    var_ranges = {p0: 4, p1: 8}
    index0 = 8*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf102', get_index_1, reduction)
        return store_reduction


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op103.met_dependencies = [StarDep(name='primals_32', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 8})]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 65536})]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1, 2], stride=[2, 8, 8, 8, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (8, 8192)
op104.sizes = ([8], [8192])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1, 2], stride=[2, 8, 8, 8, 1])
class op104_loop_body:
    var_ranges = {p0: 8, p1: 8192}
    index0 = 8192*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf104', get_index_1, reduction)
        return store_reduction


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 4})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 8})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
    buf105.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (4, 2)
op105.sizes = ([4], [2])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1, 2], stride=[2, 8, 8, 8, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
class op105_loop_body:
    var_ranges = {p0: 4, p1: 2}
    index0 = 2*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, reduction)
        return store_reduction


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op106.met_dependencies = [StarDep(name='primals_33', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 4})]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 16384})]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
    buf107.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (4, 4096)
op107.sizes = ([4], [4096])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
class op107_loop_body:
    var_ranges = {p0: 4, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_1, reduction)
        return store_reduction


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op108.met_dependencies = [StarDep(name='primals_34', mode=None)]
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 4})]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 4096})]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
    buf109.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (4, 1024)
op109.sizes = ([4], [1024])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
class op109_loop_body:
    var_ranges = {p0: 4, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_1, reduction)
        return store_reduction


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op110.met_dependencies = [StarDep(name='primals_35', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 4})]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 1024})]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (4, 256)
op111.sizes = ([4], [256])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 16, 16], stride=[256, 1, 16, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
class op111_loop_body:
    var_ranges = {p0: 4, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf111', get_index_1, reduction)
        return store_reduction


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 4})]
op112.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 4}),
        MemoryDep('buf105', c0, {c0: 4}),
        MemoryDep('buf107', c0, {c0: 4}),
        MemoryDep('buf109', c0, {c0: 4}),
        MemoryDep('buf111', c0, {c0: 4})]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 1, 1, 1])
    buf112.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (4, 1)
op112.sizes = ([4], [])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 4, 4, 4])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1, 1], stride=[1, 1, 1, 1])
class op112_loop_body:
    var_ranges = {p0: 4}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        add = ops.add(truediv, constant_1)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        constant_2 = ops.constant(16384.0, torch.float32)
        truediv_1 = ops.truediv(load_1, constant_2)
        add_1 = ops.add(add, truediv_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf107', get_index_2)
        constant_3 = ops.constant(4096.0, torch.float32)
        truediv_2 = ops.truediv(load_2, constant_3)
        add_2 = ops.add(add_1, truediv_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf109', get_index_3)
        constant_4 = ops.constant(1024.0, torch.float32)
        truediv_3 = ops.truediv(load_3, constant_4)
        add_3 = ops.add(add_2, truediv_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf111', get_index_4)
        constant_5 = ops.constant(256.0, torch.float32)
        truediv_4 = ops.truediv(load_4, constant_5)
        add_4 = ops.add(add_3, truediv_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf112', get_index_5, add_4, None)
        return store


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 2097152})]
op113.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 2097152}),
        MemoryDep('buf71', c0, {c0: 2097152}),
        MemoryDep('buf92', c0, {c0: 4096}),
        MemoryDep('buf93', c0, {c0: 4096})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf113.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (2097152, 1)
op113.sizes = ([4096, 512], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 4096, 32, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op113_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf93', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(sub, constant_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf113', get_index_4, mul, None)
        return store


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 2097152})]
op114.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 2097152}), MemoryDep('buf92', c0, {c0: 4096})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf114.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (2097152, 1)
op114.sizes = ([4096, 512], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 32, 32], stride=[1024, 1, 32, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op114_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf92', get_index_2)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(load_2, constant_1)
        truediv_1 = ops.truediv(truediv, add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf114', get_index_3, truediv_1, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 4194304})]
op115.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 4194304}),
        MemoryDep('buf64', c0, {c0: 4194304}),
        MemoryDep('buf88', c0, {c0: 16384}),
        MemoryDep('buf89', c0, {c0: 16384})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf115.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (4194304, 1)
op115.sizes = ([16384, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 16384, 64, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op115_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf64', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf89', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(sub, constant_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf115', get_index_4, mul, None)
        return store


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 4194304})]
op116.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 4194304}), MemoryDep('buf88', c0, {c0: 16384})]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf116.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (4194304, 1)
op116.sizes = ([16384, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 64, 64], stride=[4096, 1, 64, 1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op116_loop_body:
    var_ranges = {p0: 16384, p1: 256}
    index0 = 256*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf88', get_index_2)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(load_2, constant_1)
        truediv_1 = ops.truediv(truediv, add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf116', get_index_3, truediv_1, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 8388608})]
op117.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 8388608}),
        MemoryDep('buf57', c0, {c0: 8388608}),
        MemoryDep('buf84', c0, {c0: 65536}),
        MemoryDep('buf85', c0, {c0: 65536})]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf117.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (8388608, 1)
op117.sizes = ([65536, 128], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 65536, 128, 1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op117_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf85', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(sub, constant_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf117', get_index_4, mul, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 8388608})]
op118.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 8388608}), MemoryDep('buf84', c0, {c0: 65536})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
    buf118.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (8388608, 1)
op118.sizes = ([65536, 128], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 128, 128], stride=[16384, 1, 128, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 1, 16384, 128])
class op118_loop_body:
    var_ranges = {p0: 65536, p1: 128}
    index0 = 128*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(load_2, constant_1)
        truediv_1 = ops.truediv(truediv, add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf118', get_index_3, truediv_1, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 16777216})]
op119.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 16777216}),
        MemoryDep('buf52', c0, {c0: 16777216}),
        MemoryDep('buf80', c0, {c0: 262144}),
        MemoryDep('buf81', c0, {c0: 262144})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf119.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (16777216, 1)
op119.sizes = ([262144, 64], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 262144, 256, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op119_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf80', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf81', get_index_3)
        sqrt = ops.sqrt(load_3)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(sqrt, constant_1)
        truediv_1 = ops.truediv(load_2, add_1)
        sub = ops.sub(truediv, truediv_1)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(sub, constant_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf119', get_index_4, mul, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 16777216})]
op120.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 16777216}), MemoryDep('buf80', c0, {c0: 262144})]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
    buf120.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (16777216, 1)
op120.sizes = ([262144, 64], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 256, 256], stride=[65536, 1, 256, 1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 256, 256], stride=[4194304, 1, 16384, 64])
class op120_loop_body:
    var_ranges = {p0: 262144, p1: 64}
    index0 = 64*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf80', get_index_1)
        constant = ops.constant(1e-10, torch.float32)
        add = ops.add(load_1, constant)
        truediv = ops.truediv(load, add)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf80', get_index_2)
        constant_1 = ops.constant(1e-10, torch.float32)
        add_1 = ops.add(load_2, constant_1)
        truediv_1 = ops.truediv(truediv, add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf120', get_index_3, truediv_1, None)
        return store


