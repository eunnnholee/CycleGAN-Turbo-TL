# AOT ID: ['1_forward']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_elicer/cn/ccn3yhahb6i2xb7rsb7i4bwviyv3yedw4qj5s3d6d6nr3imzpxi5.py
# Topologically Sorted Source Nodes: [result, mul, result_1, hidden_states], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states => add_1, rsqrt, var_mean
#   mul => mul
#   result => convolution
#   result_1 => add
# Graph fragment:
#   %convolution : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%primals_1, %primals_2, %primals_3, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_2, 2.0), kwargs = {})
#   %add : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution, %mul), kwargs = {})
#   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-06), kwargs = {})
#   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_1,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_0 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 262144},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_0', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_0(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 262144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 65536
        tmp0 = tl.load(in_out_ptr0 + (r5 + 262144*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 4*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 262144*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 262144*x4), tmp6, xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 262144.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-06
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/fb/cfb2prsmmlqmlvdc5x65ghihwp72opqo5s55q33xzsy4khvgle4y.py
# Topologically Sorted Source Nodes: [hidden_states, hidden_states_1], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states => add_2, mul_2
#   hidden_states_1 => mul_3, sigmoid
# Graph fragment:
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, %unsqueeze_5), kwargs = {})
#   %add_2 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_2), kwargs = {})
#   %sigmoid : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_2,), kwargs = {})
#   %mul_3 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_2, %sigmoid), kwargs = {})
triton_poi_fused_native_group_norm_silu_1 = async_compile.triton('triton_poi_fused_native_group_norm_silu_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 33554432}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_1(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33554432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 65536
    x1 = ((xindex // 65536) % 128)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 4), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 4), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/mu/cmuimf27t2tvnzl6yphj4anwnl65cijg6sekzxnfr5yh2ztdsidr.py
# Topologically Sorted Source Nodes: [result_6, mul_2, result_7, add, output_tensor, hidden_states_5], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add => add_7
#   hidden_states_5 => add_8, rsqrt_2, var_mean_2
#   mul_2 => mul_8
#   output_tensor => div
#   result_6 => convolution_6
#   result_7 => add_6
# Graph fragment:
#   %convolution_6 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_7, %primals_14, %primals_15, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_8, 2.0), kwargs = {})
#   %add_6 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_6, %mul_8), kwargs = {})
#   %add_7 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add, %add_6), kwargs = {})
#   %div : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_7, 1.0), kwargs = {})
#   %var_mean_2 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_4, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_8 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_4, 1e-06), kwargs = {})
#   %rsqrt_2 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_8,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_2 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 262144},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_2', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_2(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 262144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 65536
        tmp0 = tl.load(in_ptr0 + (r5 + 262144*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_out_ptr0 + (r5 + 262144*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tl.load(in_ptr1 + (r3 + 4*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp4 = tl.load(in_ptr2 + (r5 + 262144*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tmp1 + tmp2
        tmp5 = 2.0
        tmp6 = tmp4 * tmp5
        tmp7 = tmp3 + tmp6
        tmp8 = tmp0 + tmp7
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(xmask, tmp12_weight_next, tmp12_weight)
        tl.store(in_out_ptr0 + (r5 + 262144*x4), tmp10, xmask)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp12, xmask)
    tmp15 = 262144.0
    tmp16 = tmp13 / tmp15
    tmp17 = 1e-06
    tmp18 = tmp16 + tmp17
    tmp19 = libdevice.rsqrt(tmp18)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp19, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/mq/cmqocanuq6aukpn42t7qb4w2ixfmyhnrul42gocsellhfef7bppr.py
# Topologically Sorted Source Nodes: [result_12, mul_4, result_13, add_1, output_tensor_1, hidden_states_10], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.constant_pad_nd]
# Source node to ATen node mapping:
#   add_1 => add_14
#   hidden_states_10 => constant_pad_nd
#   mul_4 => mul_16
#   output_tensor_1 => div_1
#   result_12 => convolution_12
#   result_13 => add_13
# Graph fragment:
#   %convolution_12 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_15, %primals_26, %primals_27, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_16 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_14, 2.0), kwargs = {})
#   %add_13 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_12, %mul_16), kwargs = {})
#   %add_14 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%div, %add_13), kwargs = {})
#   %div_1 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_14, 1.0), kwargs = {})
#   %constant_pad_nd : [num_users=3] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%div_1, [0, 1, 0, 1], 0.0), kwargs = {})
triton_poi_fused_add_constant_pad_nd_convolution_div_mul_3 = async_compile.triton('triton_poi_fused_add_constant_pad_nd_convolution_div_mul_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 67108864}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_constant_pad_nd_convolution_div_mul_3', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_constant_pad_nd_convolution_div_mul_3(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33817088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x1 = ((xindex // 257) % 257)
    x0 = (xindex % 257)
    x4 = xindex // 66049
    x2 = ((xindex // 66049) % 128)
    x5 = xindex
    tmp0 = x1
    tmp1 = tl.full([1], 256, tl.int64)
    tmp2 = tmp0 < tmp1
    tmp3 = x0
    tmp4 = tmp3 < tmp1
    tmp5 = tmp2 & tmp4
    tmp6 = tl.load(in_ptr0 + (x0 + 256*x1 + 65536*x4), tmp5 & xmask, other=0.0)
    tmp7 = tl.load(in_ptr1 + (x0 + 256*x1 + 65536*x4), tmp5 & xmask, other=0.0)
    tmp8 = tl.load(in_ptr2 + (x2), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
    tmp9 = tmp7 + tmp8
    tmp10 = tl.load(in_ptr3 + (x0 + 256*x1 + 65536*x4), tmp5 & xmask, other=0.0)
    tmp11 = 2.0
    tmp12 = tmp10 * tmp11
    tmp13 = tmp9 + tmp12
    tmp14 = tmp6 + tmp13
    tmp15 = 1.0
    tmp16 = tmp14 * tmp15
    tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
    tmp18 = tl.where(tmp5, tmp16, tmp17)
    tl.store(out_ptr0 + (x5), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/og/cogc6cjwacs7whkyiofhm4pffay3nbfeoav2fu5daadv7efypxpf.py
# Topologically Sorted Source Nodes: [result_15, mul_5, result_16, hidden_states_11], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_11 => add_16, rsqrt_4, var_mean_4
#   mul_5 => mul_17
#   result_15 => convolution_15
#   result_16 => add_15
# Graph fragment:
#   %convolution_15 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%constant_pad_nd, %primals_30, %primals_31, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_17 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_17, 2.0), kwargs = {})
#   %add_15 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_15, %mul_17), kwargs = {})
#   %var_mean_4 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_8, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_16 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_8, 1e-06), kwargs = {})
#   %rsqrt_4 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_16,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_4 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 65536},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_4', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_4(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 65536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 16384
        tmp0 = tl.load(in_out_ptr0 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 4*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 65536*x4), tmp6, xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 65536.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-06
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/lb/clbdd4epujfozg4ufvj57hrhvmattehzqa7qe4jojkc4i4fqu2dv.py
# Topologically Sorted Source Nodes: [hidden_states_11, hidden_states_12], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_11 => add_17, mul_19
#   hidden_states_12 => mul_20, sigmoid_4
# Graph fragment:
#   %mul_19 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_9, %unsqueeze_29), kwargs = {})
#   %add_17 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_19, %unsqueeze_26), kwargs = {})
#   %sigmoid_4 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_17,), kwargs = {})
#   %mul_20 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_17, %sigmoid_4), kwargs = {})
triton_poi_fused_native_group_norm_silu_5 = async_compile.triton('triton_poi_fused_native_group_norm_silu_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8388608}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_5', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_5(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8388608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 16384
    x1 = ((xindex // 16384) % 128)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 4), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 4), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/la/clazpa5fohrz4kmi6juw6dwbkxn3vwuqz42qtwvzpxsovpqx7qic.py
# Topologically Sorted Source Nodes: [result_18, mul_6, result_19, hidden_states_13], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_13 => add_19, rsqrt_5, var_mean_5
#   mul_6 => mul_21
#   result_18 => convolution_18
#   result_19 => add_18
# Graph fragment:
#   %convolution_18 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_20, %primals_36, %primals_37, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_21 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_20, 2.0), kwargs = {})
#   %add_18 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_18, %mul_21), kwargs = {})
#   %var_mean_5 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_10, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_19 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_10, 1e-06), kwargs = {})
#   %rsqrt_5 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_19,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_6 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_6', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 131072},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_6', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_6(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 16384
        tmp0 = tl.load(in_out_ptr0 + (r5 + 131072*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 8*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 131072*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 131072*x4), tmp6, xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 131072.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-06
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/36/c36djhbgc455kn5xdde5nba4at3b6fl4vqtplj4scqwz42nmb5f4.py
# Topologically Sorted Source Nodes: [hidden_states_13, hidden_states_14], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_13 => add_20, mul_23
#   hidden_states_14 => mul_24, sigmoid_5
# Graph fragment:
#   %mul_23 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_11, %unsqueeze_35), kwargs = {})
#   %add_20 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_23, %unsqueeze_32), kwargs = {})
#   %sigmoid_5 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_20,), kwargs = {})
#   %mul_24 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_20, %sigmoid_5), kwargs = {})
triton_poi_fused_native_group_norm_silu_7 = async_compile.triton('triton_poi_fused_native_group_norm_silu_7', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16777216}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_7', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_7(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16777216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 16384
    x1 = ((xindex // 16384) % 256)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 8), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 8), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/qg/cqgh3geipm2ntmfxdqxlpmtpbr3vbyihifdeamjebfpn7kfjwqx2.py
# Topologically Sorted Source Nodes: [result_21, mul_7, result_22, result_24, mul_8, result_25, add_2, output_tensor_2, hidden_states_16], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_2 => add_23
#   hidden_states_16 => add_24, rsqrt_6, var_mean_6
#   mul_7 => mul_25
#   mul_8 => mul_26
#   output_tensor_2 => div_2
#   result_21 => convolution_21
#   result_22 => add_21
#   result_24 => convolution_24
#   result_25 => add_22
# Graph fragment:
#   %convolution_21 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_24, %primals_42, %primals_43, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_25 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_23, 2.0), kwargs = {})
#   %add_21 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_21, %mul_25), kwargs = {})
#   %convolution_24 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_15, %primals_46, %primals_47, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_26 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_26, 2.0), kwargs = {})
#   %add_22 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_24, %mul_26), kwargs = {})
#   %add_23 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_22, %add_21), kwargs = {})
#   %div_2 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_23, 1.0), kwargs = {})
#   %var_mean_6 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_12, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_24 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_12, 1e-06), kwargs = {})
#   %rsqrt_6 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_24,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_8 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_8', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 131072},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_8', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_8(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp17_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp17_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp17_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 16384
        tmp0 = tl.load(in_out_ptr0 + (r5 + 131072*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 8*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 131072*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r5 + 131072*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 8*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.load(in_ptr4 + (r5 + 131072*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp11 = tmp10 * tmp4
        tmp12 = tmp9 + tmp11
        tmp13 = tmp6 + tmp12
        tmp14 = 1.0
        tmp15 = tmp13 * tmp14
        tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
        tmp17_mean_next, tmp17_m2_next, tmp17_weight_next = triton_helpers.welford_reduce(
            tmp16, tmp17_mean, tmp17_m2, tmp17_weight, roffset == 0
        )
        tmp17_mean = tl.where(xmask, tmp17_mean_next, tmp17_mean)
        tmp17_m2 = tl.where(xmask, tmp17_m2_next, tmp17_m2)
        tmp17_weight = tl.where(xmask, tmp17_weight_next, tmp17_weight)
        tl.store(in_out_ptr0 + (r5 + 131072*x4), tmp15, xmask)
    tmp17_tmp, tmp18_tmp, tmp19_tmp = triton_helpers.welford(
        tmp17_mean, tmp17_m2, tmp17_weight, 1
    )
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    tmp19 = tmp19_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp17, xmask)
    tmp20 = 131072.0
    tmp21 = tmp18 / tmp20
    tmp22 = 1e-06
    tmp23 = tmp21 + tmp22
    tmp24 = libdevice.rsqrt(tmp23)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp24, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/o7/co7kpigrycvp4cuk5yj5mop3zeyev4voig4cvtmbocilovznb42n.py
# Topologically Sorted Source Nodes: [result_30, mul_10, result_31, add_3, output_tensor_3, hidden_states_21], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.constant_pad_nd]
# Source node to ATen node mapping:
#   add_3 => add_30
#   hidden_states_21 => constant_pad_nd_1
#   mul_10 => mul_34
#   output_tensor_3 => div_3
#   result_30 => convolution_30
#   result_31 => add_29
# Graph fragment:
#   %convolution_30 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_33, %primals_58, %primals_59, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_34 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_32, 2.0), kwargs = {})
#   %add_29 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_30, %mul_34), kwargs = {})
#   %add_30 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_2, %add_29), kwargs = {})
#   %div_3 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_30, 1.0), kwargs = {})
#   %constant_pad_nd_1 : [num_users=3] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%div_3, [0, 1, 0, 1], 0.0), kwargs = {})
triton_poi_fused_add_constant_pad_nd_convolution_div_mul_9 = async_compile.triton('triton_poi_fused_add_constant_pad_nd_convolution_div_mul_9', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 33554432}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_constant_pad_nd_convolution_div_mul_9', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_constant_pad_nd_convolution_div_mul_9(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 17040384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x1 = ((xindex // 129) % 129)
    x0 = (xindex % 129)
    x4 = xindex // 16641
    x2 = ((xindex // 16641) % 256)
    x5 = xindex
    tmp0 = x1
    tmp1 = tl.full([1], 128, tl.int64)
    tmp2 = tmp0 < tmp1
    tmp3 = x0
    tmp4 = tmp3 < tmp1
    tmp5 = tmp2 & tmp4
    tmp6 = tl.load(in_ptr0 + (x0 + 128*x1 + 16384*x4), tmp5 & xmask, other=0.0)
    tmp7 = tl.load(in_ptr1 + (x0 + 128*x1 + 16384*x4), tmp5 & xmask, other=0.0)
    tmp8 = tl.load(in_ptr2 + (x2), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
    tmp9 = tmp7 + tmp8
    tmp10 = tl.load(in_ptr3 + (x0 + 128*x1 + 16384*x4), tmp5 & xmask, other=0.0)
    tmp11 = 2.0
    tmp12 = tmp10 * tmp11
    tmp13 = tmp9 + tmp12
    tmp14 = tmp6 + tmp13
    tmp15 = 1.0
    tmp16 = tmp14 * tmp15
    tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
    tmp18 = tl.where(tmp5, tmp16, tmp17)
    tl.store(out_ptr0 + (x5), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/bb/cbbm2pjleyexwyhxvu7tlarxxzlywx7stjxq6cmfzayps4ofprqg.py
# Topologically Sorted Source Nodes: [result_33, mul_11, result_34, hidden_states_22], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_22 => add_32, rsqrt_8, var_mean_8
#   mul_11 => mul_35
#   result_33 => convolution_33
#   result_34 => add_31
# Graph fragment:
#   %convolution_33 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%constant_pad_nd_1, %primals_62, %primals_63, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_35 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_35, 2.0), kwargs = {})
#   %add_31 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_33, %mul_35), kwargs = {})
#   %var_mean_8 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_16, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_32 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_16, 1e-06), kwargs = {})
#   %rsqrt_8 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_32,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_10 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_10', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 32768},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_10', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_10(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 32768
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 4096
        tmp0 = tl.load(in_out_ptr0 + (r5 + 32768*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 8*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 32768*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 32768*x4), tmp6, rmask & xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 32768.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-06
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/7u/c7uz3wzx7qphmebfho7vnywvyislxlnej7azbqpzvugvc5zwzyel.py
# Topologically Sorted Source Nodes: [hidden_states_22, hidden_states_23], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_22 => add_33, mul_37
#   hidden_states_23 => mul_38, sigmoid_8
# Graph fragment:
#   %mul_37 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_17, %unsqueeze_53), kwargs = {})
#   %add_33 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_37, %unsqueeze_50), kwargs = {})
#   %sigmoid_8 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_33,), kwargs = {})
#   %mul_38 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_33, %sigmoid_8), kwargs = {})
triton_poi_fused_native_group_norm_silu_11 = async_compile.triton('triton_poi_fused_native_group_norm_silu_11', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 4194304}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_11', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_11(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 4194304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 4096
    x1 = ((xindex // 4096) % 256)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 8), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 8), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/lx/clxj5sezk2g3xjhsiwpki2bnwqmlcs5gcavi55h2sdmtzzqgvwya.py
# Topologically Sorted Source Nodes: [result_36, mul_12, result_37, hidden_states_24], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_24 => add_35, rsqrt_9, var_mean_9
#   mul_12 => mul_39
#   result_36 => convolution_36
#   result_37 => add_34
# Graph fragment:
#   %convolution_36 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_38, %primals_68, %primals_69, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_39 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_38, 2.0), kwargs = {})
#   %add_34 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_36, %mul_39), kwargs = {})
#   %var_mean_9 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_18, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_35 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_18, 1e-06), kwargs = {})
#   %rsqrt_9 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_35,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_12 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_12', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 65536},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_12', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_12(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 65536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 4096
        tmp0 = tl.load(in_out_ptr0 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 16*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 65536*x4), tmp6, xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 65536.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-06
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/r5/cr5ay57iignd5dt3sfh5tdsxbt7jsib56btzn4hphedidpjrnuar.py
# Topologically Sorted Source Nodes: [hidden_states_24, hidden_states_25], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_24 => add_36, mul_41
#   hidden_states_25 => mul_42, sigmoid_9
# Graph fragment:
#   %mul_41 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_19, %unsqueeze_59), kwargs = {})
#   %add_36 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_41, %unsqueeze_56), kwargs = {})
#   %sigmoid_9 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_36,), kwargs = {})
#   %mul_42 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_36, %sigmoid_9), kwargs = {})
triton_poi_fused_native_group_norm_silu_13 = async_compile.triton('triton_poi_fused_native_group_norm_silu_13', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8388608}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_13', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_13(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8388608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 4096
    x1 = ((xindex // 4096) % 512)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 16), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 16), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/4e/c4e65dfhp4wdiy3aiyrnrvd6yfpoxf7gy45bdrh357qmeovvwrmj.py
# Topologically Sorted Source Nodes: [result_39, mul_13, result_40, result_42, mul_14, result_43, add_4, output_tensor_4, hidden_states_27], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_4 => add_39
#   hidden_states_27 => add_40, rsqrt_10, var_mean_10
#   mul_13 => mul_43
#   mul_14 => mul_44
#   output_tensor_4 => div_4
#   result_39 => convolution_39
#   result_40 => add_37
#   result_42 => convolution_42
#   result_43 => add_38
# Graph fragment:
#   %convolution_39 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_42, %primals_74, %primals_75, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_43 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_41, 2.0), kwargs = {})
#   %add_37 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_39, %mul_43), kwargs = {})
#   %convolution_42 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_31, %primals_78, %primals_79, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_44 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_44, 2.0), kwargs = {})
#   %add_38 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_42, %mul_44), kwargs = {})
#   %add_39 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_38, %add_37), kwargs = {})
#   %div_4 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_39, 1.0), kwargs = {})
#   %var_mean_10 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_20, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_40 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_20, 1e-06), kwargs = {})
#   %rsqrt_10 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_40,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_14 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_14', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 65536},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_14', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_14(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 65536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp17_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp17_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp17_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r5 = rindex
        r3 = rindex // 4096
        tmp0 = tl.load(in_out_ptr0 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 16*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 16*x0), xmask, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.load(in_ptr4 + (r5 + 65536*x4), xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp11 = tmp10 * tmp4
        tmp12 = tmp9 + tmp11
        tmp13 = tmp6 + tmp12
        tmp14 = 1.0
        tmp15 = tmp13 * tmp14
        tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
        tmp17_mean_next, tmp17_m2_next, tmp17_weight_next = triton_helpers.welford_reduce(
            tmp16, tmp17_mean, tmp17_m2, tmp17_weight, roffset == 0
        )
        tmp17_mean = tl.where(xmask, tmp17_mean_next, tmp17_mean)
        tmp17_m2 = tl.where(xmask, tmp17_m2_next, tmp17_m2)
        tmp17_weight = tl.where(xmask, tmp17_weight_next, tmp17_weight)
        tl.store(in_out_ptr0 + (r5 + 65536*x4), tmp15, xmask)
    tmp17_tmp, tmp18_tmp, tmp19_tmp = triton_helpers.welford(
        tmp17_mean, tmp17_m2, tmp17_weight, 1
    )
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    tmp19 = tmp19_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp17, xmask)
    tmp20 = 65536.0
    tmp21 = tmp18 / tmp20
    tmp22 = 1e-06
    tmp23 = tmp21 + tmp22
    tmp24 = libdevice.rsqrt(tmp23)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp24, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/sy/csymgfw3yb2ihflt7etmhnyr4zccuoovalskhnzjttah6ifrf7ti.py
# Topologically Sorted Source Nodes: [result_48, mul_16, result_49, add_5, output_tensor_5, hidden_states_32], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.constant_pad_nd]
# Source node to ATen node mapping:
#   add_5 => add_46
#   hidden_states_32 => constant_pad_nd_2
#   mul_16 => mul_52
#   output_tensor_5 => div_5
#   result_48 => convolution_48
#   result_49 => add_45
# Graph fragment:
#   %convolution_48 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_51, %primals_90, %primals_91, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_52 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_50, 2.0), kwargs = {})
#   %add_45 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_48, %mul_52), kwargs = {})
#   %add_46 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_4, %add_45), kwargs = {})
#   %div_5 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_46, 1.0), kwargs = {})
#   %constant_pad_nd_2 : [num_users=3] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%div_5, [0, 1, 0, 1], 0.0), kwargs = {})
triton_poi_fused_add_constant_pad_nd_convolution_div_mul_15 = async_compile.triton('triton_poi_fused_add_constant_pad_nd_convolution_div_mul_15', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16777216}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_constant_pad_nd_convolution_div_mul_15', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_constant_pad_nd_convolution_div_mul_15(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8652800
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x1 = ((xindex // 65) % 65)
    x0 = (xindex % 65)
    x4 = xindex // 4225
    x2 = ((xindex // 4225) % 512)
    x5 = xindex
    tmp0 = x1
    tmp1 = tl.full([1], 64, tl.int64)
    tmp2 = tmp0 < tmp1
    tmp3 = x0
    tmp4 = tmp3 < tmp1
    tmp5 = tmp2 & tmp4
    tmp6 = tl.load(in_ptr0 + (x0 + 64*x1 + 4096*x4), tmp5 & xmask, other=0.0)
    tmp7 = tl.load(in_ptr1 + (x0 + 64*x1 + 4096*x4), tmp5 & xmask, other=0.0)
    tmp8 = tl.load(in_ptr2 + (x2), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
    tmp9 = tmp7 + tmp8
    tmp10 = tl.load(in_ptr3 + (x0 + 64*x1 + 4096*x4), tmp5 & xmask, other=0.0)
    tmp11 = 2.0
    tmp12 = tmp10 * tmp11
    tmp13 = tmp9 + tmp12
    tmp14 = tmp6 + tmp13
    tmp15 = 1.0
    tmp16 = tmp14 * tmp15
    tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
    tmp18 = tl.where(tmp5, tmp16, tmp17)
    tl.store(out_ptr0 + (x5), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/nn/cnnyr33tvckddl33tquolazu5jrawt2fghvf7z6eti76o4ybixrd.py
# Topologically Sorted Source Nodes: [result_51, mul_17, result_52, hidden_states_33], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_33 => add_48, rsqrt_12, var_mean_12
#   mul_17 => mul_53
#   result_51 => convolution_51
#   result_52 => add_47
# Graph fragment:
#   %convolution_51 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%constant_pad_nd_2, %primals_94, %primals_95, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_53 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_53, 2.0), kwargs = {})
#   %add_47 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_51, %mul_53), kwargs = {})
#   %var_mean_12 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_24, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_48 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_24, 1e-06), kwargs = {})
#   %rsqrt_12 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_48,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_16 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_16', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_16', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_16(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_out_ptr0 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 16*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 2.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 16384*x4), tmp6, rmask & xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 16384.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-06
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/am/camw6sfrpeinjye3yhe422bnb5k53bd62r7e5c257s6zytpyaeml.py
# Topologically Sorted Source Nodes: [hidden_states_33, hidden_states_34], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_33 => add_49, mul_55
#   hidden_states_34 => mul_56, sigmoid_12
# Graph fragment:
#   %mul_55 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_25, %unsqueeze_77), kwargs = {})
#   %add_49 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_55, %unsqueeze_74), kwargs = {})
#   %sigmoid_12 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_49,), kwargs = {})
#   %mul_56 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_49, %sigmoid_12), kwargs = {})
triton_poi_fused_native_group_norm_silu_17 = async_compile.triton('triton_poi_fused_native_group_norm_silu_17', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_17', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_17(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2097152
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 1024
    x1 = ((xindex // 1024) % 512)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 16), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 16), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ht/cht23n6dpxc7iemt6tltjhrgkltcyciseoxtp3s7owjqmk5exktg.py
# Topologically Sorted Source Nodes: [result_57, mul_19, result_58, add_6, output_tensor_6, hidden_states_38], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_6 => add_54
#   hidden_states_38 => add_55, rsqrt_14, var_mean_14
#   mul_19 => mul_61
#   output_tensor_6 => div_6
#   result_57 => convolution_57
#   result_58 => add_53
# Graph fragment:
#   %convolution_57 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_60, %primals_106, %primals_107, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_61 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_59, 2.0), kwargs = {})
#   %add_53 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_57, %mul_61), kwargs = {})
#   %add_54 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_47, %add_53), kwargs = {})
#   %div_6 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_54, 1.0), kwargs = {})
#   %var_mean_14 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_28, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_55 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_28, 1e-06), kwargs = {})
#   %rsqrt_14 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_55,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_18 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_18', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_18', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_18(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_ptr0 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_out_ptr0 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tl.load(in_ptr1 + (r3 + 16*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp4 = tl.load(in_ptr2 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tmp1 + tmp2
        tmp5 = 2.0
        tmp6 = tmp4 * tmp5
        tmp7 = tmp3 + tmp6
        tmp8 = tmp0 + tmp7
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tl.store(in_out_ptr0 + (r5 + 16384*x4), tmp10, rmask & xmask)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp12, xmask)
    tmp15 = 16384.0
    tmp16 = tmp13 / tmp15
    tmp17 = 1e-06
    tmp18 = tmp16 + tmp17
    tmp19 = libdevice.rsqrt(tmp18)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp19, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/td/ctdribqkvbvtaolzxmkmm7rm6qavarh7kjpzopshgdvylyhh7quc.py
# Topologically Sorted Source Nodes: [result_69, mul_23, result_70, add_8, output_tensor_8, group_norm_18], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_8 => add_68
#   group_norm_18 => add_69, rsqrt_18, var_mean_18
#   mul_23 => mul_77
#   output_tensor_8 => div_8
#   result_69 => convolution_69
#   result_70 => add_67
# Graph fragment:
#   %convolution_69 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_76, %primals_130, %primals_131, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_77 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_71, 2.0), kwargs = {})
#   %add_67 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_69, %mul_77), kwargs = {})
#   %add_68 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_7, %add_67), kwargs = {})
#   %div_8 : [num_users=2] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_68, 1), kwargs = {})
#   %var_mean_18 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_37, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_69 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_36, 1e-06), kwargs = {})
#   %rsqrt_18 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_69,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_19 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_19', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_19', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_19(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_ptr0 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_out_ptr0 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tl.load(in_ptr1 + (r3 + 16*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp4 = tl.load(in_ptr2 + (r5 + 16384*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tmp1 + tmp2
        tmp5 = 2.0
        tmp6 = tmp4 * tmp5
        tmp7 = tmp3 + tmp6
        tmp8 = tmp0 + tmp7
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tl.store(in_out_ptr0 + (r5 + 16384*x4), tmp10, rmask & xmask)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp12, xmask)
    tl.store(out_ptr1 + (x4), tmp13, xmask)
    tmp15 = 16384.0
    tmp16 = tmp13 / tmp15
    tmp17 = 1e-06
    tmp18 = tmp16 + tmp17
    tmp19 = libdevice.rsqrt(tmp18)
    tl.store(out_ptr2 + (x4), tmp19, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ac/cacrlwkqeunsgzpv2f6f6ojl6fsq74npcspklbowsyli73j47adk.py
# Topologically Sorted Source Nodes: [group_norm_18], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   group_norm_18 => add_70, mul_79
# Graph fragment:
#   %mul_79 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_38, %unsqueeze_111), kwargs = {})
#   %add_70 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_79, %unsqueeze_109), kwargs = {})
triton_poi_fused_native_group_norm_20 = async_compile.triton('triton_poi_fused_native_group_norm_20', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_20', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_20(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2097152
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 1024
    x1 = ((xindex // 1024) % 512)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 16), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 16), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = 16384.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-06
    tmp7 = tmp5 + tmp6
    tmp8 = libdevice.rsqrt(tmp7)
    tmp9 = tmp2 * tmp8
    tmp11 = tmp9 * tmp10
    tmp13 = tmp11 + tmp12
    tl.store(out_ptr0 + (x3), tmp13, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/li/clirsx3vjh5zzk3mx5iij4blab6betsuktgccqpwhd4s6hnpa6kq.py
# Topologically Sorted Source Nodes: [linear_1], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   linear_1 => clone_9
# Graph fragment:
#   %clone_9 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_2,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_21 = async_compile.triton('triton_poi_fused_clone_21', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 4096, 'x': 512}, tile_hint=TileHint.SQUARE,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_21', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_21(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 512
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 1024)
    y1 = yindex // 1024
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 1024*x2 + 524288*y1), xmask, eviction_policy='evict_last')
    tl.store(out_ptr0 + (x2 + 512*y3), tmp0, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/uz/cuzvgdlaykyldsr36nrmxl7ifsorhpdbrgqflm4f44flalqetu6p.py
# Topologically Sorted Source Nodes: [result_72, mul_24, result_73], Original ATen: [aten.add, aten.mul]
# Source node to ATen node mapping:
#   mul_24 => mul_80
#   result_72 => add_71
#   result_73 => add_72
# Graph fragment:
#   %add_71 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm, %primals_137), kwargs = {})
#   %mul_80 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_45, 2.0), kwargs = {})
#   %add_72 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_71, %mul_80), kwargs = {})
triton_poi_fused_add_mul_22 = async_compile.triton('triton_poi_fused_add_mul_22', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_22', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_22(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2097152
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 512)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 2.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x2), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ay/cayedkmglylcxxhmu37xaeha3el74uvfmjaaojs656mlulo46zbf.py
# Topologically Sorted Source Nodes: [hidden_states_55, hidden_states_56, hidden_states_57], Original ATen: [aten.add, aten.div, aten.clone]
# Source node to ATen node mapping:
#   hidden_states_55 => add_78
#   hidden_states_56 => div_9
#   hidden_states_57 => clone_13
# Graph fragment:
#   %add_78 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_76, %div_8), kwargs = {})
#   %div_9 : [num_users=2] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_78, 1), kwargs = {})
#   %clone_13 : [num_users=2] = call_function[target=torch.ops.aten.clone.default](args = (%div_9,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_add_clone_div_23 = async_compile.triton('triton_poi_fused_add_clone_div_23', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 2048, 'x': 1024}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clone_div_23', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clone_div_23(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 2048
    xnumel = 1024
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 512)
    y1 = yindex // 512
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 512*x2 + 524288*y1), xmask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (y0 + 512*x2 + 524288*y1), xmask, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr3 + (x2 + 1024*y3), xmask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp4 = 2.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = 1.0
    tmp10 = tmp8 * tmp9
    tl.store(out_ptr0 + (x2 + 1024*y3), tmp10, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/i4/ci4auqtddbyzqlecsjpqkfuiwtqwdlmmivsw4zpvypdd67k45y2q.py
# Topologically Sorted Source Nodes: [hidden_states_57], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_57 => add_79, rsqrt_19, var_mean_19
# Graph fragment:
#   %var_mean_19 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_77, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_79 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_42, 1e-06), kwargs = {})
#   %rsqrt_19 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_79,), kwargs = {})
triton_red_fused_native_group_norm_24 = async_compile.triton('triton_red_fused_native_group_norm_24', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_group_norm_24', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_native_group_norm_24(in_out_ptr0, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 16384*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
            tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
        )
        tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
        tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
        tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
    tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
        tmp2_mean, tmp2_m2, tmp2_weight, 1
    )
    tmp2 = tmp2_tmp[:, None]
    tmp3 = tmp3_tmp[:, None]
    tmp4 = tmp4_tmp[:, None]
    tl.store(out_ptr0 + (x0), tmp2, xmask)
    tmp5 = 16384.0
    tmp6 = tmp3 / tmp5
    tmp7 = 1e-06
    tmp8 = tmp6 + tmp7
    tmp9 = libdevice.rsqrt(tmp8)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/n3/cn3r3b5av64sk67kpkzknkmfudp4cqmajyw5amwxn2eowk6gu65u.py
# Topologically Sorted Source Nodes: [hidden_states_55, hidden_states_56, result_87, mul_29, result_88, add_10, output_tensor_9, sample], Original ATen: [aten.add, aten.div, aten.convolution, aten.mul, aten.clone]
# Source node to ATen node mapping:
#   add_10 => add_85
#   hidden_states_55 => add_78
#   hidden_states_56 => div_9
#   mul_29 => mul_91
#   output_tensor_9 => div_10
#   result_87 => convolution_75
#   result_88 => add_84
#   sample => clone_15
# Graph fragment:
#   %add_78 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_76, %div_8), kwargs = {})
#   %div_9 : [num_users=2] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_78, 1), kwargs = {})
#   %convolution_75 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_90, %primals_160, %primals_161, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_91 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_77, 2.0), kwargs = {})
#   %add_84 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_75, %mul_91), kwargs = {})
#   %add_85 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_9, %add_84), kwargs = {})
#   %div_10 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_85, 1), kwargs = {})
#   %clone_15 : [num_users=2] = call_function[target=torch.ops.aten.clone.default](args = (%div_10,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_add_clone_convolution_div_mul_25 = async_compile.triton('triton_poi_fused_add_clone_convolution_div_mul_25', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 2048, 'x': 1024}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clone_convolution_div_mul_25', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clone_convolution_div_mul_25(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 2048
    xnumel = 1024
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 512)
    y1 = yindex // 512
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 512*x2 + 524288*y1), xmask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (y0 + 512*x2 + 524288*y1), xmask, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr3 + (x2 + 1024*y3), xmask, eviction_policy='evict_last')
    tmp11 = tl.load(in_out_ptr0 + (x2 + 1024*y3), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (y0), None, eviction_policy='evict_last')
    tmp14 = tl.load(in_ptr5 + (x2 + 1024*y3), xmask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp4 = 2.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = 1.0
    tmp10 = tmp8 * tmp9
    tmp13 = tmp11 + tmp12
    tmp15 = tmp14 * tmp4
    tmp16 = tmp13 + tmp15
    tmp17 = tmp10 + tmp16
    tmp18 = tmp17 * tmp9
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x2 + 1024*y3), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/w4/cw45j7wryfporc6pfgdnl24fcqw3jzgl3gopkteuwrbavblgfmxo.py
# Topologically Sorted Source Nodes: [result_90, mul_30, result_91], Original ATen: [aten.convolution, aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_30 => mul_95
#   result_90 => convolution_78
#   result_91 => add_88
# Graph fragment:
#   %convolution_78 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_94, %primals_166, %primals_167, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_95 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_80, 2.0), kwargs = {})
#   %add_88 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_78, %mul_95), kwargs = {})
triton_poi_fused_add_convolution_mul_26 = async_compile.triton('triton_poi_fused_add_convolution_mul_26', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 32768}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_mul_26', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_convolution_mul_26(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 32768
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x1 = ((xindex // 1024) % 8)
    tmp0 = tl.load(in_out_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x3), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 2.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x3), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/xp/cxpohih2uti5skiwqk5wkmknaaurczhu4yoxjsxliaoj3aq4m6nj.py
# Topologically Sorted Source Nodes: [enc], Original ATen: [aten.convolution]
# Source node to ATen node mapping:
#   enc => convolution_81
# Graph fragment:
#   %convolution_81 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_88, %primals_170, %primals_171, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
triton_poi_fused_convolution_27 = async_compile.triton('triton_poi_fused_convolution_27', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 32768}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_27', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_convolution_27(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 32768
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x1 = ((xindex // 1024) % 8)
    tmp0 = tl.load(in_out_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tl.store(in_out_ptr0 + (x3), tmp2, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/e5/ce5orukle4v5zuqmxru2iclpzw3qkkt3djj3kq5kaaricvecsoz6.py
# Topologically Sorted Source Nodes: [clamp, mul_31, exp, randn, mul_32, x_31, mul_33], Original ATen: [aten.clamp, aten.mul, aten.exp, aten.randn, aten.add]
# Source node to ATen node mapping:
#   clamp => clamp_max, clamp_min
#   exp => exp
#   mul_31 => mul_96
#   mul_32 => mul_97
#   mul_33 => mul_98
#   randn => inductor_lookup_seed_default, inductor_random_default
#   x_31 => add_89
# Graph fragment:
#   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%getitem_49, -30.0), kwargs = {})
#   %clamp_max : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min, 20.0), kwargs = {})
#   %mul_96 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%clamp_max, 0.5), kwargs = {})
#   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%mul_96,), kwargs = {})
#   %inductor_lookup_seed_default : [num_users=1] = call_function[target=torch.ops.prims.inductor_lookup_seed.default](args = (%inductor_seeds_default, 0), kwargs = {})
#   %inductor_random_default : [num_users=2] = call_function[target=torch.ops.prims.inductor_random.default](args = ([4, 4, 32, 32], %inductor_lookup_seed_default, randn), kwargs = {})
#   %mul_97 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%exp, %inductor_random_default), kwargs = {})
#   %add_89 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_48, %mul_97), kwargs = {})
#   %mul_98 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_89, 0.18215), kwargs = {})
triton_poi_fused_add_clamp_exp_mul_randn_28 = async_compile.triton('triton_poi_fused_add_clamp_exp_mul_randn_28', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16384}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'load_seed_offset': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clamp_exp_mul_randn_28', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clamp_exp_mul_randn_28(in_ptr0, in_ptr1, out_ptr0, out_ptr1, load_seed_offset, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    x1 = (xindex % 4096)
    x2 = xindex // 4096
    tmp3 = tl.load(in_ptr1 + (x1 + 8192*x2), None)
    tmp4 = tl.load(in_ptr1 + (4096 + x1 + 8192*x2), None)
    tmp0 = tl.load(in_ptr0 + load_seed_offset)
    tmp1 = x0
    tmp2 = tl.randn(tmp0, (tmp1).to(tl.uint32))
    tmp5 = -30.0
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = 20.0
    tmp8 = triton_helpers.minimum(tmp6, tmp7)
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tl_math.exp(tmp10)
    tmp12 = tmp11 * tmp2
    tmp13 = tmp3 + tmp12
    tmp14 = 0.18215
    tmp15 = tmp13 * tmp14
    tl.store(out_ptr0 + (x0), tmp2, None)
    tl.store(out_ptr1 + (x0), tmp15, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/dk/cdkojqgza2ga35mws3cihy77oiekalnzfftvqa33mogjjvt63bgx.py
# Topologically Sorted Source Nodes: [emb_3], Original ATen: [aten.cat]
# Source node to ATen node mapping:
#   emb_3 => cat
# Graph fragment:
#   %cat : [num_users=2] = call_function[target=torch.ops.aten.cat.default](args = ([%sin, %cos], -1), kwargs = {})
triton_poi_fused_cat_29 = async_compile.triton('triton_poi_fused_cat_29', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2048}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_cat_29', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_cat_29(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = (xindex % 320)
    x2 = xindex
    tmp5 = tl.load(in_ptr0 + (0))
    tmp6 = tl.broadcast_to(tmp5, [XBLOCK])
    tmp24 = tl.load(in_ptr0 + (0))
    tmp25 = tl.broadcast_to(tmp24, [XBLOCK])
    tmp0 = x0
    tmp1 = tl.full([1], 0, tl.int64)
    tmp2 = tmp0 >= tmp1
    tmp3 = tl.full([1], 160, tl.int64)
    tmp4 = tmp0 < tmp3
    tmp7 = tmp6.to(tl.float32)
    tmp8 = x0
    tmp9 = tmp8.to(tl.float32)
    tmp10 = -9.210340371976184
    tmp11 = tmp9 * tmp10
    tmp12 = 0.00625
    tmp13 = tmp11 * tmp12
    tmp14 = tl_math.exp(tmp13)
    tmp15 = tmp7 * tmp14
    tmp16 = 1.0
    tmp17 = tmp15 * tmp16
    tmp18 = tl_math.sin(tmp17)
    tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
    tmp20 = tl.where(tmp4, tmp18, tmp19)
    tmp21 = tmp0 >= tmp3
    tmp22 = tl.full([1], 320, tl.int64)
    tmp23 = tmp0 < tmp22
    tmp26 = tmp25.to(tl.float32)
    tmp27 = (-160) + x0
    tmp28 = tmp27.to(tl.float32)
    tmp29 = -9.210340371976184
    tmp30 = tmp28 * tmp29
    tmp31 = 0.00625
    tmp32 = tmp30 * tmp31
    tmp33 = tl_math.exp(tmp32)
    tmp34 = tmp26 * tmp33
    tmp35 = 1.0
    tmp36 = tmp34 * tmp35
    tmp37 = tl_math.cos(tmp36)
    tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
    tmp39 = tl.where(tmp21, tmp37, tmp38)
    tmp40 = tl.where(tmp4, tmp20, tmp39)
    tl.store(out_ptr0 + (x2), tmp40, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/es/cesfsct6qu5432y4xqsldlxp5qgbv5lxfhhl6m63iy7z75zonqgb.py
# Topologically Sorted Source Nodes: [emb_4], Original ATen: [aten.cat]
# Source node to ATen node mapping:
#   emb_4 => cat_1
# Graph fragment:
#   %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%slice_4, %slice_6], -1), kwargs = {})
triton_poi_fused_cat_30 = async_compile.triton('triton_poi_fused_cat_30', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2048}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_cat_30', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_cat_30(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = (xindex % 320)
    x1 = xindex // 320
    x2 = xindex
    tmp0 = x0
    tmp1 = tl.full([1], 0, tl.int64)
    tmp2 = tmp0 >= tmp1
    tmp3 = tl.full([1], 160, tl.int64)
    tmp4 = tmp0 < tmp3
    tmp5 = tl.load(in_ptr0 + (160 + 320*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
    tmp6 = tmp0 >= tmp3
    tmp7 = tl.full([1], 320, tl.int64)
    tmp8 = tmp0 < tmp7
    tmp9 = tl.load(in_ptr0 + (320*x1 + ((-160) + x0)), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
    tmp10 = tl.where(tmp4, tmp5, tmp9)
    tl.store(out_ptr0 + (x2), tmp10, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/2n/c2nkwstifmsgursi5myoeearqdf2bzw65425lfoj4vens44p5xai.py
# Topologically Sorted Source Nodes: [sample_2, sample_3], Original ATen: [aten.addmm, aten.silu]
# Source node to ATen node mapping:
#   sample_2 => add_tensor_103
#   sample_3 => mul_103, sigmoid_21
# Graph fragment:
#   %add_tensor_103 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mm_default_103, %primals_174), kwargs = {})
#   %sigmoid_21 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_tensor_103,), kwargs = {})
#   %mul_103 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_tensor_103, %sigmoid_21), kwargs = {})
triton_poi_fused_addmm_silu_31 = async_compile.triton('triton_poi_fused_addmm_silu_31', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8192}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_addmm_silu_31', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_addmm_silu_31(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = xindex
    x0 = (xindex % 1280)
    tmp0 = tl.load(in_out_ptr0 + (x2), xmask)
    tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = tl.sigmoid(tmp2)
    tmp4 = tmp2 * tmp3
    tl.store(in_out_ptr0 + (x2), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/qz/cqzdar234f4syscxdhntpfyfluquoptklovco7ja24ewqfv4dohp.py
# Topologically Sorted Source Nodes: [result_93, mul_37, result_94, hidden_states_62], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_62 => add_92, rsqrt_22, var_mean_22
#   mul_37 => mul_104
#   result_93 => convolution_82
#   result_94 => add_91
# Graph fragment:
#   %convolution_82 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_98, %primals_178, %primals_179, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_104 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_84, 1.0), kwargs = {})
#   %add_91 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_82, %mul_104), kwargs = {})
#   %var_mean_22 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_83, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_92 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_50, 1e-05), kwargs = {})
#   %rsqrt_22 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_92,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_32 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_32', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_32', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_32(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 10240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_out_ptr0 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 10240*x4), tmp6, rmask & xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 10240.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-05
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/an/can24pzqk4f2bq4337ihftphfrvn5dtwo5vbm6o42nlr7xmorl3k.py
# Topologically Sorted Source Nodes: [hidden_states_62, hidden_states_63], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_62 => add_93, mul_106
#   hidden_states_63 => mul_107, sigmoid_22
# Graph fragment:
#   %mul_106 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_84, %unsqueeze_137), kwargs = {})
#   %add_93 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_106, %unsqueeze_134), kwargs = {})
#   %sigmoid_22 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_93,), kwargs = {})
#   %mul_107 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_93, %sigmoid_22), kwargs = {})
triton_poi_fused_native_group_norm_silu_33 = async_compile.triton('triton_poi_fused_native_group_norm_silu_33', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_33', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_33(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 1024
    x1 = ((xindex // 1024) % 320)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 10), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 10), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/6n/c6nbfcl227tycz7ghoybfojtmmd7klrfmt7mwpbkgbtbubt7h6x6.py
# Topologically Sorted Source Nodes: [result_96, mul_38, result_97, hidden_states_64, hidden_states_65], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_64 => add_95
#   hidden_states_65 => add_96, rsqrt_23, var_mean_23
#   mul_38 => mul_108
#   result_96 => convolution_85
#   result_97 => add_94
# Graph fragment:
#   %convolution_85 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_107, %primals_184, %primals_185, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_108 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_87, 1.0), kwargs = {})
#   %add_94 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_85, %mul_108), kwargs = {})
#   %add_95 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_94, %unsqueeze_139), kwargs = {})
#   %var_mean_23 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_85, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_96 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_52, 1e-05), kwargs = {})
#   %rsqrt_23 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_96,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_34 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_34', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_34', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_34(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 10240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_out_ptr0 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r3 + 10*x4), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp10 = tmp6 + tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tl.store(in_out_ptr0 + (r5 + 10240*x4), tmp10, rmask & xmask)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp12, xmask)
    tmp15 = 10240.0
    tmp16 = tmp13 / tmp15
    tmp17 = 1e-05
    tmp18 = tmp16 + tmp17
    tmp19 = libdevice.rsqrt(tmp18)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp19, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ro/crohoagzozt763xqphzplwmz5k2qwgdbjxmvo6hf3s6awhdwkpzs.py
# Topologically Sorted Source Nodes: [result_99, mul_39, result_100, add_13, output_tensor_10, hidden_states_68], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_13 => add_99
#   hidden_states_68 => add_100, rsqrt_24, var_mean_24
#   mul_39 => mul_113
#   output_tensor_10 => div_12
#   result_100 => add_98
#   result_99 => convolution_88
# Graph fragment:
#   %convolution_88 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_112, %primals_192, %primals_193, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_113 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_90, 1.0), kwargs = {})
#   %add_98 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_88, %mul_113), kwargs = {})
#   %add_99 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_91, %add_98), kwargs = {})
#   %div_12 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_99, 1.0), kwargs = {})
#   %var_mean_24 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_87, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_100 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_54, 1e-06), kwargs = {})
#   %rsqrt_24 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_100,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_35 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_35', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_35', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_35(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 10240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp11_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_ptr0 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_out_ptr0 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tl.load(in_ptr1 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp4 = tl.load(in_ptr2 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tmp1 + tmp2
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp7 = tmp3 + tmp6
        tmp8 = tmp0 + tmp7
        tmp9 = tmp8 * tmp5
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp11_mean_next, tmp11_m2_next, tmp11_weight_next = triton_helpers.welford_reduce(
            tmp10, tmp11_mean, tmp11_m2, tmp11_weight, roffset == 0
        )
        tmp11_mean = tl.where(rmask & xmask, tmp11_mean_next, tmp11_mean)
        tmp11_m2 = tl.where(rmask & xmask, tmp11_m2_next, tmp11_m2)
        tmp11_weight = tl.where(rmask & xmask, tmp11_weight_next, tmp11_weight)
        tl.store(in_out_ptr0 + (r5 + 10240*x4), tmp9, rmask & xmask)
    tmp11_tmp, tmp12_tmp, tmp13_tmp = triton_helpers.welford(
        tmp11_mean, tmp11_m2, tmp11_weight, 1
    )
    tmp11 = tmp11_tmp[:, None]
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp11, xmask)
    tl.store(out_ptr1 + (x4), tmp12, xmask)
    tmp14 = 10240.0
    tmp15 = tmp12 / tmp14
    tmp16 = 1e-06
    tmp17 = tmp15 + tmp16
    tmp18 = libdevice.rsqrt(tmp17)
    tl.store(out_ptr2 + (x4), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/pt/cptwkokif34tmh22xdf5pskznc4ylgqs3oodcli7gmhw6hq7rv3f.py
# Topologically Sorted Source Nodes: [hidden_states_68], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_68 => add_101, mul_115
# Graph fragment:
#   %mul_115 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_88, %unsqueeze_151), kwargs = {})
#   %add_101 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_115, %unsqueeze_148), kwargs = {})
triton_poi_fused_native_group_norm_36 = async_compile.triton('triton_poi_fused_native_group_norm_36', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_36', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_36(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 1024
    x1 = ((xindex // 1024) % 320)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 10), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 10), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = 10240.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-06
    tmp7 = tmp5 + tmp6
    tmp8 = libdevice.rsqrt(tmp7)
    tmp9 = tmp2 * tmp8
    tmp11 = tmp9 * tmp10
    tmp13 = tmp11 + tmp12
    tl.store(out_ptr0 + (x3), tmp13, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ov/covtk6rwd56cyljnchybxehhizgcd4idqi567gryncpw6x6lf2rb.py
# Topologically Sorted Source Nodes: [linear_16], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   linear_16 => clone_17
# Graph fragment:
#   %clone_17 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%view_89,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_37 = async_compile.triton('triton_poi_fused_clone_37', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 4096, 'x': 512}, tile_hint=TileHint.SQUARE,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_37', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_37(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 320
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 1024)
    y1 = yindex // 1024
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 1024*x2 + 327680*y1), xmask, eviction_policy='evict_last')
    tl.store(out_ptr0 + (x2 + 320*y3), tmp0, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/va/cva6wz7qduu7qsy5xsiyv4fmogo7d3yhmpbmxtnde4n3g6fekjh4.py
# Topologically Sorted Source Nodes: [result_102, mul_40, result_103, norm_hidden_states], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   mul_40 => mul_116
#   norm_hidden_states => add_104, add_105, mul_117, mul_118, rsqrt_25, sub_25, var_mean_25
#   result_102 => add_102
#   result_103 => add_103
# Graph fragment:
#   %add_102 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_3, %primals_199), kwargs = {})
#   %mul_116 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_96, 1.0), kwargs = {})
#   %add_103 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_102, %mul_116), kwargs = {})
#   %var_mean_25 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_103, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_104 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_56, 1e-05), kwargs = {})
#   %rsqrt_25 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_104,), kwargs = {})
#   %sub_25 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_103, %getitem_57), kwargs = {})
#   %mul_117 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_25, %rsqrt_25), kwargs = {})
#   %mul_118 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_117, %primals_202), kwargs = {})
#   %add_105 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_118, %primals_203), kwargs = {})
#   %div_166 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_25, 320), kwargs = {})
triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38 = async_compile.triton('triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 4096, 'r': 512},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel):
    xnumel = 4096
    XBLOCK: tl.constexpr = 1
    rnumel = 320
    RBLOCK: tl.constexpr = 512
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 320*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr2 + (r1 + 320*x0), rmask, other=0.0)
    tmp30 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp32 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
    tmp9 = tl.where(rmask, tmp7, 0)
    tmp10 = tl.broadcast_to(tmp7, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
    tmp14 = tl.full([1], 320, tl.int32)
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp13 / tmp15
    tmp17 = tmp7 - tmp16
    tmp18 = tmp17 * tmp17
    tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
    tmp21 = tl.where(rmask, tmp19, 0)
    tmp22 = triton_helpers.promote_to_tensor(tl.sum(tmp21, 0))
    tmp23 = tmp6 - tmp16
    tmp24 = 320.0
    tmp25 = tmp22 / tmp24
    tmp26 = 1e-05
    tmp27 = tmp25 + tmp26
    tmp28 = libdevice.rsqrt(tmp27)
    tmp29 = tmp23 * tmp28
    tmp31 = tmp29 * tmp30
    tmp33 = tmp31 + tmp32
    tmp34 = 0.003125
    tmp35 = tmp28 * tmp34
    tl.store(out_ptr2 + (r1 + 320*x0), tmp29, rmask)
    tl.store(out_ptr3 + (r1 + 320*x0), tmp33, rmask)
    tl.store(out_ptr4 + (x0), tmp35, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/n6/cn6dg2rn43lcy6e6zb7zzrma57ue5euo72g2p7inlisfxh5itq5p.py
# Topologically Sorted Source Nodes: [mul_41, result_106], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_41 => mul_119
#   result_106 => add_106
# Graph fragment:
#   %mul_119 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_102, 1.0), kwargs = {})
#   %add_106 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_98, %mul_119), kwargs = {})
triton_poi_fused_add_mul_39 = async_compile.triton('triton_poi_fused_add_mul_39', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_39', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_39(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None)
    tmp1 = tl.load(in_ptr0 + (x0), None)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ei/cei4lumquuk53wu55utvv43q7kmqjfq53yhxmdtpq4gcjxj7ex5f.py
# Topologically Sorted Source Nodes: [result_102, mul_40, result_103, mul_44, result_115, hidden_states_74, hidden_states_75, norm_hidden_states_1], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_74 => div_13
#   hidden_states_75 => add_110
#   mul_40 => mul_116
#   mul_44 => mul_122
#   norm_hidden_states_1 => add_111, add_112, mul_123, mul_124, rsqrt_26, sub_26, var_mean_26
#   result_102 => add_102
#   result_103 => add_103
#   result_115 => add_109
# Graph fragment:
#   %add_102 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_3, %primals_199), kwargs = {})
#   %mul_116 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_96, 1.0), kwargs = {})
#   %add_103 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_102, %mul_116), kwargs = {})
#   %mul_122 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_136, 1.0), kwargs = {})
#   %add_109 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_132, %mul_122), kwargs = {})
#   %div_13 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_109, 1.0), kwargs = {})
#   %add_110 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_13, %add_103), kwargs = {})
#   %var_mean_26 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_110, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_111 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_62, 1e-05), kwargs = {})
#   %rsqrt_26 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_111,), kwargs = {})
#   %sub_26 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_110, %getitem_63), kwargs = {})
#   %mul_123 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_26, %rsqrt_26), kwargs = {})
#   %mul_124 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_123, %primals_217), kwargs = {})
#   %add_112 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_124, %primals_218), kwargs = {})
#   %div_164 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_26, 320), kwargs = {})
triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40 = async_compile.triton('triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 4096, 'r': 512},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 8, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel):
    xnumel = 4096
    XBLOCK: tl.constexpr = 1
    rnumel = 320
    RBLOCK: tl.constexpr = 512
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 320*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + 320*x0), rmask, other=0.0)
    tmp8 = tl.load(in_ptr2 + (r1 + 320*x0), rmask, other=0.0)
    tmp9 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp11 = tl.load(in_ptr4 + (r1 + 320*x0), rmask, other=0.0)
    tmp38 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp40 = tl.load(in_ptr6 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tmp6 * tmp4
    tmp10 = tmp8 + tmp9
    tmp12 = tmp11 * tmp4
    tmp13 = tmp10 + tmp12
    tmp14 = tmp7 + tmp13
    tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
    tmp17 = tl.where(rmask, tmp15, 0)
    tmp18 = tl.broadcast_to(tmp15, [RBLOCK])
    tmp20 = tl.where(rmask, tmp18, 0)
    tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp20, 0))
    tmp22 = tl.full([1], 320, tl.int32)
    tmp23 = tmp22.to(tl.float32)
    tmp24 = tmp21 / tmp23
    tmp25 = tmp15 - tmp24
    tmp26 = tmp25 * tmp25
    tmp27 = tl.broadcast_to(tmp26, [RBLOCK])
    tmp29 = tl.where(rmask, tmp27, 0)
    tmp30 = triton_helpers.promote_to_tensor(tl.sum(tmp29, 0))
    tmp31 = tmp14 - tmp24
    tmp32 = 320.0
    tmp33 = tmp30 / tmp32
    tmp34 = 1e-05
    tmp35 = tmp33 + tmp34
    tmp36 = libdevice.rsqrt(tmp35)
    tmp37 = tmp31 * tmp36
    tmp39 = tmp37 * tmp38
    tmp41 = tmp39 + tmp40
    tmp42 = 0.003125
    tmp43 = tmp36 * tmp42
    tl.store(in_out_ptr0 + (r1 + 320*x0), tmp14, rmask)
    tl.store(out_ptr2 + (r1 + 320*x0), tmp37, rmask)
    tl.store(out_ptr3 + (r1 + 320*x0), tmp41, rmask)
    tl.store(out_ptr4 + (x0), tmp43, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/qd/cqd4lypkaw5gdba7lilc2h436nivfad4lo357my4ihk7l66y6tnt.py
# Topologically Sorted Source Nodes: [mul_46, result_121], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_46 => mul_126
#   result_121 => add_114
# Graph fragment:
#   %mul_126 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_153, 1.0), kwargs = {})
#   %add_114 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_149, %mul_126), kwargs = {})
triton_poi_fused_add_mul_41 = async_compile.triton('triton_poi_fused_add_mul_41', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_41', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_41(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98560
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
    tmp1 = tl.load(in_ptr0 + (x0), xmask)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/yk/cykpmkc3exkkbjh5amdtzvfw6ny5gyvc2gyn2x52txd42sxvo3e7.py
# Topologically Sorted Source Nodes: [mul_48, result_127, hidden_states_80, hidden_states_81, norm_hidden_states_2], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_80 => div_14
#   hidden_states_81 => add_117
#   mul_48 => mul_128
#   norm_hidden_states_2 => add_118, add_119, mul_129, mul_130, rsqrt_27, sub_27, var_mean_27
#   result_127 => add_116
# Graph fragment:
#   %mul_128 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_179, 1.0), kwargs = {})
#   %add_116 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_175, %mul_128), kwargs = {})
#   %div_14 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_116, 1.0), kwargs = {})
#   %add_117 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_14, %add_110), kwargs = {})
#   %var_mean_27 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_117, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_118 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_68, 1e-05), kwargs = {})
#   %rsqrt_27 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_118,), kwargs = {})
#   %sub_27 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_117, %getitem_69), kwargs = {})
#   %mul_129 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_27, %rsqrt_27), kwargs = {})
#   %mul_130 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_129, %primals_232), kwargs = {})
#   %add_119 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_130, %primals_233), kwargs = {})
#   %div_162 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_27, 320), kwargs = {})
triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42 = async_compile.triton('triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 4096, 'r': 512},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 6, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel):
    xnumel = 4096
    XBLOCK: tl.constexpr = 1
    rnumel = 320
    RBLOCK: tl.constexpr = 512
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 320*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr2 + (r1 + 320*x0), rmask, other=0.0)
    tmp8 = tl.load(in_ptr3 + (r1 + 320*x0), rmask, other=0.0)
    tmp33 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp35 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tmp6 * tmp4
    tmp9 = tmp7 + tmp8
    tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = tl.broadcast_to(tmp10, [RBLOCK])
    tmp15 = tl.where(rmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp17 = tl.full([1], 320, tl.int32)
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp16 / tmp18
    tmp20 = tmp10 - tmp19
    tmp21 = tmp20 * tmp20
    tmp22 = tl.broadcast_to(tmp21, [RBLOCK])
    tmp24 = tl.where(rmask, tmp22, 0)
    tmp25 = triton_helpers.promote_to_tensor(tl.sum(tmp24, 0))
    tmp26 = tmp9 - tmp19
    tmp27 = 320.0
    tmp28 = tmp25 / tmp27
    tmp29 = 1e-05
    tmp30 = tmp28 + tmp29
    tmp31 = libdevice.rsqrt(tmp30)
    tmp32 = tmp26 * tmp31
    tmp34 = tmp32 * tmp33
    tmp36 = tmp34 + tmp35
    tmp37 = 0.003125
    tmp38 = tmp31 * tmp37
    tl.store(out_ptr2 + (r1 + 320*x0), tmp32, rmask)
    tl.store(out_ptr3 + (r1 + 320*x0), tmp36, rmask)
    tl.store(out_ptr4 + (x0), tmp38, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/wi/cwiw37e73jv26j6irqxhjrsmgdxpveoiwa65mw75q5wa7dkqq7td.py
# Topologically Sorted Source Nodes: [mul_49, result_130], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_49 => mul_131
#   result_130 => add_120
# Graph fragment:
#   %mul_131 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_188, 1.0), kwargs = {})
#   %add_120 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_184, %mul_131), kwargs = {})
triton_poi_fused_add_mul_43 = async_compile.triton('triton_poi_fused_add_mul_43', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16777216}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_43', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_43(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 10485760
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 2560)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x2), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/7r/c7rsfdx7ey4ykhglmq4lwokkk2e3qarjaepnleg47tpklksay5gv.py
# Topologically Sorted Source Nodes: [gelu, hidden_states_83], Original ATen: [aten.gelu, aten.mul]
# Source node to ATen node mapping:
#   gelu => add_121, erf, mul_132, mul_133, mul_134
#   hidden_states_83 => mul_135
# Graph fragment:
#   %mul_132 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_73, 0.5), kwargs = {})
#   %mul_133 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_73, 0.7071067811865476), kwargs = {})
#   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_133,), kwargs = {})
#   %add_121 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
#   %mul_134 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_132, %add_121), kwargs = {})
#   %mul_135 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_74, %mul_134), kwargs = {})
triton_poi_fused_gelu_mul_44 = async_compile.triton('triton_poi_fused_gelu_mul_44', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8388608}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_mul_44', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_mul_44(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5242880
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 1280)
    x1 = xindex // 1280
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 2560*x1), None)
    tmp1 = tl.load(in_ptr0 + (1280 + x0 + 2560*x1), None)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = libdevice.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp0 * tmp9
    tl.store(out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/6q/c6qv3qnuxx4lmv2ru3fftuc37ctx4gixz7t3jxkaujhukcbpkcge.py
# Topologically Sorted Source Nodes: [mul_48, result_127, hidden_states_80, hidden_states_81, mul_51, result_133, hidden_states_85], Original ATen: [aten.mul, aten.add, aten.div]
# Source node to ATen node mapping:
#   hidden_states_80 => div_14
#   hidden_states_81 => add_117
#   hidden_states_85 => add_123
#   mul_48 => mul_128
#   mul_51 => mul_136
#   result_127 => add_116
#   result_133 => add_122
# Graph fragment:
#   %mul_128 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_179, 1.0), kwargs = {})
#   %add_116 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_175, %mul_128), kwargs = {})
#   %div_14 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_116, 1.0), kwargs = {})
#   %add_117 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_14, %add_110), kwargs = {})
#   %mul_136 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_199, 1.0), kwargs = {})
#   %add_122 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_195, %mul_136), kwargs = {})
#   %add_123 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_122, %add_117), kwargs = {})
triton_poi_fused_add_div_mul_45 = async_compile.triton('triton_poi_fused_add_div_mul_45', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_div_mul_45', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_div_mul_45(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 320)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp7 = tl.load(in_ptr2 + (x2), None)
    tmp8 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr4 + (x2), None)
    tmp14 = tl.load(in_ptr5 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp9 = tmp7 + tmp8
    tmp11 = tmp10 * tmp4
    tmp12 = tmp9 + tmp11
    tmp13 = tmp12 * tmp4
    tmp15 = tmp13 + tmp14
    tmp16 = tmp6 + tmp15
    tl.store(in_out_ptr0 + (x2), tmp16, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ds/cdseorvgeyha6n45mxk5bwruqonse6vgni3s6wprn5p5nxbku5ip.py
# Topologically Sorted Source Nodes: [hidden_states_86, output], Original ATen: [aten.clone, aten.add]
# Source node to ATen node mapping:
#   hidden_states_86 => clone_21
#   output => add_125
# Graph fragment:
#   %clone_21 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_78,), kwargs = {memory_format: torch.contiguous_format})
#   %add_125 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone_21, %div_12), kwargs = {})
triton_poi_fused_add_clone_46 = async_compile.triton('triton_poi_fused_add_clone_46', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 2048, 'x': 1024}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clone_46', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clone_46(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 1280
    xnumel = 1024
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 320)
    y1 = yindex // 320
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 320*x2 + 327680*y1), xmask & ymask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), ymask, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (y0 + 320*x2 + 327680*y1), xmask & ymask, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr3 + (x2 + 1024*y3), xmask & ymask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp8 = tmp6 + tmp7
    tl.store(out_ptr0 + (x2 + 1024*y3), tmp8, xmask & ymask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/hu/chu4xqxladfz2hdokhtw753gmcjg7pookmixkufryzew6hc53xik.py
# Topologically Sorted Source Nodes: [hidden_states_87], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_87 => add_126, rsqrt_28, var_mean_28
# Graph fragment:
#   %var_mean_28 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_215, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_126 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_76, 1e-05), kwargs = {})
#   %rsqrt_28 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_126,), kwargs = {})
triton_red_fused_native_group_norm_47 = async_compile.triton('triton_red_fused_native_group_norm_47', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_group_norm_47', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_native_group_norm_47(in_out_ptr0, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 10240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 10240*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
            tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
        )
        tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
        tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
        tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
    tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
        tmp2_mean, tmp2_m2, tmp2_weight, 1
    )
    tmp2 = tmp2_tmp[:, None]
    tmp3 = tmp3_tmp[:, None]
    tmp4 = tmp4_tmp[:, None]
    tl.store(out_ptr0 + (x0), tmp2, xmask)
    tmp5 = 10240.0
    tmp6 = tmp3 / tmp5
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = libdevice.rsqrt(tmp8)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ku/ckuwoo5gue3xm3aqdy6xa5vyjgo2xcecxji4dzolksogfjrv6ylz.py
# Topologically Sorted Source Nodes: [result_180, mul_68, result_181, hidden_states_112], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_112 => add_161, rsqrt_34, var_mean_34
#   mul_68 => mul_171
#   result_180 => convolution_97
#   result_181 => add_160
# Graph fragment:
#   %convolution_97 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_159, %primals_310, %primals_311, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_171 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_99, 1.0), kwargs = {})
#   %add_160 : [num_users=5] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_97, %mul_171), kwargs = {})
#   %var_mean_34 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_347, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_161 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_102, 1e-05), kwargs = {})
#   %rsqrt_34 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_161,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_48 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_48', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 4096},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_48', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_48(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2560
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 256
        tmp0 = tl.load(in_out_ptr0 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 2560*x4), tmp6, rmask & xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 2560.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-05
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/m3/cm35mrkeomra3fojv56k6ashby53bjiq4sv5kcskwnt5yvixoexk.py
# Topologically Sorted Source Nodes: [hidden_states_112, hidden_states_113], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_112 => add_162, mul_173
#   hidden_states_113 => mul_174, sigmoid_28
# Graph fragment:
#   %mul_173 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_348, %unsqueeze_177), kwargs = {})
#   %add_162 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_173, %unsqueeze_174), kwargs = {})
#   %sigmoid_28 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_162,), kwargs = {})
#   %mul_174 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_162, %sigmoid_28), kwargs = {})
triton_poi_fused_native_group_norm_silu_49 = async_compile.triton('triton_poi_fused_native_group_norm_silu_49', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_49', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_49(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 256
    x1 = ((xindex // 256) % 320)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 10), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 10), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/rz/crzjqrczgjysuy66d2zaz6ekcsd6yneqssnspfxvjuusu5knpbqf.py
# Topologically Sorted Source Nodes: [result_183, mul_69, result_184, hidden_states_114, hidden_states_115], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_114 => add_164
#   hidden_states_115 => add_165, rsqrt_35, var_mean_35
#   mul_69 => mul_175
#   result_183 => convolution_100
#   result_184 => add_163
# Graph fragment:
#   %convolution_100 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_174, %primals_316, %primals_317, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_175 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_102, 1.0), kwargs = {})
#   %add_163 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_100, %mul_175), kwargs = {})
#   %add_164 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_163, %unsqueeze_179), kwargs = {})
#   %var_mean_35 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_349, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_165 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_104, 1e-05), kwargs = {})
#   %rsqrt_35 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_165,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_50 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_50', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_50', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_50(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 256
        tmp0 = tl.load(in_out_ptr0 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 20*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r3 + 20*x4), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 20*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp10 = tmp6 + tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tl.store(in_out_ptr0 + (r5 + 5120*x4), tmp10, rmask & xmask)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp12, xmask)
    tmp15 = 5120.0
    tmp16 = tmp13 / tmp15
    tmp17 = 1e-05
    tmp18 = tmp16 + tmp17
    tmp19 = libdevice.rsqrt(tmp18)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp19, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/33/c33byght6mgjt4jzauihyxkfbbbakuzpfh6nm3k74uv3bgw36gc5.py
# Topologically Sorted Source Nodes: [hidden_states_115, hidden_states_116], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_115 => add_166, mul_178
#   hidden_states_116 => mul_179, sigmoid_30
# Graph fragment:
#   %mul_178 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_350, %unsqueeze_185), kwargs = {})
#   %add_166 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_178, %unsqueeze_182), kwargs = {})
#   %sigmoid_30 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_166,), kwargs = {})
#   %mul_179 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_166, %sigmoid_30), kwargs = {})
triton_poi_fused_native_group_norm_silu_51 = async_compile.triton('triton_poi_fused_native_group_norm_silu_51', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_51', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_51(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 256
    x1 = ((xindex // 256) % 640)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 20), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 20), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/iy/ciyvoksj4v5fintauyxsa2xz4lsf54dqq5arxopupgi36dtphhil.py
# Topologically Sorted Source Nodes: [result_186, mul_70, result_187, result_189, mul_71, result_190, add_25, output_tensor_12, hidden_states_118], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_25 => add_169
#   hidden_states_118 => add_170, rsqrt_36, var_mean_36
#   mul_70 => mul_180
#   mul_71 => mul_181
#   output_tensor_12 => div_18
#   result_186 => convolution_103
#   result_187 => add_167
#   result_189 => convolution_106
#   result_190 => add_168
# Graph fragment:
#   %convolution_103 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_179, %primals_324, %primals_325, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_180 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_105, 1.0), kwargs = {})
#   %add_167 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_103, %mul_180), kwargs = {})
#   %convolution_106 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_160, %primals_328, %primals_329, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_181 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_108, 1.0), kwargs = {})
#   %add_168 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_106, %mul_181), kwargs = {})
#   %add_169 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_168, %add_167), kwargs = {})
#   %div_18 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_169, 1.0), kwargs = {})
#   %var_mean_36 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_351, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_170 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_106, 1e-06), kwargs = {})
#   %rsqrt_36 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_170,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_52 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_52', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_52', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_52(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 256
        tmp0 = tl.load(in_out_ptr0 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 20*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 20*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.load(in_ptr4 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp11 = tmp10 * tmp4
        tmp12 = tmp9 + tmp11
        tmp13 = tmp6 + tmp12
        tmp14 = tmp13 * tmp4
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
            tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
        )
        tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
        tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
        tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tl.store(in_out_ptr0 + (r5 + 5120*x4), tmp14, rmask & xmask)
    tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
        tmp16_mean, tmp16_m2, tmp16_weight, 1
    )
    tmp16 = tmp16_tmp[:, None]
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp16, xmask)
    tl.store(out_ptr1 + (x4), tmp17, xmask)
    tmp19 = 5120.0
    tmp20 = tmp17 / tmp19
    tmp21 = 1e-06
    tmp22 = tmp20 + tmp21
    tmp23 = libdevice.rsqrt(tmp22)
    tl.store(out_ptr2 + (x4), tmp23, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ex/cexxmh2fgjemdik4ddgy7gcy67okgy2vsmi6eik3coimgroz25j2.py
# Topologically Sorted Source Nodes: [hidden_states_118], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_118 => add_171, mul_183
# Graph fragment:
#   %mul_183 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_352, %unsqueeze_191), kwargs = {})
#   %add_171 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_183, %unsqueeze_188), kwargs = {})
triton_poi_fused_native_group_norm_53 = async_compile.triton('triton_poi_fused_native_group_norm_53', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_53', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_53(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 256
    x1 = ((xindex // 256) % 640)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 20), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 20), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = 5120.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-06
    tmp7 = tmp5 + tmp6
    tmp8 = libdevice.rsqrt(tmp7)
    tmp9 = tmp2 * tmp8
    tmp11 = tmp9 * tmp10
    tmp13 = tmp11 + tmp12
    tl.store(out_ptr0 + (x3), tmp13, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/yr/cyr5io3izydddh6o4z7jh5hp2ntzlt2avqbmsa27zbw67qoyyx7c.py
# Topologically Sorted Source Nodes: [linear_90], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   linear_90 => clone_29
# Graph fragment:
#   %clone_29 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%view_353,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_54 = async_compile.triton('triton_poi_fused_clone_54', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 1024, 'x': 1024}, tile_hint=TileHint.SQUARE,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_54', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_54(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 1024
    xnumel = 640
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 256)
    y1 = yindex // 256
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 256*x2 + 163840*y1), xmask, eviction_policy='evict_last')
    tl.store(out_ptr0 + (x2 + 640*y3), tmp0, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/tk/ctklgy4twhh6gnmuu2bei2xambghphdph6xwnhnf6kzy5vsqumwm.py
# Topologically Sorted Source Nodes: [result_192, mul_72, result_193, norm_hidden_states_6], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   mul_72 => mul_184
#   norm_hidden_states_6 => add_174, add_175, mul_185, mul_186, rsqrt_37, sub_37, var_mean_37
#   result_192 => add_172
#   result_193 => add_173
# Graph fragment:
#   %add_172 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_5, %primals_335), kwargs = {})
#   %mul_184 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_360, 1.0), kwargs = {})
#   %add_173 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_172, %mul_184), kwargs = {})
#   %var_mean_37 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_173, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_174 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_108, 1e-05), kwargs = {})
#   %rsqrt_37 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_174,), kwargs = {})
#   %sub_37 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_173, %getitem_109), kwargs = {})
#   %mul_185 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_37, %rsqrt_37), kwargs = {})
#   %mul_186 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_185, %primals_338), kwargs = {})
#   %add_175 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_186, %primals_339), kwargs = {})
#   %div_154 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_37, 640), kwargs = {})
triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55 = async_compile.triton('triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 1024, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel):
    xnumel = 1024
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 640*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr2 + (r1 + 640*x0), rmask, other=0.0)
    tmp30 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp32 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
    tmp9 = tl.where(rmask, tmp7, 0)
    tmp10 = tl.broadcast_to(tmp7, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
    tmp14 = tl.full([1], 640, tl.int32)
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp13 / tmp15
    tmp17 = tmp7 - tmp16
    tmp18 = tmp17 * tmp17
    tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
    tmp21 = tl.where(rmask, tmp19, 0)
    tmp22 = triton_helpers.promote_to_tensor(tl.sum(tmp21, 0))
    tmp23 = tmp6 - tmp16
    tmp24 = 640.0
    tmp25 = tmp22 / tmp24
    tmp26 = 1e-05
    tmp27 = tmp25 + tmp26
    tmp28 = libdevice.rsqrt(tmp27)
    tmp29 = tmp23 * tmp28
    tmp31 = tmp29 * tmp30
    tmp33 = tmp31 + tmp32
    tmp34 = 0.0015625
    tmp35 = tmp28 * tmp34
    tl.store(out_ptr2 + (r1 + 640*x0), tmp29, rmask)
    tl.store(out_ptr3 + (r1 + 640*x0), tmp33, rmask)
    tl.store(out_ptr4 + (x0), tmp35, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/jk/cjk5hdsjpw3kjvdy4lqznwv7bnmwonazimuvthmeauyo2djc26wl.py
# Topologically Sorted Source Nodes: [mul_73, result_196], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_73 => mul_187
#   result_196 => add_176
# Graph fragment:
#   %mul_187 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_366, 1.0), kwargs = {})
#   %add_176 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_362, %mul_187), kwargs = {})
triton_poi_fused_add_mul_56 = async_compile.triton('triton_poi_fused_add_mul_56', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_56', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_56(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None)
    tmp1 = tl.load(in_ptr0 + (x0), None)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/td/ctdm7qvbdrb2h7qn7gxpypbwtt5rnemu77ftru2nxwms3ggeuubv.py
# Topologically Sorted Source Nodes: [result_192, mul_72, result_193, mul_76, result_205, hidden_states_124, hidden_states_125, norm_hidden_states_7], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_124 => div_19
#   hidden_states_125 => add_180
#   mul_72 => mul_184
#   mul_76 => mul_190
#   norm_hidden_states_7 => add_181, add_182, mul_191, mul_192, rsqrt_38, sub_38, var_mean_38
#   result_192 => add_172
#   result_193 => add_173
#   result_205 => add_179
# Graph fragment:
#   %add_172 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_5, %primals_335), kwargs = {})
#   %mul_184 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_360, 1.0), kwargs = {})
#   %add_173 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_172, %mul_184), kwargs = {})
#   %mul_190 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_400, 1.0), kwargs = {})
#   %add_179 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_396, %mul_190), kwargs = {})
#   %div_19 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_179, 1.0), kwargs = {})
#   %add_180 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_19, %add_173), kwargs = {})
#   %var_mean_38 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_180, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_181 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_114, 1e-05), kwargs = {})
#   %rsqrt_38 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_181,), kwargs = {})
#   %sub_38 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_180, %getitem_115), kwargs = {})
#   %mul_191 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_38, %rsqrt_38), kwargs = {})
#   %mul_192 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_191, %primals_353), kwargs = {})
#   %add_182 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_192, %primals_354), kwargs = {})
#   %div_152 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_38, 640), kwargs = {})
triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57 = async_compile.triton('triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 1024, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 8, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel):
    xnumel = 1024
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 640*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + 640*x0), rmask, other=0.0)
    tmp8 = tl.load(in_ptr2 + (r1 + 640*x0), rmask, other=0.0)
    tmp9 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp11 = tl.load(in_ptr4 + (r1 + 640*x0), rmask, other=0.0)
    tmp38 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp40 = tl.load(in_ptr6 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tmp6 * tmp4
    tmp10 = tmp8 + tmp9
    tmp12 = tmp11 * tmp4
    tmp13 = tmp10 + tmp12
    tmp14 = tmp7 + tmp13
    tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
    tmp17 = tl.where(rmask, tmp15, 0)
    tmp18 = tl.broadcast_to(tmp15, [RBLOCK])
    tmp20 = tl.where(rmask, tmp18, 0)
    tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp20, 0))
    tmp22 = tl.full([1], 640, tl.int32)
    tmp23 = tmp22.to(tl.float32)
    tmp24 = tmp21 / tmp23
    tmp25 = tmp15 - tmp24
    tmp26 = tmp25 * tmp25
    tmp27 = tl.broadcast_to(tmp26, [RBLOCK])
    tmp29 = tl.where(rmask, tmp27, 0)
    tmp30 = triton_helpers.promote_to_tensor(tl.sum(tmp29, 0))
    tmp31 = tmp14 - tmp24
    tmp32 = 640.0
    tmp33 = tmp30 / tmp32
    tmp34 = 1e-05
    tmp35 = tmp33 + tmp34
    tmp36 = libdevice.rsqrt(tmp35)
    tmp37 = tmp31 * tmp36
    tmp39 = tmp37 * tmp38
    tmp41 = tmp39 + tmp40
    tmp42 = 0.0015625
    tmp43 = tmp36 * tmp42
    tl.store(in_out_ptr0 + (r1 + 640*x0), tmp14, rmask)
    tl.store(out_ptr2 + (r1 + 640*x0), tmp37, rmask)
    tl.store(out_ptr3 + (r1 + 640*x0), tmp41, rmask)
    tl.store(out_ptr4 + (x0), tmp43, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/uq/cuqjhxponhyjzkunkm4jfnpvhybyqtrjmbeefptdkpksevcjjumw.py
# Topologically Sorted Source Nodes: [mul_78, result_211], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_78 => mul_194
#   result_211 => add_184
# Graph fragment:
#   %mul_194 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_417, 1.0), kwargs = {})
#   %add_184 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_413, %mul_194), kwargs = {})
triton_poi_fused_add_mul_58 = async_compile.triton('triton_poi_fused_add_mul_58', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 262144}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_58', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_58(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 197120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
    tmp1 = tl.load(in_ptr0 + (x0), xmask)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/3x/c3xdfpo6fljsjt2enz3eop4sdd4kbtnh4ejozvfeeayy76oy36x3.py
# Topologically Sorted Source Nodes: [mul_80, result_217, hidden_states_130, hidden_states_131, norm_hidden_states_8], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_130 => div_20
#   hidden_states_131 => add_187
#   mul_80 => mul_196
#   norm_hidden_states_8 => add_188, add_189, mul_197, mul_198, rsqrt_39, sub_39, var_mean_39
#   result_217 => add_186
# Graph fragment:
#   %mul_196 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_443, 1.0), kwargs = {})
#   %add_186 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_439, %mul_196), kwargs = {})
#   %div_20 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_186, 1.0), kwargs = {})
#   %add_187 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_20, %add_180), kwargs = {})
#   %var_mean_39 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_187, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_188 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_120, 1e-05), kwargs = {})
#   %rsqrt_39 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_188,), kwargs = {})
#   %sub_39 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_187, %getitem_121), kwargs = {})
#   %mul_197 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_39, %rsqrt_39), kwargs = {})
#   %mul_198 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_197, %primals_368), kwargs = {})
#   %add_189 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_198, %primals_369), kwargs = {})
#   %div_150 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_39, 640), kwargs = {})
triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59 = async_compile.triton('triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 1024, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 6, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel):
    xnumel = 1024
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 640*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr2 + (r1 + 640*x0), rmask, other=0.0)
    tmp8 = tl.load(in_ptr3 + (r1 + 640*x0), rmask, other=0.0)
    tmp33 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp35 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tmp6 * tmp4
    tmp9 = tmp7 + tmp8
    tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = tl.broadcast_to(tmp10, [RBLOCK])
    tmp15 = tl.where(rmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp17 = tl.full([1], 640, tl.int32)
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp16 / tmp18
    tmp20 = tmp10 - tmp19
    tmp21 = tmp20 * tmp20
    tmp22 = tl.broadcast_to(tmp21, [RBLOCK])
    tmp24 = tl.where(rmask, tmp22, 0)
    tmp25 = triton_helpers.promote_to_tensor(tl.sum(tmp24, 0))
    tmp26 = tmp9 - tmp19
    tmp27 = 640.0
    tmp28 = tmp25 / tmp27
    tmp29 = 1e-05
    tmp30 = tmp28 + tmp29
    tmp31 = libdevice.rsqrt(tmp30)
    tmp32 = tmp26 * tmp31
    tmp34 = tmp32 * tmp33
    tmp36 = tmp34 + tmp35
    tmp37 = 0.0015625
    tmp38 = tmp31 * tmp37
    tl.store(out_ptr2 + (r1 + 640*x0), tmp32, rmask)
    tl.store(out_ptr3 + (r1 + 640*x0), tmp36, rmask)
    tl.store(out_ptr4 + (x0), tmp38, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/7g/c7gmracyvezqwdnuzgiwa3tedbcpv65lhwftlgfef2depfvhocor.py
# Topologically Sorted Source Nodes: [mul_81, result_220], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_81 => mul_199
#   result_220 => add_190
# Graph fragment:
#   %mul_199 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_452, 1.0), kwargs = {})
#   %add_190 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_448, %mul_199), kwargs = {})
triton_poi_fused_add_mul_60 = async_compile.triton('triton_poi_fused_add_mul_60', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8388608}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_60', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_60(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 5242880
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 5120)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x2), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/rd/crd26xoumcnyb5k6n7yv4xjzkjsa3helca3h7t2c3ri2vp3sxu2h.py
# Topologically Sorted Source Nodes: [gelu_2, hidden_states_133], Original ATen: [aten.gelu, aten.mul]
# Source node to ATen node mapping:
#   gelu_2 => add_191, erf_2, mul_200, mul_201, mul_202
#   hidden_states_133 => mul_203
# Graph fragment:
#   %mul_200 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_125, 0.5), kwargs = {})
#   %mul_201 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_125, 0.7071067811865476), kwargs = {})
#   %erf_2 : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_201,), kwargs = {})
#   %add_191 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf_2, 1), kwargs = {})
#   %mul_202 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_200, %add_191), kwargs = {})
#   %mul_203 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_126, %mul_202), kwargs = {})
triton_poi_fused_gelu_mul_61 = async_compile.triton('triton_poi_fused_gelu_mul_61', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 4194304}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_mul_61', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_mul_61(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2621440
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 2560)
    x1 = xindex // 2560
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 5120*x1), None)
    tmp1 = tl.load(in_ptr0 + (2560 + x0 + 5120*x1), None)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = libdevice.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp0 * tmp9
    tl.store(out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/vn/cvna3jqovh24yzm6ky2duxxv5j7lujg6efnnvekxte2yhtcv4wg2.py
# Topologically Sorted Source Nodes: [mul_80, result_217, hidden_states_130, hidden_states_131, mul_83, result_223, hidden_states_135], Original ATen: [aten.mul, aten.add, aten.div]
# Source node to ATen node mapping:
#   hidden_states_130 => div_20
#   hidden_states_131 => add_187
#   hidden_states_135 => add_193
#   mul_80 => mul_196
#   mul_83 => mul_204
#   result_217 => add_186
#   result_223 => add_192
# Graph fragment:
#   %mul_196 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_443, 1.0), kwargs = {})
#   %add_186 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_439, %mul_196), kwargs = {})
#   %div_20 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_186, 1.0), kwargs = {})
#   %add_187 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_20, %add_180), kwargs = {})
#   %mul_204 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_463, 1.0), kwargs = {})
#   %add_192 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_459, %mul_204), kwargs = {})
#   %add_193 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_192, %add_187), kwargs = {})
triton_poi_fused_add_div_mul_62 = async_compile.triton('triton_poi_fused_add_div_mul_62', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_div_mul_62', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_div_mul_62(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 640)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp7 = tl.load(in_ptr2 + (x2), None)
    tmp8 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr4 + (x2), None)
    tmp14 = tl.load(in_ptr5 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp9 = tmp7 + tmp8
    tmp11 = tmp10 * tmp4
    tmp12 = tmp9 + tmp11
    tmp13 = tmp12 * tmp4
    tmp15 = tmp13 + tmp14
    tmp16 = tmp6 + tmp15
    tl.store(in_out_ptr0 + (x2), tmp16, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/cz/cczidcz66p3duj66kqbhhcgj3c5k5mfo62x437g5egypomfc67qs.py
# Topologically Sorted Source Nodes: [hidden_states_136, output_2], Original ATen: [aten.clone, aten.add]
# Source node to ATen node mapping:
#   hidden_states_136 => clone_33
#   output_2 => add_195
# Graph fragment:
#   %clone_33 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_186,), kwargs = {memory_format: torch.contiguous_format})
#   %add_195 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone_33, %div_18), kwargs = {})
triton_poi_fused_add_clone_63 = async_compile.triton('triton_poi_fused_add_clone_63', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 4096, 'x': 256}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clone_63', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clone_63(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 2560
    xnumel = 256
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 640)
    y1 = yindex // 640
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 640*x2 + 163840*y1), xmask & ymask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), ymask, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (y0 + 640*x2 + 163840*y1), xmask & ymask, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr3 + (x2 + 256*y3), xmask & ymask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp8 = tmp6 + tmp7
    tl.store(out_ptr0 + (x2 + 256*y3), tmp8, xmask & ymask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/xx/cxxck5r3v3we24r2jkjz75nxsudqnji3sbdj4rkqgml3aq5b4igc.py
# Topologically Sorted Source Nodes: [hidden_states_137], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_137 => add_196, rsqrt_40, var_mean_40
# Graph fragment:
#   %var_mean_40 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_479, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_196 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_128, 1e-05), kwargs = {})
#   %rsqrt_40 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_196,), kwargs = {})
triton_red_fused_native_group_norm_64 = async_compile.triton('triton_red_fused_native_group_norm_64', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_group_norm_64', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_native_group_norm_64(in_out_ptr0, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 5120*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
            tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
        )
        tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
        tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
        tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
    tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
        tmp2_mean, tmp2_m2, tmp2_weight, 1
    )
    tmp2 = tmp2_tmp[:, None]
    tmp3 = tmp3_tmp[:, None]
    tmp4 = tmp4_tmp[:, None]
    tl.store(out_ptr0 + (x0), tmp2, xmask)
    tmp5 = 5120.0
    tmp6 = tmp3 / tmp5
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = libdevice.rsqrt(tmp8)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/gz/cgzfimsgkruyb5tb4fmopdii5hktztrgw4upl5tiobyshvpd43hc.py
# Topologically Sorted Source Nodes: [result_231, mul_86, result_232, add_31, output_tensor_13, hidden_states_143], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_31 => add_203
#   hidden_states_143 => add_204, rsqrt_42, var_mean_42
#   mul_86 => mul_214
#   output_tensor_13 => div_21
#   result_231 => convolution_112
#   result_232 => add_202
# Graph fragment:
#   %convolution_112 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_213, %primals_392, %primals_393, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_214 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_114, 1.0), kwargs = {})
#   %add_202 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_112, %mul_214), kwargs = {})
#   %add_203 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_195, %add_202), kwargs = {})
#   %div_21 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_203, 1.0), kwargs = {})
#   %var_mean_42 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_483, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_204 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_132, 1e-06), kwargs = {})
#   %rsqrt_42 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_204,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_65 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_65', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_65', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_65(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp11_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 256
        tmp0 = tl.load(in_ptr0 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_out_ptr0 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tl.load(in_ptr1 + (r3 + 20*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp4 = tl.load(in_ptr2 + (r5 + 5120*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tmp1 + tmp2
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp7 = tmp3 + tmp6
        tmp8 = tmp0 + tmp7
        tmp9 = tmp8 * tmp5
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp11_mean_next, tmp11_m2_next, tmp11_weight_next = triton_helpers.welford_reduce(
            tmp10, tmp11_mean, tmp11_m2, tmp11_weight, roffset == 0
        )
        tmp11_mean = tl.where(rmask & xmask, tmp11_mean_next, tmp11_mean)
        tmp11_m2 = tl.where(rmask & xmask, tmp11_m2_next, tmp11_m2)
        tmp11_weight = tl.where(rmask & xmask, tmp11_weight_next, tmp11_weight)
        tl.store(in_out_ptr0 + (r5 + 5120*x4), tmp9, rmask & xmask)
    tmp11_tmp, tmp12_tmp, tmp13_tmp = triton_helpers.welford(
        tmp11_mean, tmp11_m2, tmp11_weight, 1
    )
    tmp11 = tmp11_tmp[:, None]
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp11, xmask)
    tl.store(out_ptr1 + (x4), tmp12, xmask)
    tmp14 = 5120.0
    tmp15 = tmp12 / tmp14
    tmp16 = 1e-06
    tmp17 = tmp15 + tmp16
    tmp18 = libdevice.rsqrt(tmp17)
    tl.store(out_ptr2 + (x4), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/x3/cx3wv3bx7xyoyei5zqxex6buycnu37gbkefvz4yujhyldfko2g7x.py
# Topologically Sorted Source Nodes: [result_270, mul_100, result_271, hidden_states_162], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_162 => add_231, rsqrt_46, var_mean_46
#   mul_100 => mul_239
#   result_270 => convolution_115
#   result_271 => add_230
# Graph fragment:
#   %convolution_115 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_229, %primals_446, %primals_447, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_239 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_117, 1.0), kwargs = {})
#   %add_230 : [num_users=5] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_115, %mul_239), kwargs = {})
#   %var_mean_46 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_611, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_231 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_154, 1e-05), kwargs = {})
#   %rsqrt_46 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_231,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_66 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_66', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_66', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_66(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 64
        tmp0 = tl.load(in_out_ptr0 + (r5 + 1280*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 20*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 1280*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
        tl.store(in_out_ptr0 + (r5 + 1280*x4), tmp6, rmask & xmask)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp8, xmask)
    tmp11 = 1280.0
    tmp12 = tmp9 / tmp11
    tmp13 = 1e-05
    tmp14 = tmp12 + tmp13
    tmp15 = libdevice.rsqrt(tmp14)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp15, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/qe/cqen3bnku6f7h44qmagr7bypajgkrih5dwaoz2ysdbhmwecamoyz.py
# Topologically Sorted Source Nodes: [hidden_states_162, hidden_states_163], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_162 => add_232, mul_241
#   hidden_states_163 => mul_242, sigmoid_34
# Graph fragment:
#   %mul_241 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_612, %unsqueeze_217), kwargs = {})
#   %add_232 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_241, %unsqueeze_214), kwargs = {})
#   %sigmoid_34 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_232,), kwargs = {})
#   %mul_242 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_232, %sigmoid_34), kwargs = {})
triton_poi_fused_native_group_norm_silu_67 = async_compile.triton('triton_poi_fused_native_group_norm_silu_67', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 262144}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_67', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_67(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 163840
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 64
    x1 = ((xindex // 64) % 640)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 20), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 20), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/74/c74u6zpl5c7sz4nj5vbczh6ygti7l4ah2gdzbgb7etva44e3ilwu.py
# Topologically Sorted Source Nodes: [result_273, mul_101, result_274, hidden_states_164, hidden_states_165], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_164 => add_234
#   hidden_states_165 => add_235, rsqrt_47, var_mean_47
#   mul_101 => mul_243
#   result_273 => convolution_118
#   result_274 => add_233
# Graph fragment:
#   %convolution_118 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_242, %primals_452, %primals_453, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_243 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_120, 1.0), kwargs = {})
#   %add_233 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_118, %mul_243), kwargs = {})
#   %add_234 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_233, %unsqueeze_219), kwargs = {})
#   %var_mean_47 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_613, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_235 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_156, 1e-05), kwargs = {})
#   %rsqrt_47 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_235,), kwargs = {})
triton_red_fused_add_convolution_mul_native_group_norm_68 = async_compile.triton('triton_red_fused_add_convolution_mul_native_group_norm_68', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 4096},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_mul_native_group_norm_68', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_mul_native_group_norm_68(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2560
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 64
        tmp0 = tl.load(in_out_ptr0 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 40*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r3 + 40*x4), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 40*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp10 = tmp6 + tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tl.store(in_out_ptr0 + (r5 + 2560*x4), tmp10, rmask & xmask)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp12, xmask)
    tmp15 = 2560.0
    tmp16 = tmp13 / tmp15
    tmp17 = 1e-05
    tmp18 = tmp16 + tmp17
    tmp19 = libdevice.rsqrt(tmp18)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp19, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/dn/cdnmn44ogoxr2yemdw3hho2u64wyvygvd7xe24yw5n5savvltprk.py
# Topologically Sorted Source Nodes: [hidden_states_165, hidden_states_166], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_165 => add_236, mul_246
#   hidden_states_166 => mul_247, sigmoid_36
# Graph fragment:
#   %mul_246 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_614, %unsqueeze_225), kwargs = {})
#   %add_236 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_246, %unsqueeze_222), kwargs = {})
#   %sigmoid_36 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_236,), kwargs = {})
#   %mul_247 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_236, %sigmoid_36), kwargs = {})
triton_poi_fused_native_group_norm_silu_69 = async_compile.triton('triton_poi_fused_native_group_norm_silu_69', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_69', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_69(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 64
    x1 = ((xindex // 64) % 1280)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 40), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 40), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/dp/cdptfiskde4mb654v37tl6ny3mtjncyq7lsumtx6zncoftjlbnsr.py
# Topologically Sorted Source Nodes: [result_276, mul_102, result_277, result_279, mul_103, result_280, add_37, output_tensor_14, hidden_states_168], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_37 => add_239
#   hidden_states_168 => add_240, rsqrt_48, var_mean_48
#   mul_102 => mul_248
#   mul_103 => mul_249
#   output_tensor_14 => div_24
#   result_276 => convolution_121
#   result_277 => add_237
#   result_279 => convolution_124
#   result_280 => add_238
# Graph fragment:
#   %convolution_121 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_247, %primals_460, %primals_461, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_248 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_123, 1.0), kwargs = {})
#   %add_237 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_121, %mul_248), kwargs = {})
#   %convolution_124 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_230, %primals_464, %primals_465, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_249 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_126, 1.0), kwargs = {})
#   %add_238 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_124, %mul_249), kwargs = {})
#   %add_239 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_238, %add_237), kwargs = {})
#   %div_24 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_239, 1.0), kwargs = {})
#   %var_mean_48 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_615, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_240 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_158, 1e-06), kwargs = {})
#   %rsqrt_48 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_240,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_70 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_70', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 4096},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_70', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_70(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2560
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 64
        tmp0 = tl.load(in_out_ptr0 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 40*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 40*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.load(in_ptr4 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp11 = tmp10 * tmp4
        tmp12 = tmp9 + tmp11
        tmp13 = tmp6 + tmp12
        tmp14 = tmp13 * tmp4
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
            tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
        )
        tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
        tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
        tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tl.store(in_out_ptr0 + (r5 + 2560*x4), tmp14, rmask & xmask)
    tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
        tmp16_mean, tmp16_m2, tmp16_weight, 1
    )
    tmp16 = tmp16_tmp[:, None]
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp16, xmask)
    tl.store(out_ptr1 + (x4), tmp17, xmask)
    tmp19 = 2560.0
    tmp20 = tmp17 / tmp19
    tmp21 = 1e-06
    tmp22 = tmp20 + tmp21
    tmp23 = libdevice.rsqrt(tmp22)
    tl.store(out_ptr2 + (x4), tmp23, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/na/cnaqcv4y7l3safnsyqalq6yly5tvz6sb5owvfal4sas2qgfkmtdk.py
# Topologically Sorted Source Nodes: [hidden_states_168], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_168 => add_241, mul_251
# Graph fragment:
#   %mul_251 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_616, %unsqueeze_231), kwargs = {})
#   %add_241 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_251, %unsqueeze_228), kwargs = {})
triton_poi_fused_native_group_norm_71 = async_compile.triton('triton_poi_fused_native_group_norm_71', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_71', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_71(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 64
    x1 = ((xindex // 64) % 1280)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 40), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 40), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = 2560.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-06
    tmp7 = tmp5 + tmp6
    tmp8 = libdevice.rsqrt(tmp7)
    tmp9 = tmp2 * tmp8
    tmp11 = tmp9 * tmp10
    tmp13 = tmp11 + tmp12
    tl.store(out_ptr0 + (x3), tmp13, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/q5/cq5ivkpay22hozjubz5zfa563sat4ysqh4tqugrciuxzxyjwhm6g.py
# Topologically Sorted Source Nodes: [linear_164], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   linear_164 => clone_41
# Graph fragment:
#   %clone_41 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%view_617,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_72 = async_compile.triton('triton_poi_fused_clone_72', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 256, 'x': 2048}, tile_hint=TileHint.SQUARE,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_72', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_72(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 256
    xnumel = 1280
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 64)
    y1 = yindex // 64
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 64*x2 + 81920*y1), xmask & ymask, eviction_policy='evict_last')
    tl.store(out_ptr0 + (x2 + 1280*y3), tmp0, xmask & ymask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/tx/ctxhcinpydbtltvhxalhq4jkhi5sjt3semucbrx6n44ub7xfcpik.py
# Topologically Sorted Source Nodes: [result_282, mul_104, result_283, norm_hidden_states_12], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   mul_104 => mul_252
#   norm_hidden_states_12 => add_244, add_245, mul_253, mul_254, rsqrt_49, sub_49, var_mean_49
#   result_282 => add_242
#   result_283 => add_243
# Graph fragment:
#   %add_242 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_7, %primals_471), kwargs = {})
#   %mul_252 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_624, 1.0), kwargs = {})
#   %add_243 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_242, %mul_252), kwargs = {})
#   %var_mean_49 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_243, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_244 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_160, 1e-05), kwargs = {})
#   %rsqrt_49 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_244,), kwargs = {})
#   %sub_49 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_243, %getitem_161), kwargs = {})
#   %mul_253 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_49, %rsqrt_49), kwargs = {})
#   %mul_254 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_253, %primals_474), kwargs = {})
#   %add_245 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_254, %primals_475), kwargs = {})
#   %div_142 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_49, 1280), kwargs = {})
triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73 = async_compile.triton('triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 256, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp11 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp12 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp25 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp15 = 1.0
        tmp16 = tmp14 * tmp15
        tmp17 = tmp13 + tmp16
        tmp18 = tmp17 - tmp8
        tmp19 = 1280.0
        tmp20 = tmp9 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + 1280*x0), tmp24, rmask & xmask)
        tl.store(out_ptr3 + (r1 + 1280*x0), tmp28, rmask & xmask)
    tmp29 = 1280.0
    tmp30 = tmp9 / tmp29
    tmp31 = 1e-05
    tmp32 = tmp30 + tmp31
    tmp33 = libdevice.rsqrt(tmp32)
    tmp34 = 0.00078125
    tmp35 = tmp33 * tmp34
    tl.store(out_ptr4 + (x0), tmp35, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/mr/cmrmspyeuassvdwgu3s57vpzwzgd3qeudzhwetuagdtzn6pi27yu.py
# Topologically Sorted Source Nodes: [mul_105, result_286], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_105 => mul_255
#   result_286 => add_246
# Graph fragment:
#   %mul_255 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_630, 1.0), kwargs = {})
#   %add_246 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_626, %mul_255), kwargs = {})
triton_poi_fused_add_mul_74 = async_compile.triton('triton_poi_fused_add_mul_74', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_74', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_74(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None)
    tmp1 = tl.load(in_ptr0 + (x0), None)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/qr/cqravj4khfpddgwxnl7kwstyannzy6rln3zm5oswe5jeb4plf5jf.py
# Topologically Sorted Source Nodes: [result_282, mul_104, result_283, mul_108, result_295, hidden_states_174, hidden_states_175, norm_hidden_states_13], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_174 => div_25
#   hidden_states_175 => add_250
#   mul_104 => mul_252
#   mul_108 => mul_258
#   norm_hidden_states_13 => add_251, add_252, mul_259, mul_260, rsqrt_50, sub_50, var_mean_50
#   result_282 => add_242
#   result_283 => add_243
#   result_295 => add_249
# Graph fragment:
#   %add_242 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_7, %primals_471), kwargs = {})
#   %mul_252 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_624, 1.0), kwargs = {})
#   %add_243 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_242, %mul_252), kwargs = {})
#   %mul_258 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_664, 1.0), kwargs = {})
#   %add_249 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_660, %mul_258), kwargs = {})
#   %div_25 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_249, 1.0), kwargs = {})
#   %add_250 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_25, %add_243), kwargs = {})
#   %var_mean_50 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_250, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_251 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_166, 1e-05), kwargs = {})
#   %rsqrt_50 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_251,), kwargs = {})
#   %sub_50 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_250, %getitem_167), kwargs = {})
#   %mul_259 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_50, %rsqrt_50), kwargs = {})
#   %mul_260 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_259, %primals_489), kwargs = {})
#   %add_252 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_260, %primals_490), kwargs = {})
#   %div_140 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_50, 1280), kwargs = {})
triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75 = async_compile.triton('triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 256, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 9, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp9 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr4 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tmp6 * tmp4
        tmp10 = tmp8 + tmp9
        tmp12 = tmp11 * tmp4
        tmp13 = tmp10 + tmp12
        tmp14 = tmp7 + tmp13
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
            tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
        )
        tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
        tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
        tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tl.store(in_out_ptr0 + (r1 + 1280*x0), tmp14, rmask & xmask)
    tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
        tmp16_mean, tmp16_m2, tmp16_weight, 1
    )
    tmp16 = tmp16_tmp[:, None]
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp19 = tl.load(in_out_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp27 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.load(in_ptr6 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp20 = tmp19 - tmp16
        tmp21 = 1280.0
        tmp22 = tmp17 / tmp21
        tmp23 = 1e-05
        tmp24 = tmp22 + tmp23
        tmp25 = libdevice.rsqrt(tmp24)
        tmp26 = tmp20 * tmp25
        tmp28 = tmp26 * tmp27
        tmp30 = tmp28 + tmp29
        tl.store(out_ptr2 + (r1 + 1280*x0), tmp26, rmask & xmask)
        tl.store(out_ptr3 + (r1 + 1280*x0), tmp30, rmask & xmask)
    tmp31 = 1280.0
    tmp32 = tmp17 / tmp31
    tmp33 = 1e-05
    tmp34 = tmp32 + tmp33
    tmp35 = libdevice.rsqrt(tmp34)
    tmp36 = 0.00078125
    tmp37 = tmp35 * tmp36
    tl.store(out_ptr4 + (x0), tmp37, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/u3/cu3cf5zvto5wl6avhib3j3o4bf4rclmvs3uffvmpjjjngmwbcxmx.py
# Topologically Sorted Source Nodes: [mul_110, result_301], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_110 => mul_262
#   result_301 => add_254
# Graph fragment:
#   %mul_262 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_681, 1.0), kwargs = {})
#   %add_254 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_677, %mul_262), kwargs = {})
triton_poi_fused_add_mul_76 = async_compile.triton('triton_poi_fused_add_mul_76', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_76', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_76(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 394240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
    tmp1 = tl.load(in_ptr0 + (x0), xmask)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/tw/ctwp5fgwdpjnqf4zrxjlzsocyappchy46iarxtchkhlmk54znaki.py
# Topologically Sorted Source Nodes: [mul_112, result_307, hidden_states_180, hidden_states_181, norm_hidden_states_14], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_180 => div_26
#   hidden_states_181 => add_257
#   mul_112 => mul_264
#   norm_hidden_states_14 => add_258, add_259, mul_265, mul_266, rsqrt_51, sub_51, var_mean_51
#   result_307 => add_256
# Graph fragment:
#   %mul_264 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_707, 1.0), kwargs = {})
#   %add_256 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_703, %mul_264), kwargs = {})
#   %div_26 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_256, 1.0), kwargs = {})
#   %add_257 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_26, %add_250), kwargs = {})
#   %var_mean_51 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_257, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_258 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_172, 1e-05), kwargs = {})
#   %rsqrt_51 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_258,), kwargs = {})
#   %sub_51 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_257, %getitem_173), kwargs = {})
#   %mul_265 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_51, %rsqrt_51), kwargs = {})
#   %mul_266 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_265, %primals_504), kwargs = {})
#   %add_259 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_266, %primals_505), kwargs = {})
#   %div_138 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_51, 1280), kwargs = {})
triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77 = async_compile.triton('triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 256, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 10, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp11_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tmp6 * tmp4
        tmp9 = tmp7 + tmp8
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp11_mean_next, tmp11_m2_next, tmp11_weight_next = triton_helpers.welford_reduce(
            tmp10, tmp11_mean, tmp11_m2, tmp11_weight, roffset == 0
        )
        tmp11_mean = tl.where(rmask & xmask, tmp11_mean_next, tmp11_mean)
        tmp11_m2 = tl.where(rmask & xmask, tmp11_m2_next, tmp11_m2)
        tmp11_weight = tl.where(rmask & xmask, tmp11_weight_next, tmp11_weight)
    tmp11_tmp, tmp12_tmp, tmp13_tmp = triton_helpers.welford(
        tmp11_mean, tmp11_m2, tmp11_weight, 1
    )
    tmp11 = tmp11_tmp[:, None]
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp15 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp22 = tl.load(in_ptr3 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp31 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp16 = tmp14 + tmp15
        tmp18 = 1.0
        tmp19 = tmp17 * tmp18
        tmp20 = tmp16 + tmp19
        tmp21 = tmp20 * tmp18
        tmp23 = tmp21 + tmp22
        tmp24 = tmp23 - tmp11
        tmp25 = 1280.0
        tmp26 = tmp12 / tmp25
        tmp27 = 1e-05
        tmp28 = tmp26 + tmp27
        tmp29 = libdevice.rsqrt(tmp28)
        tmp30 = tmp24 * tmp29
        tmp32 = tmp30 * tmp31
        tmp34 = tmp32 + tmp33
        tl.store(out_ptr2 + (r1 + 1280*x0), tmp30, rmask & xmask)
        tl.store(out_ptr3 + (r1 + 1280*x0), tmp34, rmask & xmask)
    tmp35 = 1280.0
    tmp36 = tmp12 / tmp35
    tmp37 = 1e-05
    tmp38 = tmp36 + tmp37
    tmp39 = libdevice.rsqrt(tmp38)
    tmp40 = 0.00078125
    tmp41 = tmp39 * tmp40
    tl.store(out_ptr4 + (x0), tmp41, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/32/c32a2edrydzxt2yzy2fqolfuew2ewtq2vy4pmbess5jmydb33oja.py
# Topologically Sorted Source Nodes: [mul_113, result_310], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_113 => mul_267
#   result_310 => add_260
# Graph fragment:
#   %mul_267 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_716, 1.0), kwargs = {})
#   %add_260 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_712, %mul_267), kwargs = {})
triton_poi_fused_add_mul_78 = async_compile.triton('triton_poi_fused_add_mul_78', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 4194304}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_78', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_78(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2621440
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 10240)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x2), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/do/cdo4ascnu3iac3mokvv5y2jfjsexu4324cjz7z4scx7tygwxhoyi.py
# Topologically Sorted Source Nodes: [gelu_4, hidden_states_183], Original ATen: [aten.gelu, aten.mul]
# Source node to ATen node mapping:
#   gelu_4 => add_261, erf_4, mul_268, mul_269, mul_270
#   hidden_states_183 => mul_271
# Graph fragment:
#   %mul_268 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_177, 0.5), kwargs = {})
#   %mul_269 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_177, 0.7071067811865476), kwargs = {})
#   %erf_4 : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_269,), kwargs = {})
#   %add_261 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf_4, 1), kwargs = {})
#   %mul_270 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_268, %add_261), kwargs = {})
#   %mul_271 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_178, %mul_270), kwargs = {})
triton_poi_fused_gelu_mul_79 = async_compile.triton('triton_poi_fused_gelu_mul_79', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_mul_79', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_mul_79(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 5120)
    x1 = xindex // 5120
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 10240*x1), None)
    tmp1 = tl.load(in_ptr0 + (5120 + x0 + 10240*x1), None)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = libdevice.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp0 * tmp9
    tl.store(out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/wr/cwryzpe7ez5iysumpuhw3q5hhlrec3hm7tqiw2hdc27buobalcbd.py
# Topologically Sorted Source Nodes: [mul_112, result_307, hidden_states_180, hidden_states_181, mul_115, result_313, hidden_states_185], Original ATen: [aten.mul, aten.add, aten.div]
# Source node to ATen node mapping:
#   hidden_states_180 => div_26
#   hidden_states_181 => add_257
#   hidden_states_185 => add_263
#   mul_112 => mul_264
#   mul_115 => mul_272
#   result_307 => add_256
#   result_313 => add_262
# Graph fragment:
#   %mul_264 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_707, 1.0), kwargs = {})
#   %add_256 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_703, %mul_264), kwargs = {})
#   %div_26 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_256, 1.0), kwargs = {})
#   %add_257 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_26, %add_250), kwargs = {})
#   %mul_272 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_727, 1.0), kwargs = {})
#   %add_262 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_723, %mul_272), kwargs = {})
#   %add_263 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_262, %add_257), kwargs = {})
triton_poi_fused_add_div_mul_80 = async_compile.triton('triton_poi_fused_add_div_mul_80', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_div_mul_80', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_div_mul_80(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 1280)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp7 = tl.load(in_ptr2 + (x2), None)
    tmp8 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr4 + (x2), None)
    tmp14 = tl.load(in_ptr5 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp9 = tmp7 + tmp8
    tmp11 = tmp10 * tmp4
    tmp12 = tmp9 + tmp11
    tmp13 = tmp12 * tmp4
    tmp15 = tmp13 + tmp14
    tmp16 = tmp6 + tmp15
    tl.store(in_out_ptr0 + (x2), tmp16, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/wm/cwm3hwxs5lbjfhqp2o7lu76m6udsjixtqvhjebf7hcy26m24whbr.py
# Topologically Sorted Source Nodes: [hidden_states_186, output_4], Original ATen: [aten.clone, aten.add]
# Source node to ATen node mapping:
#   hidden_states_186 => clone_45
#   output_4 => add_265
# Graph fragment:
#   %clone_45 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_294,), kwargs = {memory_format: torch.contiguous_format})
#   %add_265 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone_45, %div_24), kwargs = {})
triton_poi_fused_add_clone_81 = async_compile.triton('triton_poi_fused_add_clone_81', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 8192, 'x': 64}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clone_81', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clone_81(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 5120
    xnumel = 64
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 1280)
    y1 = yindex // 1280
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 1280*x2 + 81920*y1), xmask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (y0 + 1280*x2 + 81920*y1), xmask, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr3 + (x2 + 64*y3), xmask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp8 = tmp6 + tmp7
    tl.store(out_ptr0 + (x2 + 64*y3), tmp8, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/oz/coztwjmg5u6l4roanmcbpunghtnyjppblhstjsc35rxoi32mwl26.py
# Topologically Sorted Source Nodes: [hidden_states_187], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_187 => add_266, rsqrt_52, var_mean_52
# Graph fragment:
#   %var_mean_52 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_743, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_266 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_180, 1e-05), kwargs = {})
#   %rsqrt_52 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_266,), kwargs = {})
triton_red_fused_native_group_norm_82 = async_compile.triton('triton_red_fused_native_group_norm_82', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 4096},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_group_norm_82', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_native_group_norm_82(in_out_ptr0, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2560
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 2560*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
            tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
        )
        tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
        tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
        tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
    tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
        tmp2_mean, tmp2_m2, tmp2_weight, 1
    )
    tmp2 = tmp2_tmp[:, None]
    tmp3 = tmp3_tmp[:, None]
    tmp4 = tmp4_tmp[:, None]
    tl.store(out_ptr0 + (x0), tmp2, xmask)
    tmp5 = 2560.0
    tmp6 = tmp3 / tmp5
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = libdevice.rsqrt(tmp8)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/4g/c4gh2ejrmbqwle2euts422bw3fojmqwc6e6srmdujvuwcw3mg4z2.py
# Topologically Sorted Source Nodes: [result_321, mul_118, result_322, add_43, output_tensor_15, hidden_states_193], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_43 => add_273
#   hidden_states_193 => add_274, rsqrt_54, var_mean_54
#   mul_118 => mul_282
#   output_tensor_15 => div_27
#   result_321 => convolution_130
#   result_322 => add_272
# Graph fragment:
#   %convolution_130 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_281, %primals_528, %primals_529, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_282 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_132, 1.0), kwargs = {})
#   %add_272 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_130, %mul_282), kwargs = {})
#   %add_273 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_265, %add_272), kwargs = {})
#   %div_27 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_273, 1.0), kwargs = {})
#   %var_mean_54 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_747, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_274 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_184, 1e-06), kwargs = {})
#   %rsqrt_54 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_274,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_83 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_83', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 4096},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_83', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_83(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2560
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp11_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 64
        tmp0 = tl.load(in_ptr0 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_out_ptr0 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tl.load(in_ptr1 + (r3 + 40*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp4 = tl.load(in_ptr2 + (r5 + 2560*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tmp1 + tmp2
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp7 = tmp3 + tmp6
        tmp8 = tmp0 + tmp7
        tmp9 = tmp8 * tmp5
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp11_mean_next, tmp11_m2_next, tmp11_weight_next = triton_helpers.welford_reduce(
            tmp10, tmp11_mean, tmp11_m2, tmp11_weight, roffset == 0
        )
        tmp11_mean = tl.where(rmask & xmask, tmp11_mean_next, tmp11_mean)
        tmp11_m2 = tl.where(rmask & xmask, tmp11_m2_next, tmp11_m2)
        tmp11_weight = tl.where(rmask & xmask, tmp11_weight_next, tmp11_weight)
        tl.store(in_out_ptr0 + (r5 + 2560*x4), tmp9, rmask & xmask)
    tmp11_tmp, tmp12_tmp, tmp13_tmp = triton_helpers.welford(
        tmp11_mean, tmp11_m2, tmp11_weight, 1
    )
    tmp11 = tmp11_tmp[:, None]
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp11, xmask)
    tl.store(out_ptr1 + (x4), tmp12, xmask)
    tmp14 = 2560.0
    tmp15 = tmp12 / tmp14
    tmp16 = 1e-06
    tmp17 = tmp15 + tmp16
    tmp18 = libdevice.rsqrt(tmp17)
    tl.store(out_ptr2 + (x4), tmp18, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/3j/c3j4xz7436ixsxvnulozwkgfsv7dj3aleck6woaijjyq5qfibowl.py
# Topologically Sorted Source Nodes: [result_360, mul_132, result_361, hidden_states_212], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_212 => add_301, rsqrt_58, var_mean_58
#   mul_132 => mul_307
#   result_360 => convolution_133
#   result_361 => add_300
# Graph fragment:
#   %convolution_133 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%add_299, %primals_582, %primals_583, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_307 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_135, 1.0), kwargs = {})
#   %add_300 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_133, %mul_307), kwargs = {})
#   %var_mean_58 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_875, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_301 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_206, 1e-05), kwargs = {})
#   %rsqrt_58 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_301,), kwargs = {})
triton_per_fused_add_convolution_mul_native_group_norm_84 = async_compile.triton('triton_per_fused_add_convolution_mul_native_group_norm_84', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_convolution_mul_native_group_norm_84', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 3, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_convolution_mul_native_group_norm_84(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r5 = rindex
    x4 = xindex
    r3 = rindex // 16
    x0 = (xindex % 32)
    tmp0 = tl.load(in_out_ptr0 + (r5 + 640*x4), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r3 + 40*x0), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r5 + 640*x4), rmask, other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
    tmp9 = tl.where(rmask, tmp7, 0)
    tmp10 = tl.broadcast_to(tmp7, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
    tmp14 = tl.full([1], 640, tl.int32)
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp13 / tmp15
    tmp17 = tmp7 - tmp16
    tmp18 = tmp17 * tmp17
    tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
    tmp21 = tl.where(rmask, tmp19, 0)
    tmp22 = triton_helpers.promote_to_tensor(tl.sum(tmp21, 0))
    tmp23 = 640.0
    tmp24 = tmp22 / tmp23
    tmp25 = 1e-05
    tmp26 = tmp24 + tmp25
    tmp27 = libdevice.rsqrt(tmp26)
    tl.store(in_out_ptr0 + (r5 + 640*x4), tmp6, rmask)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp27, None)
    tl.store(out_ptr0 + (x4), tmp16, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/5v/c5vzlyeyeylccntsuebgbahjf7eke7yoo2wy5neraqnacbcxwnna.py
# Topologically Sorted Source Nodes: [hidden_states_212, hidden_states_213], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_212 => add_302, mul_309
#   hidden_states_213 => mul_310, sigmoid_40
# Graph fragment:
#   %mul_309 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_876, %unsqueeze_257), kwargs = {})
#   %add_302 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_309, %unsqueeze_254), kwargs = {})
#   %sigmoid_40 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_302,), kwargs = {})
#   %mul_310 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_302, %sigmoid_40), kwargs = {})
triton_poi_fused_native_group_norm_silu_85 = async_compile.triton('triton_poi_fused_native_group_norm_silu_85', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_85', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_85(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 81920
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 16
    x1 = ((xindex // 16) % 1280)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 40), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 40), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/wm/cwmyp3adjsdsnczqsbbxogow2n5yhcof3uizq7teskwal3vi3sst.py
# Topologically Sorted Source Nodes: [result_363, mul_133, result_364, hidden_states_214, hidden_states_215], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_214 => add_304
#   hidden_states_215 => add_305, rsqrt_59, var_mean_59
#   mul_133 => mul_311
#   result_363 => convolution_136
#   result_364 => add_303
# Graph fragment:
#   %convolution_136 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_310, %primals_588, %primals_589, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_311 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_138, 1.0), kwargs = {})
#   %add_303 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_136, %mul_311), kwargs = {})
#   %add_304 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_303, %unsqueeze_259), kwargs = {})
#   %var_mean_59 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_877, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_305 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_208, 1e-05), kwargs = {})
#   %rsqrt_59 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_305,), kwargs = {})
triton_per_fused_add_convolution_mul_native_group_norm_86 = async_compile.triton('triton_per_fused_add_convolution_mul_native_group_norm_86', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_convolution_mul_native_group_norm_86', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_convolution_mul_native_group_norm_86(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r5 = rindex
    x4 = xindex
    r3 = rindex // 16
    x0 = (xindex % 32)
    tmp0 = tl.load(in_out_ptr0 + (r5 + 640*x4), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r3 + 40*x0), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r5 + 640*x4), rmask, other=0.0)
    tmp7 = tl.load(in_ptr2 + (r3 + 40*x4), rmask, eviction_policy='evict_last', other=0.0)
    tmp8 = tl.load(in_ptr3 + (r3 + 40*x0), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp9 = tmp7 + tmp8
    tmp10 = tmp6 + tmp9
    tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
    tmp13 = tl.where(rmask, tmp11, 0)
    tmp14 = tl.broadcast_to(tmp11, [RBLOCK])
    tmp16 = tl.where(rmask, tmp14, 0)
    tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp16, 0))
    tmp18 = tl.full([1], 640, tl.int32)
    tmp19 = tmp18.to(tl.float32)
    tmp20 = tmp17 / tmp19
    tmp21 = tmp11 - tmp20
    tmp22 = tmp21 * tmp21
    tmp23 = tl.broadcast_to(tmp22, [RBLOCK])
    tmp25 = tl.where(rmask, tmp23, 0)
    tmp26 = triton_helpers.promote_to_tensor(tl.sum(tmp25, 0))
    tmp27 = 640.0
    tmp28 = tmp26 / tmp27
    tmp29 = 1e-05
    tmp30 = tmp28 + tmp29
    tmp31 = libdevice.rsqrt(tmp30)
    tl.store(in_out_ptr0 + (r5 + 640*x4), tmp10, rmask)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp31, None)
    tl.store(out_ptr0 + (x4), tmp20, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ae/cae5uitn3c5ffrzyoyihe62orfrvjal436pekgt36mu42gzwnbd3.py
# Topologically Sorted Source Nodes: [result_366, mul_134, result_367, add_49, output_tensor_16, hidden_states_218], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_49 => add_308
#   hidden_states_218 => add_309, rsqrt_60, var_mean_60
#   mul_134 => mul_316
#   output_tensor_16 => div_30
#   result_366 => convolution_139
#   result_367 => add_307
# Graph fragment:
#   %convolution_139 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_315, %primals_596, %primals_597, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_316 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_141, 1.0), kwargs = {})
#   %add_307 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_139, %mul_316), kwargs = {})
#   %add_308 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_300, %add_307), kwargs = {})
#   %div_30 : [num_users=4] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_308, 1.0), kwargs = {})
#   %var_mean_60 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_879, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_309 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_210, 1e-05), kwargs = {})
#   %rsqrt_60 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_309,), kwargs = {})
triton_per_fused_add_convolution_div_mul_native_group_norm_87 = async_compile.triton('triton_per_fused_add_convolution_div_mul_native_group_norm_87', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_convolution_div_mul_native_group_norm_87', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 4, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_convolution_div_mul_native_group_norm_87(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r5 = rindex
    x4 = xindex
    r3 = rindex // 16
    x0 = (xindex % 32)
    tmp0 = tl.load(in_ptr0 + (r5 + 640*x4), rmask, other=0.0)
    tmp1 = tl.load(in_out_ptr0 + (r5 + 640*x4), rmask, other=0.0)
    tmp2 = tl.load(in_ptr1 + (r3 + 40*x0), rmask, eviction_policy='evict_last', other=0.0)
    tmp4 = tl.load(in_ptr2 + (r5 + 640*x4), rmask, other=0.0)
    tmp3 = tmp1 + tmp2
    tmp5 = 1.0
    tmp6 = tmp4 * tmp5
    tmp7 = tmp3 + tmp6
    tmp8 = tmp0 + tmp7
    tmp9 = tmp8 * tmp5
    tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = tl.broadcast_to(tmp10, [RBLOCK])
    tmp15 = tl.where(rmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp17 = tl.full([1], 640, tl.int32)
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp16 / tmp18
    tmp20 = tmp10 - tmp19
    tmp21 = tmp20 * tmp20
    tmp22 = tl.broadcast_to(tmp21, [RBLOCK])
    tmp24 = tl.where(rmask, tmp22, 0)
    tmp25 = triton_helpers.promote_to_tensor(tl.sum(tmp24, 0))
    tmp26 = 640.0
    tmp27 = tmp25 / tmp26
    tmp28 = 1e-05
    tmp29 = tmp27 + tmp28
    tmp30 = libdevice.rsqrt(tmp29)
    tl.store(in_out_ptr0 + (r5 + 640*x4), tmp9, rmask)
    tl.debug_barrier()
    tl.store(in_out_ptr1 + (x4), tmp30, None)
    tl.store(out_ptr0 + (x4), tmp19, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/3l/c3l2q6yvjoyw33mnlhjlnulm433cc65c3bbetpurkubz6dw56npt.py
# Topologically Sorted Source Nodes: [result_378, mul_138, result_379, add_53, output_tensor_18, hidden_states_230], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_53 => add_324
#   hidden_states_230 => add_325, rsqrt_64, var_mean_64
#   mul_138 => mul_334
#   output_tensor_18 => div_32
#   result_378 => convolution_151
#   result_379 => add_323
# Graph fragment:
#   %convolution_151 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_333, %primals_624, %primals_625, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_334 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_153, 1.0), kwargs = {})
#   %add_323 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_151, %mul_334), kwargs = {})
#   %add_324 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_31, %add_323), kwargs = {})
#   %div_32 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_324, 1), kwargs = {})
#   %var_mean_64 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_887, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_325 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_218, 1e-06), kwargs = {})
#   %rsqrt_64 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_325,), kwargs = {})
triton_per_fused_add_convolution_div_mul_native_group_norm_88 = async_compile.triton('triton_per_fused_add_convolution_div_mul_native_group_norm_88', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_convolution_div_mul_native_group_norm_88', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 4, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_add_convolution_div_mul_native_group_norm_88(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r5 = rindex
    x4 = xindex
    r3 = rindex // 16
    x0 = (xindex % 32)
    tmp0 = tl.load(in_ptr0 + (r5 + 640*x4), rmask, other=0.0)
    tmp1 = tl.load(in_out_ptr0 + (r5 + 640*x4), rmask, other=0.0)
    tmp2 = tl.load(in_ptr1 + (r3 + 40*x0), rmask, eviction_policy='evict_last', other=0.0)
    tmp4 = tl.load(in_ptr2 + (r5 + 640*x4), rmask, other=0.0)
    tmp3 = tmp1 + tmp2
    tmp5 = 1.0
    tmp6 = tmp4 * tmp5
    tmp7 = tmp3 + tmp6
    tmp8 = tmp0 + tmp7
    tmp9 = tmp8 * tmp5
    tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp12 = tl.where(rmask, tmp10, 0)
    tmp13 = tl.broadcast_to(tmp10, [RBLOCK])
    tmp15 = tl.where(rmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp17 = tl.full([1], 640, tl.int32)
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp16 / tmp18
    tmp20 = tmp10 - tmp19
    tmp21 = tmp20 * tmp20
    tmp22 = tl.broadcast_to(tmp21, [RBLOCK])
    tmp24 = tl.where(rmask, tmp22, 0)
    tmp25 = triton_helpers.promote_to_tensor(tl.sum(tmp24, 0))
    tmp26 = 640.0
    tmp27 = tmp25 / tmp26
    tmp28 = 1e-06
    tmp29 = tmp27 + tmp28
    tmp30 = libdevice.rsqrt(tmp29)
    tl.store(in_out_ptr0 + (r5 + 640*x4), tmp9, rmask)
    tl.store(out_ptr2 + (x4), tmp30, None)
    tl.store(out_ptr0 + (x4), tmp19, None)
    tl.store(out_ptr1 + (x4), tmp25, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/nn/cnn76gbsvic5ho7gnhrgolh6aaz36rntgnudxafg7b5cutgvmnum.py
# Topologically Sorted Source Nodes: [hidden_states_230], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_230 => add_326, mul_336
# Graph fragment:
#   %mul_336 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_888, %unsqueeze_299), kwargs = {})
#   %add_326 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_336, %unsqueeze_296), kwargs = {})
triton_poi_fused_native_group_norm_89 = async_compile.triton('triton_poi_fused_native_group_norm_89', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_89', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_89(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 81920
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 16
    x1 = ((xindex // 16) % 1280)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 40), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 40), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = 640.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-06
    tmp7 = tmp5 + tmp6
    tmp8 = libdevice.rsqrt(tmp7)
    tmp9 = tmp2 * tmp8
    tmp11 = tmp9 * tmp10
    tmp13 = tmp11 + tmp12
    tl.store(out_ptr0 + (x3), tmp13, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/rc/crcshe4ipa4daiicfvoxenyor7oqtyqwk5ivawsuqizawrkvsqom.py
# Topologically Sorted Source Nodes: [linear_240], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   linear_240 => clone_55
# Graph fragment:
#   %clone_55 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%view_889,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_90 = async_compile.triton('triton_poi_fused_clone_90', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 64, 'x': 2048}, tile_hint=TileHint.SQUARE,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_90', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_90(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 64
    xnumel = 1280
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 16)
    y1 = yindex // 16
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 16*x2 + 20480*y1), xmask & ymask, eviction_policy='evict_last')
    tl.store(out_ptr0 + (x2 + 1280*y3), tmp0, xmask & ymask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/s7/cs7dludqfsr5jg6wozx4qlofjvfgpsyrhqdfeuaggsle7o6qwils.py
# Topologically Sorted Source Nodes: [result_381, mul_139, result_382, norm_hidden_states_18], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   mul_139 => mul_337
#   norm_hidden_states_18 => add_329, add_330, mul_338, mul_339, rsqrt_65, sub_65, var_mean_65
#   result_381 => add_327
#   result_382 => add_328
# Graph fragment:
#   %add_327 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_9, %primals_631), kwargs = {})
#   %mul_337 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_896, 1.0), kwargs = {})
#   %add_328 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_327, %mul_337), kwargs = {})
#   %var_mean_65 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_328, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_329 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_220, 1e-05), kwargs = {})
#   %rsqrt_65 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_329,), kwargs = {})
#   %sub_65 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_328, %getitem_221), kwargs = {})
#   %mul_338 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_65, %rsqrt_65), kwargs = {})
#   %mul_339 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_338, %primals_634), kwargs = {})
#   %add_330 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_339, %primals_635), kwargs = {})
#   %div_128 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_65, 1280), kwargs = {})
triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_91 = async_compile.triton('triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_91', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 64, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_91', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_91(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp8_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp8_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp8_mean_next, tmp8_m2_next, tmp8_weight_next = triton_helpers.welford_reduce(
            tmp7, tmp8_mean, tmp8_m2, tmp8_weight, roffset == 0
        )
        tmp8_mean = tl.where(rmask & xmask, tmp8_mean_next, tmp8_mean)
        tmp8_m2 = tl.where(rmask & xmask, tmp8_m2_next, tmp8_m2)
        tmp8_weight = tl.where(rmask & xmask, tmp8_weight_next, tmp8_weight)
    tmp8_tmp, tmp9_tmp, tmp10_tmp = triton_helpers.welford(
        tmp8_mean, tmp8_m2, tmp8_weight, 1
    )
    tmp8 = tmp8_tmp[:, None]
    tmp9 = tmp9_tmp[:, None]
    tmp10 = tmp10_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp11 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp12 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp25 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp27 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp15 = 1.0
        tmp16 = tmp14 * tmp15
        tmp17 = tmp13 + tmp16
        tmp18 = tmp17 - tmp8
        tmp19 = 1280.0
        tmp20 = tmp9 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + 1280*x0), tmp24, rmask & xmask)
        tl.store(out_ptr3 + (r1 + 1280*x0), tmp28, rmask & xmask)
    tmp29 = 1280.0
    tmp30 = tmp9 / tmp29
    tmp31 = 1e-05
    tmp32 = tmp30 + tmp31
    tmp33 = libdevice.rsqrt(tmp32)
    tmp34 = 0.00078125
    tmp35 = tmp33 * tmp34
    tl.store(out_ptr4 + (x0), tmp35, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/45/c45xjz4qfzbtsj6ta5kecrqexvi3plywm7vwmxn6dzvi3nfxjhxw.py
# Topologically Sorted Source Nodes: [mul_140, result_385], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_140 => mul_340
#   result_385 => add_331
# Graph fragment:
#   %mul_340 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_902, 1.0), kwargs = {})
#   %add_331 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_898, %mul_340), kwargs = {})
triton_poi_fused_add_mul_92 = async_compile.triton('triton_poi_fused_add_mul_92', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_92', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_92(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 81920
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None)
    tmp1 = tl.load(in_ptr0 + (x0), None)
    tmp2 = 1.0
    tmp3 = tmp1 * tmp2
    tmp4 = tmp0 + tmp3
    tl.store(in_out_ptr0 + (x0), tmp4, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/a4/ca4pebv7waeoxsq6mninr3lun5ywmlxgs2gc6dxjybuey7spdwp4.py
# Topologically Sorted Source Nodes: [result_381, mul_139, result_382, mul_143, result_394, hidden_states_236, hidden_states_237, norm_hidden_states_19], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_236 => div_33
#   hidden_states_237 => add_335
#   mul_139 => mul_337
#   mul_143 => mul_343
#   norm_hidden_states_19 => add_336, add_337, mul_344, mul_345, rsqrt_66, sub_66, var_mean_66
#   result_381 => add_327
#   result_382 => add_328
#   result_394 => add_334
# Graph fragment:
#   %add_327 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%bmm_9, %primals_631), kwargs = {})
#   %mul_337 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_896, 1.0), kwargs = {})
#   %add_328 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_327, %mul_337), kwargs = {})
#   %mul_343 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_936, 1.0), kwargs = {})
#   %add_334 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_932, %mul_343), kwargs = {})
#   %div_33 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_334, 1.0), kwargs = {})
#   %add_335 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_33, %add_328), kwargs = {})
#   %var_mean_66 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_335, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_336 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_226, 1e-05), kwargs = {})
#   %rsqrt_66 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_336,), kwargs = {})
#   %sub_66 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_335, %getitem_227), kwargs = {})
#   %mul_344 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_66, %rsqrt_66), kwargs = {})
#   %mul_345 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_344, %primals_649), kwargs = {})
#   %add_337 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_345, %primals_650), kwargs = {})
#   %div_126 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_66, 1280), kwargs = {})
triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_93 = async_compile.triton('triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_93', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 64, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_93', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 9, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_93(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp9 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp11 = tl.load(in_ptr4 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tmp6 * tmp4
        tmp10 = tmp8 + tmp9
        tmp12 = tmp11 * tmp4
        tmp13 = tmp10 + tmp12
        tmp14 = tmp7 + tmp13
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
            tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
        )
        tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
        tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
        tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tl.store(in_out_ptr0 + (r1 + 1280*x0), tmp14, rmask & xmask)
    tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
        tmp16_mean, tmp16_m2, tmp16_weight, 1
    )
    tmp16 = tmp16_tmp[:, None]
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp19 = tl.load(in_out_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp27 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tl.load(in_ptr6 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp20 = tmp19 - tmp16
        tmp21 = 1280.0
        tmp22 = tmp17 / tmp21
        tmp23 = 1e-05
        tmp24 = tmp22 + tmp23
        tmp25 = libdevice.rsqrt(tmp24)
        tmp26 = tmp20 * tmp25
        tmp28 = tmp26 * tmp27
        tmp30 = tmp28 + tmp29
        tl.store(out_ptr2 + (r1 + 1280*x0), tmp26, rmask & xmask)
        tl.store(out_ptr3 + (r1 + 1280*x0), tmp30, rmask & xmask)
    tmp31 = 1280.0
    tmp32 = tmp17 / tmp31
    tmp33 = 1e-05
    tmp34 = tmp32 + tmp33
    tmp35 = libdevice.rsqrt(tmp34)
    tmp36 = 0.00078125
    tmp37 = tmp35 * tmp36
    tl.store(out_ptr4 + (x0), tmp37, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/n3/cn3lr4os6d3at2pqx52k557w75pcx54f5awaqbzkc36lvwibncht.py
# Topologically Sorted Source Nodes: [mul_147, result_406, hidden_states_242, hidden_states_243, norm_hidden_states_20], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
# Source node to ATen node mapping:
#   hidden_states_242 => div_34
#   hidden_states_243 => add_342
#   mul_147 => mul_349
#   norm_hidden_states_20 => add_343, add_344, mul_350, mul_351, rsqrt_67, sub_67, var_mean_67
#   result_406 => add_341
# Graph fragment:
#   %mul_349 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_979, 1.0), kwargs = {})
#   %add_341 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_975, %mul_349), kwargs = {})
#   %div_34 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_341, 1.0), kwargs = {})
#   %add_342 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_34, %add_335), kwargs = {})
#   %var_mean_67 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_342, [2]), kwargs = {correction: 0, keepdim: True})
#   %add_343 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_232, 1e-05), kwargs = {})
#   %rsqrt_67 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_343,), kwargs = {})
#   %sub_67 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_342, %getitem_233), kwargs = {})
#   %mul_350 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_67, %rsqrt_67), kwargs = {})
#   %mul_351 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_350, %primals_664), kwargs = {})
#   %add_344 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_351, %primals_665), kwargs = {})
#   %div_124 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%rsqrt_67, 1280), kwargs = {})
triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_94 = async_compile.triton('triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_94', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 64, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_94', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 10, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_94(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp11_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp11_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp7 = tmp6 * tmp4
        tmp9 = tmp7 + tmp8
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp11_mean_next, tmp11_m2_next, tmp11_weight_next = triton_helpers.welford_reduce(
            tmp10, tmp11_mean, tmp11_m2, tmp11_weight, roffset == 0
        )
        tmp11_mean = tl.where(rmask & xmask, tmp11_mean_next, tmp11_mean)
        tmp11_m2 = tl.where(rmask & xmask, tmp11_m2_next, tmp11_m2)
        tmp11_weight = tl.where(rmask & xmask, tmp11_weight_next, tmp11_weight)
    tmp11_tmp, tmp12_tmp, tmp13_tmp = triton_helpers.welford(
        tmp11_mean, tmp11_m2, tmp11_weight, 1
    )
    tmp11 = tmp11_tmp[:, None]
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp15 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp17 = tl.load(in_ptr2 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp22 = tl.load(in_ptr3 + (r1 + 1280*x0), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp31 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp33 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp16 = tmp14 + tmp15
        tmp18 = 1.0
        tmp19 = tmp17 * tmp18
        tmp20 = tmp16 + tmp19
        tmp21 = tmp20 * tmp18
        tmp23 = tmp21 + tmp22
        tmp24 = tmp23 - tmp11
        tmp25 = 1280.0
        tmp26 = tmp12 / tmp25
        tmp27 = 1e-05
        tmp28 = tmp26 + tmp27
        tmp29 = libdevice.rsqrt(tmp28)
        tmp30 = tmp24 * tmp29
        tmp32 = tmp30 * tmp31
        tmp34 = tmp32 + tmp33
        tl.store(out_ptr2 + (r1 + 1280*x0), tmp30, rmask & xmask)
        tl.store(out_ptr3 + (r1 + 1280*x0), tmp34, rmask & xmask)
    tmp35 = 1280.0
    tmp36 = tmp12 / tmp35
    tmp37 = 1e-05
    tmp38 = tmp36 + tmp37
    tmp39 = libdevice.rsqrt(tmp38)
    tmp40 = 0.00078125
    tmp41 = tmp39 * tmp40
    tl.store(out_ptr4 + (x0), tmp41, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/t6/ct6s5lyxpnooyoo3tn2trymsgp7hxij6vljhareknpxnwwty76gk.py
# Topologically Sorted Source Nodes: [mul_148, result_409], Original ATen: [aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_148 => mul_352
#   result_409 => add_345
# Graph fragment:
#   %mul_352 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_988, 1.0), kwargs = {})
#   %add_345 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_984, %mul_352), kwargs = {})
triton_poi_fused_add_mul_95 = async_compile.triton('triton_poi_fused_add_mul_95', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_95', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_95(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 10240)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x2), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/a5/ca5duk4mbdva3rvbrwozz5h5bii54doufequkl7p33opzv4lof4t.py
# Topologically Sorted Source Nodes: [gelu_6, hidden_states_245], Original ATen: [aten.gelu, aten.mul]
# Source node to ATen node mapping:
#   gelu_6 => add_346, erf_6, mul_353, mul_354, mul_355
#   hidden_states_245 => mul_356
# Graph fragment:
#   %mul_353 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_237, 0.5), kwargs = {})
#   %mul_354 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_237, 0.7071067811865476), kwargs = {})
#   %erf_6 : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_354,), kwargs = {})
#   %add_346 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf_6, 1), kwargs = {})
#   %mul_355 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_353, %add_346), kwargs = {})
#   %mul_356 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%getitem_238, %mul_355), kwargs = {})
triton_poi_fused_gelu_mul_96 = async_compile.triton('triton_poi_fused_gelu_mul_96', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_mul_96', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_mul_96(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 5120)
    x1 = xindex // 5120
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 10240*x1), None)
    tmp1 = tl.load(in_ptr0 + (5120 + x0 + 10240*x1), None)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = libdevice.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp0 * tmp9
    tl.store(out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/dk/cdkvgmctkje4mnbhhz2wnpq55ygrmareuutesrgo34dkrmc7wof6.py
# Topologically Sorted Source Nodes: [mul_147, result_406, hidden_states_242, hidden_states_243, mul_150, result_412, hidden_states_247], Original ATen: [aten.mul, aten.add, aten.div]
# Source node to ATen node mapping:
#   hidden_states_242 => div_34
#   hidden_states_243 => add_342
#   hidden_states_247 => add_348
#   mul_147 => mul_349
#   mul_150 => mul_357
#   result_406 => add_341
#   result_412 => add_347
# Graph fragment:
#   %mul_349 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_979, 1.0), kwargs = {})
#   %add_341 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_975, %mul_349), kwargs = {})
#   %div_34 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_341, 1.0), kwargs = {})
#   %add_342 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%div_34, %add_335), kwargs = {})
#   %mul_357 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_999, 1.0), kwargs = {})
#   %add_347 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_995, %mul_357), kwargs = {})
#   %add_348 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_347, %add_342), kwargs = {})
triton_poi_fused_add_div_mul_97 = async_compile.triton('triton_poi_fused_add_div_mul_97', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_div_mul_97', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_div_mul_97(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, XBLOCK : tl.constexpr):
    xnumel = 81920
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 1280)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x2), None)
    tmp7 = tl.load(in_ptr2 + (x2), None)
    tmp8 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr4 + (x2), None)
    tmp14 = tl.load(in_ptr5 + (x2), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp9 = tmp7 + tmp8
    tmp11 = tmp10 * tmp4
    tmp12 = tmp9 + tmp11
    tmp13 = tmp12 * tmp4
    tmp15 = tmp13 + tmp14
    tmp16 = tmp6 + tmp15
    tl.store(in_out_ptr0 + (x2), tmp16, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/53/c53ddssfjnj2kcqcinll75le25m7tyaiodtesezu4gbkr6wrlwb3.py
# Topologically Sorted Source Nodes: [hidden_states_248, output_6], Original ATen: [aten.clone, aten.add]
# Source node to ATen node mapping:
#   hidden_states_248 => clone_59
#   output_6 => add_350
# Graph fragment:
#   %clone_59 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_404,), kwargs = {memory_format: torch.contiguous_format})
#   %add_350 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone_59, %div_32), kwargs = {})
triton_poi_fused_add_clone_98 = async_compile.triton('triton_poi_fused_add_clone_98', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 8192, 'x': 16}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_clone_98', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_clone_98(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 5120
    xnumel = 16
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 1280)
    y1 = yindex // 1280
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 1280*x2 + 20480*y1), xmask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (y0 + 1280*x2 + 20480*y1), xmask, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr3 + (x2 + 16*y3), xmask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tmp8 = tmp6 + tmp7
    tl.store(out_ptr0 + (x2 + 16*y3), tmp8, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/lg/clgtbb3e4kg4jrr5pbgft7qjpfuylog6kovrv3bezmnevkfsk2cq.py
# Topologically Sorted Source Nodes: [hidden_states_249], Original ATen: [aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_249 => add_351, rsqrt_68, var_mean_68
# Graph fragment:
#   %var_mean_68 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1015, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_351 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_240, 1e-05), kwargs = {})
#   %rsqrt_68 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_351,), kwargs = {})
triton_per_fused_native_group_norm_99 = async_compile.triton('triton_per_fused_native_group_norm_99', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_group_norm_99', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 1, 'num_reduction': 4, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_per_fused_native_group_norm_99(in_out_ptr0, in_ptr0, out_ptr0, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 640
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 640*x0), rmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
    tmp3 = tl.where(rmask, tmp1, 0)
    tmp4 = tl.broadcast_to(tmp1, [RBLOCK])
    tmp6 = tl.where(rmask, tmp4, 0)
    tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
    tmp8 = tl.full([1], 640, tl.int32)
    tmp9 = tmp8.to(tl.float32)
    tmp10 = tmp7 / tmp9
    tmp11 = tmp1 - tmp10
    tmp12 = tmp11 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp17 = 640.0
    tmp18 = tmp16 / tmp17
    tmp19 = 1e-05
    tmp20 = tmp18 + tmp19
    tmp21 = libdevice.rsqrt(tmp20)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, None)
    tl.store(out_ptr0 + (x0), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/vd/cvdxqjyhibhp22jsdas6fhqwusqlxrof2swoit4rn2o4dqpxs5qn.py
# Topologically Sorted Source Nodes: [hidden_states_255, hidden_states_256], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_255 => cat_2
#   hidden_states_256 => add_359, rsqrt_70, var_mean_70
# Graph fragment:
#   %cat_2 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%div_35, %div_31], 1), kwargs = {})
#   %var_mean_70 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1019, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_359 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_244, 1e-05), kwargs = {})
#   %rsqrt_70 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_359,), kwargs = {})
triton_red_fused_cat_native_group_norm_100 = async_compile.triton('triton_red_fused_cat_native_group_norm_100', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_100', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_100(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp23_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp23_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp23_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 16
        r2 = (rindex % 16)
        r5 = rindex
        tmp0 = r3 + 80*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 1280, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r3 + 80*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.load(in_ptr3 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp10 = 1.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp8 + tmp11
        tmp13 = tmp5 + tmp12
        tmp14 = tmp13 * tmp10
        tmp15 = tl.full(tmp14.shape, 0.0, tmp14.dtype)
        tmp16 = tl.where(tmp4, tmp14, tmp15)
        tmp17 = tmp0 >= tmp3
        tmp18 = tl.full([1, 1], 2560, tl.int64)
        tmp19 = tmp0 < tmp18
        tmp20 = tl.load(in_ptr4 + (r2 + 16*((-1280) + r3 + 80*x0) + 20480*x1), rmask & tmp17 & xmask, eviction_policy='evict_first', other=0.0)
        tmp21 = tl.where(tmp4, tmp16, tmp20)
        tmp22 = tl.broadcast_to(tmp21, [XBLOCK, RBLOCK])
        tmp23_mean_next, tmp23_m2_next, tmp23_weight_next = triton_helpers.welford_reduce(
            tmp22, tmp23_mean, tmp23_m2, tmp23_weight, roffset == 0
        )
        tmp23_mean = tl.where(rmask & xmask, tmp23_mean_next, tmp23_mean)
        tmp23_m2 = tl.where(rmask & xmask, tmp23_m2_next, tmp23_m2)
        tmp23_weight = tl.where(rmask & xmask, tmp23_weight_next, tmp23_weight)
        tl.store(out_ptr0 + (r5 + 1280*x4), tmp21, rmask & xmask)
    tmp23_tmp, tmp24_tmp, tmp25_tmp = triton_helpers.welford(
        tmp23_mean, tmp23_m2, tmp23_weight, 1
    )
    tmp23 = tmp23_tmp[:, None]
    tmp24 = tmp24_tmp[:, None]
    tmp25 = tmp25_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp23, xmask)
    tmp26 = 1280.0
    tmp27 = tmp24 / tmp26
    tmp28 = 1e-05
    tmp29 = tmp27 + tmp28
    tmp30 = libdevice.rsqrt(tmp29)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp30, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/rr/crrkuizt7xy5md6rlh5ezgnxkdhiekpyl36siaktsjfhrz3wz2xa.py
# Topologically Sorted Source Nodes: [hidden_states_256, hidden_states_257], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_256 => add_360, mul_369
#   hidden_states_257 => mul_370, sigmoid_52
# Graph fragment:
#   %mul_369 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1020, %unsqueeze_319), kwargs = {})
#   %add_360 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_369, %unsqueeze_316), kwargs = {})
#   %sigmoid_52 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_360,), kwargs = {})
#   %mul_370 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_360, %sigmoid_52), kwargs = {})
triton_poi_fused_native_group_norm_silu_101 = async_compile.triton('triton_poi_fused_native_group_norm_silu_101', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 262144}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_101', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_101(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 163840
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 16
    x1 = ((xindex // 16) % 2560)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 80), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 80), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/zv/czvrlcpkyxcmdufg4qsbcqdkqgrq24nftbva55detw527nduyvkl.py
# Topologically Sorted Source Nodes: [hidden_states_262, hidden_states_263], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_262 => cat_3
#   hidden_states_263 => add_368, rsqrt_72, var_mean_72
# Graph fragment:
#   %cat_3 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%div_36, %div_30], 1), kwargs = {})
#   %var_mean_72 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1023, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_368 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_248, 1e-05), kwargs = {})
#   %rsqrt_72 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_368,), kwargs = {})
triton_red_fused_cat_native_group_norm_102 = async_compile.triton('triton_red_fused_cat_native_group_norm_102', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 2048},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_102', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_102(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 1280
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp28_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp28_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp28_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 16
        r2 = (rindex % 16)
        r5 = rindex
        tmp0 = r3 + 80*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 1280, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 80*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.load(in_ptr3 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp13 = tl.load(in_ptr4 + (r3 + 80*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = tmp12 + tmp13
        tmp15 = tl.load(in_ptr5 + (r2 + 16*(r3 + 80*x0) + 20480*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp16 = tmp15 * tmp9
        tmp17 = tmp14 + tmp16
        tmp18 = tmp11 + tmp17
        tmp19 = tmp18 * tmp9
        tmp20 = tl.full(tmp19.shape, 0.0, tmp19.dtype)
        tmp21 = tl.where(tmp4, tmp19, tmp20)
        tmp22 = tmp0 >= tmp3
        tmp23 = tl.full([1, 1], 2560, tl.int64)
        tmp24 = tmp0 < tmp23
        tmp25 = tl.load(in_ptr6 + (r2 + 16*((-1280) + r3 + 80*x0) + 20480*x1), rmask & tmp22 & xmask, eviction_policy='evict_first', other=0.0)
        tmp26 = tl.where(tmp4, tmp21, tmp25)
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp28_mean_next, tmp28_m2_next, tmp28_weight_next = triton_helpers.welford_reduce(
            tmp27, tmp28_mean, tmp28_m2, tmp28_weight, roffset == 0
        )
        tmp28_mean = tl.where(rmask & xmask, tmp28_mean_next, tmp28_mean)
        tmp28_m2 = tl.where(rmask & xmask, tmp28_m2_next, tmp28_m2)
        tmp28_weight = tl.where(rmask & xmask, tmp28_weight_next, tmp28_weight)
        tl.store(out_ptr0 + (r5 + 1280*x4), tmp26, rmask & xmask)
    tmp28_tmp, tmp29_tmp, tmp30_tmp = triton_helpers.welford(
        tmp28_mean, tmp28_m2, tmp28_weight, 1
    )
    tmp28 = tmp28_tmp[:, None]
    tmp29 = tmp29_tmp[:, None]
    tmp30 = tmp30_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp28, xmask)
    tmp31 = 1280.0
    tmp32 = tmp29 / tmp31
    tmp33 = 1e-05
    tmp34 = tmp32 + tmp33
    tmp35 = libdevice.rsqrt(tmp34)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp35, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/4i/c4i5q66ct7sn7oka3uclho5ycovjmxrnvlzuq2pueuwwlaqb4u4j.py
# Topologically Sorted Source Nodes: [hidden_states_276], Original ATen: [aten.arange, aten.add, aten.mul, aten._to_copy]
# Source node to ATen node mapping:
#   hidden_states_276 => add_386, add_387, convert_element_type_2, convert_element_type_3, iota_1, mul_398, mul_399
# Graph fragment:
#   %iota_1 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (8,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
#   %mul_398 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%iota_1, 1), kwargs = {})
#   %add_386 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_398, 0), kwargs = {})
#   %convert_element_type_2 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%add_386, torch.float32), kwargs = {})
#   %add_387 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_2, 0.0), kwargs = {})
#   %mul_399 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_387, 0.5), kwargs = {})
#   %convert_element_type_3 : [num_users=3] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_399, torch.int64), kwargs = {})
triton_poi_fused__to_copy_add_arange_mul_103 = async_compile.triton('triton_poi_fused__to_copy_add_arange_mul_103', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8}, 
    filename=__file__,
    triton_meta={'signature': {'out_ptr0': '*i64', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0,), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_add_arange_mul_103', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__to_copy_add_arange_mul_103(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = x0
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = tmp3.to(tl.int32)
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/q7/cq7aackswzi7aidi3oiuek7lhcptlrxy63unfzg4354jhgfwqtai.py
# Topologically Sorted Source Nodes: [result_444, mul_161, result_445, result_447, mul_162, result_448, add_65, output_tensor_22, hidden_states_276], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten._unsafe_index]
# Source node to ATen node mapping:
#   add_65 => add_385
#   hidden_states_276 => _unsafe_index
#   mul_161 => mul_396
#   mul_162 => mul_397
#   output_tensor_22 => div_38
#   result_444 => convolution_181
#   result_445 => add_383
#   result_447 => convolution_184
#   result_448 => add_384
# Graph fragment:
#   %convolution_181 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_395, %primals_738, %primals_739, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_396 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_183, 1.0), kwargs = {})
#   %add_383 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_181, %mul_396), kwargs = {})
#   %convolution_184 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%cat_4, %primals_742, %primals_743, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_397 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_186, 1.0), kwargs = {})
#   %add_384 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_184, %mul_397), kwargs = {})
#   %add_385 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_384, %add_383), kwargs = {})
#   %div_38 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_385, 1.0), kwargs = {})
#   %_unsafe_index : [num_users=3] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div_38, [None, None, %unsqueeze_356, %convert_element_type_3]), kwargs = {})
triton_poi_fused__unsafe_index_add_convolution_div_mul_104 = async_compile.triton('triton_poi_fused__unsafe_index_add_convolution_div_mul_104', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__unsafe_index_add_convolution_div_mul_104', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__unsafe_index_add_convolution_div_mul_104(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x1 = ((xindex // 8) % 8)
    x0 = (xindex % 8)
    x5 = xindex // 64
    x2 = ((xindex // 64) % 1280)
    x6 = xindex
    tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr5 + (x2), None, eviction_policy='evict_last')
    tmp1 = tl.full([XBLOCK], 4, tl.int32)
    tmp2 = tmp0 + tmp1
    tmp3 = tmp0 < 0
    tmp4 = tl.where(tmp3, tmp2, tmp0)
    tmp6 = tmp5 + tmp1
    tmp7 = tmp5 < 0
    tmp8 = tl.where(tmp7, tmp6, tmp5)
    tmp9 = tl.load(in_ptr1 + (tmp8 + 4*tmp4 + 16*x5), None, eviction_policy='evict_last')
    tmp11 = tmp9 + tmp10
    tmp12 = tl.load(in_ptr3 + (tmp8 + 4*tmp4 + 16*x5), None, eviction_policy='evict_last')
    tmp13 = 1.0
    tmp14 = tmp12 * tmp13
    tmp15 = tmp11 + tmp14
    tmp16 = tl.load(in_ptr4 + (tmp8 + 4*tmp4 + 16*x5), None, eviction_policy='evict_last')
    tmp18 = tmp16 + tmp17
    tmp19 = tl.load(in_ptr6 + (tmp8 + 4*tmp4 + 16*x5), None, eviction_policy='evict_last')
    tmp20 = tmp19 * tmp13
    tmp21 = tmp18 + tmp20
    tmp22 = tmp15 + tmp21
    tmp23 = tmp22 * tmp13
    tl.store(out_ptr0 + (x6), tmp23, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/st/cstzeiqfcf7xx5j2unbtnkskejgbrp573j2plzfw7mcpvd4b56wc.py
# Topologically Sorted Source Nodes: [hidden_states_277, hidden_states_278], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_277 => cat_5
#   hidden_states_278 => add_391, rsqrt_76, var_mean_76
# Graph fragment:
#   %cat_5 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_390, %add_299], 1), kwargs = {})
#   %var_mean_76 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1031, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_391 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_256, 1e-05), kwargs = {})
#   %rsqrt_76 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_391,), kwargs = {})
triton_red_fused_cat_native_group_norm_105 = async_compile.triton('triton_red_fused_cat_native_group_norm_105', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_105', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_105(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp20_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp20_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp20_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 64
        r2 = (rindex % 64)
        r5 = rindex
        tmp0 = r3 + 80*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 1280, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (r2 + 64*(r3 + 80*x0) + 81920*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 80*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (r2 + 64*(r3 + 80*x0) + 81920*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp4, tmp11, tmp12)
        tmp14 = tmp0 >= tmp3
        tmp15 = tl.full([1, 1], 2560, tl.int64)
        tmp16 = tmp0 < tmp15
        tmp17 = tl.load(in_ptr3 + (r2 + 64*((-1280) + r3 + 80*x0) + 81920*x1), rmask & tmp14 & xmask, eviction_policy='evict_first', other=0.0)
        tmp18 = tl.where(tmp4, tmp13, tmp17)
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp20_mean_next, tmp20_m2_next, tmp20_weight_next = triton_helpers.welford_reduce(
            tmp19, tmp20_mean, tmp20_m2, tmp20_weight, roffset == 0
        )
        tmp20_mean = tl.where(rmask & xmask, tmp20_mean_next, tmp20_mean)
        tmp20_m2 = tl.where(rmask & xmask, tmp20_m2_next, tmp20_m2)
        tmp20_weight = tl.where(rmask & xmask, tmp20_weight_next, tmp20_weight)
        tl.store(out_ptr0 + (r5 + 5120*x4), tmp18, rmask & xmask)
    tmp20_tmp, tmp21_tmp, tmp22_tmp = triton_helpers.welford(
        tmp20_mean, tmp20_m2, tmp20_weight, 1
    )
    tmp20 = tmp20_tmp[:, None]
    tmp21 = tmp21_tmp[:, None]
    tmp22 = tmp22_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp20, xmask)
    tmp23 = 5120.0
    tmp24 = tmp21 / tmp23
    tmp25 = 1e-05
    tmp26 = tmp24 + tmp25
    tmp27 = libdevice.rsqrt(tmp26)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp27, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/nu/cnuzofrhxtqpoh75oebrdwyju6v5w4iewpugwamy4lqt2j5sb2su.py
# Topologically Sorted Source Nodes: [hidden_states_278, hidden_states_279], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_278 => add_392, mul_404
#   hidden_states_279 => mul_405, sigmoid_61
# Graph fragment:
#   %mul_404 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1032, %unsqueeze_362), kwargs = {})
#   %add_392 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_404, %unsqueeze_359), kwargs = {})
#   %sigmoid_61 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_392,), kwargs = {})
#   %mul_405 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_392, %sigmoid_61), kwargs = {})
triton_poi_fused_native_group_norm_silu_106 = async_compile.triton('triton_poi_fused_native_group_norm_silu_106', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_106', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_106(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 64
    x1 = ((xindex // 64) % 2560)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 80), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 80), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/74/c74d5yvzmh3luyfo6oqgaid2csk5ccpb2pbtpkbkdbaebeclgkfl.py
# Topologically Sorted Source Nodes: [hidden_states_303, hidden_states_304], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_303 => cat_6
#   hidden_states_304 => add_426, rsqrt_82, var_mean_82
# Graph fragment:
#   %cat_6 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_425, %add_265], 1), kwargs = {})
#   %var_mean_82 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1163, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_426 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_282, 1e-05), kwargs = {})
#   %rsqrt_82 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_426,), kwargs = {})
triton_red_fused_cat_native_group_norm_107 = async_compile.triton('triton_red_fused_cat_native_group_norm_107', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_107', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_107(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 5120
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp22_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 64
        r2 = (rindex % 64)
        r5 = rindex
        tmp0 = r3 + 80*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 1280, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (1280*r2 + 81920*x1 + (r3 + 80*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 80*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (1280*r2 + 81920*x1 + (r3 + 80*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.load(in_ptr3 + (r2 + 64*(r3 + 80*x0) + 81920*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp14 = tl.full(tmp13.shape, 0.0, tmp13.dtype)
        tmp15 = tl.where(tmp4, tmp13, tmp14)
        tmp16 = tmp0 >= tmp3
        tmp17 = tl.full([1, 1], 2560, tl.int64)
        tmp18 = tmp0 < tmp17
        tmp19 = tl.load(in_ptr4 + (r2 + 64*((-1280) + r3 + 80*x0) + 81920*x1), rmask & tmp16 & xmask, eviction_policy='evict_first', other=0.0)
        tmp20 = tl.where(tmp4, tmp15, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp22_mean_next, tmp22_m2_next, tmp22_weight_next = triton_helpers.welford_reduce(
            tmp21, tmp22_mean, tmp22_m2, tmp22_weight, roffset == 0
        )
        tmp22_mean = tl.where(rmask & xmask, tmp22_mean_next, tmp22_mean)
        tmp22_m2 = tl.where(rmask & xmask, tmp22_m2_next, tmp22_m2)
        tmp22_weight = tl.where(rmask & xmask, tmp22_weight_next, tmp22_weight)
        tl.store(out_ptr0 + (r5 + 5120*x4), tmp20, rmask & xmask)
    tmp22_tmp, tmp23_tmp, tmp24_tmp = triton_helpers.welford(
        tmp22_mean, tmp22_m2, tmp22_weight, 1
    )
    tmp22 = tmp22_tmp[:, None]
    tmp23 = tmp23_tmp[:, None]
    tmp24 = tmp24_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp22, xmask)
    tmp25 = 5120.0
    tmp26 = tmp23 / tmp25
    tmp27 = 1e-05
    tmp28 = tmp26 + tmp27
    tmp29 = libdevice.rsqrt(tmp28)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp29, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/cc/ccc7rixu756fl4rkmawdj56k265v2j4vvny4rg35ssmvnaj5rz2z.py
# Topologically Sorted Source Nodes: [hidden_states_329, hidden_states_330], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_329 => cat_7
#   hidden_states_330 => add_461, rsqrt_88, var_mean_88
# Graph fragment:
#   %cat_7 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_460, %add_230], 1), kwargs = {})
#   %var_mean_88 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1295, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_461 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_308, 1e-05), kwargs = {})
#   %rsqrt_88 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_461,), kwargs = {})
triton_red_fused_cat_native_group_norm_108 = async_compile.triton('triton_red_fused_cat_native_group_norm_108', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 4096},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_108', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_108(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 3840
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp22_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 64
        r2 = (rindex % 64)
        r5 = rindex
        tmp0 = r3 + 60*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 1280, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (1280*r2 + 81920*x1 + (r3 + 60*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 60*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (1280*r2 + 81920*x1 + (r3 + 60*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.load(in_ptr3 + (r2 + 64*(r3 + 60*x0) + 81920*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp14 = tl.full(tmp13.shape, 0.0, tmp13.dtype)
        tmp15 = tl.where(tmp4, tmp13, tmp14)
        tmp16 = tmp0 >= tmp3
        tmp17 = tl.full([1, 1], 1920, tl.int64)
        tmp18 = tmp0 < tmp17
        tmp19 = tl.load(in_ptr4 + (r2 + 64*((-1280) + r3 + 60*x0) + 40960*x1), rmask & tmp16 & xmask, eviction_policy='evict_first', other=0.0)
        tmp20 = tl.where(tmp4, tmp15, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp22_mean_next, tmp22_m2_next, tmp22_weight_next = triton_helpers.welford_reduce(
            tmp21, tmp22_mean, tmp22_m2, tmp22_weight, roffset == 0
        )
        tmp22_mean = tl.where(rmask & xmask, tmp22_mean_next, tmp22_mean)
        tmp22_m2 = tl.where(rmask & xmask, tmp22_m2_next, tmp22_m2)
        tmp22_weight = tl.where(rmask & xmask, tmp22_weight_next, tmp22_weight)
        tl.store(out_ptr0 + (r5 + 3840*x4), tmp20, rmask & xmask)
    tmp22_tmp, tmp23_tmp, tmp24_tmp = triton_helpers.welford(
        tmp22_mean, tmp22_m2, tmp22_weight, 1
    )
    tmp22 = tmp22_tmp[:, None]
    tmp23 = tmp23_tmp[:, None]
    tmp24 = tmp24_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp22, xmask)
    tmp25 = 3840.0
    tmp26 = tmp23 / tmp25
    tmp27 = 1e-05
    tmp28 = tmp26 + tmp27
    tmp29 = libdevice.rsqrt(tmp28)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp29, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/cc/ccc2oqub2ds4xfgplwvvbksg4amm5qajkzt4bl36d27j4mnishlt.py
# Topologically Sorted Source Nodes: [hidden_states_330, hidden_states_331], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_330 => add_462, mul_472
#   hidden_states_331 => mul_473, sigmoid_67
# Graph fragment:
#   %mul_472 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1296, %unsqueeze_402), kwargs = {})
#   %add_462 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_472, %unsqueeze_399), kwargs = {})
#   %sigmoid_67 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_462,), kwargs = {})
#   %mul_473 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_462, %sigmoid_67), kwargs = {})
triton_poi_fused_native_group_norm_silu_109 = async_compile.triton('triton_poi_fused_native_group_norm_silu_109', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_109', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_109(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 491520
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 64
    x1 = ((xindex // 64) % 1920)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 60), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 60), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/5s/c5sm4r7ju2cx5tcipt2h7y6lvnelwllaqwippp4jok2tb4eiu3u3.py
# Topologically Sorted Source Nodes: [hidden_states_355], Original ATen: [aten.arange, aten.add, aten.mul, aten._to_copy]
# Source node to ATen node mapping:
#   hidden_states_355 => add_496, add_497, convert_element_type_6, convert_element_type_7, iota_3, mul_505, mul_506
# Graph fragment:
#   %iota_3 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (16,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
#   %mul_505 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%iota_3, 1), kwargs = {})
#   %add_496 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_505, 0), kwargs = {})
#   %convert_element_type_6 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%add_496, torch.float32), kwargs = {})
#   %add_497 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_6, 0.0), kwargs = {})
#   %mul_506 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_497, 0.5), kwargs = {})
#   %convert_element_type_7 : [num_users=3] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_506, torch.int64), kwargs = {})
triton_poi_fused__to_copy_add_arange_mul_110 = async_compile.triton('triton_poi_fused__to_copy_add_arange_mul_110', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16}, 
    filename=__file__,
    triton_meta={'signature': {'out_ptr0': '*i64', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_add_arange_mul_110', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__to_copy_add_arange_mul_110(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = x0
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = tmp3.to(tl.int32)
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/jr/cjrc6gq4fpgwgv3fagechnz5oxp5xwyeulpnqyftykoef5tyucwb.py
# Topologically Sorted Source Nodes: [hidden_states_354, output_9, hidden_states_355], Original ATen: [aten.clone, aten.add, aten._unsafe_index]
# Source node to ATen node mapping:
#   hidden_states_354 => clone_81
#   hidden_states_355 => _unsafe_index_1
#   output_9 => add_495
# Graph fragment:
#   %clone_81 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_570,), kwargs = {memory_format: torch.contiguous_format})
#   %add_495 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone_81, %div_45), kwargs = {})
#   %_unsafe_index_1 : [num_users=3] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%add_495, [None, None, %unsqueeze_417, %convert_element_type_7]), kwargs = {})
triton_poi_fused__unsafe_index_add_clone_111 = async_compile.triton('triton_poi_fused__unsafe_index_add_clone_111', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__unsafe_index_add_clone_111', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__unsafe_index_add_clone_111(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x1 = ((xindex // 16) % 16)
    x0 = (xindex % 16)
    x2 = ((xindex // 256) % 1280)
    x3 = xindex // 327680
    x5 = xindex // 256
    x6 = xindex
    tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last')
    tmp1 = tl.full([XBLOCK], 8, tl.int32)
    tmp2 = tmp0 + tmp1
    tmp3 = tmp0 < 0
    tmp4 = tl.where(tmp3, tmp2, tmp0)
    tmp6 = tmp5 + tmp1
    tmp7 = tmp5 < 0
    tmp8 = tl.where(tmp7, tmp6, tmp5)
    tmp9 = tl.load(in_ptr1 + (x2 + 1280*tmp8 + 10240*tmp4 + 81920*x3), None, eviction_policy='evict_last')
    tmp11 = tmp9 + tmp10
    tmp12 = tl.load(in_ptr3 + (x2 + 1280*tmp8 + 10240*tmp4 + 81920*x3), None, eviction_policy='evict_last')
    tmp13 = 1.0
    tmp14 = tmp12 * tmp13
    tmp15 = tmp11 + tmp14
    tmp16 = tl.load(in_ptr4 + (tmp8 + 8*tmp4 + 64*x5), None, eviction_policy='evict_last')
    tmp17 = tmp15 + tmp16
    tl.store(out_ptr0 + (x6), tmp17, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/b6/cb6eej5yf6u3364ohxy5q3csvbn5zk45rrctw7vy75uautnh2fiy.py
# Topologically Sorted Source Nodes: [hidden_states_356, hidden_states_357], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_356 => cat_8
#   hidden_states_357 => add_501, rsqrt_94, var_mean_94
# Graph fragment:
#   %cat_8 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_500, %add_229], 1), kwargs = {})
#   %var_mean_94 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1427, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_501 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_334, 1e-05), kwargs = {})
#   %rsqrt_94 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_501,), kwargs = {})
triton_red_fused_cat_native_group_norm_112 = async_compile.triton('triton_red_fused_cat_native_group_norm_112', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_112', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_112(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 15360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp20_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp20_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp20_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 256
        r2 = (rindex % 256)
        r5 = rindex
        tmp0 = r3 + 60*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 1280, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (r2 + 256*(r3 + 60*x0) + 327680*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 60*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (r2 + 256*(r3 + 60*x0) + 327680*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp4, tmp11, tmp12)
        tmp14 = tmp0 >= tmp3
        tmp15 = tl.full([1, 1], 1920, tl.int64)
        tmp16 = tmp0 < tmp15
        tmp17 = tl.load(in_ptr3 + (r2 + 256*((-1280) + r3 + 60*x0) + 163840*x1), rmask & tmp14 & xmask, eviction_policy='evict_first', other=0.0)
        tmp18 = tl.where(tmp4, tmp13, tmp17)
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp20_mean_next, tmp20_m2_next, tmp20_weight_next = triton_helpers.welford_reduce(
            tmp19, tmp20_mean, tmp20_m2, tmp20_weight, roffset == 0
        )
        tmp20_mean = tl.where(rmask & xmask, tmp20_mean_next, tmp20_mean)
        tmp20_m2 = tl.where(rmask & xmask, tmp20_m2_next, tmp20_m2)
        tmp20_weight = tl.where(rmask & xmask, tmp20_weight_next, tmp20_weight)
        tl.store(out_ptr0 + (r5 + 15360*x4), tmp18, rmask & xmask)
    tmp20_tmp, tmp21_tmp, tmp22_tmp = triton_helpers.welford(
        tmp20_mean, tmp20_m2, tmp20_weight, 1
    )
    tmp20 = tmp20_tmp[:, None]
    tmp21 = tmp21_tmp[:, None]
    tmp22 = tmp22_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp20, xmask)
    tmp23 = 15360.0
    tmp24 = tmp21 / tmp23
    tmp25 = 1e-05
    tmp26 = tmp24 + tmp25
    tmp27 = libdevice.rsqrt(tmp26)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp27, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/fo/cfoibxrczekgeiud7jbat7ui57vr4kdonfagy4rople5q5hbszc3.py
# Topologically Sorted Source Nodes: [hidden_states_357, hidden_states_358], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_357 => add_502, mul_511
#   hidden_states_358 => mul_512, sigmoid_70
# Graph fragment:
#   %mul_511 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1428, %unsqueeze_423), kwargs = {})
#   %add_502 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_511, %unsqueeze_420), kwargs = {})
#   %sigmoid_70 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_502,), kwargs = {})
#   %mul_512 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_502, %sigmoid_70), kwargs = {})
triton_poi_fused_native_group_norm_silu_113 = async_compile.triton('triton_poi_fused_native_group_norm_silu_113', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_113', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_113(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1966080
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 256
    x1 = ((xindex // 256) % 1920)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 60), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 60), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/6t/c6tjcx6m5gqkpmdj6wcnzhtb6i3xyzk6e6b5wwbmtkxwj2rx42k2.py
# Topologically Sorted Source Nodes: [hidden_states_382, hidden_states_383], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_382 => cat_9
#   hidden_states_383 => add_536, rsqrt_100, var_mean_100
# Graph fragment:
#   %cat_9 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_535, %add_195], 1), kwargs = {})
#   %var_mean_100 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1559, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_536 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_360, 1e-05), kwargs = {})
#   %rsqrt_100 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_536,), kwargs = {})
triton_red_fused_cat_native_group_norm_114 = async_compile.triton('triton_red_fused_cat_native_group_norm_114', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_114', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_114(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 10240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp22_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 256
        r2 = (rindex % 256)
        r5 = rindex
        tmp0 = r3 + 40*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 640, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (640*r2 + 163840*x1 + (r3 + 40*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 40*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (640*r2 + 163840*x1 + (r3 + 40*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.load(in_ptr3 + (r2 + 256*(r3 + 40*x0) + 163840*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp14 = tl.full(tmp13.shape, 0.0, tmp13.dtype)
        tmp15 = tl.where(tmp4, tmp13, tmp14)
        tmp16 = tmp0 >= tmp3
        tmp17 = tl.full([1, 1], 1280, tl.int64)
        tmp18 = tmp0 < tmp17
        tmp19 = tl.load(in_ptr4 + (r2 + 256*((-640) + r3 + 40*x0) + 163840*x1), rmask & tmp16 & xmask, eviction_policy='evict_first', other=0.0)
        tmp20 = tl.where(tmp4, tmp15, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp22_mean_next, tmp22_m2_next, tmp22_weight_next = triton_helpers.welford_reduce(
            tmp21, tmp22_mean, tmp22_m2, tmp22_weight, roffset == 0
        )
        tmp22_mean = tl.where(rmask & xmask, tmp22_mean_next, tmp22_mean)
        tmp22_m2 = tl.where(rmask & xmask, tmp22_m2_next, tmp22_m2)
        tmp22_weight = tl.where(rmask & xmask, tmp22_weight_next, tmp22_weight)
        tl.store(out_ptr0 + (r5 + 10240*x4), tmp20, rmask & xmask)
    tmp22_tmp, tmp23_tmp, tmp24_tmp = triton_helpers.welford(
        tmp22_mean, tmp22_m2, tmp22_weight, 1
    )
    tmp22 = tmp22_tmp[:, None]
    tmp23 = tmp23_tmp[:, None]
    tmp24 = tmp24_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp22, xmask)
    tmp25 = 10240.0
    tmp26 = tmp23 / tmp25
    tmp27 = 1e-05
    tmp28 = tmp26 + tmp27
    tmp29 = libdevice.rsqrt(tmp28)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp29, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/um/cumxy7x5y4jlk7zdiynijppdnkigarmafyahij55ff5vovqok6nl.py
# Topologically Sorted Source Nodes: [hidden_states_383, hidden_states_384], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_383 => add_537, mul_545
#   hidden_states_384 => mul_546, sigmoid_73
# Graph fragment:
#   %mul_545 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1560, %unsqueeze_443), kwargs = {})
#   %add_537 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_545, %unsqueeze_440), kwargs = {})
#   %sigmoid_73 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_537,), kwargs = {})
#   %mul_546 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_537, %sigmoid_73), kwargs = {})
triton_poi_fused_native_group_norm_silu_115 = async_compile.triton('triton_poi_fused_native_group_norm_silu_115', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_115', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_115(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1310720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 256
    x1 = ((xindex // 256) % 1280)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 40), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 40), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/ei/ceixrrzbvmij5pad62i4wpdyxcplyenl2bro2l3lag3le5vf5jfn.py
# Topologically Sorted Source Nodes: [hidden_states_408, hidden_states_409], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_408 => cat_10
#   hidden_states_409 => add_571, rsqrt_106, var_mean_106
# Graph fragment:
#   %cat_10 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_570, %add_160], 1), kwargs = {})
#   %var_mean_106 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1691, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_571 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_386, 1e-05), kwargs = {})
#   %rsqrt_106 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_571,), kwargs = {})
triton_red_fused_cat_native_group_norm_116 = async_compile.triton('triton_red_fused_cat_native_group_norm_116', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 8192},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_116', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_116(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 7680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp22_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 256
        r2 = (rindex % 256)
        r5 = rindex
        tmp0 = r3 + 30*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 640, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (640*r2 + 163840*x1 + (r3 + 30*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 30*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (640*r2 + 163840*x1 + (r3 + 30*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.load(in_ptr3 + (r2 + 256*(r3 + 30*x0) + 163840*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp14 = tl.full(tmp13.shape, 0.0, tmp13.dtype)
        tmp15 = tl.where(tmp4, tmp13, tmp14)
        tmp16 = tmp0 >= tmp3
        tmp17 = tl.full([1, 1], 960, tl.int64)
        tmp18 = tmp0 < tmp17
        tmp19 = tl.load(in_ptr4 + (r2 + 256*((-640) + r3 + 30*x0) + 81920*x1), rmask & tmp16 & xmask, eviction_policy='evict_first', other=0.0)
        tmp20 = tl.where(tmp4, tmp15, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp22_mean_next, tmp22_m2_next, tmp22_weight_next = triton_helpers.welford_reduce(
            tmp21, tmp22_mean, tmp22_m2, tmp22_weight, roffset == 0
        )
        tmp22_mean = tl.where(rmask & xmask, tmp22_mean_next, tmp22_mean)
        tmp22_m2 = tl.where(rmask & xmask, tmp22_m2_next, tmp22_m2)
        tmp22_weight = tl.where(rmask & xmask, tmp22_weight_next, tmp22_weight)
        tl.store(out_ptr0 + (r5 + 7680*x4), tmp20, rmask & xmask)
    tmp22_tmp, tmp23_tmp, tmp24_tmp = triton_helpers.welford(
        tmp22_mean, tmp22_m2, tmp22_weight, 1
    )
    tmp22 = tmp22_tmp[:, None]
    tmp23 = tmp23_tmp[:, None]
    tmp24 = tmp24_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp22, xmask)
    tmp25 = 7680.0
    tmp26 = tmp23 / tmp25
    tmp27 = 1e-05
    tmp28 = tmp26 + tmp27
    tmp29 = libdevice.rsqrt(tmp28)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp29, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/x6/cx6gd4ztoeso64mqmts7jfwy6nvhv77k2clh72dbubobkgamc3qk.py
# Topologically Sorted Source Nodes: [hidden_states_409, hidden_states_410], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_409 => add_572, mul_579
#   hidden_states_410 => mul_580, sigmoid_76
# Graph fragment:
#   %mul_579 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1692, %unsqueeze_463), kwargs = {})
#   %add_572 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_579, %unsqueeze_460), kwargs = {})
#   %sigmoid_76 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_572,), kwargs = {})
#   %mul_580 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_572, %sigmoid_76), kwargs = {})
triton_poi_fused_native_group_norm_silu_117 = async_compile.triton('triton_poi_fused_native_group_norm_silu_117', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_117', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_117(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 983040
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 256
    x1 = ((xindex // 256) % 960)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 30), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 30), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/nn/cnnnmhui44evjrudolhz2knjifuwzycweaegsga3weeudqoxpul5.py
# Topologically Sorted Source Nodes: [hidden_states_434], Original ATen: [aten.arange, aten.add, aten.mul, aten._to_copy]
# Source node to ATen node mapping:
#   hidden_states_434 => add_606, add_607, convert_element_type_10, convert_element_type_11, iota_5, mul_612, mul_613
# Graph fragment:
#   %iota_5 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (32,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
#   %mul_612 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%iota_5, 1), kwargs = {})
#   %add_606 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_612, 0), kwargs = {})
#   %convert_element_type_10 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%add_606, torch.float32), kwargs = {})
#   %add_607 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_10, 0.0), kwargs = {})
#   %mul_613 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_607, 0.5), kwargs = {})
#   %convert_element_type_11 : [num_users=3] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_613, torch.int64), kwargs = {})
triton_poi_fused__to_copy_add_arange_mul_118 = async_compile.triton('triton_poi_fused__to_copy_add_arange_mul_118', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 32}, 
    filename=__file__,
    triton_meta={'signature': {'out_ptr0': '*i64', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_add_arange_mul_118', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__to_copy_add_arange_mul_118(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 32
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = x0
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = tmp3.to(tl.int32)
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/bu/cbugbsiufw7v2xhgxa42d7z5gzpsi6bapsgg3xpjbd7u4jmc5hie.py
# Topologically Sorted Source Nodes: [hidden_states_433, output_12, hidden_states_434], Original ATen: [aten.clone, aten.add, aten._unsafe_index]
# Source node to ATen node mapping:
#   hidden_states_433 => clone_99
#   hidden_states_434 => _unsafe_index_2
#   output_12 => add_605
# Graph fragment:
#   %clone_99 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_732,), kwargs = {memory_format: torch.contiguous_format})
#   %add_605 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone_99, %div_54), kwargs = {})
#   %_unsafe_index_2 : [num_users=3] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%add_605, [None, None, %unsqueeze_478, %convert_element_type_11]), kwargs = {})
triton_poi_fused__unsafe_index_add_clone_119 = async_compile.triton('triton_poi_fused__unsafe_index_add_clone_119', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 4194304}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__unsafe_index_add_clone_119', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__unsafe_index_add_clone_119(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2621440
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x1 = ((xindex // 32) % 32)
    x0 = (xindex % 32)
    x2 = ((xindex // 1024) % 640)
    x3 = xindex // 655360
    x5 = xindex // 1024
    x6 = xindex
    tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last')
    tmp1 = tl.full([XBLOCK], 16, tl.int32)
    tmp2 = tmp0 + tmp1
    tmp3 = tmp0 < 0
    tmp4 = tl.where(tmp3, tmp2, tmp0)
    tmp6 = tmp5 + tmp1
    tmp7 = tmp5 < 0
    tmp8 = tl.where(tmp7, tmp6, tmp5)
    tmp9 = tl.load(in_ptr1 + (x2 + 640*tmp8 + 10240*tmp4 + 163840*x3), None, eviction_policy='evict_last')
    tmp11 = tmp9 + tmp10
    tmp12 = tl.load(in_ptr3 + (x2 + 640*tmp8 + 10240*tmp4 + 163840*x3), None, eviction_policy='evict_last')
    tmp13 = 1.0
    tmp14 = tmp12 * tmp13
    tmp15 = tmp11 + tmp14
    tmp16 = tl.load(in_ptr4 + (tmp8 + 16*tmp4 + 256*x5), None, eviction_policy='evict_last')
    tmp17 = tmp15 + tmp16
    tl.store(out_ptr0 + (x6), tmp17, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/3u/c3up6wvfsjwu7lhndepa7svlmmfmhfye2eybcbzlddpxpf3gltuk.py
# Topologically Sorted Source Nodes: [hidden_states_435, hidden_states_436], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_435 => cat_11
#   hidden_states_436 => add_611, rsqrt_112, var_mean_112
# Graph fragment:
#   %cat_11 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_610, %add_159], 1), kwargs = {})
#   %var_mean_112 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1823, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_611 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_412, 1e-05), kwargs = {})
#   %rsqrt_112 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_611,), kwargs = {})
triton_red_fused_cat_native_group_norm_120 = async_compile.triton('triton_red_fused_cat_native_group_norm_120', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 32768},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_120', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_120(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 30720
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp20_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp20_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp20_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 1024
        r2 = (rindex % 1024)
        r5 = rindex
        tmp0 = r3 + 30*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 640, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (r2 + 1024*(r3 + 30*x0) + 655360*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 30*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (r2 + 1024*(r3 + 30*x0) + 655360*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp4, tmp11, tmp12)
        tmp14 = tmp0 >= tmp3
        tmp15 = tl.full([1, 1], 960, tl.int64)
        tmp16 = tmp0 < tmp15
        tmp17 = tl.load(in_ptr3 + (r2 + 1024*((-640) + r3 + 30*x0) + 327680*x1), rmask & tmp14 & xmask, eviction_policy='evict_first', other=0.0)
        tmp18 = tl.where(tmp4, tmp13, tmp17)
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp20_mean_next, tmp20_m2_next, tmp20_weight_next = triton_helpers.welford_reduce(
            tmp19, tmp20_mean, tmp20_m2, tmp20_weight, roffset == 0
        )
        tmp20_mean = tl.where(rmask & xmask, tmp20_mean_next, tmp20_mean)
        tmp20_m2 = tl.where(rmask & xmask, tmp20_m2_next, tmp20_m2)
        tmp20_weight = tl.where(rmask & xmask, tmp20_weight_next, tmp20_weight)
        tl.store(out_ptr0 + (r5 + 30720*x4), tmp18, rmask & xmask)
    tmp20_tmp, tmp21_tmp, tmp22_tmp = triton_helpers.welford(
        tmp20_mean, tmp20_m2, tmp20_weight, 1
    )
    tmp20 = tmp20_tmp[:, None]
    tmp21 = tmp21_tmp[:, None]
    tmp22 = tmp22_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp20, xmask)
    tmp23 = 30720.0
    tmp24 = tmp21 / tmp23
    tmp25 = 1e-05
    tmp26 = tmp24 + tmp25
    tmp27 = libdevice.rsqrt(tmp26)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp27, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/7f/c7f6xj3xuxioeuruxn2ju63oqgb27rclox2kgazgkwe3cpxzqtpv.py
# Topologically Sorted Source Nodes: [hidden_states_436, hidden_states_437], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_436 => add_612, mul_618
#   hidden_states_437 => mul_619, sigmoid_79
# Graph fragment:
#   %mul_618 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1824, %unsqueeze_484), kwargs = {})
#   %add_612 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_618, %unsqueeze_481), kwargs = {})
#   %sigmoid_79 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_612,), kwargs = {})
#   %mul_619 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_612, %sigmoid_79), kwargs = {})
triton_poi_fused_native_group_norm_silu_121 = async_compile.triton('triton_poi_fused_native_group_norm_silu_121', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 4194304}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_121', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_121(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 3932160
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 1024
    x1 = ((xindex // 1024) % 960)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 30), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 30), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/e3/ce3rrpehrnqbvxp2ywm4c5nbmy4qi42r5ecql36n2fpy7qaab2ho.py
# Topologically Sorted Source Nodes: [result_732, mul_263, result_733, result_735, mul_264, result_736, add_103, output_tensor_29, hidden_states_442], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
# Source node to ATen node mapping:
#   add_103 => add_619
#   hidden_states_442 => add_620, rsqrt_114, var_mean_114
#   mul_263 => mul_625
#   mul_264 => mul_626
#   output_tensor_29 => div_57
#   result_732 => convolution_253
#   result_733 => add_617
#   result_735 => convolution_256
#   result_736 => add_618
# Graph fragment:
#   %convolution_253 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_624, %primals_1176, %primals_1177, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_625 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_255, 1.0), kwargs = {})
#   %add_617 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_253, %mul_625), kwargs = {})
#   %convolution_256 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%cat_11, %primals_1180, %primals_1181, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_626 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_258, 1.0), kwargs = {})
#   %add_618 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_256, %mul_626), kwargs = {})
#   %add_619 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_618, %add_617), kwargs = {})
#   %div_57 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%add_619, 1.0), kwargs = {})
#   %var_mean_114 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1827, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_620 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_416, 1e-06), kwargs = {})
#   %rsqrt_114 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_620,), kwargs = {})
triton_red_fused_add_convolution_div_mul_native_group_norm_122 = async_compile.triton('triton_red_fused_add_convolution_div_mul_native_group_norm_122', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 16384},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_convolution_div_mul_native_group_norm_122', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_add_convolution_div_mul_native_group_norm_122(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 10240
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x4 = xindex
    x0 = (xindex % 32)
    tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r5 = rindex
        r3 = rindex // 1024
        tmp0 = tl.load(in_out_ptr0 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = tl.load(in_ptr0 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp7 = tl.load(in_ptr2 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr3 + (r3 + 10*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.load(in_ptr4 + (r5 + 10240*x4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = 1.0
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        tmp9 = tmp7 + tmp8
        tmp11 = tmp10 * tmp4
        tmp12 = tmp9 + tmp11
        tmp13 = tmp6 + tmp12
        tmp14 = tmp13 * tmp4
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
            tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
        )
        tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
        tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
        tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
        tl.store(in_out_ptr0 + (r5 + 10240*x4), tmp14, rmask & xmask)
    tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
        tmp16_mean, tmp16_m2, tmp16_weight, 1
    )
    tmp16 = tmp16_tmp[:, None]
    tmp17 = tmp17_tmp[:, None]
    tmp18 = tmp18_tmp[:, None]
    tl.store(out_ptr0 + (x4), tmp16, xmask)
    tl.store(out_ptr1 + (x4), tmp17, xmask)
    tmp19 = 10240.0
    tmp20 = tmp17 / tmp19
    tmp21 = 1e-06
    tmp22 = tmp20 + tmp21
    tmp23 = libdevice.rsqrt(tmp22)
    tl.store(out_ptr2 + (x4), tmp23, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/cl/ccltkcmmdxmymyou5o5bhepbyskwfpchqh2byuz2mcxy7sfruzwj.py
# Topologically Sorted Source Nodes: [hidden_states_461, hidden_states_462], Original ATen: [aten.cat, aten.native_group_norm]
# Source node to ATen node mapping:
#   hidden_states_461 => cat_12
#   hidden_states_462 => add_646, rsqrt_118, var_mean_118
# Graph fragment:
#   %cat_12 : [num_users=4] = call_function[target=torch.ops.aten.cat.default](args = ([%add_645, %add_125], 1), kwargs = {})
#   %var_mean_118 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1955, [2, 3]), kwargs = {correction: 0, keepdim: True})
#   %add_646 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_438, 1e-05), kwargs = {})
#   %rsqrt_118 : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_646,), kwargs = {})
triton_red_fused_cat_native_group_norm_123 = async_compile.triton('triton_red_fused_cat_native_group_norm_123', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 32768},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_cat_native_group_norm_123', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
)
@triton.jit
def triton_red_fused_cat_native_group_norm_123(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 20480
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = (xindex % 32)
    x1 = xindex // 32
    x4 = xindex
    tmp22_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp22_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex // 1024
        r2 = (rindex % 1024)
        r5 = rindex
        tmp0 = r3 + 20*x0
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 320, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (320*r2 + 327680*x1 + (r3 + 20*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tl.load(in_ptr1 + (r3 + 20*x0), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tmp5 + tmp6
        tmp8 = tl.load(in_ptr2 + (320*r2 + 327680*x1 + (r3 + 20*x0)), rmask & tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp9 = 1.0
        tmp10 = tmp8 * tmp9
        tmp11 = tmp7 + tmp10
        tmp12 = tl.load(in_ptr3 + (r2 + 1024*(r3 + 20*x0) + 327680*x1), rmask & tmp4 & xmask, eviction_policy='evict_first', other=0.0)
        tmp13 = tmp11 + tmp12
        tmp14 = tl.full(tmp13.shape, 0.0, tmp13.dtype)
        tmp15 = tl.where(tmp4, tmp13, tmp14)
        tmp16 = tmp0 >= tmp3
        tmp17 = tl.full([1, 1], 640, tl.int64)
        tmp18 = tmp0 < tmp17
        tmp19 = tl.load(in_ptr4 + (r2 + 1024*((-320) + r3 + 20*x0) + 327680*x1), rmask & tmp16 & xmask, eviction_policy='evict_first', other=0.0)
        tmp20 = tl.where(tmp4, tmp15, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp22_mean_next, tmp22_m2_next, tmp22_weight_next = triton_helpers.welford_reduce(
            tmp21, tmp22_mean, tmp22_m2, tmp22_weight, roffset == 0
        )
        tmp22_mean = tl.where(rmask & xmask, tmp22_mean_next, tmp22_mean)
        tmp22_m2 = tl.where(rmask & xmask, tmp22_m2_next, tmp22_m2)
        tmp22_weight = tl.where(rmask & xmask, tmp22_weight_next, tmp22_weight)
        tl.store(out_ptr0 + (r5 + 20480*x4), tmp20, rmask & xmask)
    tmp22_tmp, tmp23_tmp, tmp24_tmp = triton_helpers.welford(
        tmp22_mean, tmp22_m2, tmp22_weight, 1
    )
    tmp22 = tmp22_tmp[:, None]
    tmp23 = tmp23_tmp[:, None]
    tmp24 = tmp24_tmp[:, None]
    tl.store(out_ptr1 + (x4), tmp22, xmask)
    tmp25 = 20480.0
    tmp26 = tmp23 / tmp25
    tmp27 = 1e-05
    tmp28 = tmp26 + tmp27
    tmp29 = libdevice.rsqrt(tmp28)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x4), tmp29, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/m5/cm52qeodmrhlosqzjflgykduphsicedraheipqhzzrb3qmznx4f7.py
# Topologically Sorted Source Nodes: [hidden_states_462, hidden_states_463], Original ATen: [aten.native_group_norm, aten.silu]
# Source node to ATen node mapping:
#   hidden_states_462 => add_647, mul_652
#   hidden_states_463 => mul_653, sigmoid_82
# Graph fragment:
#   %mul_652 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1956, %unsqueeze_504), kwargs = {})
#   %add_647 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_652, %unsqueeze_501), kwargs = {})
#   %sigmoid_82 : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%add_647,), kwargs = {})
#   %mul_653 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_647, %sigmoid_82), kwargs = {})
triton_poi_fused_native_group_norm_silu_124 = async_compile.triton('triton_poi_fused_native_group_norm_silu_124', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 4194304}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_native_group_norm_silu_124', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_native_group_norm_silu_124(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 2621440
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x4 = xindex // 1024
    x1 = ((xindex // 1024) % 640)
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr1 + (x4 // 20), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr2 + (x4 // 20), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
    tmp2 = tmp0 - tmp1
    tmp4 = tmp2 * tmp3
    tmp6 = tmp4 * tmp5
    tmp8 = tmp6 + tmp7
    tmp9 = tl.sigmoid(tmp8)
    tmp10 = tmp8 * tmp9
    tl.store(in_out_ptr0 + (x3), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_elicer/q7/cq7awhyhaj2vue6auwduql6tcex3vvabxx6pxgv7tvml5f56cfen.py
# Topologically Sorted Source Nodes: [result_864, mul_310, result_865], Original ATen: [aten.convolution, aten.mul, aten.add]
# Source node to ATen node mapping:
#   mul_310 => mul_722
#   result_864 => convolution_277
#   result_865 => add_718
# Graph fragment:
#   %convolution_277 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%mul_721, %primals_1372, %primals_1373, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
#   %mul_722 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_279, 1.0), kwargs = {})
#   %add_718 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_277, %mul_722), kwargs = {})
triton_poi_fused_add_convolution_mul_125 = async_compile.triton('triton_poi_fused_add_convolution_mul_125', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16384}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=42, cc=80, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_mul_125', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'D805D6112358B1404BAFE009681C8B83D24CEB9D69C06D6B675EC44CAB42D254', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_convolution_mul_125(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x3 = xindex
    x1 = ((xindex // 1024) % 4)
    tmp0 = tl.load(in_out_ptr0 + (x3), None)
    tmp1 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x3), None)
    tmp2 = tmp0 + tmp1
    tmp4 = 1.0
    tmp5 = tmp3 * tmp4
    tmp6 = tmp2 + tmp5
    tl.store(in_out_ptr0 + (x3), tmp6, None)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_128, primals_129, primals_130, primals_131, primals_132, primals_133, primals_134, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_144, primals_145, primals_146, primals_147, primals_148, primals_149, primals_150, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_160, primals_161, primals_162, primals_163, primals_164, primals_165, primals_166, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_176, primals_177, primals_178, primals_179, primals_180, primals_181, primals_182, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_192, primals_193, primals_194, primals_195, primals_196, primals_197, primals_198, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_208, primals_209, primals_210, primals_211, primals_212, primals_213, primals_214, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_224, primals_225, primals_226, primals_227, primals_228, primals_229, primals_230, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_240, primals_241, primals_242, primals_243, primals_244, primals_245, primals_246, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_256, primals_257, primals_258, primals_259, primals_260, primals_261, primals_262, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_272, primals_273, primals_274, primals_275, primals_276, primals_277, primals_278, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_288, primals_289, primals_290, primals_291, primals_292, primals_293, primals_294, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_304, primals_305, primals_306, primals_307, primals_308, primals_309, primals_310, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_320, primals_321, primals_322, primals_323, primals_324, primals_325, primals_326, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_336, primals_337, primals_338, primals_339, primals_340, primals_341, primals_342, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_352, primals_353, primals_354, primals_355, primals_356, primals_357, primals_358, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_368, primals_369, primals_370, primals_371, primals_372, primals_373, primals_374, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_384, primals_385, primals_386, primals_387, primals_388, primals_389, primals_390, primals_391, primals_392, primals_393, primals_394, primals_395, primals_396, primals_397, primals_398, primals_399, primals_400, primals_401, primals_402, primals_403, primals_404, primals_405, primals_406, primals_407, primals_408, primals_409, primals_410, primals_411, primals_412, primals_413, primals_414, primals_415, primals_416, primals_417, primals_418, primals_419, primals_420, primals_421, primals_422, primals_423, primals_424, primals_425, primals_426, primals_427, primals_428, primals_429, primals_430, primals_431, primals_432, primals_433, primals_434, primals_435, primals_436, primals_437, primals_438, primals_439, primals_440, primals_441, primals_442, primals_443, primals_444, primals_445, primals_446, primals_447, primals_448, primals_449, primals_450, primals_451, primals_452, primals_453, primals_454, primals_455, primals_456, primals_457, primals_458, primals_459, primals_460, primals_461, primals_462, primals_463, primals_464, primals_465, primals_466, primals_467, primals_468, primals_469, primals_470, primals_471, primals_472, primals_473, primals_474, primals_475, primals_476, primals_477, primals_478, primals_479, primals_480, primals_481, primals_482, primals_483, primals_484, primals_485, primals_486, primals_487, primals_488, primals_489, primals_490, primals_491, primals_492, primals_493, primals_494, primals_495, primals_496, primals_497, primals_498, primals_499, primals_500, primals_501, primals_502, primals_503, primals_504, primals_505, primals_506, primals_507, primals_508, primals_509, primals_510, primals_511, primals_512, primals_513, primals_514, primals_515, primals_516, primals_517, primals_518, primals_519, primals_520, primals_521, primals_522, primals_523, primals_524, primals_525, primals_526, primals_527, primals_528, primals_529, primals_530, primals_531, primals_532, primals_533, primals_534, primals_535, primals_536, primals_537, primals_538, primals_539, primals_540, primals_541, primals_542, primals_543, primals_544, primals_545, primals_546, primals_547, primals_548, primals_549, primals_550, primals_551, primals_552, primals_553, primals_554, primals_555, primals_556, primals_557, primals_558, primals_559, primals_560, primals_561, primals_562, primals_563, primals_564, primals_565, primals_566, primals_567, primals_568, primals_569, primals_570, primals_571, primals_572, primals_573, primals_574, primals_575, primals_576, primals_577, primals_578, primals_579, primals_580, primals_581, primals_582, primals_583, primals_584, primals_585, primals_586, primals_587, primals_588, primals_589, primals_590, primals_591, primals_592, primals_593, primals_594, primals_595, primals_596, primals_597, primals_598, primals_599, primals_600, primals_601, primals_602, primals_603, primals_604, primals_605, primals_606, primals_607, primals_608, primals_609, primals_610, primals_611, primals_612, primals_613, primals_614, primals_615, primals_616, primals_617, primals_618, primals_619, primals_620, primals_621, primals_622, primals_623, primals_624, primals_625, primals_626, primals_627, primals_628, primals_629, primals_630, primals_631, primals_632, primals_633, primals_634, primals_635, primals_636, primals_637, primals_638, primals_639, primals_640, primals_641, primals_642, primals_643, primals_644, primals_645, primals_646, primals_647, primals_648, primals_649, primals_650, primals_651, primals_652, primals_653, primals_654, primals_655, primals_656, primals_657, primals_658, primals_659, primals_660, primals_661, primals_662, primals_663, primals_664, primals_665, primals_666, primals_667, primals_668, primals_669, primals_670, primals_671, primals_672, primals_673, primals_674, primals_675, primals_676, primals_677, primals_678, primals_679, primals_680, primals_681, primals_682, primals_683, primals_684, primals_685, primals_686, primals_687, primals_688, primals_689, primals_690, primals_691, primals_692, primals_693, primals_694, primals_695, primals_696, primals_697, primals_698, primals_699, primals_700, primals_701, primals_702, primals_703, primals_704, primals_705, primals_706, primals_707, primals_708, primals_709, primals_710, primals_711, primals_712, primals_713, primals_714, primals_715, primals_716, primals_717, primals_718, primals_719, primals_720, primals_721, primals_722, primals_723, primals_724, primals_725, primals_726, primals_727, primals_728, primals_729, primals_730, primals_731, primals_732, primals_733, primals_734, primals_735, primals_736, primals_737, primals_738, primals_739, primals_740, primals_741, primals_742, primals_743, primals_744, primals_745, primals_746, primals_747, primals_748, primals_749, primals_750, primals_751, primals_752, primals_753, primals_754, primals_755, primals_756, primals_757, primals_758, primals_759, primals_760, primals_761, primals_762, primals_763, primals_764, primals_765, primals_766, primals_767, primals_768, primals_769, primals_770, primals_771, primals_772, primals_773, primals_774, primals_775, primals_776, primals_777, primals_778, primals_779, primals_780, primals_781, primals_782, primals_783, primals_784, primals_785, primals_786, primals_787, primals_788, primals_789, primals_790, primals_791, primals_792, primals_793, primals_794, primals_795, primals_796, primals_797, primals_798, primals_799, primals_800, primals_801, primals_802, primals_803, primals_804, primals_805, primals_806, primals_807, primals_808, primals_809, primals_810, primals_811, primals_812, primals_813, primals_814, primals_815, primals_816, primals_817, primals_818, primals_819, primals_820, primals_821, primals_822, primals_823, primals_824, primals_825, primals_826, primals_827, primals_828, primals_829, primals_830, primals_831, primals_832, primals_833, primals_834, primals_835, primals_836, primals_837, primals_838, primals_839, primals_840, primals_841, primals_842, primals_843, primals_844, primals_845, primals_846, primals_847, primals_848, primals_849, primals_850, primals_851, primals_852, primals_853, primals_854, primals_855, primals_856, primals_857, primals_858, primals_859, primals_860, primals_861, primals_862, primals_863, primals_864, primals_865, primals_866, primals_867, primals_868, primals_869, primals_870, primals_871, primals_872, primals_873, primals_874, primals_875, primals_876, primals_877, primals_878, primals_879, primals_880, primals_881, primals_882, primals_883, primals_884, primals_885, primals_886, primals_887, primals_888, primals_889, primals_890, primals_891, primals_892, primals_893, primals_894, primals_895, primals_896, primals_897, primals_898, primals_899, primals_900, primals_901, primals_902, primals_903, primals_904, primals_905, primals_906, primals_907, primals_908, primals_909, primals_910, primals_911, primals_912, primals_913, primals_914, primals_915, primals_916, primals_917, primals_918, primals_919, primals_920, primals_921, primals_922, primals_923, primals_924, primals_925, primals_926, primals_927, primals_928, primals_929, primals_930, primals_931, primals_932, primals_933, primals_934, primals_935, primals_936, primals_937, primals_938, primals_939, primals_940, primals_941, primals_942, primals_943, primals_944, primals_945, primals_946, primals_947, primals_948, primals_949, primals_950, primals_951, primals_952, primals_953, primals_954, primals_955, primals_956, primals_957, primals_958, primals_959, primals_960, primals_961, primals_962, primals_963, primals_964, primals_965, primals_966, primals_967, primals_968, primals_969, primals_970, primals_971, primals_972, primals_973, primals_974, primals_975, primals_976, primals_977, primals_978, primals_979, primals_980, primals_981, primals_982, primals_983, primals_984, primals_985, primals_986, primals_987, primals_988, primals_989, primals_990, primals_991, primals_992, primals_993, primals_994, primals_995, primals_996, primals_997, primals_998, primals_999, primals_1000, primals_1001, primals_1002, primals_1003, primals_1004, primals_1005, primals_1006, primals_1007, primals_1008, primals_1009, primals_1010, primals_1011, primals_1012, primals_1013, primals_1014, primals_1015, primals_1016, primals_1017, primals_1018, primals_1019, primals_1020, primals_1021, primals_1022, primals_1023, primals_1024, primals_1025, primals_1026, primals_1027, primals_1028, primals_1029, primals_1030, primals_1031, primals_1032, primals_1033, primals_1034, primals_1035, primals_1036, primals_1037, primals_1038, primals_1039, primals_1040, primals_1041, primals_1042, primals_1043, primals_1044, primals_1045, primals_1046, primals_1047, primals_1048, primals_1049, primals_1050, primals_1051, primals_1052, primals_1053, primals_1054, primals_1055, primals_1056, primals_1057, primals_1058, primals_1059, primals_1060, primals_1061, primals_1062, primals_1063, primals_1064, primals_1065, primals_1066, primals_1067, primals_1068, primals_1069, primals_1070, primals_1071, primals_1072, primals_1073, primals_1074, primals_1075, primals_1076, primals_1077, primals_1078, primals_1079, primals_1080, primals_1081, primals_1082, primals_1083, primals_1084, primals_1085, primals_1086, primals_1087, primals_1088, primals_1089, primals_1090, primals_1091, primals_1092, primals_1093, primals_1094, primals_1095, primals_1096, primals_1097, primals_1098, primals_1099, primals_1100, primals_1101, primals_1102, primals_1103, primals_1104, primals_1105, primals_1106, primals_1107, primals_1108, primals_1109, primals_1110, primals_1111, primals_1112, primals_1113, primals_1114, primals_1115, primals_1116, primals_1117, primals_1118, primals_1119, primals_1120, primals_1121, primals_1122, primals_1123, primals_1124, primals_1125, primals_1126, primals_1127, primals_1128, primals_1129, primals_1130, primals_1131, primals_1132, primals_1133, primals_1134, primals_1135, primals_1136, primals_1137, primals_1138, primals_1139, primals_1140, primals_1141, primals_1142, primals_1143, primals_1144, primals_1145, primals_1146, primals_1147, primals_1148, primals_1149, primals_1150, primals_1151, primals_1152, primals_1153, primals_1154, primals_1155, primals_1156, primals_1157, primals_1158, primals_1159, primals_1160, primals_1161, primals_1162, primals_1163, primals_1164, primals_1165, primals_1166, primals_1167, primals_1168, primals_1169, primals_1170, primals_1171, primals_1172, primals_1173, primals_1174, primals_1175, primals_1176, primals_1177, primals_1178, primals_1179, primals_1180, primals_1181, primals_1182, primals_1183, primals_1184, primals_1185, primals_1186, primals_1187, primals_1188, primals_1189, primals_1190, primals_1191, primals_1192, primals_1193, primals_1194, primals_1195, primals_1196, primals_1197, primals_1198, primals_1199, primals_1200, primals_1201, primals_1202, primals_1203, primals_1204, primals_1205, primals_1206, primals_1207, primals_1208, primals_1209, primals_1210, primals_1211, primals_1212, primals_1213, primals_1214, primals_1215, primals_1216, primals_1217, primals_1218, primals_1219, primals_1220, primals_1221, primals_1222, primals_1223, primals_1224, primals_1225, primals_1226, primals_1227, primals_1228, primals_1229, primals_1230, primals_1231, primals_1232, primals_1233, primals_1234, primals_1235, primals_1236, primals_1237, primals_1238, primals_1239, primals_1240, primals_1241, primals_1242, primals_1243, primals_1244, primals_1245, primals_1246, primals_1247, primals_1248, primals_1249, primals_1250, primals_1251, primals_1252, primals_1253, primals_1254, primals_1255, primals_1256, primals_1257, primals_1258, primals_1259, primals_1260, primals_1261, primals_1262, primals_1263, primals_1264, primals_1265, primals_1266, primals_1267, primals_1268, primals_1269, primals_1270, primals_1271, primals_1272, primals_1273, primals_1274, primals_1275, primals_1276, primals_1277, primals_1278, primals_1279, primals_1280, primals_1281, primals_1282, primals_1283, primals_1284, primals_1285, primals_1286, primals_1287, primals_1288, primals_1289, primals_1290, primals_1291, primals_1292, primals_1293, primals_1294, primals_1295, primals_1296, primals_1297, primals_1298, primals_1299, primals_1300, primals_1301, primals_1302, primals_1303, primals_1304, primals_1305, primals_1306, primals_1307, primals_1308, primals_1309, primals_1310, primals_1311, primals_1312, primals_1313, primals_1314, primals_1315, primals_1316, primals_1317, primals_1318, primals_1319, primals_1320, primals_1321, primals_1322, primals_1323, primals_1324, primals_1325, primals_1326, primals_1327, primals_1328, primals_1329, primals_1330, primals_1331, primals_1332, primals_1333, primals_1334, primals_1335, primals_1336, primals_1337, primals_1338, primals_1339, primals_1340, primals_1341, primals_1342, primals_1343, primals_1344, primals_1345, primals_1346, primals_1347, primals_1348, primals_1349, primals_1350, primals_1351, primals_1352, primals_1353, primals_1354, primals_1355, primals_1356, primals_1357, primals_1358, primals_1359, primals_1360, primals_1361, primals_1362, primals_1363, primals_1364, primals_1365, primals_1366, primals_1367, primals_1368, primals_1369, primals_1370, primals_1371, primals_1372, primals_1373, primals_1374, primals_1375 = args
    args.clear()
    assert_size_stride(primals_1, (4, 3, 256, 256), (196608, 65536, 256, 1))
    assert_size_stride(primals_2, (128, 3, 3, 3), (27, 9, 3, 1))
    assert_size_stride(primals_3, (128, ), (1, ))
    assert_size_stride(primals_4, (4, 3, 3, 3), (27, 9, 3, 1))
    assert_size_stride(primals_5, (128, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_6, (128, ), (1, ))
    assert_size_stride(primals_7, (128, ), (1, ))
    assert_size_stride(primals_8, (128, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_9, (128, ), (1, ))
    assert_size_stride(primals_10, (4, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_11, (128, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_12, (128, ), (1, ))
    assert_size_stride(primals_13, (128, ), (1, ))
    assert_size_stride(primals_14, (128, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_15, (128, ), (1, ))
    assert_size_stride(primals_16, (4, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_17, (128, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_18, (128, ), (1, ))
    assert_size_stride(primals_19, (128, ), (1, ))
    assert_size_stride(primals_20, (128, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_21, (128, ), (1, ))
    assert_size_stride(primals_22, (4, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_23, (128, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_24, (128, ), (1, ))
    assert_size_stride(primals_25, (128, ), (1, ))
    assert_size_stride(primals_26, (128, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_27, (128, ), (1, ))
    assert_size_stride(primals_28, (4, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_29, (128, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_30, (128, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_31, (128, ), (1, ))
    assert_size_stride(primals_32, (4, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_33, (128, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_34, (128, ), (1, ))
    assert_size_stride(primals_35, (128, ), (1, ))
    assert_size_stride(primals_36, (256, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_37, (256, ), (1, ))
    assert_size_stride(primals_38, (4, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_39, (256, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_40, (256, ), (1, ))
    assert_size_stride(primals_41, (256, ), (1, ))
    assert_size_stride(primals_42, (256, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_43, (256, ), (1, ))
    assert_size_stride(primals_44, (4, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_45, (256, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_46, (256, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(primals_47, (256, ), (1, ))
    assert_size_stride(primals_48, (4, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(primals_49, (256, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_50, (256, ), (1, ))
    assert_size_stride(primals_51, (256, ), (1, ))
    assert_size_stride(primals_52, (256, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_53, (256, ), (1, ))
    assert_size_stride(primals_54, (4, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_55, (256, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_56, (256, ), (1, ))
    assert_size_stride(primals_57, (256, ), (1, ))
    assert_size_stride(primals_58, (256, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_59, (256, ), (1, ))
    assert_size_stride(primals_60, (4, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_61, (256, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_62, (256, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_63, (256, ), (1, ))
    assert_size_stride(primals_64, (4, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_65, (256, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_66, (256, ), (1, ))
    assert_size_stride(primals_67, (256, ), (1, ))
    assert_size_stride(primals_68, (512, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_69, (512, ), (1, ))
    assert_size_stride(primals_70, (4, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(primals_71, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_72, (512, ), (1, ))
    assert_size_stride(primals_73, (512, ), (1, ))
    assert_size_stride(primals_74, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_75, (512, ), (1, ))
    assert_size_stride(primals_76, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_77, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_78, (512, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_79, (512, ), (1, ))
    assert_size_stride(primals_80, (4, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_81, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_82, (512, ), (1, ))
    assert_size_stride(primals_83, (512, ), (1, ))
    assert_size_stride(primals_84, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_85, (512, ), (1, ))
    assert_size_stride(primals_86, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_87, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_88, (512, ), (1, ))
    assert_size_stride(primals_89, (512, ), (1, ))
    assert_size_stride(primals_90, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_91, (512, ), (1, ))
    assert_size_stride(primals_92, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_93, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_94, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_95, (512, ), (1, ))
    assert_size_stride(primals_96, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_97, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_98, (512, ), (1, ))
    assert_size_stride(primals_99, (512, ), (1, ))
    assert_size_stride(primals_100, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_101, (512, ), (1, ))
    assert_size_stride(primals_102, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_103, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_104, (512, ), (1, ))
    assert_size_stride(primals_105, (512, ), (1, ))
    assert_size_stride(primals_106, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_107, (512, ), (1, ))
    assert_size_stride(primals_108, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_109, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_110, (512, ), (1, ))
    assert_size_stride(primals_111, (512, ), (1, ))
    assert_size_stride(primals_112, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_113, (512, ), (1, ))
    assert_size_stride(primals_114, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_115, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_116, (512, ), (1, ))
    assert_size_stride(primals_117, (512, ), (1, ))
    assert_size_stride(primals_118, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_119, (512, ), (1, ))
    assert_size_stride(primals_120, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_121, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_122, (512, ), (1, ))
    assert_size_stride(primals_123, (512, ), (1, ))
    assert_size_stride(primals_124, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_125, (512, ), (1, ))
    assert_size_stride(primals_126, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_127, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_128, (512, ), (1, ))
    assert_size_stride(primals_129, (512, ), (1, ))
    assert_size_stride(primals_130, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_131, (512, ), (1, ))
    assert_size_stride(primals_132, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_133, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_134, (512, ), (1, ))
    assert_size_stride(primals_135, (512, ), (1, ))
    assert_size_stride(primals_136, (512, 512), (512, 1))
    assert_size_stride(primals_137, (512, ), (1, ))
    assert_size_stride(primals_138, (4, 512), (512, 1))
    assert_size_stride(primals_139, (512, 4), (4, 1))
    assert_size_stride(primals_140, (512, 512), (512, 1))
    assert_size_stride(primals_141, (512, ), (1, ))
    assert_size_stride(primals_142, (4, 512), (512, 1))
    assert_size_stride(primals_143, (512, 4), (4, 1))
    assert_size_stride(primals_144, (512, 512), (512, 1))
    assert_size_stride(primals_145, (512, ), (1, ))
    assert_size_stride(primals_146, (4, 512), (512, 1))
    assert_size_stride(primals_147, (512, 4), (4, 1))
    assert_size_stride(primals_148, (512, 512), (512, 1))
    assert_size_stride(primals_149, (512, ), (1, ))
    assert_size_stride(primals_150, (4, 512), (512, 1))
    assert_size_stride(primals_151, (512, 4), (4, 1))
    assert_size_stride(primals_152, (512, ), (1, ))
    assert_size_stride(primals_153, (512, ), (1, ))
    assert_size_stride(primals_154, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_155, (512, ), (1, ))
    assert_size_stride(primals_156, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_157, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_158, (512, ), (1, ))
    assert_size_stride(primals_159, (512, ), (1, ))
    assert_size_stride(primals_160, (512, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_161, (512, ), (1, ))
    assert_size_stride(primals_162, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_163, (512, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_164, (512, ), (1, ))
    assert_size_stride(primals_165, (512, ), (1, ))
    assert_size_stride(primals_166, (8, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_167, (8, ), (1, ))
    assert_size_stride(primals_168, (4, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(primals_169, (8, 4, 1, 1), (4, 1, 1, 1))
    assert_size_stride(primals_170, (8, 8, 1, 1), (8, 1, 1, 1))
    assert_size_stride(primals_171, (8, ), (1, ))
    assert_size_stride(primals_172, (1, ), (1, ))
    assert_size_stride(primals_173, (1280, 320), (320, 1))
    assert_size_stride(primals_174, (1280, ), (1, ))
    assert_size_stride(primals_175, (1280, 1280), (1280, 1))
    assert_size_stride(primals_176, (1280, ), (1, ))
    assert_size_stride(primals_177, (4, 77, 1024), (78848, 1024, 1))
    assert_size_stride(primals_178, (320, 4, 3, 3), (36, 9, 3, 1))
    assert_size_stride(primals_179, (320, ), (1, ))
    assert_size_stride(primals_180, (80, 4, 3, 3), (36, 9, 3, 1))
    assert_size_stride(primals_181, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_182, (320, ), (1, ))
    assert_size_stride(primals_183, (320, ), (1, ))
    assert_size_stride(primals_184, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_185, (320, ), (1, ))
    assert_size_stride(primals_186, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_187, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_188, (320, 1280), (1280, 1))
    assert_size_stride(primals_189, (320, ), (1, ))
    assert_size_stride(primals_190, (320, ), (1, ))
    assert_size_stride(primals_191, (320, ), (1, ))
    assert_size_stride(primals_192, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_193, (320, ), (1, ))
    assert_size_stride(primals_194, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_195, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_196, (320, ), (1, ))
    assert_size_stride(primals_197, (320, ), (1, ))
    assert_size_stride(primals_198, (320, 320), (320, 1))
    assert_size_stride(primals_199, (320, ), (1, ))
    assert_size_stride(primals_200, (80, 320), (320, 1))
    assert_size_stride(primals_201, (320, 80), (80, 1))
    assert_size_stride(primals_202, (320, ), (1, ))
    assert_size_stride(primals_203, (320, ), (1, ))
    assert_size_stride(primals_204, (320, 320), (320, 1))
    assert_size_stride(primals_205, (80, 320), (320, 1))
    assert_size_stride(primals_206, (320, 80), (80, 1))
    assert_size_stride(primals_207, (320, 320), (320, 1))
    assert_size_stride(primals_208, (80, 320), (320, 1))
    assert_size_stride(primals_209, (320, 80), (80, 1))
    assert_size_stride(primals_210, (320, 320), (320, 1))
    assert_size_stride(primals_211, (80, 320), (320, 1))
    assert_size_stride(primals_212, (320, 80), (80, 1))
    assert_size_stride(primals_213, (320, 320), (320, 1))
    assert_size_stride(primals_214, (320, ), (1, ))
    assert_size_stride(primals_215, (80, 320), (320, 1))
    assert_size_stride(primals_216, (320, 80), (80, 1))
    assert_size_stride(primals_217, (320, ), (1, ))
    assert_size_stride(primals_218, (320, ), (1, ))
    assert_size_stride(primals_219, (320, 320), (320, 1))
    assert_size_stride(primals_220, (80, 320), (320, 1))
    assert_size_stride(primals_221, (320, 80), (80, 1))
    assert_size_stride(primals_222, (320, 1024), (1024, 1))
    assert_size_stride(primals_223, (80, 1024), (1024, 1))
    assert_size_stride(primals_224, (320, 80), (80, 1))
    assert_size_stride(primals_225, (320, 1024), (1024, 1))
    assert_size_stride(primals_226, (80, 1024), (1024, 1))
    assert_size_stride(primals_227, (320, 80), (80, 1))
    assert_size_stride(primals_228, (320, 320), (320, 1))
    assert_size_stride(primals_229, (320, ), (1, ))
    assert_size_stride(primals_230, (80, 320), (320, 1))
    assert_size_stride(primals_231, (320, 80), (80, 1))
    assert_size_stride(primals_232, (320, ), (1, ))
    assert_size_stride(primals_233, (320, ), (1, ))
    assert_size_stride(primals_234, (2560, 320), (320, 1))
    assert_size_stride(primals_235, (2560, ), (1, ))
    assert_size_stride(primals_236, (80, 320), (320, 1))
    assert_size_stride(primals_237, (2560, 80), (80, 1))
    assert_size_stride(primals_238, (320, 1280), (1280, 1))
    assert_size_stride(primals_239, (320, ), (1, ))
    assert_size_stride(primals_240, (80, 1280), (1280, 1))
    assert_size_stride(primals_241, (320, 80), (80, 1))
    assert_size_stride(primals_242, (320, 320), (320, 1))
    assert_size_stride(primals_243, (320, ), (1, ))
    assert_size_stride(primals_244, (80, 320), (320, 1))
    assert_size_stride(primals_245, (320, 80), (80, 1))
    assert_size_stride(primals_246, (320, ), (1, ))
    assert_size_stride(primals_247, (320, ), (1, ))
    assert_size_stride(primals_248, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_249, (320, ), (1, ))
    assert_size_stride(primals_250, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_251, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_252, (320, 1280), (1280, 1))
    assert_size_stride(primals_253, (320, ), (1, ))
    assert_size_stride(primals_254, (320, ), (1, ))
    assert_size_stride(primals_255, (320, ), (1, ))
    assert_size_stride(primals_256, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_257, (320, ), (1, ))
    assert_size_stride(primals_258, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_259, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_260, (320, ), (1, ))
    assert_size_stride(primals_261, (320, ), (1, ))
    assert_size_stride(primals_262, (320, 320), (320, 1))
    assert_size_stride(primals_263, (320, ), (1, ))
    assert_size_stride(primals_264, (80, 320), (320, 1))
    assert_size_stride(primals_265, (320, 80), (80, 1))
    assert_size_stride(primals_266, (320, ), (1, ))
    assert_size_stride(primals_267, (320, ), (1, ))
    assert_size_stride(primals_268, (320, 320), (320, 1))
    assert_size_stride(primals_269, (80, 320), (320, 1))
    assert_size_stride(primals_270, (320, 80), (80, 1))
    assert_size_stride(primals_271, (320, 320), (320, 1))
    assert_size_stride(primals_272, (80, 320), (320, 1))
    assert_size_stride(primals_273, (320, 80), (80, 1))
    assert_size_stride(primals_274, (320, 320), (320, 1))
    assert_size_stride(primals_275, (80, 320), (320, 1))
    assert_size_stride(primals_276, (320, 80), (80, 1))
    assert_size_stride(primals_277, (320, 320), (320, 1))
    assert_size_stride(primals_278, (320, ), (1, ))
    assert_size_stride(primals_279, (80, 320), (320, 1))
    assert_size_stride(primals_280, (320, 80), (80, 1))
    assert_size_stride(primals_281, (320, ), (1, ))
    assert_size_stride(primals_282, (320, ), (1, ))
    assert_size_stride(primals_283, (320, 320), (320, 1))
    assert_size_stride(primals_284, (80, 320), (320, 1))
    assert_size_stride(primals_285, (320, 80), (80, 1))
    assert_size_stride(primals_286, (320, 1024), (1024, 1))
    assert_size_stride(primals_287, (80, 1024), (1024, 1))
    assert_size_stride(primals_288, (320, 80), (80, 1))
    assert_size_stride(primals_289, (320, 1024), (1024, 1))
    assert_size_stride(primals_290, (80, 1024), (1024, 1))
    assert_size_stride(primals_291, (320, 80), (80, 1))
    assert_size_stride(primals_292, (320, 320), (320, 1))
    assert_size_stride(primals_293, (320, ), (1, ))
    assert_size_stride(primals_294, (80, 320), (320, 1))
    assert_size_stride(primals_295, (320, 80), (80, 1))
    assert_size_stride(primals_296, (320, ), (1, ))
    assert_size_stride(primals_297, (320, ), (1, ))
    assert_size_stride(primals_298, (2560, 320), (320, 1))
    assert_size_stride(primals_299, (2560, ), (1, ))
    assert_size_stride(primals_300, (80, 320), (320, 1))
    assert_size_stride(primals_301, (2560, 80), (80, 1))
    assert_size_stride(primals_302, (320, 1280), (1280, 1))
    assert_size_stride(primals_303, (320, ), (1, ))
    assert_size_stride(primals_304, (80, 1280), (1280, 1))
    assert_size_stride(primals_305, (320, 80), (80, 1))
    assert_size_stride(primals_306, (320, 320), (320, 1))
    assert_size_stride(primals_307, (320, ), (1, ))
    assert_size_stride(primals_308, (80, 320), (320, 1))
    assert_size_stride(primals_309, (320, 80), (80, 1))
    assert_size_stride(primals_310, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_311, (320, ), (1, ))
    assert_size_stride(primals_312, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_313, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_314, (320, ), (1, ))
    assert_size_stride(primals_315, (320, ), (1, ))
    assert_size_stride(primals_316, (640, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_317, (640, ), (1, ))
    assert_size_stride(primals_318, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_319, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_320, (640, 1280), (1280, 1))
    assert_size_stride(primals_321, (640, ), (1, ))
    assert_size_stride(primals_322, (640, ), (1, ))
    assert_size_stride(primals_323, (640, ), (1, ))
    assert_size_stride(primals_324, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_325, (640, ), (1, ))
    assert_size_stride(primals_326, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_327, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_328, (640, 320, 1, 1), (320, 1, 1, 1))
    assert_size_stride(primals_329, (640, ), (1, ))
    assert_size_stride(primals_330, (80, 320, 1, 1), (320, 1, 1, 1))
    assert_size_stride(primals_331, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_332, (640, ), (1, ))
    assert_size_stride(primals_333, (640, ), (1, ))
    assert_size_stride(primals_334, (640, 640), (640, 1))
    assert_size_stride(primals_335, (640, ), (1, ))
    assert_size_stride(primals_336, (80, 640), (640, 1))
    assert_size_stride(primals_337, (640, 80), (80, 1))
    assert_size_stride(primals_338, (640, ), (1, ))
    assert_size_stride(primals_339, (640, ), (1, ))
    assert_size_stride(primals_340, (640, 640), (640, 1))
    assert_size_stride(primals_341, (80, 640), (640, 1))
    assert_size_stride(primals_342, (640, 80), (80, 1))
    assert_size_stride(primals_343, (640, 640), (640, 1))
    assert_size_stride(primals_344, (80, 640), (640, 1))
    assert_size_stride(primals_345, (640, 80), (80, 1))
    assert_size_stride(primals_346, (640, 640), (640, 1))
    assert_size_stride(primals_347, (80, 640), (640, 1))
    assert_size_stride(primals_348, (640, 80), (80, 1))
    assert_size_stride(primals_349, (640, 640), (640, 1))
    assert_size_stride(primals_350, (640, ), (1, ))
    assert_size_stride(primals_351, (80, 640), (640, 1))
    assert_size_stride(primals_352, (640, 80), (80, 1))
    assert_size_stride(primals_353, (640, ), (1, ))
    assert_size_stride(primals_354, (640, ), (1, ))
    assert_size_stride(primals_355, (640, 640), (640, 1))
    assert_size_stride(primals_356, (80, 640), (640, 1))
    assert_size_stride(primals_357, (640, 80), (80, 1))
    assert_size_stride(primals_358, (640, 1024), (1024, 1))
    assert_size_stride(primals_359, (80, 1024), (1024, 1))
    assert_size_stride(primals_360, (640, 80), (80, 1))
    assert_size_stride(primals_361, (640, 1024), (1024, 1))
    assert_size_stride(primals_362, (80, 1024), (1024, 1))
    assert_size_stride(primals_363, (640, 80), (80, 1))
    assert_size_stride(primals_364, (640, 640), (640, 1))
    assert_size_stride(primals_365, (640, ), (1, ))
    assert_size_stride(primals_366, (80, 640), (640, 1))
    assert_size_stride(primals_367, (640, 80), (80, 1))
    assert_size_stride(primals_368, (640, ), (1, ))
    assert_size_stride(primals_369, (640, ), (1, ))
    assert_size_stride(primals_370, (5120, 640), (640, 1))
    assert_size_stride(primals_371, (5120, ), (1, ))
    assert_size_stride(primals_372, (80, 640), (640, 1))
    assert_size_stride(primals_373, (5120, 80), (80, 1))
    assert_size_stride(primals_374, (640, 2560), (2560, 1))
    assert_size_stride(primals_375, (640, ), (1, ))
    assert_size_stride(primals_376, (80, 2560), (2560, 1))
    assert_size_stride(primals_377, (640, 80), (80, 1))
    assert_size_stride(primals_378, (640, 640), (640, 1))
    assert_size_stride(primals_379, (640, ), (1, ))
    assert_size_stride(primals_380, (80, 640), (640, 1))
    assert_size_stride(primals_381, (640, 80), (80, 1))
    assert_size_stride(primals_382, (640, ), (1, ))
    assert_size_stride(primals_383, (640, ), (1, ))
    assert_size_stride(primals_384, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_385, (640, ), (1, ))
    assert_size_stride(primals_386, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_387, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_388, (640, 1280), (1280, 1))
    assert_size_stride(primals_389, (640, ), (1, ))
    assert_size_stride(primals_390, (640, ), (1, ))
    assert_size_stride(primals_391, (640, ), (1, ))
    assert_size_stride(primals_392, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_393, (640, ), (1, ))
    assert_size_stride(primals_394, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_395, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_396, (640, ), (1, ))
    assert_size_stride(primals_397, (640, ), (1, ))
    assert_size_stride(primals_398, (640, 640), (640, 1))
    assert_size_stride(primals_399, (640, ), (1, ))
    assert_size_stride(primals_400, (80, 640), (640, 1))
    assert_size_stride(primals_401, (640, 80), (80, 1))
    assert_size_stride(primals_402, (640, ), (1, ))
    assert_size_stride(primals_403, (640, ), (1, ))
    assert_size_stride(primals_404, (640, 640), (640, 1))
    assert_size_stride(primals_405, (80, 640), (640, 1))
    assert_size_stride(primals_406, (640, 80), (80, 1))
    assert_size_stride(primals_407, (640, 640), (640, 1))
    assert_size_stride(primals_408, (80, 640), (640, 1))
    assert_size_stride(primals_409, (640, 80), (80, 1))
    assert_size_stride(primals_410, (640, 640), (640, 1))
    assert_size_stride(primals_411, (80, 640), (640, 1))
    assert_size_stride(primals_412, (640, 80), (80, 1))
    assert_size_stride(primals_413, (640, 640), (640, 1))
    assert_size_stride(primals_414, (640, ), (1, ))
    assert_size_stride(primals_415, (80, 640), (640, 1))
    assert_size_stride(primals_416, (640, 80), (80, 1))
    assert_size_stride(primals_417, (640, ), (1, ))
    assert_size_stride(primals_418, (640, ), (1, ))
    assert_size_stride(primals_419, (640, 640), (640, 1))
    assert_size_stride(primals_420, (80, 640), (640, 1))
    assert_size_stride(primals_421, (640, 80), (80, 1))
    assert_size_stride(primals_422, (640, 1024), (1024, 1))
    assert_size_stride(primals_423, (80, 1024), (1024, 1))
    assert_size_stride(primals_424, (640, 80), (80, 1))
    assert_size_stride(primals_425, (640, 1024), (1024, 1))
    assert_size_stride(primals_426, (80, 1024), (1024, 1))
    assert_size_stride(primals_427, (640, 80), (80, 1))
    assert_size_stride(primals_428, (640, 640), (640, 1))
    assert_size_stride(primals_429, (640, ), (1, ))
    assert_size_stride(primals_430, (80, 640), (640, 1))
    assert_size_stride(primals_431, (640, 80), (80, 1))
    assert_size_stride(primals_432, (640, ), (1, ))
    assert_size_stride(primals_433, (640, ), (1, ))
    assert_size_stride(primals_434, (5120, 640), (640, 1))
    assert_size_stride(primals_435, (5120, ), (1, ))
    assert_size_stride(primals_436, (80, 640), (640, 1))
    assert_size_stride(primals_437, (5120, 80), (80, 1))
    assert_size_stride(primals_438, (640, 2560), (2560, 1))
    assert_size_stride(primals_439, (640, ), (1, ))
    assert_size_stride(primals_440, (80, 2560), (2560, 1))
    assert_size_stride(primals_441, (640, 80), (80, 1))
    assert_size_stride(primals_442, (640, 640), (640, 1))
    assert_size_stride(primals_443, (640, ), (1, ))
    assert_size_stride(primals_444, (80, 640), (640, 1))
    assert_size_stride(primals_445, (640, 80), (80, 1))
    assert_size_stride(primals_446, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_447, (640, ), (1, ))
    assert_size_stride(primals_448, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_449, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_450, (640, ), (1, ))
    assert_size_stride(primals_451, (640, ), (1, ))
    assert_size_stride(primals_452, (1280, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_453, (1280, ), (1, ))
    assert_size_stride(primals_454, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_455, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_456, (1280, 1280), (1280, 1))
    assert_size_stride(primals_457, (1280, ), (1, ))
    assert_size_stride(primals_458, (1280, ), (1, ))
    assert_size_stride(primals_459, (1280, ), (1, ))
    assert_size_stride(primals_460, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_461, (1280, ), (1, ))
    assert_size_stride(primals_462, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_463, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_464, (1280, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_465, (1280, ), (1, ))
    assert_size_stride(primals_466, (80, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_467, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_468, (1280, ), (1, ))
    assert_size_stride(primals_469, (1280, ), (1, ))
    assert_size_stride(primals_470, (1280, 1280), (1280, 1))
    assert_size_stride(primals_471, (1280, ), (1, ))
    assert_size_stride(primals_472, (80, 1280), (1280, 1))
    assert_size_stride(primals_473, (1280, 80), (80, 1))
    assert_size_stride(primals_474, (1280, ), (1, ))
    assert_size_stride(primals_475, (1280, ), (1, ))
    assert_size_stride(primals_476, (1280, 1280), (1280, 1))
    assert_size_stride(primals_477, (80, 1280), (1280, 1))
    assert_size_stride(primals_478, (1280, 80), (80, 1))
    assert_size_stride(primals_479, (1280, 1280), (1280, 1))
    assert_size_stride(primals_480, (80, 1280), (1280, 1))
    assert_size_stride(primals_481, (1280, 80), (80, 1))
    assert_size_stride(primals_482, (1280, 1280), (1280, 1))
    assert_size_stride(primals_483, (80, 1280), (1280, 1))
    assert_size_stride(primals_484, (1280, 80), (80, 1))
    assert_size_stride(primals_485, (1280, 1280), (1280, 1))
    assert_size_stride(primals_486, (1280, ), (1, ))
    assert_size_stride(primals_487, (80, 1280), (1280, 1))
    assert_size_stride(primals_488, (1280, 80), (80, 1))
    assert_size_stride(primals_489, (1280, ), (1, ))
    assert_size_stride(primals_490, (1280, ), (1, ))
    assert_size_stride(primals_491, (1280, 1280), (1280, 1))
    assert_size_stride(primals_492, (80, 1280), (1280, 1))
    assert_size_stride(primals_493, (1280, 80), (80, 1))
    assert_size_stride(primals_494, (1280, 1024), (1024, 1))
    assert_size_stride(primals_495, (80, 1024), (1024, 1))
    assert_size_stride(primals_496, (1280, 80), (80, 1))
    assert_size_stride(primals_497, (1280, 1024), (1024, 1))
    assert_size_stride(primals_498, (80, 1024), (1024, 1))
    assert_size_stride(primals_499, (1280, 80), (80, 1))
    assert_size_stride(primals_500, (1280, 1280), (1280, 1))
    assert_size_stride(primals_501, (1280, ), (1, ))
    assert_size_stride(primals_502, (80, 1280), (1280, 1))
    assert_size_stride(primals_503, (1280, 80), (80, 1))
    assert_size_stride(primals_504, (1280, ), (1, ))
    assert_size_stride(primals_505, (1280, ), (1, ))
    assert_size_stride(primals_506, (10240, 1280), (1280, 1))
    assert_size_stride(primals_507, (10240, ), (1, ))
    assert_size_stride(primals_508, (80, 1280), (1280, 1))
    assert_size_stride(primals_509, (10240, 80), (80, 1))
    assert_size_stride(primals_510, (1280, 5120), (5120, 1))
    assert_size_stride(primals_511, (1280, ), (1, ))
    assert_size_stride(primals_512, (80, 5120), (5120, 1))
    assert_size_stride(primals_513, (1280, 80), (80, 1))
    assert_size_stride(primals_514, (1280, 1280), (1280, 1))
    assert_size_stride(primals_515, (1280, ), (1, ))
    assert_size_stride(primals_516, (80, 1280), (1280, 1))
    assert_size_stride(primals_517, (1280, 80), (80, 1))
    assert_size_stride(primals_518, (1280, ), (1, ))
    assert_size_stride(primals_519, (1280, ), (1, ))
    assert_size_stride(primals_520, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_521, (1280, ), (1, ))
    assert_size_stride(primals_522, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_523, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_524, (1280, 1280), (1280, 1))
    assert_size_stride(primals_525, (1280, ), (1, ))
    assert_size_stride(primals_526, (1280, ), (1, ))
    assert_size_stride(primals_527, (1280, ), (1, ))
    assert_size_stride(primals_528, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_529, (1280, ), (1, ))
    assert_size_stride(primals_530, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_531, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_532, (1280, ), (1, ))
    assert_size_stride(primals_533, (1280, ), (1, ))
    assert_size_stride(primals_534, (1280, 1280), (1280, 1))
    assert_size_stride(primals_535, (1280, ), (1, ))
    assert_size_stride(primals_536, (80, 1280), (1280, 1))
    assert_size_stride(primals_537, (1280, 80), (80, 1))
    assert_size_stride(primals_538, (1280, ), (1, ))
    assert_size_stride(primals_539, (1280, ), (1, ))
    assert_size_stride(primals_540, (1280, 1280), (1280, 1))
    assert_size_stride(primals_541, (80, 1280), (1280, 1))
    assert_size_stride(primals_542, (1280, 80), (80, 1))
    assert_size_stride(primals_543, (1280, 1280), (1280, 1))
    assert_size_stride(primals_544, (80, 1280), (1280, 1))
    assert_size_stride(primals_545, (1280, 80), (80, 1))
    assert_size_stride(primals_546, (1280, 1280), (1280, 1))
    assert_size_stride(primals_547, (80, 1280), (1280, 1))
    assert_size_stride(primals_548, (1280, 80), (80, 1))
    assert_size_stride(primals_549, (1280, 1280), (1280, 1))
    assert_size_stride(primals_550, (1280, ), (1, ))
    assert_size_stride(primals_551, (80, 1280), (1280, 1))
    assert_size_stride(primals_552, (1280, 80), (80, 1))
    assert_size_stride(primals_553, (1280, ), (1, ))
    assert_size_stride(primals_554, (1280, ), (1, ))
    assert_size_stride(primals_555, (1280, 1280), (1280, 1))
    assert_size_stride(primals_556, (80, 1280), (1280, 1))
    assert_size_stride(primals_557, (1280, 80), (80, 1))
    assert_size_stride(primals_558, (1280, 1024), (1024, 1))
    assert_size_stride(primals_559, (80, 1024), (1024, 1))
    assert_size_stride(primals_560, (1280, 80), (80, 1))
    assert_size_stride(primals_561, (1280, 1024), (1024, 1))
    assert_size_stride(primals_562, (80, 1024), (1024, 1))
    assert_size_stride(primals_563, (1280, 80), (80, 1))
    assert_size_stride(primals_564, (1280, 1280), (1280, 1))
    assert_size_stride(primals_565, (1280, ), (1, ))
    assert_size_stride(primals_566, (80, 1280), (1280, 1))
    assert_size_stride(primals_567, (1280, 80), (80, 1))
    assert_size_stride(primals_568, (1280, ), (1, ))
    assert_size_stride(primals_569, (1280, ), (1, ))
    assert_size_stride(primals_570, (10240, 1280), (1280, 1))
    assert_size_stride(primals_571, (10240, ), (1, ))
    assert_size_stride(primals_572, (80, 1280), (1280, 1))
    assert_size_stride(primals_573, (10240, 80), (80, 1))
    assert_size_stride(primals_574, (1280, 5120), (5120, 1))
    assert_size_stride(primals_575, (1280, ), (1, ))
    assert_size_stride(primals_576, (80, 5120), (5120, 1))
    assert_size_stride(primals_577, (1280, 80), (80, 1))
    assert_size_stride(primals_578, (1280, 1280), (1280, 1))
    assert_size_stride(primals_579, (1280, ), (1, ))
    assert_size_stride(primals_580, (80, 1280), (1280, 1))
    assert_size_stride(primals_581, (1280, 80), (80, 1))
    assert_size_stride(primals_582, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_583, (1280, ), (1, ))
    assert_size_stride(primals_584, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_585, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_586, (1280, ), (1, ))
    assert_size_stride(primals_587, (1280, ), (1, ))
    assert_size_stride(primals_588, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_589, (1280, ), (1, ))
    assert_size_stride(primals_590, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_591, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_592, (1280, 1280), (1280, 1))
    assert_size_stride(primals_593, (1280, ), (1, ))
    assert_size_stride(primals_594, (1280, ), (1, ))
    assert_size_stride(primals_595, (1280, ), (1, ))
    assert_size_stride(primals_596, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_597, (1280, ), (1, ))
    assert_size_stride(primals_598, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_599, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_600, (1280, ), (1, ))
    assert_size_stride(primals_601, (1280, ), (1, ))
    assert_size_stride(primals_602, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_603, (1280, ), (1, ))
    assert_size_stride(primals_604, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_605, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_606, (1280, 1280), (1280, 1))
    assert_size_stride(primals_607, (1280, ), (1, ))
    assert_size_stride(primals_608, (1280, ), (1, ))
    assert_size_stride(primals_609, (1280, ), (1, ))
    assert_size_stride(primals_610, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_611, (1280, ), (1, ))
    assert_size_stride(primals_612, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_613, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_614, (1280, ), (1, ))
    assert_size_stride(primals_615, (1280, ), (1, ))
    assert_size_stride(primals_616, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_617, (1280, ), (1, ))
    assert_size_stride(primals_618, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_619, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_620, (1280, 1280), (1280, 1))
    assert_size_stride(primals_621, (1280, ), (1, ))
    assert_size_stride(primals_622, (1280, ), (1, ))
    assert_size_stride(primals_623, (1280, ), (1, ))
    assert_size_stride(primals_624, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_625, (1280, ), (1, ))
    assert_size_stride(primals_626, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_627, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_628, (1280, ), (1, ))
    assert_size_stride(primals_629, (1280, ), (1, ))
    assert_size_stride(primals_630, (1280, 1280), (1280, 1))
    assert_size_stride(primals_631, (1280, ), (1, ))
    assert_size_stride(primals_632, (80, 1280), (1280, 1))
    assert_size_stride(primals_633, (1280, 80), (80, 1))
    assert_size_stride(primals_634, (1280, ), (1, ))
    assert_size_stride(primals_635, (1280, ), (1, ))
    assert_size_stride(primals_636, (1280, 1280), (1280, 1))
    assert_size_stride(primals_637, (80, 1280), (1280, 1))
    assert_size_stride(primals_638, (1280, 80), (80, 1))
    assert_size_stride(primals_639, (1280, 1280), (1280, 1))
    assert_size_stride(primals_640, (80, 1280), (1280, 1))
    assert_size_stride(primals_641, (1280, 80), (80, 1))
    assert_size_stride(primals_642, (1280, 1280), (1280, 1))
    assert_size_stride(primals_643, (80, 1280), (1280, 1))
    assert_size_stride(primals_644, (1280, 80), (80, 1))
    assert_size_stride(primals_645, (1280, 1280), (1280, 1))
    assert_size_stride(primals_646, (1280, ), (1, ))
    assert_size_stride(primals_647, (80, 1280), (1280, 1))
    assert_size_stride(primals_648, (1280, 80), (80, 1))
    assert_size_stride(primals_649, (1280, ), (1, ))
    assert_size_stride(primals_650, (1280, ), (1, ))
    assert_size_stride(primals_651, (1280, 1280), (1280, 1))
    assert_size_stride(primals_652, (80, 1280), (1280, 1))
    assert_size_stride(primals_653, (1280, 80), (80, 1))
    assert_size_stride(primals_654, (1280, 1024), (1024, 1))
    assert_size_stride(primals_655, (80, 1024), (1024, 1))
    assert_size_stride(primals_656, (1280, 80), (80, 1))
    assert_size_stride(primals_657, (1280, 1024), (1024, 1))
    assert_size_stride(primals_658, (80, 1024), (1024, 1))
    assert_size_stride(primals_659, (1280, 80), (80, 1))
    assert_size_stride(primals_660, (1280, 1280), (1280, 1))
    assert_size_stride(primals_661, (1280, ), (1, ))
    assert_size_stride(primals_662, (80, 1280), (1280, 1))
    assert_size_stride(primals_663, (1280, 80), (80, 1))
    assert_size_stride(primals_664, (1280, ), (1, ))
    assert_size_stride(primals_665, (1280, ), (1, ))
    assert_size_stride(primals_666, (10240, 1280), (1280, 1))
    assert_size_stride(primals_667, (10240, ), (1, ))
    assert_size_stride(primals_668, (80, 1280), (1280, 1))
    assert_size_stride(primals_669, (10240, 80), (80, 1))
    assert_size_stride(primals_670, (1280, 5120), (5120, 1))
    assert_size_stride(primals_671, (1280, ), (1, ))
    assert_size_stride(primals_672, (80, 5120), (5120, 1))
    assert_size_stride(primals_673, (1280, 80), (80, 1))
    assert_size_stride(primals_674, (1280, 1280), (1280, 1))
    assert_size_stride(primals_675, (1280, ), (1, ))
    assert_size_stride(primals_676, (80, 1280), (1280, 1))
    assert_size_stride(primals_677, (1280, 80), (80, 1))
    assert_size_stride(primals_678, (1280, ), (1, ))
    assert_size_stride(primals_679, (1280, ), (1, ))
    assert_size_stride(primals_680, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_681, (1280, ), (1, ))
    assert_size_stride(primals_682, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_683, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_684, (1280, 1280), (1280, 1))
    assert_size_stride(primals_685, (1280, ), (1, ))
    assert_size_stride(primals_686, (1280, ), (1, ))
    assert_size_stride(primals_687, (1280, ), (1, ))
    assert_size_stride(primals_688, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_689, (1280, ), (1, ))
    assert_size_stride(primals_690, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_691, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_692, (2560, ), (1, ))
    assert_size_stride(primals_693, (2560, ), (1, ))
    assert_size_stride(primals_694, (1280, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_695, (1280, ), (1, ))
    assert_size_stride(primals_696, (80, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_697, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_698, (1280, 1280), (1280, 1))
    assert_size_stride(primals_699, (1280, ), (1, ))
    assert_size_stride(primals_700, (1280, ), (1, ))
    assert_size_stride(primals_701, (1280, ), (1, ))
    assert_size_stride(primals_702, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_703, (1280, ), (1, ))
    assert_size_stride(primals_704, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_705, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_706, (1280, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_707, (1280, ), (1, ))
    assert_size_stride(primals_708, (80, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_709, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_710, (2560, ), (1, ))
    assert_size_stride(primals_711, (2560, ), (1, ))
    assert_size_stride(primals_712, (1280, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_713, (1280, ), (1, ))
    assert_size_stride(primals_714, (80, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_715, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_716, (1280, 1280), (1280, 1))
    assert_size_stride(primals_717, (1280, ), (1, ))
    assert_size_stride(primals_718, (1280, ), (1, ))
    assert_size_stride(primals_719, (1280, ), (1, ))
    assert_size_stride(primals_720, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_721, (1280, ), (1, ))
    assert_size_stride(primals_722, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_723, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_724, (1280, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_725, (1280, ), (1, ))
    assert_size_stride(primals_726, (80, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_727, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_728, (2560, ), (1, ))
    assert_size_stride(primals_729, (2560, ), (1, ))
    assert_size_stride(primals_730, (1280, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_731, (1280, ), (1, ))
    assert_size_stride(primals_732, (80, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_733, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_734, (1280, 1280), (1280, 1))
    assert_size_stride(primals_735, (1280, ), (1, ))
    assert_size_stride(primals_736, (1280, ), (1, ))
    assert_size_stride(primals_737, (1280, ), (1, ))
    assert_size_stride(primals_738, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_739, (1280, ), (1, ))
    assert_size_stride(primals_740, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_741, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_742, (1280, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_743, (1280, ), (1, ))
    assert_size_stride(primals_744, (80, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_745, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_746, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_747, (1280, ), (1, ))
    assert_size_stride(primals_748, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_749, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_750, (2560, ), (1, ))
    assert_size_stride(primals_751, (2560, ), (1, ))
    assert_size_stride(primals_752, (1280, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_753, (1280, ), (1, ))
    assert_size_stride(primals_754, (80, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_755, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_756, (1280, 1280), (1280, 1))
    assert_size_stride(primals_757, (1280, ), (1, ))
    assert_size_stride(primals_758, (1280, ), (1, ))
    assert_size_stride(primals_759, (1280, ), (1, ))
    assert_size_stride(primals_760, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_761, (1280, ), (1, ))
    assert_size_stride(primals_762, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_763, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_764, (1280, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_765, (1280, ), (1, ))
    assert_size_stride(primals_766, (80, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_767, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_768, (1280, ), (1, ))
    assert_size_stride(primals_769, (1280, ), (1, ))
    assert_size_stride(primals_770, (1280, 1280), (1280, 1))
    assert_size_stride(primals_771, (1280, ), (1, ))
    assert_size_stride(primals_772, (80, 1280), (1280, 1))
    assert_size_stride(primals_773, (1280, 80), (80, 1))
    assert_size_stride(primals_774, (1280, ), (1, ))
    assert_size_stride(primals_775, (1280, ), (1, ))
    assert_size_stride(primals_776, (1280, 1280), (1280, 1))
    assert_size_stride(primals_777, (80, 1280), (1280, 1))
    assert_size_stride(primals_778, (1280, 80), (80, 1))
    assert_size_stride(primals_779, (1280, 1280), (1280, 1))
    assert_size_stride(primals_780, (80, 1280), (1280, 1))
    assert_size_stride(primals_781, (1280, 80), (80, 1))
    assert_size_stride(primals_782, (1280, 1280), (1280, 1))
    assert_size_stride(primals_783, (80, 1280), (1280, 1))
    assert_size_stride(primals_784, (1280, 80), (80, 1))
    assert_size_stride(primals_785, (1280, 1280), (1280, 1))
    assert_size_stride(primals_786, (1280, ), (1, ))
    assert_size_stride(primals_787, (80, 1280), (1280, 1))
    assert_size_stride(primals_788, (1280, 80), (80, 1))
    assert_size_stride(primals_789, (1280, ), (1, ))
    assert_size_stride(primals_790, (1280, ), (1, ))
    assert_size_stride(primals_791, (1280, 1280), (1280, 1))
    assert_size_stride(primals_792, (80, 1280), (1280, 1))
    assert_size_stride(primals_793, (1280, 80), (80, 1))
    assert_size_stride(primals_794, (1280, 1024), (1024, 1))
    assert_size_stride(primals_795, (80, 1024), (1024, 1))
    assert_size_stride(primals_796, (1280, 80), (80, 1))
    assert_size_stride(primals_797, (1280, 1024), (1024, 1))
    assert_size_stride(primals_798, (80, 1024), (1024, 1))
    assert_size_stride(primals_799, (1280, 80), (80, 1))
    assert_size_stride(primals_800, (1280, 1280), (1280, 1))
    assert_size_stride(primals_801, (1280, ), (1, ))
    assert_size_stride(primals_802, (80, 1280), (1280, 1))
    assert_size_stride(primals_803, (1280, 80), (80, 1))
    assert_size_stride(primals_804, (1280, ), (1, ))
    assert_size_stride(primals_805, (1280, ), (1, ))
    assert_size_stride(primals_806, (10240, 1280), (1280, 1))
    assert_size_stride(primals_807, (10240, ), (1, ))
    assert_size_stride(primals_808, (80, 1280), (1280, 1))
    assert_size_stride(primals_809, (10240, 80), (80, 1))
    assert_size_stride(primals_810, (1280, 5120), (5120, 1))
    assert_size_stride(primals_811, (1280, ), (1, ))
    assert_size_stride(primals_812, (80, 5120), (5120, 1))
    assert_size_stride(primals_813, (1280, 80), (80, 1))
    assert_size_stride(primals_814, (1280, 1280), (1280, 1))
    assert_size_stride(primals_815, (1280, ), (1, ))
    assert_size_stride(primals_816, (80, 1280), (1280, 1))
    assert_size_stride(primals_817, (1280, 80), (80, 1))
    assert_size_stride(primals_818, (2560, ), (1, ))
    assert_size_stride(primals_819, (2560, ), (1, ))
    assert_size_stride(primals_820, (1280, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_821, (1280, ), (1, ))
    assert_size_stride(primals_822, (80, 2560, 3, 3), (23040, 9, 3, 1))
    assert_size_stride(primals_823, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_824, (1280, 1280), (1280, 1))
    assert_size_stride(primals_825, (1280, ), (1, ))
    assert_size_stride(primals_826, (1280, ), (1, ))
    assert_size_stride(primals_827, (1280, ), (1, ))
    assert_size_stride(primals_828, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_829, (1280, ), (1, ))
    assert_size_stride(primals_830, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_831, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_832, (1280, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_833, (1280, ), (1, ))
    assert_size_stride(primals_834, (80, 2560, 1, 1), (2560, 1, 1, 1))
    assert_size_stride(primals_835, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_836, (1280, ), (1, ))
    assert_size_stride(primals_837, (1280, ), (1, ))
    assert_size_stride(primals_838, (1280, 1280), (1280, 1))
    assert_size_stride(primals_839, (1280, ), (1, ))
    assert_size_stride(primals_840, (80, 1280), (1280, 1))
    assert_size_stride(primals_841, (1280, 80), (80, 1))
    assert_size_stride(primals_842, (1280, ), (1, ))
    assert_size_stride(primals_843, (1280, ), (1, ))
    assert_size_stride(primals_844, (1280, 1280), (1280, 1))
    assert_size_stride(primals_845, (80, 1280), (1280, 1))
    assert_size_stride(primals_846, (1280, 80), (80, 1))
    assert_size_stride(primals_847, (1280, 1280), (1280, 1))
    assert_size_stride(primals_848, (80, 1280), (1280, 1))
    assert_size_stride(primals_849, (1280, 80), (80, 1))
    assert_size_stride(primals_850, (1280, 1280), (1280, 1))
    assert_size_stride(primals_851, (80, 1280), (1280, 1))
    assert_size_stride(primals_852, (1280, 80), (80, 1))
    assert_size_stride(primals_853, (1280, 1280), (1280, 1))
    assert_size_stride(primals_854, (1280, ), (1, ))
    assert_size_stride(primals_855, (80, 1280), (1280, 1))
    assert_size_stride(primals_856, (1280, 80), (80, 1))
    assert_size_stride(primals_857, (1280, ), (1, ))
    assert_size_stride(primals_858, (1280, ), (1, ))
    assert_size_stride(primals_859, (1280, 1280), (1280, 1))
    assert_size_stride(primals_860, (80, 1280), (1280, 1))
    assert_size_stride(primals_861, (1280, 80), (80, 1))
    assert_size_stride(primals_862, (1280, 1024), (1024, 1))
    assert_size_stride(primals_863, (80, 1024), (1024, 1))
    assert_size_stride(primals_864, (1280, 80), (80, 1))
    assert_size_stride(primals_865, (1280, 1024), (1024, 1))
    assert_size_stride(primals_866, (80, 1024), (1024, 1))
    assert_size_stride(primals_867, (1280, 80), (80, 1))
    assert_size_stride(primals_868, (1280, 1280), (1280, 1))
    assert_size_stride(primals_869, (1280, ), (1, ))
    assert_size_stride(primals_870, (80, 1280), (1280, 1))
    assert_size_stride(primals_871, (1280, 80), (80, 1))
    assert_size_stride(primals_872, (1280, ), (1, ))
    assert_size_stride(primals_873, (1280, ), (1, ))
    assert_size_stride(primals_874, (10240, 1280), (1280, 1))
    assert_size_stride(primals_875, (10240, ), (1, ))
    assert_size_stride(primals_876, (80, 1280), (1280, 1))
    assert_size_stride(primals_877, (10240, 80), (80, 1))
    assert_size_stride(primals_878, (1280, 5120), (5120, 1))
    assert_size_stride(primals_879, (1280, ), (1, ))
    assert_size_stride(primals_880, (80, 5120), (5120, 1))
    assert_size_stride(primals_881, (1280, 80), (80, 1))
    assert_size_stride(primals_882, (1280, 1280), (1280, 1))
    assert_size_stride(primals_883, (1280, ), (1, ))
    assert_size_stride(primals_884, (80, 1280), (1280, 1))
    assert_size_stride(primals_885, (1280, 80), (80, 1))
    assert_size_stride(primals_886, (1920, ), (1, ))
    assert_size_stride(primals_887, (1920, ), (1, ))
    assert_size_stride(primals_888, (1280, 1920, 3, 3), (17280, 9, 3, 1))
    assert_size_stride(primals_889, (1280, ), (1, ))
    assert_size_stride(primals_890, (80, 1920, 3, 3), (17280, 9, 3, 1))
    assert_size_stride(primals_891, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_892, (1280, 1280), (1280, 1))
    assert_size_stride(primals_893, (1280, ), (1, ))
    assert_size_stride(primals_894, (1280, ), (1, ))
    assert_size_stride(primals_895, (1280, ), (1, ))
    assert_size_stride(primals_896, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_897, (1280, ), (1, ))
    assert_size_stride(primals_898, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_899, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_900, (1280, 1920, 1, 1), (1920, 1, 1, 1))
    assert_size_stride(primals_901, (1280, ), (1, ))
    assert_size_stride(primals_902, (80, 1920, 1, 1), (1920, 1, 1, 1))
    assert_size_stride(primals_903, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_904, (1280, ), (1, ))
    assert_size_stride(primals_905, (1280, ), (1, ))
    assert_size_stride(primals_906, (1280, 1280), (1280, 1))
    assert_size_stride(primals_907, (1280, ), (1, ))
    assert_size_stride(primals_908, (80, 1280), (1280, 1))
    assert_size_stride(primals_909, (1280, 80), (80, 1))
    assert_size_stride(primals_910, (1280, ), (1, ))
    assert_size_stride(primals_911, (1280, ), (1, ))
    assert_size_stride(primals_912, (1280, 1280), (1280, 1))
    assert_size_stride(primals_913, (80, 1280), (1280, 1))
    assert_size_stride(primals_914, (1280, 80), (80, 1))
    assert_size_stride(primals_915, (1280, 1280), (1280, 1))
    assert_size_stride(primals_916, (80, 1280), (1280, 1))
    assert_size_stride(primals_917, (1280, 80), (80, 1))
    assert_size_stride(primals_918, (1280, 1280), (1280, 1))
    assert_size_stride(primals_919, (80, 1280), (1280, 1))
    assert_size_stride(primals_920, (1280, 80), (80, 1))
    assert_size_stride(primals_921, (1280, 1280), (1280, 1))
    assert_size_stride(primals_922, (1280, ), (1, ))
    assert_size_stride(primals_923, (80, 1280), (1280, 1))
    assert_size_stride(primals_924, (1280, 80), (80, 1))
    assert_size_stride(primals_925, (1280, ), (1, ))
    assert_size_stride(primals_926, (1280, ), (1, ))
    assert_size_stride(primals_927, (1280, 1280), (1280, 1))
    assert_size_stride(primals_928, (80, 1280), (1280, 1))
    assert_size_stride(primals_929, (1280, 80), (80, 1))
    assert_size_stride(primals_930, (1280, 1024), (1024, 1))
    assert_size_stride(primals_931, (80, 1024), (1024, 1))
    assert_size_stride(primals_932, (1280, 80), (80, 1))
    assert_size_stride(primals_933, (1280, 1024), (1024, 1))
    assert_size_stride(primals_934, (80, 1024), (1024, 1))
    assert_size_stride(primals_935, (1280, 80), (80, 1))
    assert_size_stride(primals_936, (1280, 1280), (1280, 1))
    assert_size_stride(primals_937, (1280, ), (1, ))
    assert_size_stride(primals_938, (80, 1280), (1280, 1))
    assert_size_stride(primals_939, (1280, 80), (80, 1))
    assert_size_stride(primals_940, (1280, ), (1, ))
    assert_size_stride(primals_941, (1280, ), (1, ))
    assert_size_stride(primals_942, (10240, 1280), (1280, 1))
    assert_size_stride(primals_943, (10240, ), (1, ))
    assert_size_stride(primals_944, (80, 1280), (1280, 1))
    assert_size_stride(primals_945, (10240, 80), (80, 1))
    assert_size_stride(primals_946, (1280, 5120), (5120, 1))
    assert_size_stride(primals_947, (1280, ), (1, ))
    assert_size_stride(primals_948, (80, 5120), (5120, 1))
    assert_size_stride(primals_949, (1280, 80), (80, 1))
    assert_size_stride(primals_950, (1280, 1280), (1280, 1))
    assert_size_stride(primals_951, (1280, ), (1, ))
    assert_size_stride(primals_952, (80, 1280), (1280, 1))
    assert_size_stride(primals_953, (1280, 80), (80, 1))
    assert_size_stride(primals_954, (1280, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_955, (1280, ), (1, ))
    assert_size_stride(primals_956, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_957, (1280, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_958, (1920, ), (1, ))
    assert_size_stride(primals_959, (1920, ), (1, ))
    assert_size_stride(primals_960, (640, 1920, 3, 3), (17280, 9, 3, 1))
    assert_size_stride(primals_961, (640, ), (1, ))
    assert_size_stride(primals_962, (80, 1920, 3, 3), (17280, 9, 3, 1))
    assert_size_stride(primals_963, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_964, (640, 1280), (1280, 1))
    assert_size_stride(primals_965, (640, ), (1, ))
    assert_size_stride(primals_966, (640, ), (1, ))
    assert_size_stride(primals_967, (640, ), (1, ))
    assert_size_stride(primals_968, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_969, (640, ), (1, ))
    assert_size_stride(primals_970, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_971, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_972, (640, 1920, 1, 1), (1920, 1, 1, 1))
    assert_size_stride(primals_973, (640, ), (1, ))
    assert_size_stride(primals_974, (80, 1920, 1, 1), (1920, 1, 1, 1))
    assert_size_stride(primals_975, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_976, (640, ), (1, ))
    assert_size_stride(primals_977, (640, ), (1, ))
    assert_size_stride(primals_978, (640, 640), (640, 1))
    assert_size_stride(primals_979, (640, ), (1, ))
    assert_size_stride(primals_980, (80, 640), (640, 1))
    assert_size_stride(primals_981, (640, 80), (80, 1))
    assert_size_stride(primals_982, (640, ), (1, ))
    assert_size_stride(primals_983, (640, ), (1, ))
    assert_size_stride(primals_984, (640, 640), (640, 1))
    assert_size_stride(primals_985, (80, 640), (640, 1))
    assert_size_stride(primals_986, (640, 80), (80, 1))
    assert_size_stride(primals_987, (640, 640), (640, 1))
    assert_size_stride(primals_988, (80, 640), (640, 1))
    assert_size_stride(primals_989, (640, 80), (80, 1))
    assert_size_stride(primals_990, (640, 640), (640, 1))
    assert_size_stride(primals_991, (80, 640), (640, 1))
    assert_size_stride(primals_992, (640, 80), (80, 1))
    assert_size_stride(primals_993, (640, 640), (640, 1))
    assert_size_stride(primals_994, (640, ), (1, ))
    assert_size_stride(primals_995, (80, 640), (640, 1))
    assert_size_stride(primals_996, (640, 80), (80, 1))
    assert_size_stride(primals_997, (640, ), (1, ))
    assert_size_stride(primals_998, (640, ), (1, ))
    assert_size_stride(primals_999, (640, 640), (640, 1))
    assert_size_stride(primals_1000, (80, 640), (640, 1))
    assert_size_stride(primals_1001, (640, 80), (80, 1))
    assert_size_stride(primals_1002, (640, 1024), (1024, 1))
    assert_size_stride(primals_1003, (80, 1024), (1024, 1))
    assert_size_stride(primals_1004, (640, 80), (80, 1))
    assert_size_stride(primals_1005, (640, 1024), (1024, 1))
    assert_size_stride(primals_1006, (80, 1024), (1024, 1))
    assert_size_stride(primals_1007, (640, 80), (80, 1))
    assert_size_stride(primals_1008, (640, 640), (640, 1))
    assert_size_stride(primals_1009, (640, ), (1, ))
    assert_size_stride(primals_1010, (80, 640), (640, 1))
    assert_size_stride(primals_1011, (640, 80), (80, 1))
    assert_size_stride(primals_1012, (640, ), (1, ))
    assert_size_stride(primals_1013, (640, ), (1, ))
    assert_size_stride(primals_1014, (5120, 640), (640, 1))
    assert_size_stride(primals_1015, (5120, ), (1, ))
    assert_size_stride(primals_1016, (80, 640), (640, 1))
    assert_size_stride(primals_1017, (5120, 80), (80, 1))
    assert_size_stride(primals_1018, (640, 2560), (2560, 1))
    assert_size_stride(primals_1019, (640, ), (1, ))
    assert_size_stride(primals_1020, (80, 2560), (2560, 1))
    assert_size_stride(primals_1021, (640, 80), (80, 1))
    assert_size_stride(primals_1022, (640, 640), (640, 1))
    assert_size_stride(primals_1023, (640, ), (1, ))
    assert_size_stride(primals_1024, (80, 640), (640, 1))
    assert_size_stride(primals_1025, (640, 80), (80, 1))
    assert_size_stride(primals_1026, (1280, ), (1, ))
    assert_size_stride(primals_1027, (1280, ), (1, ))
    assert_size_stride(primals_1028, (640, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_1029, (640, ), (1, ))
    assert_size_stride(primals_1030, (80, 1280, 3, 3), (11520, 9, 3, 1))
    assert_size_stride(primals_1031, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1032, (640, 1280), (1280, 1))
    assert_size_stride(primals_1033, (640, ), (1, ))
    assert_size_stride(primals_1034, (640, ), (1, ))
    assert_size_stride(primals_1035, (640, ), (1, ))
    assert_size_stride(primals_1036, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1037, (640, ), (1, ))
    assert_size_stride(primals_1038, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1039, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1040, (640, 1280, 1, 1), (1280, 1, 1, 1))
    assert_size_stride(primals_1041, (640, ), (1, ))
    assert_size_stride(primals_1042, (80, 1280, 1, 1), (1280, 1, 1, 1))
    assert_size_stride(primals_1043, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1044, (640, ), (1, ))
    assert_size_stride(primals_1045, (640, ), (1, ))
    assert_size_stride(primals_1046, (640, 640), (640, 1))
    assert_size_stride(primals_1047, (640, ), (1, ))
    assert_size_stride(primals_1048, (80, 640), (640, 1))
    assert_size_stride(primals_1049, (640, 80), (80, 1))
    assert_size_stride(primals_1050, (640, ), (1, ))
    assert_size_stride(primals_1051, (640, ), (1, ))
    assert_size_stride(primals_1052, (640, 640), (640, 1))
    assert_size_stride(primals_1053, (80, 640), (640, 1))
    assert_size_stride(primals_1054, (640, 80), (80, 1))
    assert_size_stride(primals_1055, (640, 640), (640, 1))
    assert_size_stride(primals_1056, (80, 640), (640, 1))
    assert_size_stride(primals_1057, (640, 80), (80, 1))
    assert_size_stride(primals_1058, (640, 640), (640, 1))
    assert_size_stride(primals_1059, (80, 640), (640, 1))
    assert_size_stride(primals_1060, (640, 80), (80, 1))
    assert_size_stride(primals_1061, (640, 640), (640, 1))
    assert_size_stride(primals_1062, (640, ), (1, ))
    assert_size_stride(primals_1063, (80, 640), (640, 1))
    assert_size_stride(primals_1064, (640, 80), (80, 1))
    assert_size_stride(primals_1065, (640, ), (1, ))
    assert_size_stride(primals_1066, (640, ), (1, ))
    assert_size_stride(primals_1067, (640, 640), (640, 1))
    assert_size_stride(primals_1068, (80, 640), (640, 1))
    assert_size_stride(primals_1069, (640, 80), (80, 1))
    assert_size_stride(primals_1070, (640, 1024), (1024, 1))
    assert_size_stride(primals_1071, (80, 1024), (1024, 1))
    assert_size_stride(primals_1072, (640, 80), (80, 1))
    assert_size_stride(primals_1073, (640, 1024), (1024, 1))
    assert_size_stride(primals_1074, (80, 1024), (1024, 1))
    assert_size_stride(primals_1075, (640, 80), (80, 1))
    assert_size_stride(primals_1076, (640, 640), (640, 1))
    assert_size_stride(primals_1077, (640, ), (1, ))
    assert_size_stride(primals_1078, (80, 640), (640, 1))
    assert_size_stride(primals_1079, (640, 80), (80, 1))
    assert_size_stride(primals_1080, (640, ), (1, ))
    assert_size_stride(primals_1081, (640, ), (1, ))
    assert_size_stride(primals_1082, (5120, 640), (640, 1))
    assert_size_stride(primals_1083, (5120, ), (1, ))
    assert_size_stride(primals_1084, (80, 640), (640, 1))
    assert_size_stride(primals_1085, (5120, 80), (80, 1))
    assert_size_stride(primals_1086, (640, 2560), (2560, 1))
    assert_size_stride(primals_1087, (640, ), (1, ))
    assert_size_stride(primals_1088, (80, 2560), (2560, 1))
    assert_size_stride(primals_1089, (640, 80), (80, 1))
    assert_size_stride(primals_1090, (640, 640), (640, 1))
    assert_size_stride(primals_1091, (640, ), (1, ))
    assert_size_stride(primals_1092, (80, 640), (640, 1))
    assert_size_stride(primals_1093, (640, 80), (80, 1))
    assert_size_stride(primals_1094, (960, ), (1, ))
    assert_size_stride(primals_1095, (960, ), (1, ))
    assert_size_stride(primals_1096, (640, 960, 3, 3), (8640, 9, 3, 1))
    assert_size_stride(primals_1097, (640, ), (1, ))
    assert_size_stride(primals_1098, (80, 960, 3, 3), (8640, 9, 3, 1))
    assert_size_stride(primals_1099, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1100, (640, 1280), (1280, 1))
    assert_size_stride(primals_1101, (640, ), (1, ))
    assert_size_stride(primals_1102, (640, ), (1, ))
    assert_size_stride(primals_1103, (640, ), (1, ))
    assert_size_stride(primals_1104, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1105, (640, ), (1, ))
    assert_size_stride(primals_1106, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1107, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1108, (640, 960, 1, 1), (960, 1, 1, 1))
    assert_size_stride(primals_1109, (640, ), (1, ))
    assert_size_stride(primals_1110, (80, 960, 1, 1), (960, 1, 1, 1))
    assert_size_stride(primals_1111, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1112, (640, ), (1, ))
    assert_size_stride(primals_1113, (640, ), (1, ))
    assert_size_stride(primals_1114, (640, 640), (640, 1))
    assert_size_stride(primals_1115, (640, ), (1, ))
    assert_size_stride(primals_1116, (80, 640), (640, 1))
    assert_size_stride(primals_1117, (640, 80), (80, 1))
    assert_size_stride(primals_1118, (640, ), (1, ))
    assert_size_stride(primals_1119, (640, ), (1, ))
    assert_size_stride(primals_1120, (640, 640), (640, 1))
    assert_size_stride(primals_1121, (80, 640), (640, 1))
    assert_size_stride(primals_1122, (640, 80), (80, 1))
    assert_size_stride(primals_1123, (640, 640), (640, 1))
    assert_size_stride(primals_1124, (80, 640), (640, 1))
    assert_size_stride(primals_1125, (640, 80), (80, 1))
    assert_size_stride(primals_1126, (640, 640), (640, 1))
    assert_size_stride(primals_1127, (80, 640), (640, 1))
    assert_size_stride(primals_1128, (640, 80), (80, 1))
    assert_size_stride(primals_1129, (640, 640), (640, 1))
    assert_size_stride(primals_1130, (640, ), (1, ))
    assert_size_stride(primals_1131, (80, 640), (640, 1))
    assert_size_stride(primals_1132, (640, 80), (80, 1))
    assert_size_stride(primals_1133, (640, ), (1, ))
    assert_size_stride(primals_1134, (640, ), (1, ))
    assert_size_stride(primals_1135, (640, 640), (640, 1))
    assert_size_stride(primals_1136, (80, 640), (640, 1))
    assert_size_stride(primals_1137, (640, 80), (80, 1))
    assert_size_stride(primals_1138, (640, 1024), (1024, 1))
    assert_size_stride(primals_1139, (80, 1024), (1024, 1))
    assert_size_stride(primals_1140, (640, 80), (80, 1))
    assert_size_stride(primals_1141, (640, 1024), (1024, 1))
    assert_size_stride(primals_1142, (80, 1024), (1024, 1))
    assert_size_stride(primals_1143, (640, 80), (80, 1))
    assert_size_stride(primals_1144, (640, 640), (640, 1))
    assert_size_stride(primals_1145, (640, ), (1, ))
    assert_size_stride(primals_1146, (80, 640), (640, 1))
    assert_size_stride(primals_1147, (640, 80), (80, 1))
    assert_size_stride(primals_1148, (640, ), (1, ))
    assert_size_stride(primals_1149, (640, ), (1, ))
    assert_size_stride(primals_1150, (5120, 640), (640, 1))
    assert_size_stride(primals_1151, (5120, ), (1, ))
    assert_size_stride(primals_1152, (80, 640), (640, 1))
    assert_size_stride(primals_1153, (5120, 80), (80, 1))
    assert_size_stride(primals_1154, (640, 2560), (2560, 1))
    assert_size_stride(primals_1155, (640, ), (1, ))
    assert_size_stride(primals_1156, (80, 2560), (2560, 1))
    assert_size_stride(primals_1157, (640, 80), (80, 1))
    assert_size_stride(primals_1158, (640, 640), (640, 1))
    assert_size_stride(primals_1159, (640, ), (1, ))
    assert_size_stride(primals_1160, (80, 640), (640, 1))
    assert_size_stride(primals_1161, (640, 80), (80, 1))
    assert_size_stride(primals_1162, (640, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1163, (640, ), (1, ))
    assert_size_stride(primals_1164, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1165, (640, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1166, (960, ), (1, ))
    assert_size_stride(primals_1167, (960, ), (1, ))
    assert_size_stride(primals_1168, (320, 960, 3, 3), (8640, 9, 3, 1))
    assert_size_stride(primals_1169, (320, ), (1, ))
    assert_size_stride(primals_1170, (80, 960, 3, 3), (8640, 9, 3, 1))
    assert_size_stride(primals_1171, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1172, (320, 1280), (1280, 1))
    assert_size_stride(primals_1173, (320, ), (1, ))
    assert_size_stride(primals_1174, (320, ), (1, ))
    assert_size_stride(primals_1175, (320, ), (1, ))
    assert_size_stride(primals_1176, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1177, (320, ), (1, ))
    assert_size_stride(primals_1178, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1179, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1180, (320, 960, 1, 1), (960, 1, 1, 1))
    assert_size_stride(primals_1181, (320, ), (1, ))
    assert_size_stride(primals_1182, (80, 960, 1, 1), (960, 1, 1, 1))
    assert_size_stride(primals_1183, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1184, (320, ), (1, ))
    assert_size_stride(primals_1185, (320, ), (1, ))
    assert_size_stride(primals_1186, (320, 320), (320, 1))
    assert_size_stride(primals_1187, (320, ), (1, ))
    assert_size_stride(primals_1188, (80, 320), (320, 1))
    assert_size_stride(primals_1189, (320, 80), (80, 1))
    assert_size_stride(primals_1190, (320, ), (1, ))
    assert_size_stride(primals_1191, (320, ), (1, ))
    assert_size_stride(primals_1192, (320, 320), (320, 1))
    assert_size_stride(primals_1193, (80, 320), (320, 1))
    assert_size_stride(primals_1194, (320, 80), (80, 1))
    assert_size_stride(primals_1195, (320, 320), (320, 1))
    assert_size_stride(primals_1196, (80, 320), (320, 1))
    assert_size_stride(primals_1197, (320, 80), (80, 1))
    assert_size_stride(primals_1198, (320, 320), (320, 1))
    assert_size_stride(primals_1199, (80, 320), (320, 1))
    assert_size_stride(primals_1200, (320, 80), (80, 1))
    assert_size_stride(primals_1201, (320, 320), (320, 1))
    assert_size_stride(primals_1202, (320, ), (1, ))
    assert_size_stride(primals_1203, (80, 320), (320, 1))
    assert_size_stride(primals_1204, (320, 80), (80, 1))
    assert_size_stride(primals_1205, (320, ), (1, ))
    assert_size_stride(primals_1206, (320, ), (1, ))
    assert_size_stride(primals_1207, (320, 320), (320, 1))
    assert_size_stride(primals_1208, (80, 320), (320, 1))
    assert_size_stride(primals_1209, (320, 80), (80, 1))
    assert_size_stride(primals_1210, (320, 1024), (1024, 1))
    assert_size_stride(primals_1211, (80, 1024), (1024, 1))
    assert_size_stride(primals_1212, (320, 80), (80, 1))
    assert_size_stride(primals_1213, (320, 1024), (1024, 1))
    assert_size_stride(primals_1214, (80, 1024), (1024, 1))
    assert_size_stride(primals_1215, (320, 80), (80, 1))
    assert_size_stride(primals_1216, (320, 320), (320, 1))
    assert_size_stride(primals_1217, (320, ), (1, ))
    assert_size_stride(primals_1218, (80, 320), (320, 1))
    assert_size_stride(primals_1219, (320, 80), (80, 1))
    assert_size_stride(primals_1220, (320, ), (1, ))
    assert_size_stride(primals_1221, (320, ), (1, ))
    assert_size_stride(primals_1222, (2560, 320), (320, 1))
    assert_size_stride(primals_1223, (2560, ), (1, ))
    assert_size_stride(primals_1224, (80, 320), (320, 1))
    assert_size_stride(primals_1225, (2560, 80), (80, 1))
    assert_size_stride(primals_1226, (320, 1280), (1280, 1))
    assert_size_stride(primals_1227, (320, ), (1, ))
    assert_size_stride(primals_1228, (80, 1280), (1280, 1))
    assert_size_stride(primals_1229, (320, 80), (80, 1))
    assert_size_stride(primals_1230, (320, 320), (320, 1))
    assert_size_stride(primals_1231, (320, ), (1, ))
    assert_size_stride(primals_1232, (80, 320), (320, 1))
    assert_size_stride(primals_1233, (320, 80), (80, 1))
    assert_size_stride(primals_1234, (640, ), (1, ))
    assert_size_stride(primals_1235, (640, ), (1, ))
    assert_size_stride(primals_1236, (320, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1237, (320, ), (1, ))
    assert_size_stride(primals_1238, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1239, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1240, (320, 1280), (1280, 1))
    assert_size_stride(primals_1241, (320, ), (1, ))
    assert_size_stride(primals_1242, (320, ), (1, ))
    assert_size_stride(primals_1243, (320, ), (1, ))
    assert_size_stride(primals_1244, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1245, (320, ), (1, ))
    assert_size_stride(primals_1246, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1247, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1248, (320, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_1249, (320, ), (1, ))
    assert_size_stride(primals_1250, (80, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_1251, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1252, (320, ), (1, ))
    assert_size_stride(primals_1253, (320, ), (1, ))
    assert_size_stride(primals_1254, (320, 320), (320, 1))
    assert_size_stride(primals_1255, (320, ), (1, ))
    assert_size_stride(primals_1256, (80, 320), (320, 1))
    assert_size_stride(primals_1257, (320, 80), (80, 1))
    assert_size_stride(primals_1258, (320, ), (1, ))
    assert_size_stride(primals_1259, (320, ), (1, ))
    assert_size_stride(primals_1260, (320, 320), (320, 1))
    assert_size_stride(primals_1261, (80, 320), (320, 1))
    assert_size_stride(primals_1262, (320, 80), (80, 1))
    assert_size_stride(primals_1263, (320, 320), (320, 1))
    assert_size_stride(primals_1264, (80, 320), (320, 1))
    assert_size_stride(primals_1265, (320, 80), (80, 1))
    assert_size_stride(primals_1266, (320, 320), (320, 1))
    assert_size_stride(primals_1267, (80, 320), (320, 1))
    assert_size_stride(primals_1268, (320, 80), (80, 1))
    assert_size_stride(primals_1269, (320, 320), (320, 1))
    assert_size_stride(primals_1270, (320, ), (1, ))
    assert_size_stride(primals_1271, (80, 320), (320, 1))
    assert_size_stride(primals_1272, (320, 80), (80, 1))
    assert_size_stride(primals_1273, (320, ), (1, ))
    assert_size_stride(primals_1274, (320, ), (1, ))
    assert_size_stride(primals_1275, (320, 320), (320, 1))
    assert_size_stride(primals_1276, (80, 320), (320, 1))
    assert_size_stride(primals_1277, (320, 80), (80, 1))
    assert_size_stride(primals_1278, (320, 1024), (1024, 1))
    assert_size_stride(primals_1279, (80, 1024), (1024, 1))
    assert_size_stride(primals_1280, (320, 80), (80, 1))
    assert_size_stride(primals_1281, (320, 1024), (1024, 1))
    assert_size_stride(primals_1282, (80, 1024), (1024, 1))
    assert_size_stride(primals_1283, (320, 80), (80, 1))
    assert_size_stride(primals_1284, (320, 320), (320, 1))
    assert_size_stride(primals_1285, (320, ), (1, ))
    assert_size_stride(primals_1286, (80, 320), (320, 1))
    assert_size_stride(primals_1287, (320, 80), (80, 1))
    assert_size_stride(primals_1288, (320, ), (1, ))
    assert_size_stride(primals_1289, (320, ), (1, ))
    assert_size_stride(primals_1290, (2560, 320), (320, 1))
    assert_size_stride(primals_1291, (2560, ), (1, ))
    assert_size_stride(primals_1292, (80, 320), (320, 1))
    assert_size_stride(primals_1293, (2560, 80), (80, 1))
    assert_size_stride(primals_1294, (320, 1280), (1280, 1))
    assert_size_stride(primals_1295, (320, ), (1, ))
    assert_size_stride(primals_1296, (80, 1280), (1280, 1))
    assert_size_stride(primals_1297, (320, 80), (80, 1))
    assert_size_stride(primals_1298, (320, 320), (320, 1))
    assert_size_stride(primals_1299, (320, ), (1, ))
    assert_size_stride(primals_1300, (80, 320), (320, 1))
    assert_size_stride(primals_1301, (320, 80), (80, 1))
    assert_size_stride(primals_1302, (640, ), (1, ))
    assert_size_stride(primals_1303, (640, ), (1, ))
    assert_size_stride(primals_1304, (320, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1305, (320, ), (1, ))
    assert_size_stride(primals_1306, (80, 640, 3, 3), (5760, 9, 3, 1))
    assert_size_stride(primals_1307, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1308, (320, 1280), (1280, 1))
    assert_size_stride(primals_1309, (320, ), (1, ))
    assert_size_stride(primals_1310, (320, ), (1, ))
    assert_size_stride(primals_1311, (320, ), (1, ))
    assert_size_stride(primals_1312, (320, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1313, (320, ), (1, ))
    assert_size_stride(primals_1314, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1315, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1316, (320, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_1317, (320, ), (1, ))
    assert_size_stride(primals_1318, (80, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_1319, (320, 80, 1, 1), (80, 1, 1, 1))
    assert_size_stride(primals_1320, (320, ), (1, ))
    assert_size_stride(primals_1321, (320, ), (1, ))
    assert_size_stride(primals_1322, (320, 320), (320, 1))
    assert_size_stride(primals_1323, (320, ), (1, ))
    assert_size_stride(primals_1324, (80, 320), (320, 1))
    assert_size_stride(primals_1325, (320, 80), (80, 1))
    assert_size_stride(primals_1326, (320, ), (1, ))
    assert_size_stride(primals_1327, (320, ), (1, ))
    assert_size_stride(primals_1328, (320, 320), (320, 1))
    assert_size_stride(primals_1329, (80, 320), (320, 1))
    assert_size_stride(primals_1330, (320, 80), (80, 1))
    assert_size_stride(primals_1331, (320, 320), (320, 1))
    assert_size_stride(primals_1332, (80, 320), (320, 1))
    assert_size_stride(primals_1333, (320, 80), (80, 1))
    assert_size_stride(primals_1334, (320, 320), (320, 1))
    assert_size_stride(primals_1335, (80, 320), (320, 1))
    assert_size_stride(primals_1336, (320, 80), (80, 1))
    assert_size_stride(primals_1337, (320, 320), (320, 1))
    assert_size_stride(primals_1338, (320, ), (1, ))
    assert_size_stride(primals_1339, (80, 320), (320, 1))
    assert_size_stride(primals_1340, (320, 80), (80, 1))
    assert_size_stride(primals_1341, (320, ), (1, ))
    assert_size_stride(primals_1342, (320, ), (1, ))
    assert_size_stride(primals_1343, (320, 320), (320, 1))
    assert_size_stride(primals_1344, (80, 320), (320, 1))
    assert_size_stride(primals_1345, (320, 80), (80, 1))
    assert_size_stride(primals_1346, (320, 1024), (1024, 1))
    assert_size_stride(primals_1347, (80, 1024), (1024, 1))
    assert_size_stride(primals_1348, (320, 80), (80, 1))
    assert_size_stride(primals_1349, (320, 1024), (1024, 1))
    assert_size_stride(primals_1350, (80, 1024), (1024, 1))
    assert_size_stride(primals_1351, (320, 80), (80, 1))
    assert_size_stride(primals_1352, (320, 320), (320, 1))
    assert_size_stride(primals_1353, (320, ), (1, ))
    assert_size_stride(primals_1354, (80, 320), (320, 1))
    assert_size_stride(primals_1355, (320, 80), (80, 1))
    assert_size_stride(primals_1356, (320, ), (1, ))
    assert_size_stride(primals_1357, (320, ), (1, ))
    assert_size_stride(primals_1358, (2560, 320), (320, 1))
    assert_size_stride(primals_1359, (2560, ), (1, ))
    assert_size_stride(primals_1360, (80, 320), (320, 1))
    assert_size_stride(primals_1361, (2560, 80), (80, 1))
    assert_size_stride(primals_1362, (320, 1280), (1280, 1))
    assert_size_stride(primals_1363, (320, ), (1, ))
    assert_size_stride(primals_1364, (80, 1280), (1280, 1))
    assert_size_stride(primals_1365, (320, 80), (80, 1))
    assert_size_stride(primals_1366, (320, 320), (320, 1))
    assert_size_stride(primals_1367, (320, ), (1, ))
    assert_size_stride(primals_1368, (80, 320), (320, 1))
    assert_size_stride(primals_1369, (320, 80), (80, 1))
    assert_size_stride(primals_1370, (320, ), (1, ))
    assert_size_stride(primals_1371, (320, ), (1, ))
    assert_size_stride(primals_1372, (4, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1373, (4, ), (1, ))
    assert_size_stride(primals_1374, (80, 320, 3, 3), (2880, 9, 3, 1))
    assert_size_stride(primals_1375, (4, 80, 1, 1), (80, 1, 1, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        # Topologically Sorted Source Nodes: [result], Original ATen: [aten.convolution]
        buf0 = extern_kernels.convolution(primals_1, primals_2, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf0, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        del primals_2
        # Topologically Sorted Source Nodes: [conv2d_1], Original ATen: [aten.convolution]
        buf1 = extern_kernels.convolution(primals_1, primals_4, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1, (4, 4, 256, 256), (262144, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_2], Original ATen: [aten.convolution]
        buf2 = extern_kernels.convolution(buf1, primals_5, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf2, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        buf3 = buf0; del buf0  # reuse
        buf4 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf5 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf7 = reinterpret_tensor(buf5, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf5  # reuse
        # Topologically Sorted Source Nodes: [result, mul, result_1, hidden_states], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_0.run(buf3, buf7, primals_3, buf2, buf4, 128, 262144, grid=grid(128), stream=stream0)
        del primals_3
        buf8 = buf2; del buf2  # reuse
        buf9 = buf8; del buf8  # reuse
        # Topologically Sorted Source Nodes: [hidden_states, hidden_states_1], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_1.run(buf9, buf3, buf4, buf7, primals_6, primals_7, 33554432, grid=grid(33554432), stream=stream0)
        # Topologically Sorted Source Nodes: [result_3], Original ATen: [aten.convolution]
        buf10 = extern_kernels.convolution(buf9, primals_8, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf10, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_4], Original ATen: [aten.convolution]
        buf11 = extern_kernels.convolution(buf9, primals_10, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf11, (4, 4, 256, 256), (262144, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_5], Original ATen: [aten.convolution]
        buf12 = extern_kernels.convolution(buf11, primals_11, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf12, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        buf13 = buf10; del buf10  # reuse
        buf14 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf15 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf17 = reinterpret_tensor(buf15, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf15  # reuse
        # Topologically Sorted Source Nodes: [result_3, mul_1, result_4, hidden_states_2], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_0.run(buf13, buf17, primals_9, buf12, buf14, 128, 262144, grid=grid(128), stream=stream0)
        del primals_9
        buf18 = buf12; del buf12  # reuse
        buf19 = buf18; del buf18  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_2, hidden_states_3], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_1.run(buf19, buf13, buf14, buf17, primals_12, primals_13, 33554432, grid=grid(33554432), stream=stream0)
        # Topologically Sorted Source Nodes: [result_6], Original ATen: [aten.convolution]
        buf20 = extern_kernels.convolution(buf19, primals_14, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf20, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_7], Original ATen: [aten.convolution]
        buf21 = extern_kernels.convolution(buf19, primals_16, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf21, (4, 4, 256, 256), (262144, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_8], Original ATen: [aten.convolution]
        buf22 = extern_kernels.convolution(buf21, primals_17, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf22, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        buf23 = buf20; del buf20  # reuse
        buf24 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf25 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf27 = reinterpret_tensor(buf25, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf25  # reuse
        # Topologically Sorted Source Nodes: [result_6, mul_2, result_7, add, output_tensor, hidden_states_5], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_2.run(buf23, buf27, buf3, primals_15, buf22, buf24, 128, 262144, grid=grid(128), stream=stream0)
        del primals_15
        buf28 = buf22; del buf22  # reuse
        buf29 = buf28; del buf28  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_5, hidden_states_6], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_1.run(buf29, buf23, buf24, buf27, primals_18, primals_19, 33554432, grid=grid(33554432), stream=stream0)
        # Topologically Sorted Source Nodes: [result_9], Original ATen: [aten.convolution]
        buf30 = extern_kernels.convolution(buf29, primals_20, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf30, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_10], Original ATen: [aten.convolution]
        buf31 = extern_kernels.convolution(buf29, primals_22, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf31, (4, 4, 256, 256), (262144, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_11], Original ATen: [aten.convolution]
        buf32 = extern_kernels.convolution(buf31, primals_23, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf32, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        buf33 = buf30; del buf30  # reuse
        buf34 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf35 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf37 = reinterpret_tensor(buf35, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf35  # reuse
        # Topologically Sorted Source Nodes: [result_9, mul_3, result_10, hidden_states_7], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_0.run(buf33, buf37, primals_21, buf32, buf34, 128, 262144, grid=grid(128), stream=stream0)
        del primals_21
        buf38 = buf32; del buf32  # reuse
        buf39 = buf38; del buf38  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_7, hidden_states_8], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_1.run(buf39, buf33, buf34, buf37, primals_24, primals_25, 33554432, grid=grid(33554432), stream=stream0)
        # Topologically Sorted Source Nodes: [result_12], Original ATen: [aten.convolution]
        buf40 = extern_kernels.convolution(buf39, primals_26, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf40, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_13], Original ATen: [aten.convolution]
        buf41 = extern_kernels.convolution(buf39, primals_28, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf41, (4, 4, 256, 256), (262144, 65536, 256, 1))
        # Topologically Sorted Source Nodes: [conv2d_14], Original ATen: [aten.convolution]
        buf42 = extern_kernels.convolution(buf41, primals_29, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf42, (4, 128, 256, 256), (8388608, 65536, 256, 1))
        buf43 = empty_strided_cuda((4, 128, 257, 257), (8454272, 66049, 257, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_12, mul_4, result_13, add_1, output_tensor_1, hidden_states_10], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.constant_pad_nd]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_constant_pad_nd_convolution_div_mul_3.run(buf23, buf40, primals_27, buf42, buf43, 33817088, grid=grid(33817088), stream=stream0)
        del buf40
        del buf42
        del primals_27
        # Topologically Sorted Source Nodes: [result_15], Original ATen: [aten.convolution]
        buf44 = extern_kernels.convolution(buf43, primals_30, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf44, (4, 128, 128, 128), (2097152, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_16], Original ATen: [aten.convolution]
        buf45 = extern_kernels.convolution(buf43, primals_32, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf45, (4, 4, 128, 128), (65536, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_17], Original ATen: [aten.convolution]
        buf46 = extern_kernels.convolution(buf45, primals_33, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf46, (4, 128, 128, 128), (2097152, 16384, 128, 1))
        buf47 = buf44; del buf44  # reuse
        buf48 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf49 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf51 = reinterpret_tensor(buf49, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf49  # reuse
        # Topologically Sorted Source Nodes: [result_15, mul_5, result_16, hidden_states_11], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_4.run(buf47, buf51, primals_31, buf46, buf48, 128, 65536, grid=grid(128), stream=stream0)
        del primals_31
        buf52 = buf46; del buf46  # reuse
        buf53 = buf52; del buf52  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_11, hidden_states_12], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_5.run(buf53, buf47, buf48, buf51, primals_34, primals_35, 8388608, grid=grid(8388608), stream=stream0)
        # Topologically Sorted Source Nodes: [result_18], Original ATen: [aten.convolution]
        buf54 = extern_kernels.convolution(buf53, primals_36, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf54, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_19], Original ATen: [aten.convolution]
        buf55 = extern_kernels.convolution(buf53, primals_38, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf55, (4, 4, 128, 128), (65536, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_20], Original ATen: [aten.convolution]
        buf56 = extern_kernels.convolution(buf55, primals_39, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf56, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        buf57 = buf54; del buf54  # reuse
        buf58 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf59 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf61 = reinterpret_tensor(buf59, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf59  # reuse
        # Topologically Sorted Source Nodes: [result_18, mul_6, result_19, hidden_states_13], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_6.run(buf57, buf61, primals_37, buf56, buf58, 128, 131072, grid=grid(128), stream=stream0)
        del primals_37
        buf62 = buf56; del buf56  # reuse
        buf63 = buf62; del buf62  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_13, hidden_states_14], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_7.run(buf63, buf57, buf58, buf61, primals_40, primals_41, 16777216, grid=grid(16777216), stream=stream0)
        # Topologically Sorted Source Nodes: [result_21], Original ATen: [aten.convolution]
        buf64 = extern_kernels.convolution(buf63, primals_42, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf64, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_22], Original ATen: [aten.convolution]
        buf65 = extern_kernels.convolution(buf63, primals_44, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf65, (4, 4, 128, 128), (65536, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_23], Original ATen: [aten.convolution]
        buf66 = extern_kernels.convolution(buf65, primals_45, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf66, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [result_24], Original ATen: [aten.convolution]
        buf67 = extern_kernels.convolution(buf47, primals_46, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf67, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_25], Original ATen: [aten.convolution]
        buf68 = extern_kernels.convolution(buf47, primals_48, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf68, (4, 4, 128, 128), (65536, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_26], Original ATen: [aten.convolution]
        buf69 = extern_kernels.convolution(buf68, primals_49, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf69, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        buf70 = buf67; del buf67  # reuse
        buf71 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf72 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf74 = reinterpret_tensor(buf72, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf72  # reuse
        # Topologically Sorted Source Nodes: [result_21, mul_7, result_22, result_24, mul_8, result_25, add_2, output_tensor_2, hidden_states_16], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_8.run(buf70, buf74, primals_47, buf69, buf64, primals_43, buf66, buf71, 128, 131072, grid=grid(128), stream=stream0)
        del buf64
        del buf66
        del primals_43
        del primals_47
        buf75 = buf69; del buf69  # reuse
        buf76 = buf75; del buf75  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_16, hidden_states_17], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_7.run(buf76, buf70, buf71, buf74, primals_50, primals_51, 16777216, grid=grid(16777216), stream=stream0)
        # Topologically Sorted Source Nodes: [result_27], Original ATen: [aten.convolution]
        buf77 = extern_kernels.convolution(buf76, primals_52, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf77, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_28], Original ATen: [aten.convolution]
        buf78 = extern_kernels.convolution(buf76, primals_54, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf78, (4, 4, 128, 128), (65536, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_29], Original ATen: [aten.convolution]
        buf79 = extern_kernels.convolution(buf78, primals_55, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf79, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        buf80 = buf77; del buf77  # reuse
        buf81 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf82 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf84 = reinterpret_tensor(buf82, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf82  # reuse
        # Topologically Sorted Source Nodes: [result_27, mul_9, result_28, hidden_states_18], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_6.run(buf80, buf84, primals_53, buf79, buf81, 128, 131072, grid=grid(128), stream=stream0)
        del primals_53
        buf85 = buf79; del buf79  # reuse
        buf86 = buf85; del buf85  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_18, hidden_states_19], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_7.run(buf86, buf80, buf81, buf84, primals_56, primals_57, 16777216, grid=grid(16777216), stream=stream0)
        # Topologically Sorted Source Nodes: [result_30], Original ATen: [aten.convolution]
        buf87 = extern_kernels.convolution(buf86, primals_58, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf87, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_31], Original ATen: [aten.convolution]
        buf88 = extern_kernels.convolution(buf86, primals_60, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf88, (4, 4, 128, 128), (65536, 16384, 128, 1))
        # Topologically Sorted Source Nodes: [conv2d_32], Original ATen: [aten.convolution]
        buf89 = extern_kernels.convolution(buf88, primals_61, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf89, (4, 256, 128, 128), (4194304, 16384, 128, 1))
        buf90 = empty_strided_cuda((4, 256, 129, 129), (4260096, 16641, 129, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_30, mul_10, result_31, add_3, output_tensor_3, hidden_states_21], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.constant_pad_nd]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_constant_pad_nd_convolution_div_mul_9.run(buf70, buf87, primals_59, buf89, buf90, 17040384, grid=grid(17040384), stream=stream0)
        del buf87
        del buf89
        del primals_59
        # Topologically Sorted Source Nodes: [result_33], Original ATen: [aten.convolution]
        buf91 = extern_kernels.convolution(buf90, primals_62, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf91, (4, 256, 64, 64), (1048576, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_34], Original ATen: [aten.convolution]
        buf92 = extern_kernels.convolution(buf90, primals_64, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf92, (4, 4, 64, 64), (16384, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_35], Original ATen: [aten.convolution]
        buf93 = extern_kernels.convolution(buf92, primals_65, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf93, (4, 256, 64, 64), (1048576, 4096, 64, 1))
        buf94 = buf91; del buf91  # reuse
        buf95 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf96 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf98 = reinterpret_tensor(buf96, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf96  # reuse
        # Topologically Sorted Source Nodes: [result_33, mul_11, result_34, hidden_states_22], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_10.run(buf94, buf98, primals_63, buf93, buf95, 128, 32768, grid=grid(128), stream=stream0)
        del primals_63
        buf99 = buf93; del buf93  # reuse
        buf100 = buf99; del buf99  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_22, hidden_states_23], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_11.run(buf100, buf94, buf95, buf98, primals_66, primals_67, 4194304, grid=grid(4194304), stream=stream0)
        # Topologically Sorted Source Nodes: [result_36], Original ATen: [aten.convolution]
        buf101 = extern_kernels.convolution(buf100, primals_68, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf101, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_37], Original ATen: [aten.convolution]
        buf102 = extern_kernels.convolution(buf100, primals_70, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf102, (4, 4, 64, 64), (16384, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_38], Original ATen: [aten.convolution]
        buf103 = extern_kernels.convolution(buf102, primals_71, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf103, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        buf104 = buf101; del buf101  # reuse
        buf105 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf106 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf108 = reinterpret_tensor(buf106, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf106  # reuse
        # Topologically Sorted Source Nodes: [result_36, mul_12, result_37, hidden_states_24], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_12.run(buf104, buf108, primals_69, buf103, buf105, 128, 65536, grid=grid(128), stream=stream0)
        del primals_69
        buf109 = buf103; del buf103  # reuse
        buf110 = buf109; del buf109  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_24, hidden_states_25], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_13.run(buf110, buf104, buf105, buf108, primals_72, primals_73, 8388608, grid=grid(8388608), stream=stream0)
        # Topologically Sorted Source Nodes: [result_39], Original ATen: [aten.convolution]
        buf111 = extern_kernels.convolution(buf110, primals_74, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf111, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_40], Original ATen: [aten.convolution]
        buf112 = extern_kernels.convolution(buf110, primals_76, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf112, (4, 4, 64, 64), (16384, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_41], Original ATen: [aten.convolution]
        buf113 = extern_kernels.convolution(buf112, primals_77, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf113, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [result_42], Original ATen: [aten.convolution]
        buf114 = extern_kernels.convolution(buf94, primals_78, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf114, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_43], Original ATen: [aten.convolution]
        buf115 = extern_kernels.convolution(buf94, primals_80, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf115, (4, 4, 64, 64), (16384, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_44], Original ATen: [aten.convolution]
        buf116 = extern_kernels.convolution(buf115, primals_81, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf116, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        buf117 = buf114; del buf114  # reuse
        buf118 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf119 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf121 = reinterpret_tensor(buf119, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf119  # reuse
        # Topologically Sorted Source Nodes: [result_39, mul_13, result_40, result_42, mul_14, result_43, add_4, output_tensor_4, hidden_states_27], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_14.run(buf117, buf121, primals_79, buf116, buf111, primals_75, buf113, buf118, 128, 65536, grid=grid(128), stream=stream0)
        del buf111
        del buf113
        del primals_75
        del primals_79
        buf122 = buf116; del buf116  # reuse
        buf123 = buf122; del buf122  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_27, hidden_states_28], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_13.run(buf123, buf117, buf118, buf121, primals_82, primals_83, 8388608, grid=grid(8388608), stream=stream0)
        # Topologically Sorted Source Nodes: [result_45], Original ATen: [aten.convolution]
        buf124 = extern_kernels.convolution(buf123, primals_84, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf124, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_46], Original ATen: [aten.convolution]
        buf125 = extern_kernels.convolution(buf123, primals_86, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf125, (4, 4, 64, 64), (16384, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_47], Original ATen: [aten.convolution]
        buf126 = extern_kernels.convolution(buf125, primals_87, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf126, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        buf127 = buf124; del buf124  # reuse
        buf128 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf129 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf131 = reinterpret_tensor(buf129, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf129  # reuse
        # Topologically Sorted Source Nodes: [result_45, mul_15, result_46, hidden_states_29], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_12.run(buf127, buf131, primals_85, buf126, buf128, 128, 65536, grid=grid(128), stream=stream0)
        del primals_85
        buf132 = buf126; del buf126  # reuse
        buf133 = buf132; del buf132  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_29, hidden_states_30], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_13.run(buf133, buf127, buf128, buf131, primals_88, primals_89, 8388608, grid=grid(8388608), stream=stream0)
        # Topologically Sorted Source Nodes: [result_48], Original ATen: [aten.convolution]
        buf134 = extern_kernels.convolution(buf133, primals_90, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf134, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_49], Original ATen: [aten.convolution]
        buf135 = extern_kernels.convolution(buf133, primals_92, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf135, (4, 4, 64, 64), (16384, 4096, 64, 1))
        # Topologically Sorted Source Nodes: [conv2d_50], Original ATen: [aten.convolution]
        buf136 = extern_kernels.convolution(buf135, primals_93, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf136, (4, 512, 64, 64), (2097152, 4096, 64, 1))
        buf137 = empty_strided_cuda((4, 512, 65, 65), (2163200, 4225, 65, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_48, mul_16, result_49, add_5, output_tensor_5, hidden_states_32], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.constant_pad_nd]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_constant_pad_nd_convolution_div_mul_15.run(buf117, buf134, primals_91, buf136, buf137, 8652800, grid=grid(8652800), stream=stream0)
        del buf134
        del buf136
        del primals_91
        # Topologically Sorted Source Nodes: [result_51], Original ATen: [aten.convolution]
        buf138 = extern_kernels.convolution(buf137, primals_94, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf138, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_52], Original ATen: [aten.convolution]
        buf139 = extern_kernels.convolution(buf137, primals_96, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf139, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_53], Original ATen: [aten.convolution]
        buf140 = extern_kernels.convolution(buf139, primals_97, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf140, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf141 = buf138; del buf138  # reuse
        buf142 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf143 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf145 = reinterpret_tensor(buf143, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf143  # reuse
        # Topologically Sorted Source Nodes: [result_51, mul_17, result_52, hidden_states_33], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_16.run(buf141, buf145, primals_95, buf140, buf142, 128, 16384, grid=grid(128), stream=stream0)
        del primals_95
        buf146 = buf140; del buf140  # reuse
        buf147 = buf146; del buf146  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_33, hidden_states_34], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf147, buf141, buf142, buf145, primals_98, primals_99, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_54], Original ATen: [aten.convolution]
        buf148 = extern_kernels.convolution(buf147, primals_100, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf148, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_55], Original ATen: [aten.convolution]
        buf149 = extern_kernels.convolution(buf147, primals_102, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf149, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_56], Original ATen: [aten.convolution]
        buf150 = extern_kernels.convolution(buf149, primals_103, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf150, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf151 = buf148; del buf148  # reuse
        buf152 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf153 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf155 = reinterpret_tensor(buf153, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf153  # reuse
        # Topologically Sorted Source Nodes: [result_54, mul_18, result_55, hidden_states_35], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_16.run(buf151, buf155, primals_101, buf150, buf152, 128, 16384, grid=grid(128), stream=stream0)
        del primals_101
        buf156 = buf150; del buf150  # reuse
        buf157 = buf156; del buf156  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_35, hidden_states_36], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf157, buf151, buf152, buf155, primals_104, primals_105, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_57], Original ATen: [aten.convolution]
        buf158 = extern_kernels.convolution(buf157, primals_106, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf158, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_58], Original ATen: [aten.convolution]
        buf159 = extern_kernels.convolution(buf157, primals_108, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf159, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_59], Original ATen: [aten.convolution]
        buf160 = extern_kernels.convolution(buf159, primals_109, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf160, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf161 = buf158; del buf158  # reuse
        buf162 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf163 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf165 = reinterpret_tensor(buf163, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf163  # reuse
        # Topologically Sorted Source Nodes: [result_57, mul_19, result_58, add_6, output_tensor_6, hidden_states_38], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_18.run(buf161, buf165, buf141, primals_107, buf160, buf162, 128, 16384, grid=grid(128), stream=stream0)
        del primals_107
        buf166 = buf160; del buf160  # reuse
        buf167 = buf166; del buf166  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_38, hidden_states_39], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf167, buf161, buf162, buf165, primals_110, primals_111, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_60], Original ATen: [aten.convolution]
        buf168 = extern_kernels.convolution(buf167, primals_112, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf168, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_61], Original ATen: [aten.convolution]
        buf169 = extern_kernels.convolution(buf167, primals_114, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf169, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_62], Original ATen: [aten.convolution]
        buf170 = extern_kernels.convolution(buf169, primals_115, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf170, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf171 = buf168; del buf168  # reuse
        buf172 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf173 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf175 = reinterpret_tensor(buf173, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf173  # reuse
        # Topologically Sorted Source Nodes: [result_60, mul_20, result_61, hidden_states_40], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_16.run(buf171, buf175, primals_113, buf170, buf172, 128, 16384, grid=grid(128), stream=stream0)
        del primals_113
        buf176 = buf170; del buf170  # reuse
        buf177 = buf176; del buf176  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_40, hidden_states_41], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf177, buf171, buf172, buf175, primals_116, primals_117, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_63], Original ATen: [aten.convolution]
        buf178 = extern_kernels.convolution(buf177, primals_118, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf178, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_64], Original ATen: [aten.convolution]
        buf179 = extern_kernels.convolution(buf177, primals_120, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf179, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_65], Original ATen: [aten.convolution]
        buf180 = extern_kernels.convolution(buf179, primals_121, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf180, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf181 = buf178; del buf178  # reuse
        buf182 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf183 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf185 = reinterpret_tensor(buf183, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf183  # reuse
        # Topologically Sorted Source Nodes: [result_63, mul_21, result_64, add_7, output_tensor_7, hidden_states_43], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_18.run(buf181, buf185, buf161, primals_119, buf180, buf182, 128, 16384, grid=grid(128), stream=stream0)
        del primals_119
        buf186 = buf180; del buf180  # reuse
        buf187 = buf186; del buf186  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_43, hidden_states_44], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf187, buf181, buf182, buf185, primals_122, primals_123, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_66], Original ATen: [aten.convolution]
        buf188 = extern_kernels.convolution(buf187, primals_124, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf188, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_67], Original ATen: [aten.convolution]
        buf189 = extern_kernels.convolution(buf187, primals_126, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf189, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_68], Original ATen: [aten.convolution]
        buf190 = extern_kernels.convolution(buf189, primals_127, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf190, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf191 = buf188; del buf188  # reuse
        buf192 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf193 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf195 = reinterpret_tensor(buf193, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf193  # reuse
        # Topologically Sorted Source Nodes: [result_66, mul_22, result_67, hidden_states_45], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_16.run(buf191, buf195, primals_125, buf190, buf192, 128, 16384, grid=grid(128), stream=stream0)
        del primals_125
        buf196 = buf190; del buf190  # reuse
        buf197 = buf196; del buf196  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_45, hidden_states_46], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf197, buf191, buf192, buf195, primals_128, primals_129, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_69], Original ATen: [aten.convolution]
        buf198 = extern_kernels.convolution(buf197, primals_130, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf198, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_70], Original ATen: [aten.convolution]
        buf199 = extern_kernels.convolution(buf197, primals_132, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf199, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_71], Original ATen: [aten.convolution]
        buf200 = extern_kernels.convolution(buf199, primals_133, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf200, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf201 = buf198; del buf198  # reuse
        buf202 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf203 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf205 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_69, mul_23, result_70, add_8, output_tensor_8, group_norm_18], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_19.run(buf201, buf181, primals_131, buf200, buf202, buf203, buf205, 128, 16384, grid=grid(128), stream=stream0)
        del primals_131
        buf206 = reinterpret_tensor(buf200, (4, 512, 1024), (524288, 1024, 1), 0); del buf200  # reuse
        # Topologically Sorted Source Nodes: [group_norm_18], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_20.run(buf201, buf202, buf203, primals_134, primals_135, buf206, 2097152, grid=grid(2097152), stream=stream0)
        del primals_135
        buf207 = empty_strided_cuda((4, 1024, 512), (524288, 512, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_72], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf206, (4, 1024, 512), (524288, 1, 1024), 0), reinterpret_tensor(primals_136, (4, 512, 512), (0, 1, 512), 0), out=buf207)
        buf208 = empty_strided_cuda((4, 1024, 512), (524288, 512, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_1], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_21.run(buf206, buf208, 4096, 512, grid=grid(4096, 512), stream=stream0)
        buf209 = empty_strided_cuda((4096, 4), (4, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf208, (4096, 512), (512, 1), 0), reinterpret_tensor(primals_138, (512, 4), (1, 512), 0), out=buf209)
        buf210 = empty_strided_cuda((4096, 512), (512, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(buf209, reinterpret_tensor(primals_139, (4, 512), (1, 4), 0), out=buf210)
        buf211 = empty_strided_cuda((4, 1024, 512), (524288, 512, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_75], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf206, (4, 1024, 512), (524288, 1, 1024), 0), reinterpret_tensor(primals_140, (4, 512, 512), (0, 1, 512), 0), out=buf211)
        buf212 = empty_strided_cuda((4096, 4), (4, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf208, (4096, 512), (512, 1), 0), reinterpret_tensor(primals_142, (512, 4), (1, 512), 0), out=buf212)
        buf213 = empty_strided_cuda((4096, 512), (512, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(buf212, reinterpret_tensor(primals_143, (4, 512), (1, 4), 0), out=buf213)
        buf214 = empty_strided_cuda((4, 1024, 512), (524288, 512, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_78], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf206, (4, 1024, 512), (524288, 1, 1024), 0), reinterpret_tensor(primals_144, (4, 512, 512), (0, 1, 512), 0), out=buf214)
        buf215 = empty_strided_cuda((4096, 4), (4, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_7], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf208, (4096, 512), (512, 1), 0), reinterpret_tensor(primals_146, (512, 4), (1, 512), 0), out=buf215)
        buf216 = reinterpret_tensor(buf206, (4096, 512), (512, 1), 0); del buf206  # reuse
        # Topologically Sorted Source Nodes: [linear_8], Original ATen: [aten.mm]
        extern_kernels.mm(buf215, reinterpret_tensor(primals_147, (4, 512), (1, 4), 0), out=buf216)
        buf217 = buf207; del buf207  # reuse
        # Topologically Sorted Source Nodes: [result_72, mul_24, result_73], Original ATen: [aten.add, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_22.run(buf217, primals_137, buf210, 2097152, grid=grid(2097152), stream=stream0)
        del primals_137
        buf218 = buf211; del buf211  # reuse
        # Topologically Sorted Source Nodes: [result_75, mul_25, result_76], Original ATen: [aten.add, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_22.run(buf218, primals_141, buf213, 2097152, grid=grid(2097152), stream=stream0)
        del primals_141
        buf219 = buf214; del buf214  # reuse
        # Topologically Sorted Source Nodes: [result_78, mul_26, result_79], Original ATen: [aten.add, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_22.run(buf219, primals_145, buf216, 2097152, grid=grid(2097152), stream=stream0)
        del primals_145
        # Topologically Sorted Source Nodes: [hidden_states_50], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf220 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf217, (4, 1, 1024, 512), (524288, 512, 512, 1), 0), reinterpret_tensor(buf218, (4, 1, 1024, 512), (524288, 512, 512, 1), 0), reinterpret_tensor(buf219, (4, 1, 1024, 512), (524288, 512, 512, 1), 0), None, True)
        buf221 = buf220[0]
        buf222 = buf220[1]
        buf223 = buf220[2]
        buf224 = buf220[3]
        del buf220
        buf225 = buf216; del buf216  # reuse
        # Topologically Sorted Source Nodes: [result_81], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (4096, 512), (512, 1), 0), reinterpret_tensor(primals_148, (512, 512), (1, 512), 0), out=buf225)
        buf226 = empty_strided_cuda((4096, 4), (4, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_10], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf221, (4096, 512), (512, 1), 0), reinterpret_tensor(primals_150, (512, 4), (1, 512), 0), out=buf226)
        buf227 = buf213; del buf213  # reuse
        # Topologically Sorted Source Nodes: [linear_11], Original ATen: [aten.mm]
        extern_kernels.mm(buf226, reinterpret_tensor(primals_151, (4, 512), (1, 4), 0), out=buf227)
        buf228 = reinterpret_tensor(buf210, (4, 512, 32, 32), (524288, 1024, 32, 1), 0); del buf210  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_55, hidden_states_56, hidden_states_57], Original ATen: [aten.add, aten.div, aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_div_23.run(buf225, primals_149, buf227, buf201, buf228, 2048, 1024, grid=grid(2048, 1024), stream=stream0)
        buf229 = reinterpret_tensor(buf203, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf203  # reuse
        buf230 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf232 = reinterpret_tensor(buf230, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf230  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_57], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_native_group_norm_24.run(buf232, buf228, buf229, 128, 16384, grid=grid(128), stream=stream0)
        buf233 = empty_strided_cuda((4, 512, 32, 32), (524288, 1024, 32, 1), torch.float32)
        buf234 = buf233; del buf233  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_57, hidden_states_58], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf234, buf228, buf229, buf232, primals_152, primals_153, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_84], Original ATen: [aten.convolution]
        buf235 = extern_kernels.convolution(buf234, primals_154, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf235, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_73], Original ATen: [aten.convolution]
        buf236 = extern_kernels.convolution(buf234, primals_156, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf236, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_74], Original ATen: [aten.convolution]
        buf237 = extern_kernels.convolution(buf236, primals_157, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf237, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf238 = buf235; del buf235  # reuse
        buf239 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf240 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf242 = reinterpret_tensor(buf240, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf240  # reuse
        # Topologically Sorted Source Nodes: [result_84, mul_28, result_85, hidden_states_59], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_16.run(buf238, buf242, primals_155, buf237, buf239, 128, 16384, grid=grid(128), stream=stream0)
        del primals_155
        buf243 = buf237; del buf237  # reuse
        buf244 = buf243; del buf243  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_59, hidden_states_60], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf244, buf238, buf239, buf242, primals_158, primals_159, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_87], Original ATen: [aten.convolution]
        buf245 = extern_kernels.convolution(buf244, primals_160, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf245, (4, 512, 32, 32), (524288, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_76], Original ATen: [aten.convolution]
        buf246 = extern_kernels.convolution(buf244, primals_162, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf246, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_77], Original ATen: [aten.convolution]
        buf247 = extern_kernels.convolution(buf246, primals_163, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf247, (4, 512, 32, 32), (524288, 1024, 32, 1))
        buf248 = buf245; del buf245  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_55, hidden_states_56, result_87, mul_29, result_88, add_10, output_tensor_9, sample], Original ATen: [aten.add, aten.div, aten.convolution, aten.mul, aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_convolution_div_mul_25.run(buf248, buf225, primals_149, buf227, buf201, primals_161, buf247, 2048, 1024, grid=grid(2048, 1024), stream=stream0)
        del buf225
        del buf227
        del primals_149
        del primals_161
        buf249 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf250 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf252 = reinterpret_tensor(buf250, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf250  # reuse
        # Topologically Sorted Source Nodes: [sample], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_native_group_norm_24.run(buf252, buf248, buf249, 128, 16384, grid=grid(128), stream=stream0)
        buf253 = buf247; del buf247  # reuse
        buf254 = buf253; del buf253  # reuse
        # Topologically Sorted Source Nodes: [sample, sample_1], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_17.run(buf254, buf248, buf249, buf252, primals_164, primals_165, 2097152, grid=grid(2097152), stream=stream0)
        # Topologically Sorted Source Nodes: [result_90], Original ATen: [aten.convolution]
        buf255 = extern_kernels.convolution(buf254, primals_166, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf255, (4, 8, 32, 32), (8192, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_79], Original ATen: [aten.convolution]
        buf256 = extern_kernels.convolution(buf254, primals_168, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf256, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_80], Original ATen: [aten.convolution]
        buf257 = extern_kernels.convolution(buf256, primals_169, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf257, (4, 8, 32, 32), (8192, 1024, 32, 1))
        buf258 = buf255; del buf255  # reuse
        # Topologically Sorted Source Nodes: [result_90, mul_30, result_91], Original ATen: [aten.convolution, aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_convolution_mul_26.run(buf258, primals_167, buf257, 32768, grid=grid(32768), stream=stream0)
        del buf257
        del primals_167
        # Topologically Sorted Source Nodes: [enc], Original ATen: [aten.convolution]
        buf259 = extern_kernels.convolution(buf258, primals_170, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf259, (4, 8, 32, 32), (8192, 1024, 32, 1))
        buf260 = buf259; del buf259  # reuse
        # Topologically Sorted Source Nodes: [enc], Original ATen: [aten.convolution]
        stream0 = get_raw_stream(0)
        triton_poi_fused_convolution_27.run(buf260, primals_171, 32768, grid=grid(32768), stream=stream0)
        del primals_171
        buf261 = empty_strided_cuda((1, ), (1, ), torch.int64)
        # Topologically Sorted Source Nodes: [], Original ATen: []
        aten.randint.low_out(-9223372036854775808, 9223372036854775807, [1], out=buf261)
        buf262 = empty_strided_cuda((4, 4, 32, 32), (4096, 1024, 32, 1), torch.float32)
        buf263 = empty_strided_cuda((4, 4, 32, 32), (4096, 1024, 32, 1), torch.float32)
        # Topologically Sorted Source Nodes: [clamp, mul_31, exp, randn, mul_32, x_31, mul_33], Original ATen: [aten.clamp, aten.mul, aten.exp, aten.randn, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clamp_exp_mul_randn_28.run(buf261, buf260, buf262, buf263, 0, 16384, grid=grid(16384), stream=stream0)
        del buf261
        buf264 = empty_strided_cuda((4, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [emb_3], Original ATen: [aten.cat]
        stream0 = get_raw_stream(0)
        triton_poi_fused_cat_29.run(primals_172, buf264, 1280, grid=grid(1280), stream=stream0)
        buf265 = empty_strided_cuda((4, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [emb_4], Original ATen: [aten.cat]
        stream0 = get_raw_stream(0)
        triton_poi_fused_cat_30.run(buf264, buf265, 1280, grid=grid(1280), stream=stream0)
        del buf264
        buf266 = empty_strided_cuda((4, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [emb_4, sample_2], Original ATen: [aten.cat, aten.addmm]
        extern_kernels.mm(buf265, reinterpret_tensor(primals_173, (320, 1280), (1, 320), 0), out=buf266)
        del primals_173
        buf267 = buf266; del buf266  # reuse
        # Topologically Sorted Source Nodes: [sample_2, sample_3], Original ATen: [aten.addmm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_addmm_silu_31.run(buf267, primals_174, 5120, grid=grid(5120), stream=stream0)
        del primals_174
        buf268 = empty_strided_cuda((4, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [sample_2, sample_3, sample_4], Original ATen: [aten.addmm, aten.silu]
        extern_kernels.mm(buf267, reinterpret_tensor(primals_175, (1280, 1280), (1, 1280), 0), out=buf268)
        del primals_175
        # Topologically Sorted Source Nodes: [result_93], Original ATen: [aten.convolution]
        buf269 = extern_kernels.convolution(buf263, primals_178, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf269, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_83], Original ATen: [aten.convolution]
        buf270 = extern_kernels.convolution(buf263, primals_180, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf270, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_84], Original ATen: [aten.convolution]
        buf271 = extern_kernels.convolution(buf270, primals_181, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf271, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf272 = buf269; del buf269  # reuse
        buf273 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf274 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf276 = reinterpret_tensor(buf274, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf274  # reuse
        # Topologically Sorted Source Nodes: [result_93, mul_37, result_94, hidden_states_62], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_32.run(buf272, buf276, primals_179, buf271, buf273, 128, 10240, grid=grid(128), stream=stream0)
        del primals_179
        buf277 = buf271; del buf271  # reuse
        buf278 = buf277; del buf277  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_62, hidden_states_63], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf278, buf272, buf273, buf276, primals_182, primals_183, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_96], Original ATen: [aten.convolution]
        buf279 = extern_kernels.convolution(buf278, primals_184, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf279, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_86], Original ATen: [aten.convolution]
        buf280 = extern_kernels.convolution(buf278, primals_186, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf280, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_87], Original ATen: [aten.convolution]
        buf281 = extern_kernels.convolution(buf280, primals_187, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf281, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf282 = buf268; del buf268  # reuse
        # Topologically Sorted Source Nodes: [sample_4, temb], Original ATen: [aten.addmm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_addmm_silu_31.run(buf282, primals_176, 5120, grid=grid(5120), stream=stream0)
        del primals_176
        buf283 = buf265; del buf265  # reuse
        # Topologically Sorted Source Nodes: [linear_14], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_188, (1280, 320), (1, 1280), 0), out=buf283)
        del primals_188
        buf284 = buf279; del buf279  # reuse
        buf285 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf286 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf288 = reinterpret_tensor(buf286, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf286  # reuse
        # Topologically Sorted Source Nodes: [result_96, mul_38, result_97, hidden_states_64, hidden_states_65], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_34.run(buf284, buf288, primals_185, buf281, buf283, primals_189, buf285, 128, 10240, grid=grid(128), stream=stream0)
        del primals_185
        del primals_189
        buf289 = buf281; del buf281  # reuse
        buf290 = buf289; del buf289  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_65, hidden_states_66], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf290, buf284, buf285, buf288, primals_190, primals_191, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_99], Original ATen: [aten.convolution]
        buf291 = extern_kernels.convolution(buf290, primals_192, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf291, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_89], Original ATen: [aten.convolution]
        buf292 = extern_kernels.convolution(buf290, primals_194, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf292, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_90], Original ATen: [aten.convolution]
        buf293 = extern_kernels.convolution(buf292, primals_195, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf293, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf294 = buf291; del buf291  # reuse
        buf295 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf296 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf298 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_99, mul_39, result_100, add_13, output_tensor_10, hidden_states_68], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_35.run(buf294, buf272, primals_193, buf293, buf295, buf296, buf298, 128, 10240, grid=grid(128), stream=stream0)
        del primals_193
        buf299 = buf293; del buf293  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_68], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_36.run(buf294, buf295, buf296, primals_196, primals_197, buf299, 1310720, grid=grid(1310720), stream=stream0)
        del primals_197
        buf300 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_102], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf299, (4, 1024, 320), (327680, 1, 1024), 0), reinterpret_tensor(primals_198, (4, 320, 320), (0, 1, 320), 0), out=buf300)
        buf301 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_37.run(buf299, buf301, 4096, 320, grid=grid(4096, 320), stream=stream0)
        buf302 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_16], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf301, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_200, (320, 80), (1, 320), 0), out=buf302)
        buf303 = reinterpret_tensor(buf299, (4096, 320), (320, 1), 0); del buf299  # reuse
        # Topologically Sorted Source Nodes: [linear_17], Original ATen: [aten.mm]
        extern_kernels.mm(buf302, reinterpret_tensor(primals_201, (80, 320), (1, 80), 0), out=buf303)
        buf307 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf308 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2110 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_102, mul_40, result_103, norm_hidden_states], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38.run(buf300, primals_199, buf303, primals_202, primals_203, buf307, buf308, buf2110, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_203
        buf309 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_105], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_204, (320, 320), (1, 320), 0), out=buf309)
        buf310 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_19], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_205, (320, 80), (1, 320), 0), out=buf310)
        buf311 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_20], Original ATen: [aten.mm]
        extern_kernels.mm(buf310, reinterpret_tensor(primals_206, (80, 320), (1, 80), 0), out=buf311)
        buf312 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_108], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_207, (320, 320), (1, 320), 0), out=buf312)
        buf313 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_22], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_208, (320, 80), (1, 320), 0), out=buf313)
        buf314 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_23], Original ATen: [aten.mm]
        extern_kernels.mm(buf313, reinterpret_tensor(primals_209, (80, 320), (1, 80), 0), out=buf314)
        buf315 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_111], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_210, (320, 320), (1, 320), 0), out=buf315)
        buf316 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_25], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_211, (320, 80), (1, 320), 0), out=buf316)
        buf317 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_26], Original ATen: [aten.mm]
        extern_kernels.mm(buf316, reinterpret_tensor(primals_212, (80, 320), (1, 80), 0), out=buf317)
        buf318 = reinterpret_tensor(buf309, (4, 1024, 320), (327680, 320, 1), 0); del buf309  # reuse
        # Topologically Sorted Source Nodes: [mul_41, result_106], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf318, buf311, 1310720, grid=grid(1310720), stream=stream0)
        buf319 = reinterpret_tensor(buf312, (4, 1024, 320), (327680, 320, 1), 0); del buf312  # reuse
        # Topologically Sorted Source Nodes: [mul_42, result_109], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf319, buf314, 1310720, grid=grid(1310720), stream=stream0)
        buf320 = reinterpret_tensor(buf315, (4, 1024, 320), (327680, 320, 1), 0); del buf315  # reuse
        # Topologically Sorted Source Nodes: [mul_43, result_112], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf320, buf317, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_70], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf321 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf318, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf319, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf320, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), None, True)
        buf322 = buf321[0]
        buf323 = buf321[1]
        buf324 = buf321[2]
        buf325 = buf321[3]
        del buf321
        buf326 = buf317; del buf317  # reuse
        # Topologically Sorted Source Nodes: [result_114], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf322, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_213, (320, 320), (1, 320), 0), out=buf326)
        buf327 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_28], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf322, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_215, (320, 80), (1, 320), 0), out=buf327)
        buf328 = buf314; del buf314  # reuse
        # Topologically Sorted Source Nodes: [linear_29], Original ATen: [aten.mm]
        extern_kernels.mm(buf327, reinterpret_tensor(primals_216, (80, 320), (1, 80), 0), out=buf328)
        buf329 = reinterpret_tensor(buf326, (4, 1024, 320), (327680, 320, 1), 0); del buf326  # reuse
        buf333 = reinterpret_tensor(buf311, (4, 1024, 320), (327680, 320, 1), 0); del buf311  # reuse
        buf334 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2109 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_102, mul_40, result_103, mul_44, result_115, hidden_states_74, hidden_states_75, norm_hidden_states_1], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40.run(buf329, primals_214, buf328, buf300, primals_199, buf303, primals_217, primals_218, buf333, buf334, buf2109, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_199
        del primals_214
        del primals_218
        buf335 = buf328; del buf328  # reuse
        # Topologically Sorted Source Nodes: [result_117], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf334, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_219, (320, 320), (1, 320), 0), out=buf335)
        buf336 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_31], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf334, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_220, (320, 80), (1, 320), 0), out=buf336)
        buf337 = buf303; del buf303  # reuse
        # Topologically Sorted Source Nodes: [linear_32], Original ATen: [aten.mm]
        extern_kernels.mm(buf336, reinterpret_tensor(primals_221, (80, 320), (1, 80), 0), out=buf337)
        buf338 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_120], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_222, (1024, 320), (1, 1024), 0), out=buf338)
        del primals_222
        buf339 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_34], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_223, (1024, 80), (1, 1024), 0), out=buf339)
        del primals_223
        buf340 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_35], Original ATen: [aten.mm]
        extern_kernels.mm(buf339, reinterpret_tensor(primals_224, (80, 320), (1, 80), 0), out=buf340)
        buf341 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_123], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_225, (1024, 320), (1, 1024), 0), out=buf341)
        del primals_225
        buf342 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_37], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_226, (1024, 80), (1, 1024), 0), out=buf342)
        del primals_226
        buf343 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_38], Original ATen: [aten.mm]
        extern_kernels.mm(buf342, reinterpret_tensor(primals_227, (80, 320), (1, 80), 0), out=buf343)
        buf344 = reinterpret_tensor(buf335, (4, 1024, 320), (327680, 320, 1), 0); del buf335  # reuse
        # Topologically Sorted Source Nodes: [mul_45, result_118], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf344, buf337, 1310720, grid=grid(1310720), stream=stream0)
        buf345 = reinterpret_tensor(buf338, (4, 77, 320), (24640, 320, 1), 0); del buf338  # reuse
        # Topologically Sorted Source Nodes: [mul_46, result_121], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf345, buf340, 98560, grid=grid(98560), stream=stream0)
        buf346 = reinterpret_tensor(buf341, (4, 77, 320), (24640, 320, 1), 0); del buf341  # reuse
        # Topologically Sorted Source Nodes: [mul_47, result_124], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf346, buf343, 98560, grid=grid(98560), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_76], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf347 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf344, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf345, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf346, (4, 5, 77, 64), (24640, 64, 320, 1), 0), None, True)
        buf348 = buf347[0]
        buf349 = buf347[1]
        buf350 = buf347[2]
        buf351 = buf347[3]
        del buf347
        buf352 = buf337; del buf337  # reuse
        # Topologically Sorted Source Nodes: [result_126], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf348, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_228, (320, 320), (1, 320), 0), out=buf352)
        buf353 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_40], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf348, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_230, (320, 80), (1, 320), 0), out=buf353)
        buf354 = reinterpret_tensor(buf300, (4096, 320), (320, 1), 0); del buf300  # reuse
        # Topologically Sorted Source Nodes: [linear_41], Original ATen: [aten.mm]
        extern_kernels.mm(buf353, reinterpret_tensor(primals_231, (80, 320), (1, 80), 0), out=buf354)
        buf358 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf359 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2108 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_48, result_127, hidden_states_80, hidden_states_81, norm_hidden_states_2], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42.run(buf352, primals_229, buf354, buf329, primals_232, primals_233, buf358, buf359, buf2108, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_233
        buf360 = empty_strided_cuda((4096, 2560), (2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_129], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf359, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_234, (320, 2560), (1, 320), 0), out=buf360)
        buf361 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_43], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf359, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_236, (320, 80), (1, 320), 0), out=buf361)
        buf362 = empty_strided_cuda((4096, 2560), (2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_44], Original ATen: [aten.mm]
        extern_kernels.mm(buf361, reinterpret_tensor(primals_237, (80, 2560), (1, 80), 0), out=buf362)
        buf363 = reinterpret_tensor(buf360, (4, 1024, 2560), (2621440, 2560, 1), 0); del buf360  # reuse
        # Topologically Sorted Source Nodes: [mul_49, result_130], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_43.run(buf363, primals_235, buf362, 10485760, grid=grid(10485760), stream=stream0)
        del primals_235
        buf364 = empty_strided_cuda((4, 1024, 1280), (1310720, 1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu, hidden_states_83], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_44.run(buf363, buf364, 5242880, grid=grid(5242880), stream=stream0)
        buf365 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_132], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf364, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_238, (1280, 320), (1, 1280), 0), out=buf365)
        buf366 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_46], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf364, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_240, (1280, 80), (1, 1280), 0), out=buf366)
        buf367 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_47], Original ATen: [aten.mm]
        extern_kernels.mm(buf366, reinterpret_tensor(primals_241, (80, 320), (1, 80), 0), out=buf367)
        buf368 = reinterpret_tensor(buf365, (4, 1024, 320), (327680, 320, 1), 0); del buf365  # reuse
        # Topologically Sorted Source Nodes: [mul_48, result_127, hidden_states_80, hidden_states_81, mul_51, result_133, hidden_states_85], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_45.run(buf368, primals_239, buf367, buf352, primals_229, buf354, buf329, 1310720, grid=grid(1310720), stream=stream0)
        del primals_229
        del primals_239
        buf369 = buf367; del buf367  # reuse
        # Topologically Sorted Source Nodes: [result_135], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf368, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_242, (320, 320), (1, 320), 0), out=buf369)
        buf370 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_49], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf368, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_244, (320, 80), (1, 320), 0), out=buf370)
        buf371 = buf354; del buf354  # reuse
        # Topologically Sorted Source Nodes: [linear_50], Original ATen: [aten.mm]
        extern_kernels.mm(buf370, reinterpret_tensor(primals_245, (80, 320), (1, 80), 0), out=buf371)
        buf372 = reinterpret_tensor(buf352, (4, 320, 32, 32), (327680, 1024, 32, 1), 0); del buf352  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_86, output], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_46.run(buf369, primals_243, buf371, buf294, buf372, 1280, 1024, grid=grid(1280, 1024), stream=stream0)
        del primals_243
        buf373 = reinterpret_tensor(buf296, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf296  # reuse
        buf374 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf376 = reinterpret_tensor(buf374, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf374  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_87], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_native_group_norm_47.run(buf376, buf372, buf373, 128, 10240, grid=grid(128), stream=stream0)
        buf377 = reinterpret_tensor(buf371, (4, 320, 32, 32), (327680, 1024, 32, 1), 0); del buf371  # reuse
        buf378 = buf377; del buf377  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_87, hidden_states_88], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf378, buf372, buf373, buf376, primals_246, primals_247, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_138], Original ATen: [aten.convolution]
        buf379 = extern_kernels.convolution(buf378, primals_248, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf379, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_92], Original ATen: [aten.convolution]
        buf380 = extern_kernels.convolution(buf378, primals_250, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf380, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_93], Original ATen: [aten.convolution]
        buf381 = extern_kernels.convolution(buf380, primals_251, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf381, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf382 = buf283; del buf283  # reuse
        # Topologically Sorted Source Nodes: [linear_51], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_252, (1280, 320), (1, 1280), 0), out=buf382)
        del primals_252
        buf383 = buf379; del buf379  # reuse
        buf384 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf385 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf387 = reinterpret_tensor(buf385, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf385  # reuse
        # Topologically Sorted Source Nodes: [result_138, mul_53, result_139, hidden_states_89, hidden_states_90], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_34.run(buf383, buf387, primals_249, buf381, buf382, primals_253, buf384, 128, 10240, grid=grid(128), stream=stream0)
        del primals_249
        del primals_253
        buf388 = buf381; del buf381  # reuse
        buf389 = buf388; del buf388  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_90, hidden_states_91], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf389, buf383, buf384, buf387, primals_254, primals_255, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_141], Original ATen: [aten.convolution]
        buf390 = extern_kernels.convolution(buf389, primals_256, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf390, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_95], Original ATen: [aten.convolution]
        buf391 = extern_kernels.convolution(buf389, primals_258, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf391, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_96], Original ATen: [aten.convolution]
        buf392 = extern_kernels.convolution(buf391, primals_259, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf392, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf393 = buf390; del buf390  # reuse
        buf394 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf395 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf397 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_141, mul_54, result_142, add_19, output_tensor_11, hidden_states_93], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_35.run(buf393, buf372, primals_257, buf392, buf394, buf395, buf397, 128, 10240, grid=grid(128), stream=stream0)
        del primals_257
        buf398 = buf392; del buf392  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_93], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_36.run(buf393, buf394, buf395, primals_260, primals_261, buf398, 1310720, grid=grid(1310720), stream=stream0)
        del primals_261
        buf399 = reinterpret_tensor(buf369, (4, 1024, 320), (327680, 320, 1), 0); del buf369  # reuse
        # Topologically Sorted Source Nodes: [result_144], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf398, (4, 1024, 320), (327680, 1, 1024), 0), reinterpret_tensor(primals_262, (4, 320, 320), (0, 1, 320), 0), out=buf399)
        buf400 = buf329; del buf329  # reuse
        # Topologically Sorted Source Nodes: [linear_53], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_37.run(buf398, buf400, 4096, 320, grid=grid(4096, 320), stream=stream0)
        buf401 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_53], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf400, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_264, (320, 80), (1, 320), 0), out=buf401)
        buf402 = reinterpret_tensor(buf398, (4096, 320), (320, 1), 0); del buf398  # reuse
        # Topologically Sorted Source Nodes: [linear_54], Original ATen: [aten.mm]
        extern_kernels.mm(buf401, reinterpret_tensor(primals_265, (80, 320), (1, 80), 0), out=buf402)
        buf406 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf407 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2107 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_144, mul_55, result_145, norm_hidden_states_3], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38.run(buf399, primals_263, buf402, primals_266, primals_267, buf406, buf407, buf2107, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_267
        buf408 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_147], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_268, (320, 320), (1, 320), 0), out=buf408)
        buf409 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_56], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_269, (320, 80), (1, 320), 0), out=buf409)
        buf410 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_57], Original ATen: [aten.mm]
        extern_kernels.mm(buf409, reinterpret_tensor(primals_270, (80, 320), (1, 80), 0), out=buf410)
        buf411 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_150], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_271, (320, 320), (1, 320), 0), out=buf411)
        buf412 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_59], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_272, (320, 80), (1, 320), 0), out=buf412)
        buf413 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_60], Original ATen: [aten.mm]
        extern_kernels.mm(buf412, reinterpret_tensor(primals_273, (80, 320), (1, 80), 0), out=buf413)
        buf414 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_153], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_274, (320, 320), (1, 320), 0), out=buf414)
        buf415 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_62], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_275, (320, 80), (1, 320), 0), out=buf415)
        buf416 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_63], Original ATen: [aten.mm]
        extern_kernels.mm(buf415, reinterpret_tensor(primals_276, (80, 320), (1, 80), 0), out=buf416)
        buf417 = reinterpret_tensor(buf408, (4, 1024, 320), (327680, 320, 1), 0); del buf408  # reuse
        # Topologically Sorted Source Nodes: [mul_56, result_148], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf417, buf410, 1310720, grid=grid(1310720), stream=stream0)
        buf418 = reinterpret_tensor(buf411, (4, 1024, 320), (327680, 320, 1), 0); del buf411  # reuse
        # Topologically Sorted Source Nodes: [mul_57, result_151], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf418, buf413, 1310720, grid=grid(1310720), stream=stream0)
        buf419 = reinterpret_tensor(buf414, (4, 1024, 320), (327680, 320, 1), 0); del buf414  # reuse
        # Topologically Sorted Source Nodes: [mul_58, result_154], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf419, buf416, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_95], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf420 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf417, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf418, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf419, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), None, True)
        buf421 = buf420[0]
        buf422 = buf420[1]
        buf423 = buf420[2]
        buf424 = buf420[3]
        del buf420
        buf425 = buf416; del buf416  # reuse
        # Topologically Sorted Source Nodes: [result_156], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf421, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_277, (320, 320), (1, 320), 0), out=buf425)
        buf426 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_65], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf421, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_279, (320, 80), (1, 320), 0), out=buf426)
        buf427 = buf413; del buf413  # reuse
        # Topologically Sorted Source Nodes: [linear_66], Original ATen: [aten.mm]
        extern_kernels.mm(buf426, reinterpret_tensor(primals_280, (80, 320), (1, 80), 0), out=buf427)
        buf428 = reinterpret_tensor(buf425, (4, 1024, 320), (327680, 320, 1), 0); del buf425  # reuse
        buf432 = reinterpret_tensor(buf410, (4, 1024, 320), (327680, 320, 1), 0); del buf410  # reuse
        buf433 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2106 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_144, mul_55, result_145, mul_59, result_157, hidden_states_99, hidden_states_100, norm_hidden_states_4], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40.run(buf428, primals_278, buf427, buf399, primals_263, buf402, primals_281, primals_282, buf432, buf433, buf2106, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_263
        del primals_278
        del primals_282
        buf434 = buf427; del buf427  # reuse
        # Topologically Sorted Source Nodes: [result_159], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf433, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_283, (320, 320), (1, 320), 0), out=buf434)
        buf435 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_68], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf433, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_284, (320, 80), (1, 320), 0), out=buf435)
        buf436 = buf402; del buf402  # reuse
        # Topologically Sorted Source Nodes: [linear_69], Original ATen: [aten.mm]
        extern_kernels.mm(buf435, reinterpret_tensor(primals_285, (80, 320), (1, 80), 0), out=buf436)
        buf437 = buf343; del buf343  # reuse
        # Topologically Sorted Source Nodes: [result_162], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_286, (1024, 320), (1, 1024), 0), out=buf437)
        del primals_286
        buf438 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_71], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_287, (1024, 80), (1, 1024), 0), out=buf438)
        del primals_287
        buf439 = buf340; del buf340  # reuse
        # Topologically Sorted Source Nodes: [linear_72], Original ATen: [aten.mm]
        extern_kernels.mm(buf438, reinterpret_tensor(primals_288, (80, 320), (1, 80), 0), out=buf439)
        buf440 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_165], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_289, (1024, 320), (1, 1024), 0), out=buf440)
        del primals_289
        buf441 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_74], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_290, (1024, 80), (1, 1024), 0), out=buf441)
        del primals_290
        buf442 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_75], Original ATen: [aten.mm]
        extern_kernels.mm(buf441, reinterpret_tensor(primals_291, (80, 320), (1, 80), 0), out=buf442)
        buf443 = reinterpret_tensor(buf434, (4, 1024, 320), (327680, 320, 1), 0); del buf434  # reuse
        # Topologically Sorted Source Nodes: [mul_60, result_160], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf443, buf436, 1310720, grid=grid(1310720), stream=stream0)
        buf444 = reinterpret_tensor(buf437, (4, 77, 320), (24640, 320, 1), 0); del buf437  # reuse
        # Topologically Sorted Source Nodes: [mul_61, result_163], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf444, buf439, 98560, grid=grid(98560), stream=stream0)
        buf445 = reinterpret_tensor(buf440, (4, 77, 320), (24640, 320, 1), 0); del buf440  # reuse
        # Topologically Sorted Source Nodes: [mul_62, result_166], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf445, buf442, 98560, grid=grid(98560), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_101], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf446 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf443, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf444, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf445, (4, 5, 77, 64), (24640, 64, 320, 1), 0), None, True)
        buf447 = buf446[0]
        buf448 = buf446[1]
        buf449 = buf446[2]
        buf450 = buf446[3]
        del buf446
        buf451 = buf436; del buf436  # reuse
        # Topologically Sorted Source Nodes: [result_168], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf447, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_292, (320, 320), (1, 320), 0), out=buf451)
        buf452 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_77], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf447, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_294, (320, 80), (1, 320), 0), out=buf452)
        buf453 = reinterpret_tensor(buf399, (4096, 320), (320, 1), 0); del buf399  # reuse
        # Topologically Sorted Source Nodes: [linear_78], Original ATen: [aten.mm]
        extern_kernels.mm(buf452, reinterpret_tensor(primals_295, (80, 320), (1, 80), 0), out=buf453)
        buf457 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf458 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2105 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_63, result_169, hidden_states_105, hidden_states_106, norm_hidden_states_5], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42.run(buf451, primals_293, buf453, buf428, primals_296, primals_297, buf457, buf458, buf2105, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_297
        buf459 = buf362; del buf362  # reuse
        # Topologically Sorted Source Nodes: [result_171], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf458, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_298, (320, 2560), (1, 320), 0), out=buf459)
        buf460 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_80], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf458, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_300, (320, 80), (1, 320), 0), out=buf460)
        buf461 = empty_strided_cuda((4096, 2560), (2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_81], Original ATen: [aten.mm]
        extern_kernels.mm(buf460, reinterpret_tensor(primals_301, (80, 2560), (1, 80), 0), out=buf461)
        buf462 = reinterpret_tensor(buf459, (4, 1024, 2560), (2621440, 2560, 1), 0); del buf459  # reuse
        # Topologically Sorted Source Nodes: [mul_64, result_172], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_43.run(buf462, primals_299, buf461, 10485760, grid=grid(10485760), stream=stream0)
        del primals_299
        buf463 = empty_strided_cuda((4, 1024, 1280), (1310720, 1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_1, hidden_states_108], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_44.run(buf462, buf463, 5242880, grid=grid(5242880), stream=stream0)
        buf464 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_174], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf463, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_302, (1280, 320), (1, 1280), 0), out=buf464)
        buf465 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_83], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf463, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_304, (1280, 80), (1, 1280), 0), out=buf465)
        buf466 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_84], Original ATen: [aten.mm]
        extern_kernels.mm(buf465, reinterpret_tensor(primals_305, (80, 320), (1, 80), 0), out=buf466)
        buf467 = reinterpret_tensor(buf464, (4, 1024, 320), (327680, 320, 1), 0); del buf464  # reuse
        # Topologically Sorted Source Nodes: [mul_63, result_169, hidden_states_105, hidden_states_106, mul_66, result_175, hidden_states_110], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_45.run(buf467, primals_303, buf466, buf451, primals_293, buf453, buf428, 1310720, grid=grid(1310720), stream=stream0)
        del primals_293
        del primals_303
        buf468 = buf466; del buf466  # reuse
        # Topologically Sorted Source Nodes: [result_177], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf467, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_306, (320, 320), (1, 320), 0), out=buf468)
        buf469 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_86], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf467, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_308, (320, 80), (1, 320), 0), out=buf469)
        buf470 = buf453; del buf453  # reuse
        # Topologically Sorted Source Nodes: [linear_87], Original ATen: [aten.mm]
        extern_kernels.mm(buf469, reinterpret_tensor(primals_309, (80, 320), (1, 80), 0), out=buf470)
        buf471 = reinterpret_tensor(buf451, (4, 320, 32, 32), (327680, 1024, 32, 1), 0); del buf451  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_111, output_1], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_46.run(buf468, primals_307, buf470, buf393, buf471, 1280, 1024, grid=grid(1280, 1024), stream=stream0)
        del primals_307
        # Topologically Sorted Source Nodes: [result_180], Original ATen: [aten.convolution]
        buf472 = extern_kernels.convolution(buf471, primals_310, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf472, (4, 320, 16, 16), (81920, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_98], Original ATen: [aten.convolution]
        buf473 = extern_kernels.convolution(buf471, primals_312, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf473, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_99], Original ATen: [aten.convolution]
        buf474 = extern_kernels.convolution(buf473, primals_313, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf474, (4, 320, 16, 16), (81920, 256, 16, 1))
        buf475 = buf472; del buf472  # reuse
        buf476 = reinterpret_tensor(buf395, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf395  # reuse
        buf477 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf479 = reinterpret_tensor(buf477, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf477  # reuse
        # Topologically Sorted Source Nodes: [result_180, mul_68, result_181, hidden_states_112], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_48.run(buf475, buf479, primals_311, buf474, buf476, 128, 2560, grid=grid(128), stream=stream0)
        del primals_311
        buf480 = buf474; del buf474  # reuse
        buf481 = buf480; del buf480  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_112, hidden_states_113], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_49.run(buf481, buf475, buf476, buf479, primals_314, primals_315, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_183], Original ATen: [aten.convolution]
        buf482 = extern_kernels.convolution(buf481, primals_316, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf482, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_101], Original ATen: [aten.convolution]
        buf483 = extern_kernels.convolution(buf481, primals_318, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf483, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_102], Original ATen: [aten.convolution]
        buf484 = extern_kernels.convolution(buf483, primals_319, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf484, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf485 = empty_strided_cuda((4, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_88], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_320, (1280, 640), (1, 1280), 0), out=buf485)
        del primals_320
        buf486 = buf482; del buf482  # reuse
        buf487 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf488 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf490 = reinterpret_tensor(buf488, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf488  # reuse
        # Topologically Sorted Source Nodes: [result_183, mul_69, result_184, hidden_states_114, hidden_states_115], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_50.run(buf486, buf490, primals_317, buf484, buf485, primals_321, buf487, 128, 5120, grid=grid(128), stream=stream0)
        del primals_317
        del primals_321
        buf491 = buf484; del buf484  # reuse
        buf492 = buf491; del buf491  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_115, hidden_states_116], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_51.run(buf492, buf486, buf487, buf490, primals_322, primals_323, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_186], Original ATen: [aten.convolution]
        buf493 = extern_kernels.convolution(buf492, primals_324, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf493, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_104], Original ATen: [aten.convolution]
        buf494 = extern_kernels.convolution(buf492, primals_326, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf494, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_105], Original ATen: [aten.convolution]
        buf495 = extern_kernels.convolution(buf494, primals_327, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf495, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [result_189], Original ATen: [aten.convolution]
        buf496 = extern_kernels.convolution(buf475, primals_328, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf496, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_107], Original ATen: [aten.convolution]
        buf497 = extern_kernels.convolution(buf475, primals_330, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf497, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_108], Original ATen: [aten.convolution]
        buf498 = extern_kernels.convolution(buf497, primals_331, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf498, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf499 = buf496; del buf496  # reuse
        buf500 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf501 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf503 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_186, mul_70, result_187, result_189, mul_71, result_190, add_25, output_tensor_12, hidden_states_118], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_52.run(buf499, primals_329, buf498, buf493, primals_325, buf495, buf500, buf501, buf503, 128, 5120, grid=grid(128), stream=stream0)
        del primals_325
        del primals_329
        buf504 = buf498; del buf498  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_118], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_53.run(buf499, buf500, buf501, primals_332, primals_333, buf504, 655360, grid=grid(655360), stream=stream0)
        del primals_333
        buf505 = reinterpret_tensor(buf495, (4, 256, 640), (163840, 640, 1), 0); del buf495  # reuse
        # Topologically Sorted Source Nodes: [result_192], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf504, (4, 256, 640), (163840, 1, 256), 0), reinterpret_tensor(primals_334, (4, 640, 640), (0, 1, 640), 0), out=buf505)
        buf506 = reinterpret_tensor(buf493, (4, 256, 640), (163840, 640, 1), 0); del buf493  # reuse
        # Topologically Sorted Source Nodes: [linear_90], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_54.run(buf504, buf506, 1024, 640, grid=grid(1024, 640), stream=stream0)
        buf507 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_90], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf506, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_336, (640, 80), (1, 640), 0), out=buf507)
        buf508 = reinterpret_tensor(buf504, (1024, 640), (640, 1), 0); del buf504  # reuse
        # Topologically Sorted Source Nodes: [linear_91], Original ATen: [aten.mm]
        extern_kernels.mm(buf507, reinterpret_tensor(primals_337, (80, 640), (1, 80), 0), out=buf508)
        buf512 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf513 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2104 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_192, mul_72, result_193, norm_hidden_states_6], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55.run(buf505, primals_335, buf508, primals_338, primals_339, buf512, buf513, buf2104, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_339
        buf514 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_195], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_340, (640, 640), (1, 640), 0), out=buf514)
        buf515 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_93], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_341, (640, 80), (1, 640), 0), out=buf515)
        buf516 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_94], Original ATen: [aten.mm]
        extern_kernels.mm(buf515, reinterpret_tensor(primals_342, (80, 640), (1, 80), 0), out=buf516)
        buf517 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_198], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_343, (640, 640), (1, 640), 0), out=buf517)
        buf518 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_96], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_344, (640, 80), (1, 640), 0), out=buf518)
        buf519 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_97], Original ATen: [aten.mm]
        extern_kernels.mm(buf518, reinterpret_tensor(primals_345, (80, 640), (1, 80), 0), out=buf519)
        buf520 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_201], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_346, (640, 640), (1, 640), 0), out=buf520)
        buf521 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_99], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_347, (640, 80), (1, 640), 0), out=buf521)
        buf522 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_100], Original ATen: [aten.mm]
        extern_kernels.mm(buf521, reinterpret_tensor(primals_348, (80, 640), (1, 80), 0), out=buf522)
        buf523 = reinterpret_tensor(buf514, (4, 256, 640), (163840, 640, 1), 0); del buf514  # reuse
        # Topologically Sorted Source Nodes: [mul_73, result_196], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf523, buf516, 655360, grid=grid(655360), stream=stream0)
        buf524 = reinterpret_tensor(buf517, (4, 256, 640), (163840, 640, 1), 0); del buf517  # reuse
        # Topologically Sorted Source Nodes: [mul_74, result_199], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf524, buf519, 655360, grid=grid(655360), stream=stream0)
        buf525 = reinterpret_tensor(buf520, (4, 256, 640), (163840, 640, 1), 0); del buf520  # reuse
        # Topologically Sorted Source Nodes: [mul_75, result_202], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf525, buf522, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_120], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf526 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf523, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf524, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf525, (4, 10, 256, 64), (163840, 64, 640, 1), 0), None, True)
        buf527 = buf526[0]
        buf528 = buf526[1]
        buf529 = buf526[2]
        buf530 = buf526[3]
        del buf526
        buf531 = buf522; del buf522  # reuse
        # Topologically Sorted Source Nodes: [result_204], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf527, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_349, (640, 640), (1, 640), 0), out=buf531)
        buf532 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_102], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf527, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_351, (640, 80), (1, 640), 0), out=buf532)
        buf533 = buf519; del buf519  # reuse
        # Topologically Sorted Source Nodes: [linear_103], Original ATen: [aten.mm]
        extern_kernels.mm(buf532, reinterpret_tensor(primals_352, (80, 640), (1, 80), 0), out=buf533)
        buf534 = reinterpret_tensor(buf531, (4, 256, 640), (163840, 640, 1), 0); del buf531  # reuse
        buf538 = reinterpret_tensor(buf516, (4, 256, 640), (163840, 640, 1), 0); del buf516  # reuse
        buf539 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2103 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_192, mul_72, result_193, mul_76, result_205, hidden_states_124, hidden_states_125, norm_hidden_states_7], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57.run(buf534, primals_350, buf533, buf505, primals_335, buf508, primals_353, primals_354, buf538, buf539, buf2103, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_335
        del primals_350
        del primals_354
        buf540 = buf533; del buf533  # reuse
        # Topologically Sorted Source Nodes: [result_207], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf539, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_355, (640, 640), (1, 640), 0), out=buf540)
        buf541 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_105], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf539, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_356, (640, 80), (1, 640), 0), out=buf541)
        buf542 = buf508; del buf508  # reuse
        # Topologically Sorted Source Nodes: [linear_106], Original ATen: [aten.mm]
        extern_kernels.mm(buf541, reinterpret_tensor(primals_357, (80, 640), (1, 80), 0), out=buf542)
        buf543 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_210], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_358, (1024, 640), (1, 1024), 0), out=buf543)
        del primals_358
        buf544 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_108], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_359, (1024, 80), (1, 1024), 0), out=buf544)
        del primals_359
        buf545 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_109], Original ATen: [aten.mm]
        extern_kernels.mm(buf544, reinterpret_tensor(primals_360, (80, 640), (1, 80), 0), out=buf545)
        buf546 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_213], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_361, (1024, 640), (1, 1024), 0), out=buf546)
        del primals_361
        buf547 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_111], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_362, (1024, 80), (1, 1024), 0), out=buf547)
        del primals_362
        buf548 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_112], Original ATen: [aten.mm]
        extern_kernels.mm(buf547, reinterpret_tensor(primals_363, (80, 640), (1, 80), 0), out=buf548)
        buf549 = reinterpret_tensor(buf540, (4, 256, 640), (163840, 640, 1), 0); del buf540  # reuse
        # Topologically Sorted Source Nodes: [mul_77, result_208], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf549, buf542, 655360, grid=grid(655360), stream=stream0)
        buf550 = reinterpret_tensor(buf543, (4, 77, 640), (49280, 640, 1), 0); del buf543  # reuse
        # Topologically Sorted Source Nodes: [mul_78, result_211], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf550, buf545, 197120, grid=grid(197120), stream=stream0)
        buf551 = reinterpret_tensor(buf546, (4, 77, 640), (49280, 640, 1), 0); del buf546  # reuse
        # Topologically Sorted Source Nodes: [mul_79, result_214], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf551, buf548, 197120, grid=grid(197120), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_126], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf552 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf549, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf550, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf551, (4, 10, 77, 64), (49280, 64, 640, 1), 0), None, True)
        buf553 = buf552[0]
        buf554 = buf552[1]
        buf555 = buf552[2]
        buf556 = buf552[3]
        del buf552
        buf557 = buf542; del buf542  # reuse
        # Topologically Sorted Source Nodes: [result_216], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf553, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_364, (640, 640), (1, 640), 0), out=buf557)
        buf558 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_114], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf553, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_366, (640, 80), (1, 640), 0), out=buf558)
        buf559 = reinterpret_tensor(buf505, (1024, 640), (640, 1), 0); del buf505  # reuse
        # Topologically Sorted Source Nodes: [linear_115], Original ATen: [aten.mm]
        extern_kernels.mm(buf558, reinterpret_tensor(primals_367, (80, 640), (1, 80), 0), out=buf559)
        buf563 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf564 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2102 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_80, result_217, hidden_states_130, hidden_states_131, norm_hidden_states_8], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59.run(buf557, primals_365, buf559, buf534, primals_368, primals_369, buf563, buf564, buf2102, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_369
        buf565 = empty_strided_cuda((1024, 5120), (5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_219], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf564, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_370, (640, 5120), (1, 640), 0), out=buf565)
        buf566 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_117], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf564, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_372, (640, 80), (1, 640), 0), out=buf566)
        buf567 = empty_strided_cuda((1024, 5120), (5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_118], Original ATen: [aten.mm]
        extern_kernels.mm(buf566, reinterpret_tensor(primals_373, (80, 5120), (1, 80), 0), out=buf567)
        buf568 = reinterpret_tensor(buf565, (4, 256, 5120), (1310720, 5120, 1), 0); del buf565  # reuse
        # Topologically Sorted Source Nodes: [mul_81, result_220], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_60.run(buf568, primals_371, buf567, 5242880, grid=grid(5242880), stream=stream0)
        del primals_371
        buf569 = empty_strided_cuda((4, 256, 2560), (655360, 2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_2, hidden_states_133], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_61.run(buf568, buf569, 2621440, grid=grid(2621440), stream=stream0)
        buf570 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_222], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf569, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_374, (2560, 640), (1, 2560), 0), out=buf570)
        buf571 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_120], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf569, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_376, (2560, 80), (1, 2560), 0), out=buf571)
        buf572 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_121], Original ATen: [aten.mm]
        extern_kernels.mm(buf571, reinterpret_tensor(primals_377, (80, 640), (1, 80), 0), out=buf572)
        buf573 = reinterpret_tensor(buf570, (4, 256, 640), (163840, 640, 1), 0); del buf570  # reuse
        # Topologically Sorted Source Nodes: [mul_80, result_217, hidden_states_130, hidden_states_131, mul_83, result_223, hidden_states_135], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_62.run(buf573, primals_375, buf572, buf557, primals_365, buf559, buf534, 655360, grid=grid(655360), stream=stream0)
        del primals_365
        del primals_375
        buf574 = buf572; del buf572  # reuse
        # Topologically Sorted Source Nodes: [result_225], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf573, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_378, (640, 640), (1, 640), 0), out=buf574)
        buf575 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_123], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf573, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_380, (640, 80), (1, 640), 0), out=buf575)
        buf576 = buf559; del buf559  # reuse
        # Topologically Sorted Source Nodes: [linear_124], Original ATen: [aten.mm]
        extern_kernels.mm(buf575, reinterpret_tensor(primals_381, (80, 640), (1, 80), 0), out=buf576)
        buf577 = reinterpret_tensor(buf557, (4, 640, 16, 16), (163840, 256, 16, 1), 0); del buf557  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_136, output_2], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_63.run(buf574, primals_379, buf576, buf499, buf577, 2560, 256, grid=grid(2560, 256), stream=stream0)
        del primals_379
        buf578 = reinterpret_tensor(buf501, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf501  # reuse
        buf579 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf581 = reinterpret_tensor(buf579, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf579  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_137], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_native_group_norm_64.run(buf581, buf577, buf578, 128, 5120, grid=grid(128), stream=stream0)
        buf582 = reinterpret_tensor(buf576, (4, 640, 16, 16), (163840, 256, 16, 1), 0); del buf576  # reuse
        buf583 = buf582; del buf582  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_137, hidden_states_138], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_51.run(buf583, buf577, buf578, buf581, primals_382, primals_383, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_228], Original ATen: [aten.convolution]
        buf584 = extern_kernels.convolution(buf583, primals_384, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf584, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_110], Original ATen: [aten.convolution]
        buf585 = extern_kernels.convolution(buf583, primals_386, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf585, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_111], Original ATen: [aten.convolution]
        buf586 = extern_kernels.convolution(buf585, primals_387, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf586, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf587 = buf485; del buf485  # reuse
        # Topologically Sorted Source Nodes: [linear_125], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_388, (1280, 640), (1, 1280), 0), out=buf587)
        del primals_388
        buf588 = buf584; del buf584  # reuse
        buf589 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf590 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf592 = reinterpret_tensor(buf590, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf590  # reuse
        # Topologically Sorted Source Nodes: [result_228, mul_85, result_229, hidden_states_139, hidden_states_140], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_50.run(buf588, buf592, primals_385, buf586, buf587, primals_389, buf589, 128, 5120, grid=grid(128), stream=stream0)
        del primals_385
        del primals_389
        buf593 = buf586; del buf586  # reuse
        buf594 = buf593; del buf593  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_140, hidden_states_141], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_51.run(buf594, buf588, buf589, buf592, primals_390, primals_391, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_231], Original ATen: [aten.convolution]
        buf595 = extern_kernels.convolution(buf594, primals_392, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf595, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_113], Original ATen: [aten.convolution]
        buf596 = extern_kernels.convolution(buf594, primals_394, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf596, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_114], Original ATen: [aten.convolution]
        buf597 = extern_kernels.convolution(buf596, primals_395, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf597, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf598 = buf595; del buf595  # reuse
        buf599 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf600 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf602 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_231, mul_86, result_232, add_31, output_tensor_13, hidden_states_143], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_65.run(buf598, buf577, primals_393, buf597, buf599, buf600, buf602, 128, 5120, grid=grid(128), stream=stream0)
        del primals_393
        buf603 = buf597; del buf597  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_143], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_53.run(buf598, buf599, buf600, primals_396, primals_397, buf603, 655360, grid=grid(655360), stream=stream0)
        del primals_397
        buf604 = reinterpret_tensor(buf574, (4, 256, 640), (163840, 640, 1), 0); del buf574  # reuse
        # Topologically Sorted Source Nodes: [result_234], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf603, (4, 256, 640), (163840, 1, 256), 0), reinterpret_tensor(primals_398, (4, 640, 640), (0, 1, 640), 0), out=buf604)
        buf605 = buf534; del buf534  # reuse
        # Topologically Sorted Source Nodes: [linear_127], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_54.run(buf603, buf605, 1024, 640, grid=grid(1024, 640), stream=stream0)
        buf606 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_127], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf605, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_400, (640, 80), (1, 640), 0), out=buf606)
        buf607 = reinterpret_tensor(buf603, (1024, 640), (640, 1), 0); del buf603  # reuse
        # Topologically Sorted Source Nodes: [linear_128], Original ATen: [aten.mm]
        extern_kernels.mm(buf606, reinterpret_tensor(primals_401, (80, 640), (1, 80), 0), out=buf607)
        buf611 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf612 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2101 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_234, mul_87, result_235, norm_hidden_states_9], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55.run(buf604, primals_399, buf607, primals_402, primals_403, buf611, buf612, buf2101, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_403
        buf613 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_237], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_404, (640, 640), (1, 640), 0), out=buf613)
        buf614 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_130], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_405, (640, 80), (1, 640), 0), out=buf614)
        buf615 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_131], Original ATen: [aten.mm]
        extern_kernels.mm(buf614, reinterpret_tensor(primals_406, (80, 640), (1, 80), 0), out=buf615)
        buf616 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_240], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_407, (640, 640), (1, 640), 0), out=buf616)
        buf617 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_133], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_408, (640, 80), (1, 640), 0), out=buf617)
        buf618 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_134], Original ATen: [aten.mm]
        extern_kernels.mm(buf617, reinterpret_tensor(primals_409, (80, 640), (1, 80), 0), out=buf618)
        buf619 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_243], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_410, (640, 640), (1, 640), 0), out=buf619)
        buf620 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_136], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_411, (640, 80), (1, 640), 0), out=buf620)
        buf621 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_137], Original ATen: [aten.mm]
        extern_kernels.mm(buf620, reinterpret_tensor(primals_412, (80, 640), (1, 80), 0), out=buf621)
        buf622 = reinterpret_tensor(buf613, (4, 256, 640), (163840, 640, 1), 0); del buf613  # reuse
        # Topologically Sorted Source Nodes: [mul_88, result_238], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf622, buf615, 655360, grid=grid(655360), stream=stream0)
        buf623 = reinterpret_tensor(buf616, (4, 256, 640), (163840, 640, 1), 0); del buf616  # reuse
        # Topologically Sorted Source Nodes: [mul_89, result_241], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf623, buf618, 655360, grid=grid(655360), stream=stream0)
        buf624 = reinterpret_tensor(buf619, (4, 256, 640), (163840, 640, 1), 0); del buf619  # reuse
        # Topologically Sorted Source Nodes: [mul_90, result_244], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf624, buf621, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_145], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf625 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf622, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf623, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf624, (4, 10, 256, 64), (163840, 64, 640, 1), 0), None, True)
        buf626 = buf625[0]
        buf627 = buf625[1]
        buf628 = buf625[2]
        buf629 = buf625[3]
        del buf625
        buf630 = buf621; del buf621  # reuse
        # Topologically Sorted Source Nodes: [result_246], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf626, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_413, (640, 640), (1, 640), 0), out=buf630)
        buf631 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_139], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf626, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_415, (640, 80), (1, 640), 0), out=buf631)
        buf632 = buf618; del buf618  # reuse
        # Topologically Sorted Source Nodes: [linear_140], Original ATen: [aten.mm]
        extern_kernels.mm(buf631, reinterpret_tensor(primals_416, (80, 640), (1, 80), 0), out=buf632)
        buf633 = reinterpret_tensor(buf630, (4, 256, 640), (163840, 640, 1), 0); del buf630  # reuse
        buf637 = reinterpret_tensor(buf615, (4, 256, 640), (163840, 640, 1), 0); del buf615  # reuse
        buf638 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2100 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_234, mul_87, result_235, mul_91, result_247, hidden_states_149, hidden_states_150, norm_hidden_states_10], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57.run(buf633, primals_414, buf632, buf604, primals_399, buf607, primals_417, primals_418, buf637, buf638, buf2100, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_399
        del primals_414
        del primals_418
        buf639 = buf632; del buf632  # reuse
        # Topologically Sorted Source Nodes: [result_249], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf638, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_419, (640, 640), (1, 640), 0), out=buf639)
        buf640 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_142], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf638, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_420, (640, 80), (1, 640), 0), out=buf640)
        buf641 = buf607; del buf607  # reuse
        # Topologically Sorted Source Nodes: [linear_143], Original ATen: [aten.mm]
        extern_kernels.mm(buf640, reinterpret_tensor(primals_421, (80, 640), (1, 80), 0), out=buf641)
        buf642 = buf548; del buf548  # reuse
        # Topologically Sorted Source Nodes: [result_252], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_422, (1024, 640), (1, 1024), 0), out=buf642)
        del primals_422
        buf643 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_145], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_423, (1024, 80), (1, 1024), 0), out=buf643)
        del primals_423
        buf644 = buf545; del buf545  # reuse
        # Topologically Sorted Source Nodes: [linear_146], Original ATen: [aten.mm]
        extern_kernels.mm(buf643, reinterpret_tensor(primals_424, (80, 640), (1, 80), 0), out=buf644)
        buf645 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_255], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_425, (1024, 640), (1, 1024), 0), out=buf645)
        del primals_425
        buf646 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_148], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_426, (1024, 80), (1, 1024), 0), out=buf646)
        del primals_426
        buf647 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_149], Original ATen: [aten.mm]
        extern_kernels.mm(buf646, reinterpret_tensor(primals_427, (80, 640), (1, 80), 0), out=buf647)
        buf648 = reinterpret_tensor(buf639, (4, 256, 640), (163840, 640, 1), 0); del buf639  # reuse
        # Topologically Sorted Source Nodes: [mul_92, result_250], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf648, buf641, 655360, grid=grid(655360), stream=stream0)
        buf649 = reinterpret_tensor(buf642, (4, 77, 640), (49280, 640, 1), 0); del buf642  # reuse
        # Topologically Sorted Source Nodes: [mul_93, result_253], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf649, buf644, 197120, grid=grid(197120), stream=stream0)
        buf650 = reinterpret_tensor(buf645, (4, 77, 640), (49280, 640, 1), 0); del buf645  # reuse
        # Topologically Sorted Source Nodes: [mul_94, result_256], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf650, buf647, 197120, grid=grid(197120), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_151], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf651 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf648, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf649, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf650, (4, 10, 77, 64), (49280, 64, 640, 1), 0), None, True)
        buf652 = buf651[0]
        buf653 = buf651[1]
        buf654 = buf651[2]
        buf655 = buf651[3]
        del buf651
        buf656 = buf641; del buf641  # reuse
        # Topologically Sorted Source Nodes: [result_258], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf652, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_428, (640, 640), (1, 640), 0), out=buf656)
        buf657 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_151], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf652, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_430, (640, 80), (1, 640), 0), out=buf657)
        buf658 = reinterpret_tensor(buf604, (1024, 640), (640, 1), 0); del buf604  # reuse
        # Topologically Sorted Source Nodes: [linear_152], Original ATen: [aten.mm]
        extern_kernels.mm(buf657, reinterpret_tensor(primals_431, (80, 640), (1, 80), 0), out=buf658)
        buf662 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf663 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2099 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_95, result_259, hidden_states_155, hidden_states_156, norm_hidden_states_11], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59.run(buf656, primals_429, buf658, buf633, primals_432, primals_433, buf662, buf663, buf2099, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_433
        buf664 = buf567; del buf567  # reuse
        # Topologically Sorted Source Nodes: [result_261], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf663, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_434, (640, 5120), (1, 640), 0), out=buf664)
        buf665 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_154], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf663, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_436, (640, 80), (1, 640), 0), out=buf665)
        buf666 = empty_strided_cuda((1024, 5120), (5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_155], Original ATen: [aten.mm]
        extern_kernels.mm(buf665, reinterpret_tensor(primals_437, (80, 5120), (1, 80), 0), out=buf666)
        buf667 = reinterpret_tensor(buf664, (4, 256, 5120), (1310720, 5120, 1), 0); del buf664  # reuse
        # Topologically Sorted Source Nodes: [mul_96, result_262], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_60.run(buf667, primals_435, buf666, 5242880, grid=grid(5242880), stream=stream0)
        del primals_435
        buf668 = empty_strided_cuda((4, 256, 2560), (655360, 2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_3, hidden_states_158], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_61.run(buf667, buf668, 2621440, grid=grid(2621440), stream=stream0)
        buf669 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_264], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf668, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_438, (2560, 640), (1, 2560), 0), out=buf669)
        buf670 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_157], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf668, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_440, (2560, 80), (1, 2560), 0), out=buf670)
        buf671 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_158], Original ATen: [aten.mm]
        extern_kernels.mm(buf670, reinterpret_tensor(primals_441, (80, 640), (1, 80), 0), out=buf671)
        buf672 = reinterpret_tensor(buf669, (4, 256, 640), (163840, 640, 1), 0); del buf669  # reuse
        # Topologically Sorted Source Nodes: [mul_95, result_259, hidden_states_155, hidden_states_156, mul_98, result_265, hidden_states_160], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_62.run(buf672, primals_439, buf671, buf656, primals_429, buf658, buf633, 655360, grid=grid(655360), stream=stream0)
        del primals_429
        del primals_439
        buf673 = buf671; del buf671  # reuse
        # Topologically Sorted Source Nodes: [result_267], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf672, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_442, (640, 640), (1, 640), 0), out=buf673)
        buf674 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_160], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf672, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_444, (640, 80), (1, 640), 0), out=buf674)
        buf675 = buf658; del buf658  # reuse
        # Topologically Sorted Source Nodes: [linear_161], Original ATen: [aten.mm]
        extern_kernels.mm(buf674, reinterpret_tensor(primals_445, (80, 640), (1, 80), 0), out=buf675)
        buf676 = reinterpret_tensor(buf656, (4, 640, 16, 16), (163840, 256, 16, 1), 0); del buf656  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_161, output_3], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_63.run(buf673, primals_443, buf675, buf598, buf676, 2560, 256, grid=grid(2560, 256), stream=stream0)
        del primals_443
        # Topologically Sorted Source Nodes: [result_270], Original ATen: [aten.convolution]
        buf677 = extern_kernels.convolution(buf676, primals_446, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf677, (4, 640, 8, 8), (40960, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_116], Original ATen: [aten.convolution]
        buf678 = extern_kernels.convolution(buf676, primals_448, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf678, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_117], Original ATen: [aten.convolution]
        buf679 = extern_kernels.convolution(buf678, primals_449, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf679, (4, 640, 8, 8), (40960, 64, 8, 1))
        buf680 = buf677; del buf677  # reuse
        buf681 = reinterpret_tensor(buf600, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf600  # reuse
        buf682 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf684 = reinterpret_tensor(buf682, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf682  # reuse
        # Topologically Sorted Source Nodes: [result_270, mul_100, result_271, hidden_states_162], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_66.run(buf680, buf684, primals_447, buf679, buf681, 128, 1280, grid=grid(128), stream=stream0)
        del primals_447
        buf685 = buf679; del buf679  # reuse
        buf686 = buf685; del buf685  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_162, hidden_states_163], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_67.run(buf686, buf680, buf681, buf684, primals_450, primals_451, 163840, grid=grid(163840), stream=stream0)
        # Topologically Sorted Source Nodes: [result_273], Original ATen: [aten.convolution]
        buf687 = extern_kernels.convolution(buf686, primals_452, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf687, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_119], Original ATen: [aten.convolution]
        buf688 = extern_kernels.convolution(buf686, primals_454, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf688, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_120], Original ATen: [aten.convolution]
        buf689 = extern_kernels.convolution(buf688, primals_455, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf689, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf690 = buf267; del buf267  # reuse
        # Topologically Sorted Source Nodes: [linear_162], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_456, (1280, 1280), (1, 1280), 0), out=buf690)
        del primals_456
        buf691 = buf687; del buf687  # reuse
        buf692 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf693 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf695 = reinterpret_tensor(buf693, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf693  # reuse
        # Topologically Sorted Source Nodes: [result_273, mul_101, result_274, hidden_states_164, hidden_states_165], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_68.run(buf691, buf695, primals_453, buf689, buf690, primals_457, buf692, 128, 2560, grid=grid(128), stream=stream0)
        del primals_453
        del primals_457
        buf696 = buf689; del buf689  # reuse
        buf697 = buf696; del buf696  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_165, hidden_states_166], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_69.run(buf697, buf691, buf692, buf695, primals_458, primals_459, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_276], Original ATen: [aten.convolution]
        buf698 = extern_kernels.convolution(buf697, primals_460, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf698, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_122], Original ATen: [aten.convolution]
        buf699 = extern_kernels.convolution(buf697, primals_462, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf699, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_123], Original ATen: [aten.convolution]
        buf700 = extern_kernels.convolution(buf699, primals_463, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf700, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [result_279], Original ATen: [aten.convolution]
        buf701 = extern_kernels.convolution(buf680, primals_464, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf701, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_125], Original ATen: [aten.convolution]
        buf702 = extern_kernels.convolution(buf680, primals_466, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf702, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_126], Original ATen: [aten.convolution]
        buf703 = extern_kernels.convolution(buf702, primals_467, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf703, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf704 = buf701; del buf701  # reuse
        buf705 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf706 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf708 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_276, mul_102, result_277, result_279, mul_103, result_280, add_37, output_tensor_14, hidden_states_168], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_70.run(buf704, primals_465, buf703, buf698, primals_461, buf700, buf705, buf706, buf708, 128, 2560, grid=grid(128), stream=stream0)
        del primals_461
        del primals_465
        buf709 = buf703; del buf703  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_168], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_71.run(buf704, buf705, buf706, primals_468, primals_469, buf709, 327680, grid=grid(327680), stream=stream0)
        del primals_469
        buf710 = reinterpret_tensor(buf700, (4, 64, 1280), (81920, 1280, 1), 0); del buf700  # reuse
        # Topologically Sorted Source Nodes: [result_282], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf709, (4, 64, 1280), (81920, 1, 64), 0), reinterpret_tensor(primals_470, (4, 1280, 1280), (0, 1, 1280), 0), out=buf710)
        buf711 = reinterpret_tensor(buf698, (4, 64, 1280), (81920, 1280, 1), 0); del buf698  # reuse
        # Topologically Sorted Source Nodes: [linear_164], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_72.run(buf709, buf711, 256, 1280, grid=grid(256, 1280), stream=stream0)
        buf712 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_164], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf711, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_472, (1280, 80), (1, 1280), 0), out=buf712)
        buf713 = reinterpret_tensor(buf709, (256, 1280), (1280, 1), 0); del buf709  # reuse
        # Topologically Sorted Source Nodes: [linear_165], Original ATen: [aten.mm]
        extern_kernels.mm(buf712, reinterpret_tensor(primals_473, (80, 1280), (1, 80), 0), out=buf713)
        buf717 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf718 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2098 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_282, mul_104, result_283, norm_hidden_states_12], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73.run(buf710, primals_471, buf713, primals_474, primals_475, buf717, buf718, buf2098, 256, 1280, grid=grid(256), stream=stream0)
        del primals_475
        buf719 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_285], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_476, (1280, 1280), (1, 1280), 0), out=buf719)
        buf720 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_167], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_477, (1280, 80), (1, 1280), 0), out=buf720)
        buf721 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_168], Original ATen: [aten.mm]
        extern_kernels.mm(buf720, reinterpret_tensor(primals_478, (80, 1280), (1, 80), 0), out=buf721)
        buf722 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_288], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_479, (1280, 1280), (1, 1280), 0), out=buf722)
        buf723 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_170], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_480, (1280, 80), (1, 1280), 0), out=buf723)
        buf724 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_171], Original ATen: [aten.mm]
        extern_kernels.mm(buf723, reinterpret_tensor(primals_481, (80, 1280), (1, 80), 0), out=buf724)
        buf725 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_291], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_482, (1280, 1280), (1, 1280), 0), out=buf725)
        buf726 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_173], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_483, (1280, 80), (1, 1280), 0), out=buf726)
        buf727 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_174], Original ATen: [aten.mm]
        extern_kernels.mm(buf726, reinterpret_tensor(primals_484, (80, 1280), (1, 80), 0), out=buf727)
        buf728 = reinterpret_tensor(buf719, (4, 64, 1280), (81920, 1280, 1), 0); del buf719  # reuse
        # Topologically Sorted Source Nodes: [mul_105, result_286], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf728, buf721, 327680, grid=grid(327680), stream=stream0)
        buf729 = reinterpret_tensor(buf722, (4, 64, 1280), (81920, 1280, 1), 0); del buf722  # reuse
        # Topologically Sorted Source Nodes: [mul_106, result_289], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf729, buf724, 327680, grid=grid(327680), stream=stream0)
        buf730 = reinterpret_tensor(buf725, (4, 64, 1280), (81920, 1280, 1), 0); del buf725  # reuse
        # Topologically Sorted Source Nodes: [mul_107, result_292], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf730, buf727, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_170], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf731 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf728, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf729, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf730, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), None, True)
        buf732 = buf731[0]
        buf733 = buf731[1]
        buf734 = buf731[2]
        buf735 = buf731[3]
        del buf731
        buf736 = buf727; del buf727  # reuse
        # Topologically Sorted Source Nodes: [result_294], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf732, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_485, (1280, 1280), (1, 1280), 0), out=buf736)
        buf737 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_176], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf732, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_487, (1280, 80), (1, 1280), 0), out=buf737)
        buf738 = buf724; del buf724  # reuse
        # Topologically Sorted Source Nodes: [linear_177], Original ATen: [aten.mm]
        extern_kernels.mm(buf737, reinterpret_tensor(primals_488, (80, 1280), (1, 80), 0), out=buf738)
        buf739 = reinterpret_tensor(buf736, (4, 64, 1280), (81920, 1280, 1), 0); del buf736  # reuse
        buf743 = reinterpret_tensor(buf721, (4, 64, 1280), (81920, 1280, 1), 0); del buf721  # reuse
        buf744 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2097 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_282, mul_104, result_283, mul_108, result_295, hidden_states_174, hidden_states_175, norm_hidden_states_13], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75.run(buf739, primals_486, buf738, buf710, primals_471, buf713, primals_489, primals_490, buf743, buf744, buf2097, 256, 1280, grid=grid(256), stream=stream0)
        del primals_471
        del primals_486
        del primals_490
        buf745 = buf738; del buf738  # reuse
        # Topologically Sorted Source Nodes: [result_297], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf744, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_491, (1280, 1280), (1, 1280), 0), out=buf745)
        buf746 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_179], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf744, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_492, (1280, 80), (1, 1280), 0), out=buf746)
        buf747 = buf713; del buf713  # reuse
        # Topologically Sorted Source Nodes: [linear_180], Original ATen: [aten.mm]
        extern_kernels.mm(buf746, reinterpret_tensor(primals_493, (80, 1280), (1, 80), 0), out=buf747)
        buf748 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_300], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_494, (1024, 1280), (1, 1024), 0), out=buf748)
        del primals_494
        buf749 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_182], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_495, (1024, 80), (1, 1024), 0), out=buf749)
        del primals_495
        buf750 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_183], Original ATen: [aten.mm]
        extern_kernels.mm(buf749, reinterpret_tensor(primals_496, (80, 1280), (1, 80), 0), out=buf750)
        buf751 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_303], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_497, (1024, 1280), (1, 1024), 0), out=buf751)
        del primals_497
        buf752 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_185], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_498, (1024, 80), (1, 1024), 0), out=buf752)
        del primals_498
        buf753 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_186], Original ATen: [aten.mm]
        extern_kernels.mm(buf752, reinterpret_tensor(primals_499, (80, 1280), (1, 80), 0), out=buf753)
        buf754 = reinterpret_tensor(buf745, (4, 64, 1280), (81920, 1280, 1), 0); del buf745  # reuse
        # Topologically Sorted Source Nodes: [mul_109, result_298], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf754, buf747, 327680, grid=grid(327680), stream=stream0)
        buf755 = reinterpret_tensor(buf748, (4, 77, 1280), (98560, 1280, 1), 0); del buf748  # reuse
        # Topologically Sorted Source Nodes: [mul_110, result_301], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf755, buf750, 394240, grid=grid(394240), stream=stream0)
        buf756 = reinterpret_tensor(buf751, (4, 77, 1280), (98560, 1280, 1), 0); del buf751  # reuse
        # Topologically Sorted Source Nodes: [mul_111, result_304], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf756, buf753, 394240, grid=grid(394240), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_176], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf757 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf754, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf755, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf756, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), None, True)
        buf758 = buf757[0]
        buf759 = buf757[1]
        buf760 = buf757[2]
        buf761 = buf757[3]
        del buf757
        buf762 = buf747; del buf747  # reuse
        # Topologically Sorted Source Nodes: [result_306], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf758, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_500, (1280, 1280), (1, 1280), 0), out=buf762)
        buf763 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_188], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf758, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_502, (1280, 80), (1, 1280), 0), out=buf763)
        buf764 = reinterpret_tensor(buf710, (256, 1280), (1280, 1), 0); del buf710  # reuse
        # Topologically Sorted Source Nodes: [linear_189], Original ATen: [aten.mm]
        extern_kernels.mm(buf763, reinterpret_tensor(primals_503, (80, 1280), (1, 80), 0), out=buf764)
        buf768 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf769 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2096 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_112, result_307, hidden_states_180, hidden_states_181, norm_hidden_states_14], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77.run(buf762, primals_501, buf764, buf739, primals_504, primals_505, buf768, buf769, buf2096, 256, 1280, grid=grid(256), stream=stream0)
        del primals_505
        buf770 = empty_strided_cuda((256, 10240), (10240, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_309], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf769, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_506, (1280, 10240), (1, 1280), 0), out=buf770)
        buf771 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_191], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf769, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_508, (1280, 80), (1, 1280), 0), out=buf771)
        buf772 = empty_strided_cuda((256, 10240), (10240, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_192], Original ATen: [aten.mm]
        extern_kernels.mm(buf771, reinterpret_tensor(primals_509, (80, 10240), (1, 80), 0), out=buf772)
        buf773 = reinterpret_tensor(buf770, (4, 64, 10240), (655360, 10240, 1), 0); del buf770  # reuse
        # Topologically Sorted Source Nodes: [mul_113, result_310], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_78.run(buf773, primals_507, buf772, 2621440, grid=grid(2621440), stream=stream0)
        del primals_507
        buf774 = reinterpret_tensor(buf470, (4, 64, 5120), (327680, 5120, 1), 0); del buf470  # reuse
        # Topologically Sorted Source Nodes: [gelu_4, hidden_states_183], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_79.run(buf773, buf774, 1310720, grid=grid(1310720), stream=stream0)
        buf775 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_312], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf774, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_510, (5120, 1280), (1, 5120), 0), out=buf775)
        buf776 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_194], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf774, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_512, (5120, 80), (1, 5120), 0), out=buf776)
        buf777 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_195], Original ATen: [aten.mm]
        extern_kernels.mm(buf776, reinterpret_tensor(primals_513, (80, 1280), (1, 80), 0), out=buf777)
        buf778 = reinterpret_tensor(buf775, (4, 64, 1280), (81920, 1280, 1), 0); del buf775  # reuse
        # Topologically Sorted Source Nodes: [mul_112, result_307, hidden_states_180, hidden_states_181, mul_115, result_313, hidden_states_185], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_80.run(buf778, primals_511, buf777, buf762, primals_501, buf764, buf739, 327680, grid=grid(327680), stream=stream0)
        del primals_501
        del primals_511
        buf779 = buf777; del buf777  # reuse
        # Topologically Sorted Source Nodes: [result_315], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf778, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_514, (1280, 1280), (1, 1280), 0), out=buf779)
        buf780 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_197], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf778, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_516, (1280, 80), (1, 1280), 0), out=buf780)
        buf781 = buf764; del buf764  # reuse
        # Topologically Sorted Source Nodes: [linear_198], Original ATen: [aten.mm]
        extern_kernels.mm(buf780, reinterpret_tensor(primals_517, (80, 1280), (1, 80), 0), out=buf781)
        buf782 = reinterpret_tensor(buf762, (4, 1280, 8, 8), (81920, 64, 8, 1), 0); del buf762  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_186, output_4], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_81.run(buf779, primals_515, buf781, buf704, buf782, 5120, 64, grid=grid(5120, 64), stream=stream0)
        del primals_515
        buf783 = reinterpret_tensor(buf706, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf706  # reuse
        buf784 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf786 = reinterpret_tensor(buf784, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf784  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_187], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_native_group_norm_82.run(buf786, buf782, buf783, 128, 2560, grid=grid(128), stream=stream0)
        buf787 = reinterpret_tensor(buf781, (4, 1280, 8, 8), (81920, 64, 8, 1), 0); del buf781  # reuse
        buf788 = buf787; del buf787  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_187, hidden_states_188], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_69.run(buf788, buf782, buf783, buf786, primals_518, primals_519, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_318], Original ATen: [aten.convolution]
        buf789 = extern_kernels.convolution(buf788, primals_520, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf789, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_128], Original ATen: [aten.convolution]
        buf790 = extern_kernels.convolution(buf788, primals_522, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf790, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_129], Original ATen: [aten.convolution]
        buf791 = extern_kernels.convolution(buf790, primals_523, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf791, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf792 = buf690; del buf690  # reuse
        # Topologically Sorted Source Nodes: [linear_199], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_524, (1280, 1280), (1, 1280), 0), out=buf792)
        del primals_524
        buf793 = buf789; del buf789  # reuse
        buf794 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf795 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf797 = reinterpret_tensor(buf795, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf795  # reuse
        # Topologically Sorted Source Nodes: [result_318, mul_117, result_319, hidden_states_189, hidden_states_190], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_68.run(buf793, buf797, primals_521, buf791, buf792, primals_525, buf794, 128, 2560, grid=grid(128), stream=stream0)
        del primals_521
        del primals_525
        buf798 = buf791; del buf791  # reuse
        buf799 = buf798; del buf798  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_190, hidden_states_191], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_69.run(buf799, buf793, buf794, buf797, primals_526, primals_527, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_321], Original ATen: [aten.convolution]
        buf800 = extern_kernels.convolution(buf799, primals_528, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf800, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_131], Original ATen: [aten.convolution]
        buf801 = extern_kernels.convolution(buf799, primals_530, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf801, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_132], Original ATen: [aten.convolution]
        buf802 = extern_kernels.convolution(buf801, primals_531, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf802, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf803 = buf800; del buf800  # reuse
        buf804 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf805 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf807 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_321, mul_118, result_322, add_43, output_tensor_15, hidden_states_193], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_83.run(buf803, buf782, primals_529, buf802, buf804, buf805, buf807, 128, 2560, grid=grid(128), stream=stream0)
        del primals_529
        buf808 = buf802; del buf802  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_193], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_71.run(buf803, buf804, buf805, primals_532, primals_533, buf808, 327680, grid=grid(327680), stream=stream0)
        del primals_533
        buf809 = reinterpret_tensor(buf779, (4, 64, 1280), (81920, 1280, 1), 0); del buf779  # reuse
        # Topologically Sorted Source Nodes: [result_324], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf808, (4, 64, 1280), (81920, 1, 64), 0), reinterpret_tensor(primals_534, (4, 1280, 1280), (0, 1, 1280), 0), out=buf809)
        buf810 = buf739; del buf739  # reuse
        # Topologically Sorted Source Nodes: [linear_201], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_72.run(buf808, buf810, 256, 1280, grid=grid(256, 1280), stream=stream0)
        buf811 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_201], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf810, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_536, (1280, 80), (1, 1280), 0), out=buf811)
        buf812 = reinterpret_tensor(buf808, (256, 1280), (1280, 1), 0); del buf808  # reuse
        # Topologically Sorted Source Nodes: [linear_202], Original ATen: [aten.mm]
        extern_kernels.mm(buf811, reinterpret_tensor(primals_537, (80, 1280), (1, 80), 0), out=buf812)
        buf816 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf817 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2095 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_324, mul_119, result_325, norm_hidden_states_15], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73.run(buf809, primals_535, buf812, primals_538, primals_539, buf816, buf817, buf2095, 256, 1280, grid=grid(256), stream=stream0)
        del primals_539
        buf818 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_327], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_540, (1280, 1280), (1, 1280), 0), out=buf818)
        buf819 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_204], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_541, (1280, 80), (1, 1280), 0), out=buf819)
        buf820 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_205], Original ATen: [aten.mm]
        extern_kernels.mm(buf819, reinterpret_tensor(primals_542, (80, 1280), (1, 80), 0), out=buf820)
        buf821 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_330], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_543, (1280, 1280), (1, 1280), 0), out=buf821)
        buf822 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_207], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_544, (1280, 80), (1, 1280), 0), out=buf822)
        buf823 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_208], Original ATen: [aten.mm]
        extern_kernels.mm(buf822, reinterpret_tensor(primals_545, (80, 1280), (1, 80), 0), out=buf823)
        buf824 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_333], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_546, (1280, 1280), (1, 1280), 0), out=buf824)
        buf825 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_210], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_547, (1280, 80), (1, 1280), 0), out=buf825)
        buf826 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_211], Original ATen: [aten.mm]
        extern_kernels.mm(buf825, reinterpret_tensor(primals_548, (80, 1280), (1, 80), 0), out=buf826)
        buf827 = reinterpret_tensor(buf818, (4, 64, 1280), (81920, 1280, 1), 0); del buf818  # reuse
        # Topologically Sorted Source Nodes: [mul_120, result_328], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf827, buf820, 327680, grid=grid(327680), stream=stream0)
        buf828 = reinterpret_tensor(buf821, (4, 64, 1280), (81920, 1280, 1), 0); del buf821  # reuse
        # Topologically Sorted Source Nodes: [mul_121, result_331], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf828, buf823, 327680, grid=grid(327680), stream=stream0)
        buf829 = reinterpret_tensor(buf824, (4, 64, 1280), (81920, 1280, 1), 0); del buf824  # reuse
        # Topologically Sorted Source Nodes: [mul_122, result_334], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf829, buf826, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_195], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf830 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf827, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf828, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf829, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), None, True)
        buf831 = buf830[0]
        buf832 = buf830[1]
        buf833 = buf830[2]
        buf834 = buf830[3]
        del buf830
        buf835 = buf826; del buf826  # reuse
        # Topologically Sorted Source Nodes: [result_336], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf831, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_549, (1280, 1280), (1, 1280), 0), out=buf835)
        buf836 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_213], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf831, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_551, (1280, 80), (1, 1280), 0), out=buf836)
        buf837 = buf823; del buf823  # reuse
        # Topologically Sorted Source Nodes: [linear_214], Original ATen: [aten.mm]
        extern_kernels.mm(buf836, reinterpret_tensor(primals_552, (80, 1280), (1, 80), 0), out=buf837)
        buf838 = reinterpret_tensor(buf835, (4, 64, 1280), (81920, 1280, 1), 0); del buf835  # reuse
        buf842 = reinterpret_tensor(buf820, (4, 64, 1280), (81920, 1280, 1), 0); del buf820  # reuse
        buf843 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2094 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_324, mul_119, result_325, mul_123, result_337, hidden_states_199, hidden_states_200, norm_hidden_states_16], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75.run(buf838, primals_550, buf837, buf809, primals_535, buf812, primals_553, primals_554, buf842, buf843, buf2094, 256, 1280, grid=grid(256), stream=stream0)
        del primals_535
        del primals_550
        del primals_554
        buf844 = buf837; del buf837  # reuse
        # Topologically Sorted Source Nodes: [result_339], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf843, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_555, (1280, 1280), (1, 1280), 0), out=buf844)
        buf845 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_216], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf843, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_556, (1280, 80), (1, 1280), 0), out=buf845)
        buf846 = buf812; del buf812  # reuse
        # Topologically Sorted Source Nodes: [linear_217], Original ATen: [aten.mm]
        extern_kernels.mm(buf845, reinterpret_tensor(primals_557, (80, 1280), (1, 80), 0), out=buf846)
        buf847 = buf753; del buf753  # reuse
        # Topologically Sorted Source Nodes: [result_342], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_558, (1024, 1280), (1, 1024), 0), out=buf847)
        del primals_558
        buf848 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_219], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_559, (1024, 80), (1, 1024), 0), out=buf848)
        del primals_559
        buf849 = buf750; del buf750  # reuse
        # Topologically Sorted Source Nodes: [linear_220], Original ATen: [aten.mm]
        extern_kernels.mm(buf848, reinterpret_tensor(primals_560, (80, 1280), (1, 80), 0), out=buf849)
        buf850 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_345], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_561, (1024, 1280), (1, 1024), 0), out=buf850)
        del primals_561
        buf851 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_222], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_562, (1024, 80), (1, 1024), 0), out=buf851)
        del primals_562
        buf852 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_223], Original ATen: [aten.mm]
        extern_kernels.mm(buf851, reinterpret_tensor(primals_563, (80, 1280), (1, 80), 0), out=buf852)
        buf853 = reinterpret_tensor(buf844, (4, 64, 1280), (81920, 1280, 1), 0); del buf844  # reuse
        # Topologically Sorted Source Nodes: [mul_124, result_340], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf853, buf846, 327680, grid=grid(327680), stream=stream0)
        buf854 = reinterpret_tensor(buf847, (4, 77, 1280), (98560, 1280, 1), 0); del buf847  # reuse
        # Topologically Sorted Source Nodes: [mul_125, result_343], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf854, buf849, 394240, grid=grid(394240), stream=stream0)
        buf855 = reinterpret_tensor(buf850, (4, 77, 1280), (98560, 1280, 1), 0); del buf850  # reuse
        # Topologically Sorted Source Nodes: [mul_126, result_346], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf855, buf852, 394240, grid=grid(394240), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_201], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf856 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf853, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf854, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf855, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), None, True)
        buf857 = buf856[0]
        buf858 = buf856[1]
        buf859 = buf856[2]
        buf860 = buf856[3]
        del buf856
        buf861 = buf846; del buf846  # reuse
        # Topologically Sorted Source Nodes: [result_348], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf857, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_564, (1280, 1280), (1, 1280), 0), out=buf861)
        buf862 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_225], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf857, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_566, (1280, 80), (1, 1280), 0), out=buf862)
        buf863 = reinterpret_tensor(buf809, (256, 1280), (1280, 1), 0); del buf809  # reuse
        # Topologically Sorted Source Nodes: [linear_226], Original ATen: [aten.mm]
        extern_kernels.mm(buf862, reinterpret_tensor(primals_567, (80, 1280), (1, 80), 0), out=buf863)
        buf867 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf868 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2093 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_127, result_349, hidden_states_205, hidden_states_206, norm_hidden_states_17], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77.run(buf861, primals_565, buf863, buf838, primals_568, primals_569, buf867, buf868, buf2093, 256, 1280, grid=grid(256), stream=stream0)
        del primals_569
        buf869 = buf772; del buf772  # reuse
        # Topologically Sorted Source Nodes: [result_351], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf868, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_570, (1280, 10240), (1, 1280), 0), out=buf869)
        buf870 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_228], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf868, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_572, (1280, 80), (1, 1280), 0), out=buf870)
        buf871 = empty_strided_cuda((256, 10240), (10240, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_229], Original ATen: [aten.mm]
        extern_kernels.mm(buf870, reinterpret_tensor(primals_573, (80, 10240), (1, 80), 0), out=buf871)
        buf872 = reinterpret_tensor(buf869, (4, 64, 10240), (655360, 10240, 1), 0); del buf869  # reuse
        # Topologically Sorted Source Nodes: [mul_128, result_352], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_78.run(buf872, primals_571, buf871, 2621440, grid=grid(2621440), stream=stream0)
        del primals_571
        buf873 = reinterpret_tensor(buf468, (4, 64, 5120), (327680, 5120, 1), 0); del buf468  # reuse
        # Topologically Sorted Source Nodes: [gelu_5, hidden_states_208], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_79.run(buf872, buf873, 1310720, grid=grid(1310720), stream=stream0)
        buf874 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_354], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf873, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_574, (5120, 1280), (1, 5120), 0), out=buf874)
        buf875 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_231], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf873, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_576, (5120, 80), (1, 5120), 0), out=buf875)
        buf876 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_232], Original ATen: [aten.mm]
        extern_kernels.mm(buf875, reinterpret_tensor(primals_577, (80, 1280), (1, 80), 0), out=buf876)
        buf877 = reinterpret_tensor(buf874, (4, 64, 1280), (81920, 1280, 1), 0); del buf874  # reuse
        # Topologically Sorted Source Nodes: [mul_127, result_349, hidden_states_205, hidden_states_206, mul_130, result_355, hidden_states_210], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_80.run(buf877, primals_575, buf876, buf861, primals_565, buf863, buf838, 327680, grid=grid(327680), stream=stream0)
        del primals_565
        del primals_575
        buf878 = buf876; del buf876  # reuse
        # Topologically Sorted Source Nodes: [result_357], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf877, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_578, (1280, 1280), (1, 1280), 0), out=buf878)
        buf879 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_234], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf877, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_580, (1280, 80), (1, 1280), 0), out=buf879)
        buf880 = buf863; del buf863  # reuse
        # Topologically Sorted Source Nodes: [linear_235], Original ATen: [aten.mm]
        extern_kernels.mm(buf879, reinterpret_tensor(primals_581, (80, 1280), (1, 80), 0), out=buf880)
        buf881 = reinterpret_tensor(buf861, (4, 1280, 8, 8), (81920, 64, 8, 1), 0); del buf861  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_211, output_5], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_81.run(buf878, primals_579, buf880, buf803, buf881, 5120, 64, grid=grid(5120, 64), stream=stream0)
        del primals_579
        # Topologically Sorted Source Nodes: [result_360], Original ATen: [aten.convolution]
        buf882 = extern_kernels.convolution(buf881, primals_582, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf882, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_134], Original ATen: [aten.convolution]
        buf883 = extern_kernels.convolution(buf881, primals_584, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf883, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_135], Original ATen: [aten.convolution]
        buf884 = extern_kernels.convolution(buf883, primals_585, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf884, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf885 = buf882; del buf882  # reuse
        buf886 = reinterpret_tensor(buf805, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf805  # reuse
        buf887 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf889 = reinterpret_tensor(buf887, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf887  # reuse
        # Topologically Sorted Source Nodes: [result_360, mul_132, result_361, hidden_states_212], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_84.run(buf885, buf889, primals_583, buf884, buf886, 128, 640, grid=grid(128), stream=stream0)
        del primals_583
        buf890 = buf884; del buf884  # reuse
        buf891 = buf890; del buf890  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_212, hidden_states_213], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf891, buf885, buf886, buf889, primals_586, primals_587, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_363], Original ATen: [aten.convolution]
        buf892 = extern_kernels.convolution(buf891, primals_588, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf892, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_137], Original ATen: [aten.convolution]
        buf893 = extern_kernels.convolution(buf891, primals_590, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf893, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_138], Original ATen: [aten.convolution]
        buf894 = extern_kernels.convolution(buf893, primals_591, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf894, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf895 = buf792; del buf792  # reuse
        # Topologically Sorted Source Nodes: [linear_236], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_592, (1280, 1280), (1, 1280), 0), out=buf895)
        del primals_592
        buf896 = buf892; del buf892  # reuse
        buf897 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf898 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf900 = reinterpret_tensor(buf898, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf898  # reuse
        # Topologically Sorted Source Nodes: [result_363, mul_133, result_364, hidden_states_214, hidden_states_215], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf896, buf900, primals_589, buf894, buf895, primals_593, buf897, 128, 640, grid=grid(128), stream=stream0)
        del primals_589
        del primals_593
        buf901 = buf894; del buf894  # reuse
        buf902 = buf901; del buf901  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_215, hidden_states_216], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf902, buf896, buf897, buf900, primals_594, primals_595, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_366], Original ATen: [aten.convolution]
        buf903 = extern_kernels.convolution(buf902, primals_596, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf903, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_140], Original ATen: [aten.convolution]
        buf904 = extern_kernels.convolution(buf902, primals_598, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf904, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_141], Original ATen: [aten.convolution]
        buf905 = extern_kernels.convolution(buf904, primals_599, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf905, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf906 = buf903; del buf903  # reuse
        buf907 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf908 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf910 = reinterpret_tensor(buf908, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf908  # reuse
        # Topologically Sorted Source Nodes: [result_366, mul_134, result_367, add_49, output_tensor_16, hidden_states_218], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_div_mul_native_group_norm_87.run(buf906, buf910, buf885, primals_597, buf905, buf907, 128, 640, grid=grid(128), stream=stream0)
        del primals_597
        buf911 = buf905; del buf905  # reuse
        buf912 = buf911; del buf911  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_218, hidden_states_219], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf912, buf906, buf907, buf910, primals_600, primals_601, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_369], Original ATen: [aten.convolution]
        buf913 = extern_kernels.convolution(buf912, primals_602, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf913, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_143], Original ATen: [aten.convolution]
        buf914 = extern_kernels.convolution(buf912, primals_604, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf914, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_144], Original ATen: [aten.convolution]
        buf915 = extern_kernels.convolution(buf914, primals_605, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf915, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf916 = buf895; del buf895  # reuse
        # Topologically Sorted Source Nodes: [linear_237], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_606, (1280, 1280), (1, 1280), 0), out=buf916)
        del primals_606
        buf917 = buf913; del buf913  # reuse
        buf918 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf919 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf921 = reinterpret_tensor(buf919, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf919  # reuse
        # Topologically Sorted Source Nodes: [result_369, mul_135, result_370, hidden_states_220, hidden_states_221], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf917, buf921, primals_603, buf915, buf916, primals_607, buf918, 128, 640, grid=grid(128), stream=stream0)
        del primals_603
        del primals_607
        buf922 = buf915; del buf915  # reuse
        buf923 = buf922; del buf922  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_221, hidden_states_222], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf923, buf917, buf918, buf921, primals_608, primals_609, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_372], Original ATen: [aten.convolution]
        buf924 = extern_kernels.convolution(buf923, primals_610, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf924, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_146], Original ATen: [aten.convolution]
        buf925 = extern_kernels.convolution(buf923, primals_612, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf925, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_147], Original ATen: [aten.convolution]
        buf926 = extern_kernels.convolution(buf925, primals_613, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf926, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf927 = buf924; del buf924  # reuse
        buf928 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf929 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf931 = reinterpret_tensor(buf929, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf929  # reuse
        # Topologically Sorted Source Nodes: [result_372, mul_136, result_373, add_51, output_tensor_17, hidden_states_224], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_div_mul_native_group_norm_87.run(buf927, buf931, buf906, primals_611, buf926, buf928, 128, 640, grid=grid(128), stream=stream0)
        del primals_611
        buf932 = buf926; del buf926  # reuse
        buf933 = buf932; del buf932  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_224, hidden_states_225], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf933, buf927, buf928, buf931, primals_614, primals_615, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_375], Original ATen: [aten.convolution]
        buf934 = extern_kernels.convolution(buf933, primals_616, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf934, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_149], Original ATen: [aten.convolution]
        buf935 = extern_kernels.convolution(buf933, primals_618, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf935, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_150], Original ATen: [aten.convolution]
        buf936 = extern_kernels.convolution(buf935, primals_619, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf936, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf937 = buf916; del buf916  # reuse
        # Topologically Sorted Source Nodes: [linear_238], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_620, (1280, 1280), (1, 1280), 0), out=buf937)
        del primals_620
        buf938 = buf934; del buf934  # reuse
        buf939 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf940 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf942 = reinterpret_tensor(buf940, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf940  # reuse
        # Topologically Sorted Source Nodes: [result_375, mul_137, result_376, hidden_states_226, hidden_states_227], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf938, buf942, primals_617, buf936, buf937, primals_621, buf939, 128, 640, grid=grid(128), stream=stream0)
        del primals_617
        del primals_621
        buf943 = buf936; del buf936  # reuse
        buf944 = buf943; del buf943  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_227, hidden_states_228], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf944, buf938, buf939, buf942, primals_622, primals_623, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_378], Original ATen: [aten.convolution]
        buf945 = extern_kernels.convolution(buf944, primals_624, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf945, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_152], Original ATen: [aten.convolution]
        buf946 = extern_kernels.convolution(buf944, primals_626, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf946, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_153], Original ATen: [aten.convolution]
        buf947 = extern_kernels.convolution(buf946, primals_627, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf947, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf948 = buf945; del buf945  # reuse
        buf949 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf950 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf952 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_378, mul_138, result_379, add_53, output_tensor_18, hidden_states_230], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_div_mul_native_group_norm_88.run(buf948, buf927, primals_625, buf947, buf949, buf950, buf952, 128, 640, grid=grid(128), stream=stream0)
        del primals_625
        buf953 = buf947; del buf947  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_230], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_89.run(buf948, buf949, buf950, primals_628, primals_629, buf953, 81920, grid=grid(81920), stream=stream0)
        del primals_629
        buf954 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_381], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf953, (4, 16, 1280), (20480, 1, 16), 0), reinterpret_tensor(primals_630, (4, 1280, 1280), (0, 1, 1280), 0), out=buf954)
        buf955 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_240], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_90.run(buf953, buf955, 64, 1280, grid=grid(64, 1280), stream=stream0)
        buf956 = reinterpret_tensor(buf937, (64, 80), (80, 1), 0); del buf937  # reuse
        # Topologically Sorted Source Nodes: [linear_240], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf955, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_632, (1280, 80), (1, 1280), 0), out=buf956)
        buf957 = reinterpret_tensor(buf953, (64, 1280), (1280, 1), 0); del buf953  # reuse
        # Topologically Sorted Source Nodes: [linear_241], Original ATen: [aten.mm]
        extern_kernels.mm(buf956, reinterpret_tensor(primals_633, (80, 1280), (1, 80), 0), out=buf957)
        buf961 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        buf962 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        buf2092 = empty_strided_cuda((4, 16, 1), (16, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_381, mul_139, result_382, norm_hidden_states_18], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_91.run(buf954, primals_631, buf957, primals_634, primals_635, buf961, buf962, buf2092, 64, 1280, grid=grid(64), stream=stream0)
        del primals_635
        buf963 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_384], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_636, (1280, 1280), (1, 1280), 0), out=buf963)
        buf964 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_243], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_637, (1280, 80), (1, 1280), 0), out=buf964)
        buf965 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_244], Original ATen: [aten.mm]
        extern_kernels.mm(buf964, reinterpret_tensor(primals_638, (80, 1280), (1, 80), 0), out=buf965)
        buf966 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_387], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_639, (1280, 1280), (1, 1280), 0), out=buf966)
        buf967 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_246], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_640, (1280, 80), (1, 1280), 0), out=buf967)
        buf968 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_247], Original ATen: [aten.mm]
        extern_kernels.mm(buf967, reinterpret_tensor(primals_641, (80, 1280), (1, 80), 0), out=buf968)
        buf969 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_390], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_642, (1280, 1280), (1, 1280), 0), out=buf969)
        buf970 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_249], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_643, (1280, 80), (1, 1280), 0), out=buf970)
        buf971 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_250], Original ATen: [aten.mm]
        extern_kernels.mm(buf970, reinterpret_tensor(primals_644, (80, 1280), (1, 80), 0), out=buf971)
        buf972 = reinterpret_tensor(buf963, (4, 16, 1280), (20480, 1280, 1), 0); del buf963  # reuse
        # Topologically Sorted Source Nodes: [mul_140, result_385], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_92.run(buf972, buf965, 81920, grid=grid(81920), stream=stream0)
        buf973 = reinterpret_tensor(buf966, (4, 16, 1280), (20480, 1280, 1), 0); del buf966  # reuse
        # Topologically Sorted Source Nodes: [mul_141, result_388], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_92.run(buf973, buf968, 81920, grid=grid(81920), stream=stream0)
        buf974 = reinterpret_tensor(buf969, (4, 16, 1280), (20480, 1280, 1), 0); del buf969  # reuse
        # Topologically Sorted Source Nodes: [mul_142, result_391], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_92.run(buf974, buf971, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_232], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf975 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf972, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), reinterpret_tensor(buf973, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), reinterpret_tensor(buf974, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), None, True)
        buf976 = buf975[0]
        buf977 = buf975[1]
        buf978 = buf975[2]
        buf979 = buf975[3]
        del buf975
        buf980 = buf971; del buf971  # reuse
        # Topologically Sorted Source Nodes: [result_393], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf976, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_645, (1280, 1280), (1, 1280), 0), out=buf980)
        buf981 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_252], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf976, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_647, (1280, 80), (1, 1280), 0), out=buf981)
        buf982 = buf968; del buf968  # reuse
        # Topologically Sorted Source Nodes: [linear_253], Original ATen: [aten.mm]
        extern_kernels.mm(buf981, reinterpret_tensor(primals_648, (80, 1280), (1, 80), 0), out=buf982)
        buf983 = reinterpret_tensor(buf980, (4, 16, 1280), (20480, 1280, 1), 0); del buf980  # reuse
        buf987 = reinterpret_tensor(buf965, (4, 16, 1280), (20480, 1280, 1), 0); del buf965  # reuse
        buf988 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        buf2091 = empty_strided_cuda((4, 16, 1), (16, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_381, mul_139, result_382, mul_143, result_394, hidden_states_236, hidden_states_237, norm_hidden_states_19], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_93.run(buf983, primals_646, buf982, buf954, primals_631, buf957, primals_649, primals_650, buf987, buf988, buf2091, 64, 1280, grid=grid(64), stream=stream0)
        del primals_631
        del primals_646
        del primals_650
        buf989 = buf982; del buf982  # reuse
        # Topologically Sorted Source Nodes: [result_396], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf988, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_651, (1280, 1280), (1, 1280), 0), out=buf989)
        buf990 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_255], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf988, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_652, (1280, 80), (1, 1280), 0), out=buf990)
        buf991 = buf957; del buf957  # reuse
        # Topologically Sorted Source Nodes: [linear_256], Original ATen: [aten.mm]
        extern_kernels.mm(buf990, reinterpret_tensor(primals_653, (80, 1280), (1, 80), 0), out=buf991)
        buf992 = buf852; del buf852  # reuse
        # Topologically Sorted Source Nodes: [result_399], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_654, (1024, 1280), (1, 1024), 0), out=buf992)
        del primals_654
        buf993 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_258], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_655, (1024, 80), (1, 1024), 0), out=buf993)
        del primals_655
        buf994 = buf849; del buf849  # reuse
        # Topologically Sorted Source Nodes: [linear_259], Original ATen: [aten.mm]
        extern_kernels.mm(buf993, reinterpret_tensor(primals_656, (80, 1280), (1, 80), 0), out=buf994)
        buf995 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_402], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_657, (1024, 1280), (1, 1024), 0), out=buf995)
        del primals_657
        buf996 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_261], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_658, (1024, 80), (1, 1024), 0), out=buf996)
        del primals_658
        buf997 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_262], Original ATen: [aten.mm]
        extern_kernels.mm(buf996, reinterpret_tensor(primals_659, (80, 1280), (1, 80), 0), out=buf997)
        buf998 = reinterpret_tensor(buf989, (4, 16, 1280), (20480, 1280, 1), 0); del buf989  # reuse
        # Topologically Sorted Source Nodes: [mul_144, result_397], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_92.run(buf998, buf991, 81920, grid=grid(81920), stream=stream0)
        buf999 = reinterpret_tensor(buf992, (4, 77, 1280), (98560, 1280, 1), 0); del buf992  # reuse
        # Topologically Sorted Source Nodes: [mul_145, result_400], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf999, buf994, 394240, grid=grid(394240), stream=stream0)
        buf1000 = reinterpret_tensor(buf995, (4, 77, 1280), (98560, 1280, 1), 0); del buf995  # reuse
        # Topologically Sorted Source Nodes: [mul_146, result_403], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1000, buf997, 394240, grid=grid(394240), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_238], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1001 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf998, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), reinterpret_tensor(buf999, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1000, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), None, True)
        buf1002 = buf1001[0]
        buf1003 = buf1001[1]
        buf1004 = buf1001[2]
        buf1005 = buf1001[3]
        del buf1001
        buf1006 = buf991; del buf991  # reuse
        # Topologically Sorted Source Nodes: [result_405], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1002, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_660, (1280, 1280), (1, 1280), 0), out=buf1006)
        buf1007 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_264], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1002, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_662, (1280, 80), (1, 1280), 0), out=buf1007)
        buf1008 = reinterpret_tensor(buf954, (64, 1280), (1280, 1), 0); del buf954  # reuse
        # Topologically Sorted Source Nodes: [linear_265], Original ATen: [aten.mm]
        extern_kernels.mm(buf1007, reinterpret_tensor(primals_663, (80, 1280), (1, 80), 0), out=buf1008)
        buf1012 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        buf1013 = empty_strided_cuda((4, 16, 1280), (20480, 1280, 1), torch.float32)
        buf2090 = empty_strided_cuda((4, 16, 1), (16, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_147, result_406, hidden_states_242, hidden_states_243, norm_hidden_states_20], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_94.run(buf1006, primals_661, buf1008, buf983, primals_664, primals_665, buf1012, buf1013, buf2090, 64, 1280, grid=grid(64), stream=stream0)
        del primals_665
        buf1014 = reinterpret_tensor(buf675, (64, 10240), (10240, 1), 0); del buf675  # reuse
        # Topologically Sorted Source Nodes: [result_408], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1013, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_666, (1280, 10240), (1, 1280), 0), out=buf1014)
        buf1015 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_267], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1013, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_668, (1280, 80), (1, 1280), 0), out=buf1015)
        buf1016 = reinterpret_tensor(buf673, (64, 10240), (10240, 1), 0); del buf673  # reuse
        # Topologically Sorted Source Nodes: [linear_268], Original ATen: [aten.mm]
        extern_kernels.mm(buf1015, reinterpret_tensor(primals_669, (80, 10240), (1, 80), 0), out=buf1016)
        buf1017 = reinterpret_tensor(buf1014, (4, 16, 10240), (163840, 10240, 1), 0); del buf1014  # reuse
        # Topologically Sorted Source Nodes: [mul_148, result_409], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_95.run(buf1017, primals_667, buf1016, 655360, grid=grid(655360), stream=stream0)
        del primals_667
        buf1018 = reinterpret_tensor(buf880, (4, 16, 5120), (81920, 5120, 1), 0); del buf880  # reuse
        # Topologically Sorted Source Nodes: [gelu_6, hidden_states_245], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_96.run(buf1017, buf1018, 327680, grid=grid(327680), stream=stream0)
        buf1019 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_411], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1018, (64, 5120), (5120, 1), 0), reinterpret_tensor(primals_670, (5120, 1280), (1, 5120), 0), out=buf1019)
        buf1020 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_270], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1018, (64, 5120), (5120, 1), 0), reinterpret_tensor(primals_672, (5120, 80), (1, 5120), 0), out=buf1020)
        buf1021 = empty_strided_cuda((64, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_271], Original ATen: [aten.mm]
        extern_kernels.mm(buf1020, reinterpret_tensor(primals_673, (80, 1280), (1, 80), 0), out=buf1021)
        buf1022 = reinterpret_tensor(buf1019, (4, 16, 1280), (20480, 1280, 1), 0); del buf1019  # reuse
        # Topologically Sorted Source Nodes: [mul_147, result_406, hidden_states_242, hidden_states_243, mul_150, result_412, hidden_states_247], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_97.run(buf1022, primals_671, buf1021, buf1006, primals_661, buf1008, buf983, 81920, grid=grid(81920), stream=stream0)
        del primals_661
        del primals_671
        buf1023 = reinterpret_tensor(buf983, (64, 1280), (1280, 1), 0); del buf983  # reuse
        # Topologically Sorted Source Nodes: [result_414], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1022, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_674, (1280, 1280), (1, 1280), 0), out=buf1023)
        buf1024 = empty_strided_cuda((64, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_273], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1022, (64, 1280), (1280, 1), 0), reinterpret_tensor(primals_676, (1280, 80), (1, 1280), 0), out=buf1024)
        buf1025 = buf1021; del buf1021  # reuse
        # Topologically Sorted Source Nodes: [linear_274], Original ATen: [aten.mm]
        extern_kernels.mm(buf1024, reinterpret_tensor(primals_677, (80, 1280), (1, 80), 0), out=buf1025)
        buf1026 = reinterpret_tensor(buf1008, (4, 1280, 4, 4), (20480, 16, 4, 1), 0); del buf1008  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_248, output_6], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_98.run(buf1023, primals_675, buf1025, buf948, buf1026, 5120, 16, grid=grid(5120, 16), stream=stream0)
        del primals_675
        buf1027 = reinterpret_tensor(buf950, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf950  # reuse
        buf1028 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1030 = reinterpret_tensor(buf1028, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1028  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_249], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_native_group_norm_99.run(buf1030, buf1026, buf1027, 128, 640, grid=grid(128), stream=stream0)
        buf1031 = reinterpret_tensor(buf1025, (4, 1280, 4, 4), (20480, 16, 4, 1), 0); del buf1025  # reuse
        buf1032 = buf1031; del buf1031  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_249, hidden_states_250], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf1032, buf1026, buf1027, buf1030, primals_678, primals_679, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_417], Original ATen: [aten.convolution]
        buf1033 = extern_kernels.convolution(buf1032, primals_680, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1033, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_155], Original ATen: [aten.convolution]
        buf1034 = extern_kernels.convolution(buf1032, primals_682, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1034, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_156], Original ATen: [aten.convolution]
        buf1035 = extern_kernels.convolution(buf1034, primals_683, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1035, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1036 = empty_strided_cuda((4, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_275], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_684, (1280, 1280), (1, 1280), 0), out=buf1036)
        del primals_684
        buf1037 = buf1033; del buf1033  # reuse
        buf1038 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1039 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1041 = reinterpret_tensor(buf1039, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1039  # reuse
        # Topologically Sorted Source Nodes: [result_417, mul_152, result_418, hidden_states_251, hidden_states_252], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf1037, buf1041, primals_681, buf1035, buf1036, primals_685, buf1038, 128, 640, grid=grid(128), stream=stream0)
        del primals_681
        del primals_685
        buf1042 = buf1035; del buf1035  # reuse
        buf1043 = buf1042; del buf1042  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_252, hidden_states_253], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf1043, buf1037, buf1038, buf1041, primals_686, primals_687, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_420], Original ATen: [aten.convolution]
        buf1044 = extern_kernels.convolution(buf1043, primals_688, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1044, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_158], Original ATen: [aten.convolution]
        buf1045 = extern_kernels.convolution(buf1043, primals_690, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1045, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_159], Original ATen: [aten.convolution]
        buf1046 = extern_kernels.convolution(buf1045, primals_691, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1046, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1047 = empty_strided_cuda((4, 2560, 4, 4), (40960, 16, 4, 1), torch.float32)
        buf1048 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1049 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1051 = reinterpret_tensor(buf1049, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1049  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_255, hidden_states_256], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_100.run(buf1051, buf1026, buf1044, primals_689, buf1046, buf927, buf1047, buf1048, 128, 1280, grid=grid(128), stream=stream0)
        del primals_689
        buf1052 = empty_strided_cuda((4, 2560, 4, 4), (40960, 16, 4, 1), torch.float32)
        buf1053 = buf1052; del buf1052  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_256, hidden_states_257], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_101.run(buf1053, buf1047, buf1048, buf1051, primals_692, primals_693, 163840, grid=grid(163840), stream=stream0)
        # Topologically Sorted Source Nodes: [result_423], Original ATen: [aten.convolution]
        buf1054 = extern_kernels.convolution(buf1053, primals_694, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1054, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_161], Original ATen: [aten.convolution]
        buf1055 = extern_kernels.convolution(buf1053, primals_696, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1055, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_162], Original ATen: [aten.convolution]
        buf1056 = extern_kernels.convolution(buf1055, primals_697, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1056, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1057 = buf1036; del buf1036  # reuse
        # Topologically Sorted Source Nodes: [linear_276], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_698, (1280, 1280), (1, 1280), 0), out=buf1057)
        del primals_698
        buf1058 = buf1054; del buf1054  # reuse
        buf1059 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1060 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1062 = reinterpret_tensor(buf1060, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1060  # reuse
        # Topologically Sorted Source Nodes: [result_423, mul_154, result_424, hidden_states_258, hidden_states_259], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf1058, buf1062, primals_695, buf1056, buf1057, primals_699, buf1059, 128, 640, grid=grid(128), stream=stream0)
        del primals_695
        del primals_699
        buf1063 = buf1056; del buf1056  # reuse
        buf1064 = buf1063; del buf1063  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_259, hidden_states_260], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf1064, buf1058, buf1059, buf1062, primals_700, primals_701, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_426], Original ATen: [aten.convolution]
        buf1065 = extern_kernels.convolution(buf1064, primals_702, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1065, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_164], Original ATen: [aten.convolution]
        buf1066 = extern_kernels.convolution(buf1064, primals_704, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1066, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_165], Original ATen: [aten.convolution]
        buf1067 = extern_kernels.convolution(buf1066, primals_705, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1067, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [result_429], Original ATen: [aten.convolution]
        buf1068 = extern_kernels.convolution(buf1047, primals_706, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1068, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_167], Original ATen: [aten.convolution]
        buf1069 = extern_kernels.convolution(buf1047, primals_708, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1069, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_168], Original ATen: [aten.convolution]
        buf1070 = extern_kernels.convolution(buf1069, primals_709, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1070, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1071 = empty_strided_cuda((4, 2560, 4, 4), (40960, 16, 4, 1), torch.float32)
        buf1072 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1073 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1075 = reinterpret_tensor(buf1073, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1073  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_262, hidden_states_263], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_102.run(buf1075, buf1068, primals_707, buf1070, buf1065, primals_703, buf1067, buf906, buf1071, buf1072, 128, 1280, grid=grid(128), stream=stream0)
        del primals_703
        del primals_707
        buf1076 = empty_strided_cuda((4, 2560, 4, 4), (40960, 16, 4, 1), torch.float32)
        buf1077 = buf1076; del buf1076  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_263, hidden_states_264], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_101.run(buf1077, buf1071, buf1072, buf1075, primals_710, primals_711, 163840, grid=grid(163840), stream=stream0)
        # Topologically Sorted Source Nodes: [result_432], Original ATen: [aten.convolution]
        buf1078 = extern_kernels.convolution(buf1077, primals_712, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1078, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_170], Original ATen: [aten.convolution]
        buf1079 = extern_kernels.convolution(buf1077, primals_714, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1079, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_171], Original ATen: [aten.convolution]
        buf1080 = extern_kernels.convolution(buf1079, primals_715, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1080, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1081 = buf1057; del buf1057  # reuse
        # Topologically Sorted Source Nodes: [linear_277], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_716, (1280, 1280), (1, 1280), 0), out=buf1081)
        del primals_716
        buf1082 = buf1078; del buf1078  # reuse
        buf1083 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1084 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1086 = reinterpret_tensor(buf1084, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1084  # reuse
        # Topologically Sorted Source Nodes: [result_432, mul_157, result_433, hidden_states_265, hidden_states_266], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf1082, buf1086, primals_713, buf1080, buf1081, primals_717, buf1083, 128, 640, grid=grid(128), stream=stream0)
        del primals_713
        del primals_717
        buf1087 = buf1080; del buf1080  # reuse
        buf1088 = buf1087; del buf1087  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_266, hidden_states_267], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf1088, buf1082, buf1083, buf1086, primals_718, primals_719, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_435], Original ATen: [aten.convolution]
        buf1089 = extern_kernels.convolution(buf1088, primals_720, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1089, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_173], Original ATen: [aten.convolution]
        buf1090 = extern_kernels.convolution(buf1088, primals_722, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1090, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_174], Original ATen: [aten.convolution]
        buf1091 = extern_kernels.convolution(buf1090, primals_723, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1091, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [result_438], Original ATen: [aten.convolution]
        buf1092 = extern_kernels.convolution(buf1071, primals_724, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1092, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_176], Original ATen: [aten.convolution]
        buf1093 = extern_kernels.convolution(buf1071, primals_726, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1093, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_177], Original ATen: [aten.convolution]
        buf1094 = extern_kernels.convolution(buf1093, primals_727, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1094, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1095 = empty_strided_cuda((4, 2560, 4, 4), (40960, 16, 4, 1), torch.float32)
        buf1096 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1097 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1099 = reinterpret_tensor(buf1097, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1097  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_269, hidden_states_270], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_102.run(buf1099, buf1092, primals_725, buf1094, buf1089, primals_721, buf1091, buf885, buf1095, buf1096, 128, 1280, grid=grid(128), stream=stream0)
        del primals_721
        del primals_725
        buf1100 = empty_strided_cuda((4, 2560, 4, 4), (40960, 16, 4, 1), torch.float32)
        buf1101 = buf1100; del buf1100  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_270, hidden_states_271], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_101.run(buf1101, buf1095, buf1096, buf1099, primals_728, primals_729, 163840, grid=grid(163840), stream=stream0)
        # Topologically Sorted Source Nodes: [result_441], Original ATen: [aten.convolution]
        buf1102 = extern_kernels.convolution(buf1101, primals_730, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1102, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_179], Original ATen: [aten.convolution]
        buf1103 = extern_kernels.convolution(buf1101, primals_732, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1103, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_180], Original ATen: [aten.convolution]
        buf1104 = extern_kernels.convolution(buf1103, primals_733, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1104, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1105 = buf1081; del buf1081  # reuse
        # Topologically Sorted Source Nodes: [linear_278], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_734, (1280, 1280), (1, 1280), 0), out=buf1105)
        del primals_734
        buf1106 = buf1102; del buf1102  # reuse
        buf1107 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1108 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1110 = reinterpret_tensor(buf1108, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1108  # reuse
        # Topologically Sorted Source Nodes: [result_441, mul_160, result_442, hidden_states_272, hidden_states_273], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_convolution_mul_native_group_norm_86.run(buf1106, buf1110, primals_731, buf1104, buf1105, primals_735, buf1107, 128, 640, grid=grid(128), stream=stream0)
        del primals_731
        del primals_735
        buf1111 = buf1104; del buf1104  # reuse
        buf1112 = buf1111; del buf1111  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_273, hidden_states_274], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_85.run(buf1112, buf1106, buf1107, buf1110, primals_736, primals_737, 81920, grid=grid(81920), stream=stream0)
        # Topologically Sorted Source Nodes: [result_444], Original ATen: [aten.convolution]
        buf1113 = extern_kernels.convolution(buf1112, primals_738, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1113, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_182], Original ATen: [aten.convolution]
        buf1114 = extern_kernels.convolution(buf1112, primals_740, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1114, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_183], Original ATen: [aten.convolution]
        buf1115 = extern_kernels.convolution(buf1114, primals_741, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1115, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [result_447], Original ATen: [aten.convolution]
        buf1116 = extern_kernels.convolution(buf1095, primals_742, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1116, (4, 1280, 4, 4), (20480, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_185], Original ATen: [aten.convolution]
        buf1117 = extern_kernels.convolution(buf1095, primals_744, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1117, (4, 80, 4, 4), (1280, 16, 4, 1))
        # Topologically Sorted Source Nodes: [conv2d_186], Original ATen: [aten.convolution]
        buf1118 = extern_kernels.convolution(buf1117, primals_745, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1118, (4, 1280, 4, 4), (20480, 16, 4, 1))
        buf1119 = empty_strided_cuda((8, ), (1, ), torch.int64)
        # Topologically Sorted Source Nodes: [hidden_states_276], Original ATen: [aten.arange, aten.add, aten.mul, aten._to_copy]
        stream0 = get_raw_stream(0)
        triton_poi_fused__to_copy_add_arange_mul_103.run(buf1119, 8, grid=grid(8), stream=stream0)
        buf1120 = reinterpret_tensor(buf878, (4, 1280, 8, 8), (81920, 64, 8, 1), 0); del buf878  # reuse
        # Topologically Sorted Source Nodes: [result_444, mul_161, result_445, result_447, mul_162, result_448, add_65, output_tensor_22, hidden_states_276], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten._unsafe_index]
        stream0 = get_raw_stream(0)
        triton_poi_fused__unsafe_index_add_convolution_div_mul_104.run(buf1119, buf1116, primals_743, buf1118, buf1113, primals_739, buf1115, buf1120, 327680, grid=grid(327680), stream=stream0)
        del primals_739
        del primals_743
        # Topologically Sorted Source Nodes: [result_450], Original ATen: [aten.convolution]
        buf1121 = extern_kernels.convolution(buf1120, primals_746, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1121, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_188], Original ATen: [aten.convolution]
        buf1122 = extern_kernels.convolution(buf1120, primals_748, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1122, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_189], Original ATen: [aten.convolution]
        buf1123 = extern_kernels.convolution(buf1122, primals_749, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1123, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1124 = reinterpret_tensor(buf1016, (4, 2560, 8, 8), (163840, 64, 8, 1), 0); del buf1016  # reuse
        buf1125 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1126 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1128 = reinterpret_tensor(buf1126, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1126  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_277, hidden_states_278], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_105.run(buf1128, buf1121, primals_747, buf1123, buf881, buf1124, buf1125, 128, 5120, grid=grid(128), stream=stream0)
        del primals_747
        buf1129 = reinterpret_tensor(buf633, (4, 2560, 8, 8), (163840, 64, 8, 1), 0); del buf633  # reuse
        buf1130 = buf1129; del buf1129  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_278, hidden_states_279], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_106.run(buf1130, buf1124, buf1125, buf1128, primals_750, primals_751, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_453], Original ATen: [aten.convolution]
        buf1131 = extern_kernels.convolution(buf1130, primals_752, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1131, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_191], Original ATen: [aten.convolution]
        buf1132 = extern_kernels.convolution(buf1130, primals_754, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1132, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_192], Original ATen: [aten.convolution]
        buf1133 = extern_kernels.convolution(buf1132, primals_755, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1133, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1134 = buf1105; del buf1105  # reuse
        # Topologically Sorted Source Nodes: [linear_279], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_756, (1280, 1280), (1, 1280), 0), out=buf1134)
        del primals_756
        buf1135 = buf1131; del buf1131  # reuse
        buf1136 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1137 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1139 = reinterpret_tensor(buf1137, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1137  # reuse
        # Topologically Sorted Source Nodes: [result_453, mul_164, result_454, hidden_states_280, hidden_states_281], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_68.run(buf1135, buf1139, primals_753, buf1133, buf1134, primals_757, buf1136, 128, 2560, grid=grid(128), stream=stream0)
        del primals_753
        del primals_757
        buf1140 = buf1133; del buf1133  # reuse
        buf1141 = buf1140; del buf1140  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_281, hidden_states_282], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_69.run(buf1141, buf1135, buf1136, buf1139, primals_758, primals_759, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_456], Original ATen: [aten.convolution]
        buf1142 = extern_kernels.convolution(buf1141, primals_760, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1142, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_194], Original ATen: [aten.convolution]
        buf1143 = extern_kernels.convolution(buf1141, primals_762, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1143, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_195], Original ATen: [aten.convolution]
        buf1144 = extern_kernels.convolution(buf1143, primals_763, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1144, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [result_459], Original ATen: [aten.convolution]
        buf1145 = extern_kernels.convolution(buf1124, primals_764, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1145, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_197], Original ATen: [aten.convolution]
        buf1146 = extern_kernels.convolution(buf1124, primals_766, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1146, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_198], Original ATen: [aten.convolution]
        buf1147 = extern_kernels.convolution(buf1146, primals_767, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1147, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1148 = buf1145; del buf1145  # reuse
        buf1149 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1150 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1152 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_456, mul_165, result_457, result_459, mul_166, result_460, add_67, output_tensor_23, hidden_states_284], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_70.run(buf1148, primals_765, buf1147, buf1142, primals_761, buf1144, buf1149, buf1150, buf1152, 128, 2560, grid=grid(128), stream=stream0)
        del primals_761
        del primals_765
        buf1153 = buf1147; del buf1147  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_284], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_71.run(buf1148, buf1149, buf1150, primals_768, primals_769, buf1153, 327680, grid=grid(327680), stream=stream0)
        del primals_769
        buf1154 = reinterpret_tensor(buf1144, (4, 64, 1280), (81920, 1280, 1), 0); del buf1144  # reuse
        # Topologically Sorted Source Nodes: [result_462], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1153, (4, 64, 1280), (81920, 1, 64), 0), reinterpret_tensor(primals_770, (4, 1280, 1280), (0, 1, 1280), 0), out=buf1154)
        buf1155 = reinterpret_tensor(buf1142, (4, 64, 1280), (81920, 1280, 1), 0); del buf1142  # reuse
        # Topologically Sorted Source Nodes: [linear_281], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_72.run(buf1153, buf1155, 256, 1280, grid=grid(256, 1280), stream=stream0)
        buf1156 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_281], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1155, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_772, (1280, 80), (1, 1280), 0), out=buf1156)
        buf1157 = reinterpret_tensor(buf1153, (256, 1280), (1280, 1), 0); del buf1153  # reuse
        # Topologically Sorted Source Nodes: [linear_282], Original ATen: [aten.mm]
        extern_kernels.mm(buf1156, reinterpret_tensor(primals_773, (80, 1280), (1, 80), 0), out=buf1157)
        buf1161 = reinterpret_tensor(buf1123, (4, 64, 1280), (81920, 1280, 1), 0); del buf1123  # reuse
        buf1162 = reinterpret_tensor(buf1121, (4, 64, 1280), (81920, 1280, 1), 0); del buf1121  # reuse
        buf2089 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_462, mul_167, result_463, norm_hidden_states_21], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73.run(buf1154, primals_771, buf1157, primals_774, primals_775, buf1161, buf1162, buf2089, 256, 1280, grid=grid(256), stream=stream0)
        del primals_775
        buf1163 = reinterpret_tensor(buf838, (256, 1280), (1280, 1), 0); del buf838  # reuse
        # Topologically Sorted Source Nodes: [result_465], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_776, (1280, 1280), (1, 1280), 0), out=buf1163)
        buf1164 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_284], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_777, (1280, 80), (1, 1280), 0), out=buf1164)
        buf1165 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_285], Original ATen: [aten.mm]
        extern_kernels.mm(buf1164, reinterpret_tensor(primals_778, (80, 1280), (1, 80), 0), out=buf1165)
        buf1166 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_468], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_779, (1280, 1280), (1, 1280), 0), out=buf1166)
        buf1167 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_287], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_780, (1280, 80), (1, 1280), 0), out=buf1167)
        buf1168 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_288], Original ATen: [aten.mm]
        extern_kernels.mm(buf1167, reinterpret_tensor(primals_781, (80, 1280), (1, 80), 0), out=buf1168)
        buf1169 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_471], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_782, (1280, 1280), (1, 1280), 0), out=buf1169)
        buf1170 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_290], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_783, (1280, 80), (1, 1280), 0), out=buf1170)
        buf1171 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_291], Original ATen: [aten.mm]
        extern_kernels.mm(buf1170, reinterpret_tensor(primals_784, (80, 1280), (1, 80), 0), out=buf1171)
        buf1172 = reinterpret_tensor(buf1163, (4, 64, 1280), (81920, 1280, 1), 0); del buf1163  # reuse
        # Topologically Sorted Source Nodes: [mul_168, result_466], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1172, buf1165, 327680, grid=grid(327680), stream=stream0)
        buf1173 = reinterpret_tensor(buf1166, (4, 64, 1280), (81920, 1280, 1), 0); del buf1166  # reuse
        # Topologically Sorted Source Nodes: [mul_169, result_469], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1173, buf1168, 327680, grid=grid(327680), stream=stream0)
        buf1174 = reinterpret_tensor(buf1169, (4, 64, 1280), (81920, 1280, 1), 0); del buf1169  # reuse
        # Topologically Sorted Source Nodes: [mul_170, result_472], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1174, buf1171, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_286], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1175 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1172, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1173, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1174, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), None, True)
        buf1176 = buf1175[0]
        buf1177 = buf1175[1]
        buf1178 = buf1175[2]
        buf1179 = buf1175[3]
        del buf1175
        buf1180 = buf1171; del buf1171  # reuse
        # Topologically Sorted Source Nodes: [result_474], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1176, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_785, (1280, 1280), (1, 1280), 0), out=buf1180)
        buf1181 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_293], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1176, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_787, (1280, 80), (1, 1280), 0), out=buf1181)
        buf1182 = buf1168; del buf1168  # reuse
        # Topologically Sorted Source Nodes: [linear_294], Original ATen: [aten.mm]
        extern_kernels.mm(buf1181, reinterpret_tensor(primals_788, (80, 1280), (1, 80), 0), out=buf1182)
        buf1183 = reinterpret_tensor(buf1180, (4, 64, 1280), (81920, 1280, 1), 0); del buf1180  # reuse
        buf1187 = reinterpret_tensor(buf1165, (4, 64, 1280), (81920, 1280, 1), 0); del buf1165  # reuse
        buf1188 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2088 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_462, mul_167, result_463, mul_171, result_475, hidden_states_290, hidden_states_291, norm_hidden_states_22], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75.run(buf1183, primals_786, buf1182, buf1154, primals_771, buf1157, primals_789, primals_790, buf1187, buf1188, buf2088, 256, 1280, grid=grid(256), stream=stream0)
        del primals_771
        del primals_786
        del primals_790
        buf1189 = buf1182; del buf1182  # reuse
        # Topologically Sorted Source Nodes: [result_477], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1188, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_791, (1280, 1280), (1, 1280), 0), out=buf1189)
        buf1190 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_296], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1188, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_792, (1280, 80), (1, 1280), 0), out=buf1190)
        buf1191 = buf1157; del buf1157  # reuse
        # Topologically Sorted Source Nodes: [linear_297], Original ATen: [aten.mm]
        extern_kernels.mm(buf1190, reinterpret_tensor(primals_793, (80, 1280), (1, 80), 0), out=buf1191)
        buf1192 = buf997; del buf997  # reuse
        # Topologically Sorted Source Nodes: [result_480], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_794, (1024, 1280), (1, 1024), 0), out=buf1192)
        del primals_794
        buf1193 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_299], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_795, (1024, 80), (1, 1024), 0), out=buf1193)
        del primals_795
        buf1194 = buf994; del buf994  # reuse
        # Topologically Sorted Source Nodes: [linear_300], Original ATen: [aten.mm]
        extern_kernels.mm(buf1193, reinterpret_tensor(primals_796, (80, 1280), (1, 80), 0), out=buf1194)
        buf1195 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_483], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_797, (1024, 1280), (1, 1024), 0), out=buf1195)
        del primals_797
        buf1196 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_302], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_798, (1024, 80), (1, 1024), 0), out=buf1196)
        del primals_798
        buf1197 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_303], Original ATen: [aten.mm]
        extern_kernels.mm(buf1196, reinterpret_tensor(primals_799, (80, 1280), (1, 80), 0), out=buf1197)
        buf1198 = reinterpret_tensor(buf1189, (4, 64, 1280), (81920, 1280, 1), 0); del buf1189  # reuse
        # Topologically Sorted Source Nodes: [mul_172, result_478], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1198, buf1191, 327680, grid=grid(327680), stream=stream0)
        buf1199 = reinterpret_tensor(buf1192, (4, 77, 1280), (98560, 1280, 1), 0); del buf1192  # reuse
        # Topologically Sorted Source Nodes: [mul_173, result_481], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1199, buf1194, 394240, grid=grid(394240), stream=stream0)
        buf1200 = reinterpret_tensor(buf1195, (4, 77, 1280), (98560, 1280, 1), 0); del buf1195  # reuse
        # Topologically Sorted Source Nodes: [mul_174, result_484], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1200, buf1197, 394240, grid=grid(394240), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_292], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1201 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1198, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1199, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1200, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), None, True)
        buf1202 = buf1201[0]
        buf1203 = buf1201[1]
        buf1204 = buf1201[2]
        buf1205 = buf1201[3]
        del buf1201
        buf1206 = buf1191; del buf1191  # reuse
        # Topologically Sorted Source Nodes: [result_486], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1202, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_800, (1280, 1280), (1, 1280), 0), out=buf1206)
        buf1207 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_305], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1202, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_802, (1280, 80), (1, 1280), 0), out=buf1207)
        buf1208 = reinterpret_tensor(buf1154, (256, 1280), (1280, 1), 0); del buf1154  # reuse
        # Topologically Sorted Source Nodes: [linear_306], Original ATen: [aten.mm]
        extern_kernels.mm(buf1207, reinterpret_tensor(primals_803, (80, 1280), (1, 80), 0), out=buf1208)
        buf1212 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf1213 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2087 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_175, result_487, hidden_states_296, hidden_states_297, norm_hidden_states_23], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77.run(buf1206, primals_801, buf1208, buf1183, primals_804, primals_805, buf1212, buf1213, buf2087, 256, 1280, grid=grid(256), stream=stream0)
        del primals_805
        buf1214 = buf871; del buf871  # reuse
        # Topologically Sorted Source Nodes: [result_489], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1213, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_806, (1280, 10240), (1, 1280), 0), out=buf1214)
        buf1215 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_308], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1213, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_808, (1280, 80), (1, 1280), 0), out=buf1215)
        buf1216 = empty_strided_cuda((256, 10240), (10240, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_309], Original ATen: [aten.mm]
        extern_kernels.mm(buf1215, reinterpret_tensor(primals_809, (80, 10240), (1, 80), 0), out=buf1216)
        buf1217 = reinterpret_tensor(buf1214, (4, 64, 10240), (655360, 10240, 1), 0); del buf1214  # reuse
        # Topologically Sorted Source Nodes: [mul_176, result_490], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_78.run(buf1217, primals_807, buf1216, 2621440, grid=grid(2621440), stream=stream0)
        del primals_807
        buf1218 = reinterpret_tensor(buf428, (4, 64, 5120), (327680, 5120, 1), 0); del buf428  # reuse
        # Topologically Sorted Source Nodes: [gelu_7, hidden_states_299], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_79.run(buf1217, buf1218, 1310720, grid=grid(1310720), stream=stream0)
        buf1219 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_492], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1218, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_810, (5120, 1280), (1, 5120), 0), out=buf1219)
        buf1220 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_311], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1218, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_812, (5120, 80), (1, 5120), 0), out=buf1220)
        buf1221 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_312], Original ATen: [aten.mm]
        extern_kernels.mm(buf1220, reinterpret_tensor(primals_813, (80, 1280), (1, 80), 0), out=buf1221)
        buf1222 = reinterpret_tensor(buf1219, (4, 64, 1280), (81920, 1280, 1), 0); del buf1219  # reuse
        # Topologically Sorted Source Nodes: [mul_175, result_487, hidden_states_296, hidden_states_297, mul_178, result_493, hidden_states_301], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_80.run(buf1222, primals_811, buf1221, buf1206, primals_801, buf1208, buf1183, 327680, grid=grid(327680), stream=stream0)
        del primals_801
        del primals_811
        buf1223 = buf1221; del buf1221  # reuse
        # Topologically Sorted Source Nodes: [result_495], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1222, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_814, (1280, 1280), (1, 1280), 0), out=buf1223)
        buf1224 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_314], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1222, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_816, (1280, 80), (1, 1280), 0), out=buf1224)
        buf1225 = buf1208; del buf1208  # reuse
        # Topologically Sorted Source Nodes: [linear_315], Original ATen: [aten.mm]
        extern_kernels.mm(buf1224, reinterpret_tensor(primals_817, (80, 1280), (1, 80), 0), out=buf1225)
        buf1226 = empty_strided_cuda((4, 2560, 8, 8), (163840, 64, 8, 1), torch.float32)
        buf1227 = reinterpret_tensor(buf1150, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1150  # reuse
        buf1228 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1230 = reinterpret_tensor(buf1228, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1228  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_303, hidden_states_304], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_107.run(buf1230, buf1223, primals_815, buf1225, buf1148, buf782, buf1226, buf1227, 128, 5120, grid=grid(128), stream=stream0)
        del primals_815
        buf1231 = empty_strided_cuda((4, 2560, 8, 8), (163840, 64, 8, 1), torch.float32)
        buf1232 = buf1231; del buf1231  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_304, hidden_states_305], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_106.run(buf1232, buf1226, buf1227, buf1230, primals_818, primals_819, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_498], Original ATen: [aten.convolution]
        buf1233 = extern_kernels.convolution(buf1232, primals_820, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1233, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_200], Original ATen: [aten.convolution]
        buf1234 = extern_kernels.convolution(buf1232, primals_822, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1234, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_201], Original ATen: [aten.convolution]
        buf1235 = extern_kernels.convolution(buf1234, primals_823, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1235, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1236 = buf1134; del buf1134  # reuse
        # Topologically Sorted Source Nodes: [linear_316], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_824, (1280, 1280), (1, 1280), 0), out=buf1236)
        del primals_824
        buf1237 = buf1233; del buf1233  # reuse
        buf1238 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1239 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1241 = reinterpret_tensor(buf1239, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1239  # reuse
        # Topologically Sorted Source Nodes: [result_498, mul_180, result_499, hidden_states_306, hidden_states_307], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_68.run(buf1237, buf1241, primals_821, buf1235, buf1236, primals_825, buf1238, 128, 2560, grid=grid(128), stream=stream0)
        del primals_821
        del primals_825
        buf1242 = buf1235; del buf1235  # reuse
        buf1243 = buf1242; del buf1242  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_307, hidden_states_308], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_69.run(buf1243, buf1237, buf1238, buf1241, primals_826, primals_827, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_501], Original ATen: [aten.convolution]
        buf1244 = extern_kernels.convolution(buf1243, primals_828, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1244, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_203], Original ATen: [aten.convolution]
        buf1245 = extern_kernels.convolution(buf1243, primals_830, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1245, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_204], Original ATen: [aten.convolution]
        buf1246 = extern_kernels.convolution(buf1245, primals_831, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1246, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [result_504], Original ATen: [aten.convolution]
        buf1247 = extern_kernels.convolution(buf1226, primals_832, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1247, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_206], Original ATen: [aten.convolution]
        buf1248 = extern_kernels.convolution(buf1226, primals_834, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1248, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_207], Original ATen: [aten.convolution]
        buf1249 = extern_kernels.convolution(buf1248, primals_835, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1249, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1250 = buf1247; del buf1247  # reuse
        buf1251 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1252 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1254 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_501, mul_181, result_502, result_504, mul_182, result_505, add_73, output_tensor_24, hidden_states_310], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_70.run(buf1250, primals_833, buf1249, buf1244, primals_829, buf1246, buf1251, buf1252, buf1254, 128, 2560, grid=grid(128), stream=stream0)
        del primals_829
        del primals_833
        buf1255 = buf1249; del buf1249  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_310], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_71.run(buf1250, buf1251, buf1252, primals_836, primals_837, buf1255, 327680, grid=grid(327680), stream=stream0)
        del primals_837
        buf1256 = reinterpret_tensor(buf1246, (4, 64, 1280), (81920, 1280, 1), 0); del buf1246  # reuse
        # Topologically Sorted Source Nodes: [result_507], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1255, (4, 64, 1280), (81920, 1, 64), 0), reinterpret_tensor(primals_838, (4, 1280, 1280), (0, 1, 1280), 0), out=buf1256)
        buf1257 = reinterpret_tensor(buf1244, (4, 64, 1280), (81920, 1280, 1), 0); del buf1244  # reuse
        # Topologically Sorted Source Nodes: [linear_318], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_72.run(buf1255, buf1257, 256, 1280, grid=grid(256, 1280), stream=stream0)
        buf1258 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_318], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1257, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_840, (1280, 80), (1, 1280), 0), out=buf1258)
        buf1259 = reinterpret_tensor(buf1255, (256, 1280), (1280, 1), 0); del buf1255  # reuse
        # Topologically Sorted Source Nodes: [linear_319], Original ATen: [aten.mm]
        extern_kernels.mm(buf1258, reinterpret_tensor(primals_841, (80, 1280), (1, 80), 0), out=buf1259)
        buf1263 = reinterpret_tensor(buf1225, (4, 64, 1280), (81920, 1280, 1), 0); del buf1225  # reuse
        buf1264 = reinterpret_tensor(buf1223, (4, 64, 1280), (81920, 1280, 1), 0); del buf1223  # reuse
        buf2086 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_507, mul_183, result_508, norm_hidden_states_24], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73.run(buf1256, primals_839, buf1259, primals_842, primals_843, buf1263, buf1264, buf2086, 256, 1280, grid=grid(256), stream=stream0)
        del primals_843
        buf1265 = buf1206; del buf1206  # reuse
        # Topologically Sorted Source Nodes: [result_510], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_844, (1280, 1280), (1, 1280), 0), out=buf1265)
        buf1266 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_321], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_845, (1280, 80), (1, 1280), 0), out=buf1266)
        buf1267 = reinterpret_tensor(buf1183, (256, 1280), (1280, 1), 0); del buf1183  # reuse
        # Topologically Sorted Source Nodes: [linear_322], Original ATen: [aten.mm]
        extern_kernels.mm(buf1266, reinterpret_tensor(primals_846, (80, 1280), (1, 80), 0), out=buf1267)
        buf1268 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_513], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_847, (1280, 1280), (1, 1280), 0), out=buf1268)
        buf1269 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_324], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_848, (1280, 80), (1, 1280), 0), out=buf1269)
        buf1270 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_325], Original ATen: [aten.mm]
        extern_kernels.mm(buf1269, reinterpret_tensor(primals_849, (80, 1280), (1, 80), 0), out=buf1270)
        buf1271 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_516], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_850, (1280, 1280), (1, 1280), 0), out=buf1271)
        buf1272 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_327], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_851, (1280, 80), (1, 1280), 0), out=buf1272)
        buf1273 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_328], Original ATen: [aten.mm]
        extern_kernels.mm(buf1272, reinterpret_tensor(primals_852, (80, 1280), (1, 80), 0), out=buf1273)
        buf1274 = reinterpret_tensor(buf1265, (4, 64, 1280), (81920, 1280, 1), 0); del buf1265  # reuse
        # Topologically Sorted Source Nodes: [mul_184, result_511], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1274, buf1267, 327680, grid=grid(327680), stream=stream0)
        buf1275 = reinterpret_tensor(buf1268, (4, 64, 1280), (81920, 1280, 1), 0); del buf1268  # reuse
        # Topologically Sorted Source Nodes: [mul_185, result_514], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1275, buf1270, 327680, grid=grid(327680), stream=stream0)
        buf1276 = reinterpret_tensor(buf1271, (4, 64, 1280), (81920, 1280, 1), 0); del buf1271  # reuse
        # Topologically Sorted Source Nodes: [mul_186, result_517], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1276, buf1273, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_312], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1277 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1274, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1275, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1276, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), None, True)
        buf1278 = buf1277[0]
        buf1279 = buf1277[1]
        buf1280 = buf1277[2]
        buf1281 = buf1277[3]
        del buf1277
        buf1282 = buf1273; del buf1273  # reuse
        # Topologically Sorted Source Nodes: [result_519], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1278, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_853, (1280, 1280), (1, 1280), 0), out=buf1282)
        buf1283 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_330], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1278, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_855, (1280, 80), (1, 1280), 0), out=buf1283)
        buf1284 = buf1270; del buf1270  # reuse
        # Topologically Sorted Source Nodes: [linear_331], Original ATen: [aten.mm]
        extern_kernels.mm(buf1283, reinterpret_tensor(primals_856, (80, 1280), (1, 80), 0), out=buf1284)
        buf1285 = reinterpret_tensor(buf1282, (4, 64, 1280), (81920, 1280, 1), 0); del buf1282  # reuse
        buf1289 = reinterpret_tensor(buf1267, (4, 64, 1280), (81920, 1280, 1), 0); del buf1267  # reuse
        buf1290 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2085 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_507, mul_183, result_508, mul_187, result_520, hidden_states_316, hidden_states_317, norm_hidden_states_25], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75.run(buf1285, primals_854, buf1284, buf1256, primals_839, buf1259, primals_857, primals_858, buf1289, buf1290, buf2085, 256, 1280, grid=grid(256), stream=stream0)
        del primals_839
        del primals_854
        del primals_858
        buf1291 = buf1284; del buf1284  # reuse
        # Topologically Sorted Source Nodes: [result_522], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1290, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_859, (1280, 1280), (1, 1280), 0), out=buf1291)
        buf1292 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_333], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1290, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_860, (1280, 80), (1, 1280), 0), out=buf1292)
        buf1293 = buf1259; del buf1259  # reuse
        # Topologically Sorted Source Nodes: [linear_334], Original ATen: [aten.mm]
        extern_kernels.mm(buf1292, reinterpret_tensor(primals_861, (80, 1280), (1, 80), 0), out=buf1293)
        buf1294 = buf1197; del buf1197  # reuse
        # Topologically Sorted Source Nodes: [result_525], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_862, (1024, 1280), (1, 1024), 0), out=buf1294)
        del primals_862
        buf1295 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_336], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_863, (1024, 80), (1, 1024), 0), out=buf1295)
        del primals_863
        buf1296 = buf1194; del buf1194  # reuse
        # Topologically Sorted Source Nodes: [linear_337], Original ATen: [aten.mm]
        extern_kernels.mm(buf1295, reinterpret_tensor(primals_864, (80, 1280), (1, 80), 0), out=buf1296)
        buf1297 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_528], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_865, (1024, 1280), (1, 1024), 0), out=buf1297)
        del primals_865
        buf1298 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_339], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_866, (1024, 80), (1, 1024), 0), out=buf1298)
        del primals_866
        buf1299 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_340], Original ATen: [aten.mm]
        extern_kernels.mm(buf1298, reinterpret_tensor(primals_867, (80, 1280), (1, 80), 0), out=buf1299)
        buf1300 = reinterpret_tensor(buf1291, (4, 64, 1280), (81920, 1280, 1), 0); del buf1291  # reuse
        # Topologically Sorted Source Nodes: [mul_188, result_523], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1300, buf1293, 327680, grid=grid(327680), stream=stream0)
        buf1301 = reinterpret_tensor(buf1294, (4, 77, 1280), (98560, 1280, 1), 0); del buf1294  # reuse
        # Topologically Sorted Source Nodes: [mul_189, result_526], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1301, buf1296, 394240, grid=grid(394240), stream=stream0)
        buf1302 = reinterpret_tensor(buf1297, (4, 77, 1280), (98560, 1280, 1), 0); del buf1297  # reuse
        # Topologically Sorted Source Nodes: [mul_190, result_529], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1302, buf1299, 394240, grid=grid(394240), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_318], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1303 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1300, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1301, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1302, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), None, True)
        buf1304 = buf1303[0]
        buf1305 = buf1303[1]
        buf1306 = buf1303[2]
        buf1307 = buf1303[3]
        del buf1303
        buf1308 = buf1293; del buf1293  # reuse
        # Topologically Sorted Source Nodes: [result_531], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1304, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_868, (1280, 1280), (1, 1280), 0), out=buf1308)
        buf1309 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_342], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1304, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_870, (1280, 80), (1, 1280), 0), out=buf1309)
        buf1310 = reinterpret_tensor(buf1256, (256, 1280), (1280, 1), 0); del buf1256  # reuse
        # Topologically Sorted Source Nodes: [linear_343], Original ATen: [aten.mm]
        extern_kernels.mm(buf1309, reinterpret_tensor(primals_871, (80, 1280), (1, 80), 0), out=buf1310)
        buf1314 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf1315 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2084 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_191, result_532, hidden_states_322, hidden_states_323, norm_hidden_states_26], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77.run(buf1308, primals_869, buf1310, buf1285, primals_872, primals_873, buf1314, buf1315, buf2084, 256, 1280, grid=grid(256), stream=stream0)
        del primals_873
        buf1316 = buf1216; del buf1216  # reuse
        # Topologically Sorted Source Nodes: [result_534], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1315, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_874, (1280, 10240), (1, 1280), 0), out=buf1316)
        buf1317 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_345], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1315, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_876, (1280, 80), (1, 1280), 0), out=buf1317)
        buf1318 = empty_strided_cuda((256, 10240), (10240, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_346], Original ATen: [aten.mm]
        extern_kernels.mm(buf1317, reinterpret_tensor(primals_877, (80, 10240), (1, 80), 0), out=buf1318)
        buf1319 = reinterpret_tensor(buf1316, (4, 64, 10240), (655360, 10240, 1), 0); del buf1316  # reuse
        # Topologically Sorted Source Nodes: [mul_192, result_535], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_78.run(buf1319, primals_875, buf1318, 2621440, grid=grid(2621440), stream=stream0)
        del primals_875
        buf1320 = empty_strided_cuda((4, 64, 5120), (327680, 5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_8, hidden_states_325], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_79.run(buf1319, buf1320, 1310720, grid=grid(1310720), stream=stream0)
        buf1321 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_537], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1320, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_878, (5120, 1280), (1, 5120), 0), out=buf1321)
        buf1322 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_348], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1320, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_880, (5120, 80), (1, 5120), 0), out=buf1322)
        buf1323 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_349], Original ATen: [aten.mm]
        extern_kernels.mm(buf1322, reinterpret_tensor(primals_881, (80, 1280), (1, 80), 0), out=buf1323)
        buf1324 = reinterpret_tensor(buf1321, (4, 64, 1280), (81920, 1280, 1), 0); del buf1321  # reuse
        # Topologically Sorted Source Nodes: [mul_191, result_532, hidden_states_322, hidden_states_323, mul_194, result_538, hidden_states_327], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_80.run(buf1324, primals_879, buf1323, buf1308, primals_869, buf1310, buf1285, 327680, grid=grid(327680), stream=stream0)
        del primals_869
        del primals_879
        buf1325 = buf1323; del buf1323  # reuse
        # Topologically Sorted Source Nodes: [result_540], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1324, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_882, (1280, 1280), (1, 1280), 0), out=buf1325)
        buf1326 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_351], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1324, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_884, (1280, 80), (1, 1280), 0), out=buf1326)
        buf1327 = buf1310; del buf1310  # reuse
        # Topologically Sorted Source Nodes: [linear_352], Original ATen: [aten.mm]
        extern_kernels.mm(buf1326, reinterpret_tensor(primals_885, (80, 1280), (1, 80), 0), out=buf1327)
        buf1328 = empty_strided_cuda((4, 1920, 8, 8), (122880, 64, 8, 1), torch.float32)
        buf1329 = reinterpret_tensor(buf1252, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1252  # reuse
        buf1330 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1332 = reinterpret_tensor(buf1330, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1330  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_329, hidden_states_330], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_108.run(buf1332, buf1325, primals_883, buf1327, buf1250, buf680, buf1328, buf1329, 128, 3840, grid=grid(128), stream=stream0)
        del primals_883
        buf1333 = empty_strided_cuda((4, 1920, 8, 8), (122880, 64, 8, 1), torch.float32)
        buf1334 = buf1333; del buf1333  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_330, hidden_states_331], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_109.run(buf1334, buf1328, buf1329, buf1332, primals_886, primals_887, 491520, grid=grid(491520), stream=stream0)
        # Topologically Sorted Source Nodes: [result_543], Original ATen: [aten.convolution]
        buf1335 = extern_kernels.convolution(buf1334, primals_888, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1335, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_209], Original ATen: [aten.convolution]
        buf1336 = extern_kernels.convolution(buf1334, primals_890, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1336, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_210], Original ATen: [aten.convolution]
        buf1337 = extern_kernels.convolution(buf1336, primals_891, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1337, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1338 = buf1236; del buf1236  # reuse
        # Topologically Sorted Source Nodes: [linear_353], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_892, (1280, 1280), (1, 1280), 0), out=buf1338)
        del primals_892
        buf1339 = buf1335; del buf1335  # reuse
        buf1340 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1341 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1343 = reinterpret_tensor(buf1341, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1341  # reuse
        # Topologically Sorted Source Nodes: [result_543, mul_196, result_544, hidden_states_332, hidden_states_333], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_68.run(buf1339, buf1343, primals_889, buf1337, buf1338, primals_893, buf1340, 128, 2560, grid=grid(128), stream=stream0)
        del buf1338
        del primals_889
        del primals_893
        buf1344 = buf1337; del buf1337  # reuse
        buf1345 = buf1344; del buf1344  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_333, hidden_states_334], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_69.run(buf1345, buf1339, buf1340, buf1343, primals_894, primals_895, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [result_546], Original ATen: [aten.convolution]
        buf1346 = extern_kernels.convolution(buf1345, primals_896, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1346, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_212], Original ATen: [aten.convolution]
        buf1347 = extern_kernels.convolution(buf1345, primals_898, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1347, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_213], Original ATen: [aten.convolution]
        buf1348 = extern_kernels.convolution(buf1347, primals_899, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1348, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [result_549], Original ATen: [aten.convolution]
        buf1349 = extern_kernels.convolution(buf1328, primals_900, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1349, (4, 1280, 8, 8), (81920, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_215], Original ATen: [aten.convolution]
        buf1350 = extern_kernels.convolution(buf1328, primals_902, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1350, (4, 80, 8, 8), (5120, 64, 8, 1))
        # Topologically Sorted Source Nodes: [conv2d_216], Original ATen: [aten.convolution]
        buf1351 = extern_kernels.convolution(buf1350, primals_903, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1351, (4, 1280, 8, 8), (81920, 64, 8, 1))
        buf1352 = buf1349; del buf1349  # reuse
        buf1353 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1354 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1356 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_546, mul_197, result_547, result_549, mul_198, result_550, add_79, output_tensor_25, hidden_states_336], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_70.run(buf1352, primals_901, buf1351, buf1346, primals_897, buf1348, buf1353, buf1354, buf1356, 128, 2560, grid=grid(128), stream=stream0)
        del primals_897
        del primals_901
        buf1357 = buf1351; del buf1351  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_336], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_71.run(buf1352, buf1353, buf1354, primals_904, primals_905, buf1357, 327680, grid=grid(327680), stream=stream0)
        del primals_905
        buf1358 = reinterpret_tensor(buf1348, (4, 64, 1280), (81920, 1280, 1), 0); del buf1348  # reuse
        # Topologically Sorted Source Nodes: [result_552], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1357, (4, 64, 1280), (81920, 1, 64), 0), reinterpret_tensor(primals_906, (4, 1280, 1280), (0, 1, 1280), 0), out=buf1358)
        buf1359 = reinterpret_tensor(buf1346, (4, 64, 1280), (81920, 1280, 1), 0); del buf1346  # reuse
        # Topologically Sorted Source Nodes: [linear_355], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_72.run(buf1357, buf1359, 256, 1280, grid=grid(256, 1280), stream=stream0)
        buf1360 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_355], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1359, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_908, (1280, 80), (1, 1280), 0), out=buf1360)
        buf1361 = reinterpret_tensor(buf1357, (256, 1280), (1280, 1), 0); del buf1357  # reuse
        # Topologically Sorted Source Nodes: [linear_356], Original ATen: [aten.mm]
        extern_kernels.mm(buf1360, reinterpret_tensor(primals_909, (80, 1280), (1, 80), 0), out=buf1361)
        buf1365 = reinterpret_tensor(buf1327, (4, 64, 1280), (81920, 1280, 1), 0); del buf1327  # reuse
        buf1366 = reinterpret_tensor(buf1325, (4, 64, 1280), (81920, 1280, 1), 0); del buf1325  # reuse
        buf2083 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_552, mul_199, result_553, norm_hidden_states_27], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_mul_native_layer_norm_native_layer_norm_backward_73.run(buf1358, primals_907, buf1361, primals_910, primals_911, buf1365, buf1366, buf2083, 256, 1280, grid=grid(256), stream=stream0)
        del primals_911
        buf1367 = buf1308; del buf1308  # reuse
        # Topologically Sorted Source Nodes: [result_555], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_912, (1280, 1280), (1, 1280), 0), out=buf1367)
        buf1368 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_358], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_913, (1280, 80), (1, 1280), 0), out=buf1368)
        buf1369 = reinterpret_tensor(buf1285, (256, 1280), (1280, 1), 0); del buf1285  # reuse
        # Topologically Sorted Source Nodes: [linear_359], Original ATen: [aten.mm]
        extern_kernels.mm(buf1368, reinterpret_tensor(primals_914, (80, 1280), (1, 80), 0), out=buf1369)
        buf1370 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_558], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_915, (1280, 1280), (1, 1280), 0), out=buf1370)
        buf1371 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_361], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_916, (1280, 80), (1, 1280), 0), out=buf1371)
        buf1372 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_362], Original ATen: [aten.mm]
        extern_kernels.mm(buf1371, reinterpret_tensor(primals_917, (80, 1280), (1, 80), 0), out=buf1372)
        buf1373 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_561], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_918, (1280, 1280), (1, 1280), 0), out=buf1373)
        buf1374 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_364], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_919, (1280, 80), (1, 1280), 0), out=buf1374)
        buf1375 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_365], Original ATen: [aten.mm]
        extern_kernels.mm(buf1374, reinterpret_tensor(primals_920, (80, 1280), (1, 80), 0), out=buf1375)
        buf1376 = reinterpret_tensor(buf1367, (4, 64, 1280), (81920, 1280, 1), 0); del buf1367  # reuse
        # Topologically Sorted Source Nodes: [mul_200, result_556], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1376, buf1369, 327680, grid=grid(327680), stream=stream0)
        buf1377 = reinterpret_tensor(buf1370, (4, 64, 1280), (81920, 1280, 1), 0); del buf1370  # reuse
        # Topologically Sorted Source Nodes: [mul_201, result_559], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1377, buf1372, 327680, grid=grid(327680), stream=stream0)
        buf1378 = reinterpret_tensor(buf1373, (4, 64, 1280), (81920, 1280, 1), 0); del buf1373  # reuse
        # Topologically Sorted Source Nodes: [mul_202, result_562], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1378, buf1375, 327680, grid=grid(327680), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_338], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1379 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1376, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1377, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1378, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), None, True)
        buf1380 = buf1379[0]
        buf1381 = buf1379[1]
        buf1382 = buf1379[2]
        buf1383 = buf1379[3]
        del buf1379
        buf1384 = buf1375; del buf1375  # reuse
        # Topologically Sorted Source Nodes: [result_564], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1380, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_921, (1280, 1280), (1, 1280), 0), out=buf1384)
        buf1385 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_367], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1380, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_923, (1280, 80), (1, 1280), 0), out=buf1385)
        buf1386 = buf1372; del buf1372  # reuse
        # Topologically Sorted Source Nodes: [linear_368], Original ATen: [aten.mm]
        extern_kernels.mm(buf1385, reinterpret_tensor(primals_924, (80, 1280), (1, 80), 0), out=buf1386)
        buf1387 = reinterpret_tensor(buf1384, (4, 64, 1280), (81920, 1280, 1), 0); del buf1384  # reuse
        buf1391 = reinterpret_tensor(buf1369, (4, 64, 1280), (81920, 1280, 1), 0); del buf1369  # reuse
        buf1392 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2082 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_552, mul_199, result_553, mul_203, result_565, hidden_states_342, hidden_states_343, norm_hidden_states_28], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_75.run(buf1387, primals_922, buf1386, buf1358, primals_907, buf1361, primals_925, primals_926, buf1391, buf1392, buf2082, 256, 1280, grid=grid(256), stream=stream0)
        del primals_907
        del primals_922
        del primals_926
        buf1393 = buf1386; del buf1386  # reuse
        # Topologically Sorted Source Nodes: [result_567], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1392, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_927, (1280, 1280), (1, 1280), 0), out=buf1393)
        buf1394 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_370], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1392, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_928, (1280, 80), (1, 1280), 0), out=buf1394)
        buf1395 = buf1361; del buf1361  # reuse
        # Topologically Sorted Source Nodes: [linear_371], Original ATen: [aten.mm]
        extern_kernels.mm(buf1394, reinterpret_tensor(primals_929, (80, 1280), (1, 80), 0), out=buf1395)
        buf1396 = buf1299; del buf1299  # reuse
        # Topologically Sorted Source Nodes: [result_570], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_930, (1024, 1280), (1, 1024), 0), out=buf1396)
        del primals_930
        buf1397 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_373], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_931, (1024, 80), (1, 1024), 0), out=buf1397)
        del primals_931
        buf1398 = buf1296; del buf1296  # reuse
        # Topologically Sorted Source Nodes: [linear_374], Original ATen: [aten.mm]
        extern_kernels.mm(buf1397, reinterpret_tensor(primals_932, (80, 1280), (1, 80), 0), out=buf1398)
        buf1399 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_573], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_933, (1024, 1280), (1, 1024), 0), out=buf1399)
        del primals_933
        buf1400 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_376], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_934, (1024, 80), (1, 1024), 0), out=buf1400)
        del primals_934
        buf1401 = empty_strided_cuda((308, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_377], Original ATen: [aten.mm]
        extern_kernels.mm(buf1400, reinterpret_tensor(primals_935, (80, 1280), (1, 80), 0), out=buf1401)
        buf1402 = reinterpret_tensor(buf1393, (4, 64, 1280), (81920, 1280, 1), 0); del buf1393  # reuse
        # Topologically Sorted Source Nodes: [mul_204, result_568], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_74.run(buf1402, buf1395, 327680, grid=grid(327680), stream=stream0)
        buf1403 = reinterpret_tensor(buf1396, (4, 77, 1280), (98560, 1280, 1), 0); del buf1396  # reuse
        # Topologically Sorted Source Nodes: [mul_205, result_571], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1403, buf1398, 394240, grid=grid(394240), stream=stream0)
        del buf1398
        buf1404 = reinterpret_tensor(buf1399, (4, 77, 1280), (98560, 1280, 1), 0); del buf1399  # reuse
        # Topologically Sorted Source Nodes: [mul_206, result_574], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_76.run(buf1404, buf1401, 394240, grid=grid(394240), stream=stream0)
        del buf1401
        # Topologically Sorted Source Nodes: [hidden_states_344], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1405 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1402, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1403, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1404, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), None, True)
        buf1406 = buf1405[0]
        buf1407 = buf1405[1]
        buf1408 = buf1405[2]
        buf1409 = buf1405[3]
        del buf1405
        buf1410 = buf1395; del buf1395  # reuse
        # Topologically Sorted Source Nodes: [result_576], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1406, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_936, (1280, 1280), (1, 1280), 0), out=buf1410)
        buf1411 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_379], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1406, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_938, (1280, 80), (1, 1280), 0), out=buf1411)
        buf1412 = reinterpret_tensor(buf1358, (256, 1280), (1280, 1), 0); del buf1358  # reuse
        # Topologically Sorted Source Nodes: [linear_380], Original ATen: [aten.mm]
        extern_kernels.mm(buf1411, reinterpret_tensor(primals_939, (80, 1280), (1, 80), 0), out=buf1412)
        buf1416 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf1417 = empty_strided_cuda((4, 64, 1280), (81920, 1280, 1), torch.float32)
        buf2081 = empty_strided_cuda((4, 64, 1), (64, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_207, result_577, hidden_states_348, hidden_states_349, norm_hidden_states_29], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_77.run(buf1410, primals_937, buf1412, buf1387, primals_940, primals_941, buf1416, buf1417, buf2081, 256, 1280, grid=grid(256), stream=stream0)
        del primals_941
        buf1418 = buf1318; del buf1318  # reuse
        # Topologically Sorted Source Nodes: [result_579], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1417, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_942, (1280, 10240), (1, 1280), 0), out=buf1418)
        buf1419 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_382], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1417, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_944, (1280, 80), (1, 1280), 0), out=buf1419)
        buf1420 = empty_strided_cuda((256, 10240), (10240, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_383], Original ATen: [aten.mm]
        extern_kernels.mm(buf1419, reinterpret_tensor(primals_945, (80, 10240), (1, 80), 0), out=buf1420)
        buf1421 = reinterpret_tensor(buf1418, (4, 64, 10240), (655360, 10240, 1), 0); del buf1418  # reuse
        # Topologically Sorted Source Nodes: [mul_208, result_580], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_78.run(buf1421, primals_943, buf1420, 2621440, grid=grid(2621440), stream=stream0)
        del primals_943
        buf1422 = empty_strided_cuda((4, 64, 5120), (327680, 5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_9, hidden_states_351], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_79.run(buf1421, buf1422, 1310720, grid=grid(1310720), stream=stream0)
        buf1423 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_582], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1422, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_946, (5120, 1280), (1, 5120), 0), out=buf1423)
        buf1424 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_385], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1422, (256, 5120), (5120, 1), 0), reinterpret_tensor(primals_948, (5120, 80), (1, 5120), 0), out=buf1424)
        buf1425 = empty_strided_cuda((256, 1280), (1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_386], Original ATen: [aten.mm]
        extern_kernels.mm(buf1424, reinterpret_tensor(primals_949, (80, 1280), (1, 80), 0), out=buf1425)
        buf1426 = reinterpret_tensor(buf1423, (4, 64, 1280), (81920, 1280, 1), 0); del buf1423  # reuse
        # Topologically Sorted Source Nodes: [mul_207, result_577, hidden_states_348, hidden_states_349, mul_210, result_583, hidden_states_353], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_80.run(buf1426, primals_947, buf1425, buf1410, primals_937, buf1412, buf1387, 327680, grid=grid(327680), stream=stream0)
        del primals_937
        del primals_947
        buf1427 = buf1425; del buf1425  # reuse
        # Topologically Sorted Source Nodes: [result_585], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1426, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_950, (1280, 1280), (1, 1280), 0), out=buf1427)
        buf1428 = empty_strided_cuda((256, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_388], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1426, (256, 1280), (1280, 1), 0), reinterpret_tensor(primals_952, (1280, 80), (1, 1280), 0), out=buf1428)
        buf1429 = buf1412; del buf1412  # reuse
        # Topologically Sorted Source Nodes: [linear_389], Original ATen: [aten.mm]
        extern_kernels.mm(buf1428, reinterpret_tensor(primals_953, (80, 1280), (1, 80), 0), out=buf1429)
        buf1430 = empty_strided_cuda((16, ), (1, ), torch.int64)
        # Topologically Sorted Source Nodes: [hidden_states_355], Original ATen: [aten.arange, aten.add, aten.mul, aten._to_copy]
        stream0 = get_raw_stream(0)
        triton_poi_fused__to_copy_add_arange_mul_110.run(buf1430, 16, grid=grid(16), stream=stream0)
        buf1431 = empty_strided_cuda((4, 1280, 16, 16), (327680, 256, 16, 1), torch.float32)
        # Topologically Sorted Source Nodes: [hidden_states_354, output_9, hidden_states_355], Original ATen: [aten.clone, aten.add, aten._unsafe_index]
        stream0 = get_raw_stream(0)
        triton_poi_fused__unsafe_index_add_clone_111.run(buf1430, buf1427, primals_951, buf1429, buf1352, buf1431, 1310720, grid=grid(1310720), stream=stream0)
        del primals_951
        # Topologically Sorted Source Nodes: [result_588], Original ATen: [aten.convolution]
        buf1432 = extern_kernels.convolution(buf1431, primals_954, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1432, (4, 1280, 16, 16), (327680, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_218], Original ATen: [aten.convolution]
        buf1433 = extern_kernels.convolution(buf1431, primals_956, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1433, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_219], Original ATen: [aten.convolution]
        buf1434 = extern_kernels.convolution(buf1433, primals_957, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1434, (4, 1280, 16, 16), (327680, 256, 16, 1))
        buf1435 = empty_strided_cuda((4, 1920, 16, 16), (491520, 256, 16, 1), torch.float32)
        buf1436 = reinterpret_tensor(buf1354, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1354  # reuse
        buf1437 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1439 = reinterpret_tensor(buf1437, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1437  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_356, hidden_states_357], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_112.run(buf1439, buf1432, primals_955, buf1434, buf676, buf1435, buf1436, 128, 15360, grid=grid(128), stream=stream0)
        del primals_955
        buf1440 = empty_strided_cuda((4, 1920, 16, 16), (491520, 256, 16, 1), torch.float32)
        buf1441 = buf1440; del buf1440  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_357, hidden_states_358], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_113.run(buf1441, buf1435, buf1436, buf1439, primals_958, primals_959, 1966080, grid=grid(1966080), stream=stream0)
        # Topologically Sorted Source Nodes: [result_591], Original ATen: [aten.convolution]
        buf1442 = extern_kernels.convolution(buf1441, primals_960, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1442, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_221], Original ATen: [aten.convolution]
        buf1443 = extern_kernels.convolution(buf1441, primals_962, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1443, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_222], Original ATen: [aten.convolution]
        buf1444 = extern_kernels.convolution(buf1443, primals_963, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1444, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf1445 = buf587; del buf587  # reuse
        # Topologically Sorted Source Nodes: [linear_390], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_964, (1280, 640), (1, 1280), 0), out=buf1445)
        del primals_964
        buf1446 = buf1442; del buf1442  # reuse
        buf1447 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1448 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1450 = reinterpret_tensor(buf1448, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1448  # reuse
        # Topologically Sorted Source Nodes: [result_591, mul_213, result_592, hidden_states_359, hidden_states_360], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_50.run(buf1446, buf1450, primals_961, buf1444, buf1445, primals_965, buf1447, 128, 5120, grid=grid(128), stream=stream0)
        del primals_961
        del primals_965
        buf1451 = buf1444; del buf1444  # reuse
        buf1452 = buf1451; del buf1451  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_360, hidden_states_361], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_51.run(buf1452, buf1446, buf1447, buf1450, primals_966, primals_967, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_594], Original ATen: [aten.convolution]
        buf1453 = extern_kernels.convolution(buf1452, primals_968, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1453, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_224], Original ATen: [aten.convolution]
        buf1454 = extern_kernels.convolution(buf1452, primals_970, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1454, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_225], Original ATen: [aten.convolution]
        buf1455 = extern_kernels.convolution(buf1454, primals_971, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1455, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [result_597], Original ATen: [aten.convolution]
        buf1456 = extern_kernels.convolution(buf1435, primals_972, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1456, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_227], Original ATen: [aten.convolution]
        buf1457 = extern_kernels.convolution(buf1435, primals_974, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1457, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_228], Original ATen: [aten.convolution]
        buf1458 = extern_kernels.convolution(buf1457, primals_975, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1458, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf1459 = buf1456; del buf1456  # reuse
        buf1460 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1461 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1463 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_594, mul_214, result_595, result_597, mul_215, result_598, add_85, output_tensor_26, hidden_states_363], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_52.run(buf1459, primals_973, buf1458, buf1453, primals_969, buf1455, buf1460, buf1461, buf1463, 128, 5120, grid=grid(128), stream=stream0)
        del primals_969
        del primals_973
        buf1464 = buf1458; del buf1458  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_363], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_53.run(buf1459, buf1460, buf1461, primals_976, primals_977, buf1464, 655360, grid=grid(655360), stream=stream0)
        del primals_977
        buf1465 = reinterpret_tensor(buf1455, (4, 256, 640), (163840, 640, 1), 0); del buf1455  # reuse
        # Topologically Sorted Source Nodes: [result_600], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1464, (4, 256, 640), (163840, 1, 256), 0), reinterpret_tensor(primals_978, (4, 640, 640), (0, 1, 640), 0), out=buf1465)
        buf1466 = reinterpret_tensor(buf1453, (4, 256, 640), (163840, 640, 1), 0); del buf1453  # reuse
        # Topologically Sorted Source Nodes: [linear_392], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_54.run(buf1464, buf1466, 1024, 640, grid=grid(1024, 640), stream=stream0)
        buf1467 = reinterpret_tensor(buf1118, (1024, 80), (80, 1), 0); del buf1118  # reuse
        # Topologically Sorted Source Nodes: [linear_392], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1466, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_980, (640, 80), (1, 640), 0), out=buf1467)
        buf1468 = reinterpret_tensor(buf1464, (1024, 640), (640, 1), 0); del buf1464  # reuse
        # Topologically Sorted Source Nodes: [linear_393], Original ATen: [aten.mm]
        extern_kernels.mm(buf1467, reinterpret_tensor(primals_981, (80, 640), (1, 80), 0), out=buf1468)
        buf1472 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf1473 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2080 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_600, mul_216, result_601, norm_hidden_states_30], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55.run(buf1465, primals_979, buf1468, primals_982, primals_983, buf1472, buf1473, buf2080, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_983
        buf1474 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_603], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_984, (640, 640), (1, 640), 0), out=buf1474)
        buf1475 = reinterpret_tensor(buf1116, (1024, 80), (80, 1), 0); del buf1116  # reuse
        # Topologically Sorted Source Nodes: [linear_395], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_985, (640, 80), (1, 640), 0), out=buf1475)
        buf1476 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_396], Original ATen: [aten.mm]
        extern_kernels.mm(buf1475, reinterpret_tensor(primals_986, (80, 640), (1, 80), 0), out=buf1476)
        buf1477 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_606], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_987, (640, 640), (1, 640), 0), out=buf1477)
        buf1478 = reinterpret_tensor(buf1115, (1024, 80), (80, 1), 0); del buf1115  # reuse
        # Topologically Sorted Source Nodes: [linear_398], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_988, (640, 80), (1, 640), 0), out=buf1478)
        buf1479 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_399], Original ATen: [aten.mm]
        extern_kernels.mm(buf1478, reinterpret_tensor(primals_989, (80, 640), (1, 80), 0), out=buf1479)
        buf1480 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_609], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_990, (640, 640), (1, 640), 0), out=buf1480)
        buf1481 = reinterpret_tensor(buf1113, (1024, 80), (80, 1), 0); del buf1113  # reuse
        # Topologically Sorted Source Nodes: [linear_401], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_991, (640, 80), (1, 640), 0), out=buf1481)
        buf1482 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_402], Original ATen: [aten.mm]
        extern_kernels.mm(buf1481, reinterpret_tensor(primals_992, (80, 640), (1, 80), 0), out=buf1482)
        buf1483 = reinterpret_tensor(buf1474, (4, 256, 640), (163840, 640, 1), 0); del buf1474  # reuse
        # Topologically Sorted Source Nodes: [mul_217, result_604], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1483, buf1476, 655360, grid=grid(655360), stream=stream0)
        buf1484 = reinterpret_tensor(buf1477, (4, 256, 640), (163840, 640, 1), 0); del buf1477  # reuse
        # Topologically Sorted Source Nodes: [mul_218, result_607], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1484, buf1479, 655360, grid=grid(655360), stream=stream0)
        buf1485 = reinterpret_tensor(buf1480, (4, 256, 640), (163840, 640, 1), 0); del buf1480  # reuse
        # Topologically Sorted Source Nodes: [mul_219, result_610], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1485, buf1482, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_365], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1486 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1483, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1484, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1485, (4, 10, 256, 64), (163840, 64, 640, 1), 0), None, True)
        buf1487 = buf1486[0]
        buf1488 = buf1486[1]
        buf1489 = buf1486[2]
        buf1490 = buf1486[3]
        del buf1486
        buf1491 = buf1482; del buf1482  # reuse
        # Topologically Sorted Source Nodes: [result_612], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1487, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_993, (640, 640), (1, 640), 0), out=buf1491)
        buf1492 = reinterpret_tensor(buf1094, (1024, 80), (80, 1), 0); del buf1094  # reuse
        # Topologically Sorted Source Nodes: [linear_404], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1487, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_995, (640, 80), (1, 640), 0), out=buf1492)
        buf1493 = buf1479; del buf1479  # reuse
        # Topologically Sorted Source Nodes: [linear_405], Original ATen: [aten.mm]
        extern_kernels.mm(buf1492, reinterpret_tensor(primals_996, (80, 640), (1, 80), 0), out=buf1493)
        buf1494 = reinterpret_tensor(buf1491, (4, 256, 640), (163840, 640, 1), 0); del buf1491  # reuse
        buf1498 = reinterpret_tensor(buf1476, (4, 256, 640), (163840, 640, 1), 0); del buf1476  # reuse
        buf1499 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2079 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_600, mul_216, result_601, mul_220, result_613, hidden_states_369, hidden_states_370, norm_hidden_states_31], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57.run(buf1494, primals_994, buf1493, buf1465, primals_979, buf1468, primals_997, primals_998, buf1498, buf1499, buf2079, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_979
        del primals_994
        del primals_998
        buf1500 = buf1493; del buf1493  # reuse
        # Topologically Sorted Source Nodes: [result_615], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1499, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_999, (640, 640), (1, 640), 0), out=buf1500)
        buf1501 = reinterpret_tensor(buf1092, (1024, 80), (80, 1), 0); del buf1092  # reuse
        # Topologically Sorted Source Nodes: [linear_407], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1499, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1000, (640, 80), (1, 640), 0), out=buf1501)
        buf1502 = buf1468; del buf1468  # reuse
        # Topologically Sorted Source Nodes: [linear_408], Original ATen: [aten.mm]
        extern_kernels.mm(buf1501, reinterpret_tensor(primals_1001, (80, 640), (1, 80), 0), out=buf1502)
        buf1503 = buf647; del buf647  # reuse
        # Topologically Sorted Source Nodes: [result_618], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1002, (1024, 640), (1, 1024), 0), out=buf1503)
        del primals_1002
        buf1504 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_410], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1003, (1024, 80), (1, 1024), 0), out=buf1504)
        del primals_1003
        buf1505 = buf644; del buf644  # reuse
        # Topologically Sorted Source Nodes: [linear_411], Original ATen: [aten.mm]
        extern_kernels.mm(buf1504, reinterpret_tensor(primals_1004, (80, 640), (1, 80), 0), out=buf1505)
        buf1506 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_621], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1005, (1024, 640), (1, 1024), 0), out=buf1506)
        del primals_1005
        buf1507 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_413], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1006, (1024, 80), (1, 1024), 0), out=buf1507)
        del primals_1006
        buf1508 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_414], Original ATen: [aten.mm]
        extern_kernels.mm(buf1507, reinterpret_tensor(primals_1007, (80, 640), (1, 80), 0), out=buf1508)
        buf1509 = reinterpret_tensor(buf1500, (4, 256, 640), (163840, 640, 1), 0); del buf1500  # reuse
        # Topologically Sorted Source Nodes: [mul_221, result_616], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1509, buf1502, 655360, grid=grid(655360), stream=stream0)
        buf1510 = reinterpret_tensor(buf1503, (4, 77, 640), (49280, 640, 1), 0); del buf1503  # reuse
        # Topologically Sorted Source Nodes: [mul_222, result_619], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf1510, buf1505, 197120, grid=grid(197120), stream=stream0)
        buf1511 = reinterpret_tensor(buf1506, (4, 77, 640), (49280, 640, 1), 0); del buf1506  # reuse
        # Topologically Sorted Source Nodes: [mul_223, result_622], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf1511, buf1508, 197120, grid=grid(197120), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_371], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1512 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1509, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1510, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf1511, (4, 10, 77, 64), (49280, 64, 640, 1), 0), None, True)
        buf1513 = buf1512[0]
        buf1514 = buf1512[1]
        buf1515 = buf1512[2]
        buf1516 = buf1512[3]
        del buf1512
        buf1517 = buf1502; del buf1502  # reuse
        # Topologically Sorted Source Nodes: [result_624], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1008, (640, 640), (1, 640), 0), out=buf1517)
        buf1518 = reinterpret_tensor(buf1091, (1024, 80), (80, 1), 0); del buf1091  # reuse
        # Topologically Sorted Source Nodes: [linear_416], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1513, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1010, (640, 80), (1, 640), 0), out=buf1518)
        buf1519 = reinterpret_tensor(buf1465, (1024, 640), (640, 1), 0); del buf1465  # reuse
        # Topologically Sorted Source Nodes: [linear_417], Original ATen: [aten.mm]
        extern_kernels.mm(buf1518, reinterpret_tensor(primals_1011, (80, 640), (1, 80), 0), out=buf1519)
        buf1523 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf1524 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2078 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_224, result_625, hidden_states_375, hidden_states_376, norm_hidden_states_32], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59.run(buf1517, primals_1009, buf1519, buf1494, primals_1012, primals_1013, buf1523, buf1524, buf2078, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1013
        buf1525 = buf666; del buf666  # reuse
        # Topologically Sorted Source Nodes: [result_627], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1524, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1014, (640, 5120), (1, 640), 0), out=buf1525)
        buf1526 = reinterpret_tensor(buf1089, (1024, 80), (80, 1), 0); del buf1089  # reuse
        # Topologically Sorted Source Nodes: [linear_419], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1524, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1016, (640, 80), (1, 640), 0), out=buf1526)
        buf1527 = empty_strided_cuda((1024, 5120), (5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_420], Original ATen: [aten.mm]
        extern_kernels.mm(buf1526, reinterpret_tensor(primals_1017, (80, 5120), (1, 80), 0), out=buf1527)
        buf1528 = reinterpret_tensor(buf1525, (4, 256, 5120), (1310720, 5120, 1), 0); del buf1525  # reuse
        # Topologically Sorted Source Nodes: [mul_225, result_628], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_60.run(buf1528, primals_1015, buf1527, 5242880, grid=grid(5242880), stream=stream0)
        del primals_1015
        buf1529 = reinterpret_tensor(buf1420, (4, 256, 2560), (655360, 2560, 1), 0); del buf1420  # reuse
        # Topologically Sorted Source Nodes: [gelu_10, hidden_states_378], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_61.run(buf1528, buf1529, 2621440, grid=grid(2621440), stream=stream0)
        buf1530 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_630], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1529, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_1018, (2560, 640), (1, 2560), 0), out=buf1530)
        buf1531 = reinterpret_tensor(buf1070, (1024, 80), (80, 1), 0); del buf1070  # reuse
        # Topologically Sorted Source Nodes: [linear_422], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1529, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_1020, (2560, 80), (1, 2560), 0), out=buf1531)
        buf1532 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_423], Original ATen: [aten.mm]
        extern_kernels.mm(buf1531, reinterpret_tensor(primals_1021, (80, 640), (1, 80), 0), out=buf1532)
        buf1533 = reinterpret_tensor(buf1530, (4, 256, 640), (163840, 640, 1), 0); del buf1530  # reuse
        # Topologically Sorted Source Nodes: [mul_224, result_625, hidden_states_375, hidden_states_376, mul_227, result_631, hidden_states_380], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_62.run(buf1533, primals_1019, buf1532, buf1517, primals_1009, buf1519, buf1494, 655360, grid=grid(655360), stream=stream0)
        del primals_1009
        del primals_1019
        buf1534 = buf1532; del buf1532  # reuse
        # Topologically Sorted Source Nodes: [result_633], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1533, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1022, (640, 640), (1, 640), 0), out=buf1534)
        buf1535 = reinterpret_tensor(buf1068, (1024, 80), (80, 1), 0); del buf1068  # reuse
        # Topologically Sorted Source Nodes: [linear_425], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1533, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1024, (640, 80), (1, 640), 0), out=buf1535)
        buf1536 = buf1519; del buf1519  # reuse
        # Topologically Sorted Source Nodes: [linear_426], Original ATen: [aten.mm]
        extern_kernels.mm(buf1535, reinterpret_tensor(primals_1025, (80, 640), (1, 80), 0), out=buf1536)
        buf1537 = buf1434; del buf1434  # reuse
        buf1538 = reinterpret_tensor(buf1461, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1461  # reuse
        buf1539 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1541 = reinterpret_tensor(buf1539, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1539  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_382, hidden_states_383], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_114.run(buf1541, buf1534, primals_1023, buf1536, buf1459, buf577, buf1537, buf1538, 128, 10240, grid=grid(128), stream=stream0)
        del primals_1023
        buf1542 = buf1432; del buf1432  # reuse
        buf1543 = buf1542; del buf1542  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_383, hidden_states_384], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_115.run(buf1543, buf1537, buf1538, buf1541, primals_1026, primals_1027, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_636], Original ATen: [aten.convolution]
        buf1544 = extern_kernels.convolution(buf1543, primals_1028, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1544, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_230], Original ATen: [aten.convolution]
        buf1545 = extern_kernels.convolution(buf1543, primals_1030, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1545, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_231], Original ATen: [aten.convolution]
        buf1546 = extern_kernels.convolution(buf1545, primals_1031, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1546, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf1547 = buf1445; del buf1445  # reuse
        # Topologically Sorted Source Nodes: [linear_427], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_1032, (1280, 640), (1, 1280), 0), out=buf1547)
        del primals_1032
        buf1548 = buf1544; del buf1544  # reuse
        buf1549 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1550 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1552 = reinterpret_tensor(buf1550, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1550  # reuse
        # Topologically Sorted Source Nodes: [result_636, mul_229, result_637, hidden_states_385, hidden_states_386], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_50.run(buf1548, buf1552, primals_1029, buf1546, buf1547, primals_1033, buf1549, 128, 5120, grid=grid(128), stream=stream0)
        del primals_1029
        del primals_1033
        buf1553 = buf1546; del buf1546  # reuse
        buf1554 = buf1553; del buf1553  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_386, hidden_states_387], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_51.run(buf1554, buf1548, buf1549, buf1552, primals_1034, primals_1035, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_639], Original ATen: [aten.convolution]
        buf1555 = extern_kernels.convolution(buf1554, primals_1036, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1555, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_233], Original ATen: [aten.convolution]
        buf1556 = extern_kernels.convolution(buf1554, primals_1038, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1556, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_234], Original ATen: [aten.convolution]
        buf1557 = extern_kernels.convolution(buf1556, primals_1039, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1557, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [result_642], Original ATen: [aten.convolution]
        buf1558 = extern_kernels.convolution(buf1537, primals_1040, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1558, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_236], Original ATen: [aten.convolution]
        buf1559 = extern_kernels.convolution(buf1537, primals_1042, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1559, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_237], Original ATen: [aten.convolution]
        buf1560 = extern_kernels.convolution(buf1559, primals_1043, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1560, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf1561 = buf1558; del buf1558  # reuse
        buf1562 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1563 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1565 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_639, mul_230, result_640, result_642, mul_231, result_643, add_91, output_tensor_27, hidden_states_389], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_52.run(buf1561, primals_1041, buf1560, buf1555, primals_1037, buf1557, buf1562, buf1563, buf1565, 128, 5120, grid=grid(128), stream=stream0)
        del primals_1037
        del primals_1041
        buf1566 = buf1560; del buf1560  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_389], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_53.run(buf1561, buf1562, buf1563, primals_1044, primals_1045, buf1566, 655360, grid=grid(655360), stream=stream0)
        del primals_1045
        buf1567 = reinterpret_tensor(buf1557, (4, 256, 640), (163840, 640, 1), 0); del buf1557  # reuse
        # Topologically Sorted Source Nodes: [result_645], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1566, (4, 256, 640), (163840, 1, 256), 0), reinterpret_tensor(primals_1046, (4, 640, 640), (0, 1, 640), 0), out=buf1567)
        buf1568 = reinterpret_tensor(buf1555, (4, 256, 640), (163840, 640, 1), 0); del buf1555  # reuse
        # Topologically Sorted Source Nodes: [linear_429], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_54.run(buf1566, buf1568, 1024, 640, grid=grid(1024, 640), stream=stream0)
        buf1569 = reinterpret_tensor(buf1067, (1024, 80), (80, 1), 0); del buf1067  # reuse
        # Topologically Sorted Source Nodes: [linear_429], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1568, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1048, (640, 80), (1, 640), 0), out=buf1569)
        buf1570 = reinterpret_tensor(buf1566, (1024, 640), (640, 1), 0); del buf1566  # reuse
        # Topologically Sorted Source Nodes: [linear_430], Original ATen: [aten.mm]
        extern_kernels.mm(buf1569, reinterpret_tensor(primals_1049, (80, 640), (1, 80), 0), out=buf1570)
        buf1574 = reinterpret_tensor(buf1536, (4, 256, 640), (163840, 640, 1), 0); del buf1536  # reuse
        buf1575 = reinterpret_tensor(buf1534, (4, 256, 640), (163840, 640, 1), 0); del buf1534  # reuse
        buf2077 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_645, mul_232, result_646, norm_hidden_states_33], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55.run(buf1567, primals_1047, buf1570, primals_1050, primals_1051, buf1574, buf1575, buf2077, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1051
        buf1576 = buf1517; del buf1517  # reuse
        # Topologically Sorted Source Nodes: [result_648], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1052, (640, 640), (1, 640), 0), out=buf1576)
        buf1577 = reinterpret_tensor(buf1065, (1024, 80), (80, 1), 0); del buf1065  # reuse
        # Topologically Sorted Source Nodes: [linear_432], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1053, (640, 80), (1, 640), 0), out=buf1577)
        buf1578 = reinterpret_tensor(buf1494, (1024, 640), (640, 1), 0); del buf1494  # reuse
        # Topologically Sorted Source Nodes: [linear_433], Original ATen: [aten.mm]
        extern_kernels.mm(buf1577, reinterpret_tensor(primals_1054, (80, 640), (1, 80), 0), out=buf1578)
        buf1579 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_651], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1055, (640, 640), (1, 640), 0), out=buf1579)
        buf1580 = reinterpret_tensor(buf1046, (1024, 80), (80, 1), 0); del buf1046  # reuse
        # Topologically Sorted Source Nodes: [linear_435], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1056, (640, 80), (1, 640), 0), out=buf1580)
        buf1581 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_436], Original ATen: [aten.mm]
        extern_kernels.mm(buf1580, reinterpret_tensor(primals_1057, (80, 640), (1, 80), 0), out=buf1581)
        buf1582 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_654], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1058, (640, 640), (1, 640), 0), out=buf1582)
        buf1583 = reinterpret_tensor(buf1044, (1024, 80), (80, 1), 0); del buf1044  # reuse
        # Topologically Sorted Source Nodes: [linear_438], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1059, (640, 80), (1, 640), 0), out=buf1583)
        buf1584 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_439], Original ATen: [aten.mm]
        extern_kernels.mm(buf1583, reinterpret_tensor(primals_1060, (80, 640), (1, 80), 0), out=buf1584)
        buf1585 = reinterpret_tensor(buf1576, (4, 256, 640), (163840, 640, 1), 0); del buf1576  # reuse
        # Topologically Sorted Source Nodes: [mul_233, result_649], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1585, buf1578, 655360, grid=grid(655360), stream=stream0)
        buf1586 = reinterpret_tensor(buf1579, (4, 256, 640), (163840, 640, 1), 0); del buf1579  # reuse
        # Topologically Sorted Source Nodes: [mul_234, result_652], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1586, buf1581, 655360, grid=grid(655360), stream=stream0)
        buf1587 = reinterpret_tensor(buf1582, (4, 256, 640), (163840, 640, 1), 0); del buf1582  # reuse
        # Topologically Sorted Source Nodes: [mul_235, result_655], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1587, buf1584, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_391], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1588 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1585, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1586, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1587, (4, 10, 256, 64), (163840, 64, 640, 1), 0), None, True)
        buf1589 = buf1588[0]
        buf1590 = buf1588[1]
        buf1591 = buf1588[2]
        buf1592 = buf1588[3]
        del buf1588
        buf1593 = buf1584; del buf1584  # reuse
        # Topologically Sorted Source Nodes: [result_657], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1589, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1061, (640, 640), (1, 640), 0), out=buf1593)
        buf1594 = reinterpret_tensor(buf1023, (1024, 80), (80, 1), 0); del buf1023  # reuse
        # Topologically Sorted Source Nodes: [linear_441], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1589, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1063, (640, 80), (1, 640), 0), out=buf1594)
        buf1595 = buf1581; del buf1581  # reuse
        # Topologically Sorted Source Nodes: [linear_442], Original ATen: [aten.mm]
        extern_kernels.mm(buf1594, reinterpret_tensor(primals_1064, (80, 640), (1, 80), 0), out=buf1595)
        buf1596 = reinterpret_tensor(buf1593, (4, 256, 640), (163840, 640, 1), 0); del buf1593  # reuse
        buf1600 = reinterpret_tensor(buf1578, (4, 256, 640), (163840, 640, 1), 0); del buf1578  # reuse
        buf1601 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2076 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_645, mul_232, result_646, mul_236, result_658, hidden_states_395, hidden_states_396, norm_hidden_states_34], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57.run(buf1596, primals_1062, buf1595, buf1567, primals_1047, buf1570, primals_1065, primals_1066, buf1600, buf1601, buf2076, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1047
        del primals_1062
        del primals_1066
        buf1602 = buf1595; del buf1595  # reuse
        # Topologically Sorted Source Nodes: [result_660], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1601, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1067, (640, 640), (1, 640), 0), out=buf1602)
        buf1603 = reinterpret_tensor(buf1006, (1024, 80), (80, 1), 0); del buf1006  # reuse
        # Topologically Sorted Source Nodes: [linear_444], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1601, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1068, (640, 80), (1, 640), 0), out=buf1603)
        buf1604 = buf1570; del buf1570  # reuse
        # Topologically Sorted Source Nodes: [linear_445], Original ATen: [aten.mm]
        extern_kernels.mm(buf1603, reinterpret_tensor(primals_1069, (80, 640), (1, 80), 0), out=buf1604)
        buf1605 = buf1508; del buf1508  # reuse
        # Topologically Sorted Source Nodes: [result_663], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1070, (1024, 640), (1, 1024), 0), out=buf1605)
        del primals_1070
        buf1606 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_447], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1071, (1024, 80), (1, 1024), 0), out=buf1606)
        del primals_1071
        buf1607 = buf1505; del buf1505  # reuse
        # Topologically Sorted Source Nodes: [linear_448], Original ATen: [aten.mm]
        extern_kernels.mm(buf1606, reinterpret_tensor(primals_1072, (80, 640), (1, 80), 0), out=buf1607)
        buf1608 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_666], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1073, (1024, 640), (1, 1024), 0), out=buf1608)
        del primals_1073
        buf1609 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_450], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1074, (1024, 80), (1, 1024), 0), out=buf1609)
        del primals_1074
        buf1610 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_451], Original ATen: [aten.mm]
        extern_kernels.mm(buf1609, reinterpret_tensor(primals_1075, (80, 640), (1, 80), 0), out=buf1610)
        buf1611 = reinterpret_tensor(buf1602, (4, 256, 640), (163840, 640, 1), 0); del buf1602  # reuse
        # Topologically Sorted Source Nodes: [mul_237, result_661], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1611, buf1604, 655360, grid=grid(655360), stream=stream0)
        buf1612 = reinterpret_tensor(buf1605, (4, 77, 640), (49280, 640, 1), 0); del buf1605  # reuse
        # Topologically Sorted Source Nodes: [mul_238, result_664], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf1612, buf1607, 197120, grid=grid(197120), stream=stream0)
        buf1613 = reinterpret_tensor(buf1608, (4, 77, 640), (49280, 640, 1), 0); del buf1608  # reuse
        # Topologically Sorted Source Nodes: [mul_239, result_667], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf1613, buf1610, 197120, grid=grid(197120), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_397], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1614 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1611, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1612, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf1613, (4, 10, 77, 64), (49280, 64, 640, 1), 0), None, True)
        buf1615 = buf1614[0]
        buf1616 = buf1614[1]
        buf1617 = buf1614[2]
        buf1618 = buf1614[3]
        del buf1614
        buf1619 = buf1604; del buf1604  # reuse
        # Topologically Sorted Source Nodes: [result_669], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1615, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1076, (640, 640), (1, 640), 0), out=buf1619)
        buf1620 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_453], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1615, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1078, (640, 80), (1, 640), 0), out=buf1620)
        buf1621 = reinterpret_tensor(buf1567, (1024, 640), (640, 1), 0); del buf1567  # reuse
        # Topologically Sorted Source Nodes: [linear_454], Original ATen: [aten.mm]
        extern_kernels.mm(buf1620, reinterpret_tensor(primals_1079, (80, 640), (1, 80), 0), out=buf1621)
        buf1625 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf1626 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2075 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_240, result_670, hidden_states_401, hidden_states_402, norm_hidden_states_35], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59.run(buf1619, primals_1077, buf1621, buf1596, primals_1080, primals_1081, buf1625, buf1626, buf2075, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1081
        buf1627 = buf1527; del buf1527  # reuse
        # Topologically Sorted Source Nodes: [result_672], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1626, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1082, (640, 5120), (1, 640), 0), out=buf1627)
        buf1628 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_456], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1626, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1084, (640, 80), (1, 640), 0), out=buf1628)
        buf1629 = empty_strided_cuda((1024, 5120), (5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_457], Original ATen: [aten.mm]
        extern_kernels.mm(buf1628, reinterpret_tensor(primals_1085, (80, 5120), (1, 80), 0), out=buf1629)
        buf1630 = reinterpret_tensor(buf1627, (4, 256, 5120), (1310720, 5120, 1), 0); del buf1627  # reuse
        # Topologically Sorted Source Nodes: [mul_241, result_673], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_60.run(buf1630, primals_1083, buf1629, 5242880, grid=grid(5242880), stream=stream0)
        del primals_1083
        buf1631 = empty_strided_cuda((4, 256, 2560), (655360, 2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_11, hidden_states_404], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_61.run(buf1630, buf1631, 2621440, grid=grid(2621440), stream=stream0)
        buf1632 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_675], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1631, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_1086, (2560, 640), (1, 2560), 0), out=buf1632)
        buf1633 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_459], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1631, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_1088, (2560, 80), (1, 2560), 0), out=buf1633)
        buf1634 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_460], Original ATen: [aten.mm]
        extern_kernels.mm(buf1633, reinterpret_tensor(primals_1089, (80, 640), (1, 80), 0), out=buf1634)
        buf1635 = reinterpret_tensor(buf1632, (4, 256, 640), (163840, 640, 1), 0); del buf1632  # reuse
        # Topologically Sorted Source Nodes: [mul_240, result_670, hidden_states_401, hidden_states_402, mul_243, result_676, hidden_states_406], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_62.run(buf1635, primals_1087, buf1634, buf1619, primals_1077, buf1621, buf1596, 655360, grid=grid(655360), stream=stream0)
        del primals_1077
        del primals_1087
        buf1636 = buf1634; del buf1634  # reuse
        # Topologically Sorted Source Nodes: [result_678], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1635, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1090, (640, 640), (1, 640), 0), out=buf1636)
        buf1637 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_462], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1635, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1092, (640, 80), (1, 640), 0), out=buf1637)
        buf1638 = buf1621; del buf1621  # reuse
        # Topologically Sorted Source Nodes: [linear_463], Original ATen: [aten.mm]
        extern_kernels.mm(buf1637, reinterpret_tensor(primals_1093, (80, 640), (1, 80), 0), out=buf1638)
        buf1639 = empty_strided_cuda((4, 960, 16, 16), (245760, 256, 16, 1), torch.float32)
        buf1640 = reinterpret_tensor(buf1563, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1563  # reuse
        buf1641 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1643 = reinterpret_tensor(buf1641, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1641  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_408, hidden_states_409], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_116.run(buf1643, buf1636, primals_1091, buf1638, buf1561, buf475, buf1639, buf1640, 128, 7680, grid=grid(128), stream=stream0)
        del primals_1091
        buf1644 = empty_strided_cuda((4, 960, 16, 16), (245760, 256, 16, 1), torch.float32)
        buf1645 = buf1644; del buf1644  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_409, hidden_states_410], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_117.run(buf1645, buf1639, buf1640, buf1643, primals_1094, primals_1095, 983040, grid=grid(983040), stream=stream0)
        # Topologically Sorted Source Nodes: [result_681], Original ATen: [aten.convolution]
        buf1646 = extern_kernels.convolution(buf1645, primals_1096, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1646, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_239], Original ATen: [aten.convolution]
        buf1647 = extern_kernels.convolution(buf1645, primals_1098, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1647, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_240], Original ATen: [aten.convolution]
        buf1648 = extern_kernels.convolution(buf1647, primals_1099, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1648, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf1649 = buf1547; del buf1547  # reuse
        # Topologically Sorted Source Nodes: [linear_464], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_1100, (1280, 640), (1, 1280), 0), out=buf1649)
        del primals_1100
        buf1650 = buf1646; del buf1646  # reuse
        buf1651 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1652 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1654 = reinterpret_tensor(buf1652, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1652  # reuse
        # Topologically Sorted Source Nodes: [result_681, mul_245, result_682, hidden_states_411, hidden_states_412], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_50.run(buf1650, buf1654, primals_1097, buf1648, buf1649, primals_1101, buf1651, 128, 5120, grid=grid(128), stream=stream0)
        del buf1649
        del primals_1097
        del primals_1101
        buf1655 = buf1648; del buf1648  # reuse
        buf1656 = buf1655; del buf1655  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_412, hidden_states_413], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_51.run(buf1656, buf1650, buf1651, buf1654, primals_1102, primals_1103, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [result_684], Original ATen: [aten.convolution]
        buf1657 = extern_kernels.convolution(buf1656, primals_1104, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1657, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_242], Original ATen: [aten.convolution]
        buf1658 = extern_kernels.convolution(buf1656, primals_1106, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1658, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_243], Original ATen: [aten.convolution]
        buf1659 = extern_kernels.convolution(buf1658, primals_1107, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1659, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [result_687], Original ATen: [aten.convolution]
        buf1660 = extern_kernels.convolution(buf1639, primals_1108, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1660, (4, 640, 16, 16), (163840, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_245], Original ATen: [aten.convolution]
        buf1661 = extern_kernels.convolution(buf1639, primals_1110, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1661, (4, 80, 16, 16), (20480, 256, 16, 1))
        # Topologically Sorted Source Nodes: [conv2d_246], Original ATen: [aten.convolution]
        buf1662 = extern_kernels.convolution(buf1661, primals_1111, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1662, (4, 640, 16, 16), (163840, 256, 16, 1))
        buf1663 = buf1660; del buf1660  # reuse
        buf1664 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1665 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1667 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_684, mul_246, result_685, result_687, mul_247, result_688, add_97, output_tensor_28, hidden_states_415], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_52.run(buf1663, primals_1109, buf1662, buf1657, primals_1105, buf1659, buf1664, buf1665, buf1667, 128, 5120, grid=grid(128), stream=stream0)
        del primals_1105
        del primals_1109
        buf1668 = buf1662; del buf1662  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_415], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_53.run(buf1663, buf1664, buf1665, primals_1112, primals_1113, buf1668, 655360, grid=grid(655360), stream=stream0)
        del primals_1113
        buf1669 = reinterpret_tensor(buf1659, (4, 256, 640), (163840, 640, 1), 0); del buf1659  # reuse
        # Topologically Sorted Source Nodes: [result_690], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1668, (4, 256, 640), (163840, 1, 256), 0), reinterpret_tensor(primals_1114, (4, 640, 640), (0, 1, 640), 0), out=buf1669)
        buf1670 = reinterpret_tensor(buf1657, (4, 256, 640), (163840, 640, 1), 0); del buf1657  # reuse
        # Topologically Sorted Source Nodes: [linear_466], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_54.run(buf1668, buf1670, 1024, 640, grid=grid(1024, 640), stream=stream0)
        buf1671 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_466], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1670, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1116, (640, 80), (1, 640), 0), out=buf1671)
        buf1672 = reinterpret_tensor(buf1668, (1024, 640), (640, 1), 0); del buf1668  # reuse
        # Topologically Sorted Source Nodes: [linear_467], Original ATen: [aten.mm]
        extern_kernels.mm(buf1671, reinterpret_tensor(primals_1117, (80, 640), (1, 80), 0), out=buf1672)
        buf1676 = reinterpret_tensor(buf1638, (4, 256, 640), (163840, 640, 1), 0); del buf1638  # reuse
        buf1677 = reinterpret_tensor(buf1636, (4, 256, 640), (163840, 640, 1), 0); del buf1636  # reuse
        buf2074 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_690, mul_248, result_691, norm_hidden_states_36], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_55.run(buf1669, primals_1115, buf1672, primals_1118, primals_1119, buf1676, buf1677, buf2074, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1119
        buf1678 = buf1619; del buf1619  # reuse
        # Topologically Sorted Source Nodes: [result_693], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1120, (640, 640), (1, 640), 0), out=buf1678)
        buf1679 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_469], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1121, (640, 80), (1, 640), 0), out=buf1679)
        buf1680 = reinterpret_tensor(buf1596, (1024, 640), (640, 1), 0); del buf1596  # reuse
        # Topologically Sorted Source Nodes: [linear_470], Original ATen: [aten.mm]
        extern_kernels.mm(buf1679, reinterpret_tensor(primals_1122, (80, 640), (1, 80), 0), out=buf1680)
        buf1681 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_696], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1123, (640, 640), (1, 640), 0), out=buf1681)
        buf1682 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_472], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1124, (640, 80), (1, 640), 0), out=buf1682)
        buf1683 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_473], Original ATen: [aten.mm]
        extern_kernels.mm(buf1682, reinterpret_tensor(primals_1125, (80, 640), (1, 80), 0), out=buf1683)
        buf1684 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_699], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1126, (640, 640), (1, 640), 0), out=buf1684)
        buf1685 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_475], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1127, (640, 80), (1, 640), 0), out=buf1685)
        buf1686 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_476], Original ATen: [aten.mm]
        extern_kernels.mm(buf1685, reinterpret_tensor(primals_1128, (80, 640), (1, 80), 0), out=buf1686)
        buf1687 = reinterpret_tensor(buf1678, (4, 256, 640), (163840, 640, 1), 0); del buf1678  # reuse
        # Topologically Sorted Source Nodes: [mul_249, result_694], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1687, buf1680, 655360, grid=grid(655360), stream=stream0)
        buf1688 = reinterpret_tensor(buf1681, (4, 256, 640), (163840, 640, 1), 0); del buf1681  # reuse
        # Topologically Sorted Source Nodes: [mul_250, result_697], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1688, buf1683, 655360, grid=grid(655360), stream=stream0)
        buf1689 = reinterpret_tensor(buf1684, (4, 256, 640), (163840, 640, 1), 0); del buf1684  # reuse
        # Topologically Sorted Source Nodes: [mul_251, result_700], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1689, buf1686, 655360, grid=grid(655360), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_417], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1690 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1687, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1688, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1689, (4, 10, 256, 64), (163840, 64, 640, 1), 0), None, True)
        buf1691 = buf1690[0]
        buf1692 = buf1690[1]
        buf1693 = buf1690[2]
        buf1694 = buf1690[3]
        del buf1690
        buf1695 = buf1686; del buf1686  # reuse
        # Topologically Sorted Source Nodes: [result_702], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1691, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1129, (640, 640), (1, 640), 0), out=buf1695)
        buf1696 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_478], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1691, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1131, (640, 80), (1, 640), 0), out=buf1696)
        buf1697 = buf1683; del buf1683  # reuse
        # Topologically Sorted Source Nodes: [linear_479], Original ATen: [aten.mm]
        extern_kernels.mm(buf1696, reinterpret_tensor(primals_1132, (80, 640), (1, 80), 0), out=buf1697)
        buf1698 = reinterpret_tensor(buf1695, (4, 256, 640), (163840, 640, 1), 0); del buf1695  # reuse
        buf1702 = reinterpret_tensor(buf1680, (4, 256, 640), (163840, 640, 1), 0); del buf1680  # reuse
        buf1703 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2073 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_690, mul_248, result_691, mul_252, result_703, hidden_states_421, hidden_states_422, norm_hidden_states_37], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_57.run(buf1698, primals_1130, buf1697, buf1669, primals_1115, buf1672, primals_1133, primals_1134, buf1702, buf1703, buf2073, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1115
        del primals_1130
        del primals_1134
        buf1704 = buf1697; del buf1697  # reuse
        # Topologically Sorted Source Nodes: [result_705], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1703, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1135, (640, 640), (1, 640), 0), out=buf1704)
        buf1705 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_481], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1703, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1136, (640, 80), (1, 640), 0), out=buf1705)
        buf1706 = buf1672; del buf1672  # reuse
        # Topologically Sorted Source Nodes: [linear_482], Original ATen: [aten.mm]
        extern_kernels.mm(buf1705, reinterpret_tensor(primals_1137, (80, 640), (1, 80), 0), out=buf1706)
        buf1707 = buf1610; del buf1610  # reuse
        # Topologically Sorted Source Nodes: [result_708], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1138, (1024, 640), (1, 1024), 0), out=buf1707)
        del primals_1138
        buf1708 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_484], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1139, (1024, 80), (1, 1024), 0), out=buf1708)
        del primals_1139
        buf1709 = buf1607; del buf1607  # reuse
        # Topologically Sorted Source Nodes: [linear_485], Original ATen: [aten.mm]
        extern_kernels.mm(buf1708, reinterpret_tensor(primals_1140, (80, 640), (1, 80), 0), out=buf1709)
        buf1710 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_711], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1141, (1024, 640), (1, 1024), 0), out=buf1710)
        del primals_1141
        buf1711 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_487], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1142, (1024, 80), (1, 1024), 0), out=buf1711)
        del primals_1142
        buf1712 = empty_strided_cuda((308, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_488], Original ATen: [aten.mm]
        extern_kernels.mm(buf1711, reinterpret_tensor(primals_1143, (80, 640), (1, 80), 0), out=buf1712)
        buf1713 = reinterpret_tensor(buf1704, (4, 256, 640), (163840, 640, 1), 0); del buf1704  # reuse
        # Topologically Sorted Source Nodes: [mul_253, result_706], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_56.run(buf1713, buf1706, 655360, grid=grid(655360), stream=stream0)
        buf1714 = reinterpret_tensor(buf1707, (4, 77, 640), (49280, 640, 1), 0); del buf1707  # reuse
        # Topologically Sorted Source Nodes: [mul_254, result_709], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf1714, buf1709, 197120, grid=grid(197120), stream=stream0)
        del buf1709
        buf1715 = reinterpret_tensor(buf1710, (4, 77, 640), (49280, 640, 1), 0); del buf1710  # reuse
        # Topologically Sorted Source Nodes: [mul_255, result_712], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_58.run(buf1715, buf1712, 197120, grid=grid(197120), stream=stream0)
        del buf1712
        # Topologically Sorted Source Nodes: [hidden_states_423], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1716 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1713, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1714, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf1715, (4, 10, 77, 64), (49280, 64, 640, 1), 0), None, True)
        buf1717 = buf1716[0]
        buf1718 = buf1716[1]
        buf1719 = buf1716[2]
        buf1720 = buf1716[3]
        del buf1716
        buf1721 = buf1706; del buf1706  # reuse
        # Topologically Sorted Source Nodes: [result_714], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1717, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1144, (640, 640), (1, 640), 0), out=buf1721)
        buf1722 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_490], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1717, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1146, (640, 80), (1, 640), 0), out=buf1722)
        buf1723 = reinterpret_tensor(buf1669, (1024, 640), (640, 1), 0); del buf1669  # reuse
        # Topologically Sorted Source Nodes: [linear_491], Original ATen: [aten.mm]
        extern_kernels.mm(buf1722, reinterpret_tensor(primals_1147, (80, 640), (1, 80), 0), out=buf1723)
        buf1727 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf1728 = empty_strided_cuda((4, 256, 640), (163840, 640, 1), torch.float32)
        buf2072 = empty_strided_cuda((4, 256, 1), (256, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_256, result_715, hidden_states_427, hidden_states_428, norm_hidden_states_38], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_59.run(buf1721, primals_1145, buf1723, buf1698, primals_1148, primals_1149, buf1727, buf1728, buf2072, 1024, 640, grid=grid(1024), stream=stream0)
        del primals_1149
        buf1729 = buf1629; del buf1629  # reuse
        # Topologically Sorted Source Nodes: [result_717], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1728, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1150, (640, 5120), (1, 640), 0), out=buf1729)
        buf1730 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_493], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1728, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1152, (640, 80), (1, 640), 0), out=buf1730)
        buf1731 = empty_strided_cuda((1024, 5120), (5120, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_494], Original ATen: [aten.mm]
        extern_kernels.mm(buf1730, reinterpret_tensor(primals_1153, (80, 5120), (1, 80), 0), out=buf1731)
        buf1732 = reinterpret_tensor(buf1729, (4, 256, 5120), (1310720, 5120, 1), 0); del buf1729  # reuse
        # Topologically Sorted Source Nodes: [mul_257, result_718], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_60.run(buf1732, primals_1151, buf1731, 5242880, grid=grid(5242880), stream=stream0)
        del primals_1151
        buf1733 = empty_strided_cuda((4, 256, 2560), (655360, 2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_12, hidden_states_430], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_61.run(buf1732, buf1733, 2621440, grid=grid(2621440), stream=stream0)
        buf1734 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_720], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1733, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_1154, (2560, 640), (1, 2560), 0), out=buf1734)
        buf1735 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_496], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1733, (1024, 2560), (2560, 1), 0), reinterpret_tensor(primals_1156, (2560, 80), (1, 2560), 0), out=buf1735)
        buf1736 = empty_strided_cuda((1024, 640), (640, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_497], Original ATen: [aten.mm]
        extern_kernels.mm(buf1735, reinterpret_tensor(primals_1157, (80, 640), (1, 80), 0), out=buf1736)
        buf1737 = reinterpret_tensor(buf1734, (4, 256, 640), (163840, 640, 1), 0); del buf1734  # reuse
        # Topologically Sorted Source Nodes: [mul_256, result_715, hidden_states_427, hidden_states_428, mul_259, result_721, hidden_states_432], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_62.run(buf1737, primals_1155, buf1736, buf1721, primals_1145, buf1723, buf1698, 655360, grid=grid(655360), stream=stream0)
        del buf1698
        del buf1721
        del primals_1145
        del primals_1155
        buf1738 = buf1736; del buf1736  # reuse
        # Topologically Sorted Source Nodes: [result_723], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1737, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1158, (640, 640), (1, 640), 0), out=buf1738)
        buf1739 = empty_strided_cuda((1024, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_499], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1737, (1024, 640), (640, 1), 0), reinterpret_tensor(primals_1160, (640, 80), (1, 640), 0), out=buf1739)
        buf1740 = buf1723; del buf1723  # reuse
        # Topologically Sorted Source Nodes: [linear_500], Original ATen: [aten.mm]
        extern_kernels.mm(buf1739, reinterpret_tensor(primals_1161, (80, 640), (1, 80), 0), out=buf1740)
        buf1741 = empty_strided_cuda((32, ), (1, ), torch.int64)
        # Topologically Sorted Source Nodes: [hidden_states_434], Original ATen: [aten.arange, aten.add, aten.mul, aten._to_copy]
        stream0 = get_raw_stream(0)
        triton_poi_fused__to_copy_add_arange_mul_118.run(buf1741, 32, grid=grid(32), stream=stream0)
        buf1742 = empty_strided_cuda((4, 640, 32, 32), (655360, 1024, 32, 1), torch.float32)
        # Topologically Sorted Source Nodes: [hidden_states_433, output_12, hidden_states_434], Original ATen: [aten.clone, aten.add, aten._unsafe_index]
        stream0 = get_raw_stream(0)
        triton_poi_fused__unsafe_index_add_clone_119.run(buf1741, buf1738, primals_1159, buf1740, buf1663, buf1742, 2621440, grid=grid(2621440), stream=stream0)
        del buf1738
        del buf1740
        del primals_1159
        # Topologically Sorted Source Nodes: [result_726], Original ATen: [aten.convolution]
        buf1743 = extern_kernels.convolution(buf1742, primals_1162, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1743, (4, 640, 32, 32), (655360, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_248], Original ATen: [aten.convolution]
        buf1744 = extern_kernels.convolution(buf1742, primals_1164, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1744, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_249], Original ATen: [aten.convolution]
        buf1745 = extern_kernels.convolution(buf1744, primals_1165, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1745, (4, 640, 32, 32), (655360, 1024, 32, 1))
        buf1746 = empty_strided_cuda((4, 960, 32, 32), (983040, 1024, 32, 1), torch.float32)
        buf1747 = reinterpret_tensor(buf1665, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1665  # reuse
        buf1748 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1750 = reinterpret_tensor(buf1748, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1748  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_435, hidden_states_436], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_120.run(buf1750, buf1743, primals_1163, buf1745, buf471, buf1746, buf1747, 128, 30720, grid=grid(128), stream=stream0)
        del primals_1163
        buf1751 = empty_strided_cuda((4, 960, 32, 32), (983040, 1024, 32, 1), torch.float32)
        buf1752 = buf1751; del buf1751  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_436, hidden_states_437], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_121.run(buf1752, buf1746, buf1747, buf1750, primals_1166, primals_1167, 3932160, grid=grid(3932160), stream=stream0)
        # Topologically Sorted Source Nodes: [result_729], Original ATen: [aten.convolution]
        buf1753 = extern_kernels.convolution(buf1752, primals_1168, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1753, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_251], Original ATen: [aten.convolution]
        buf1754 = extern_kernels.convolution(buf1752, primals_1170, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1754, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_252], Original ATen: [aten.convolution]
        buf1755 = extern_kernels.convolution(buf1754, primals_1171, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1755, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf1756 = buf382; del buf382  # reuse
        # Topologically Sorted Source Nodes: [linear_501], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_1172, (1280, 320), (1, 1280), 0), out=buf1756)
        del primals_1172
        buf1757 = buf1753; del buf1753  # reuse
        buf1758 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1759 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1761 = reinterpret_tensor(buf1759, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1759  # reuse
        # Topologically Sorted Source Nodes: [result_729, mul_262, result_730, hidden_states_438, hidden_states_439], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_34.run(buf1757, buf1761, primals_1169, buf1755, buf1756, primals_1173, buf1758, 128, 10240, grid=grid(128), stream=stream0)
        del primals_1169
        del primals_1173
        buf1762 = buf1755; del buf1755  # reuse
        buf1763 = buf1762; del buf1762  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_439, hidden_states_440], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf1763, buf1757, buf1758, buf1761, primals_1174, primals_1175, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_732], Original ATen: [aten.convolution]
        buf1764 = extern_kernels.convolution(buf1763, primals_1176, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1764, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_254], Original ATen: [aten.convolution]
        buf1765 = extern_kernels.convolution(buf1763, primals_1178, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1765, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_255], Original ATen: [aten.convolution]
        buf1766 = extern_kernels.convolution(buf1765, primals_1179, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1766, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [result_735], Original ATen: [aten.convolution]
        buf1767 = extern_kernels.convolution(buf1746, primals_1180, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1767, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_257], Original ATen: [aten.convolution]
        buf1768 = extern_kernels.convolution(buf1746, primals_1182, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1768, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_258], Original ATen: [aten.convolution]
        buf1769 = extern_kernels.convolution(buf1768, primals_1183, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1769, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf1770 = buf1767; del buf1767  # reuse
        buf1771 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1772 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1774 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_732, mul_263, result_733, result_735, mul_264, result_736, add_103, output_tensor_29, hidden_states_442], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_122.run(buf1770, primals_1181, buf1769, buf1764, primals_1177, buf1766, buf1771, buf1772, buf1774, 128, 10240, grid=grid(128), stream=stream0)
        del primals_1177
        del primals_1181
        buf1775 = buf1769; del buf1769  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_442], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_36.run(buf1770, buf1771, buf1772, primals_1184, primals_1185, buf1775, 1310720, grid=grid(1310720), stream=stream0)
        del primals_1185
        buf1776 = reinterpret_tensor(buf1766, (4, 1024, 320), (327680, 320, 1), 0); del buf1766  # reuse
        # Topologically Sorted Source Nodes: [result_738], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1775, (4, 1024, 320), (327680, 1, 1024), 0), reinterpret_tensor(primals_1186, (4, 320, 320), (0, 1, 320), 0), out=buf1776)
        buf1777 = reinterpret_tensor(buf1764, (4, 1024, 320), (327680, 320, 1), 0); del buf1764  # reuse
        # Topologically Sorted Source Nodes: [linear_503], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_37.run(buf1775, buf1777, 4096, 320, grid=grid(4096, 320), stream=stream0)
        buf1778 = reinterpret_tensor(buf1429, (4096, 80), (80, 1), 0); del buf1429  # reuse
        # Topologically Sorted Source Nodes: [linear_503], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1777, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1188, (320, 80), (1, 320), 0), out=buf1778)
        buf1779 = reinterpret_tensor(buf1775, (4096, 320), (320, 1), 0); del buf1775  # reuse
        # Topologically Sorted Source Nodes: [linear_504], Original ATen: [aten.mm]
        extern_kernels.mm(buf1778, reinterpret_tensor(primals_1189, (80, 320), (1, 80), 0), out=buf1779)
        buf1783 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf1784 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2071 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_738, mul_265, result_739, norm_hidden_states_39], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38.run(buf1776, primals_1187, buf1779, primals_1190, primals_1191, buf1783, buf1784, buf2071, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1191
        buf1785 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_741], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1192, (320, 320), (1, 320), 0), out=buf1785)
        buf1786 = reinterpret_tensor(buf1427, (4096, 80), (80, 1), 0); del buf1427  # reuse
        # Topologically Sorted Source Nodes: [linear_506], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1193, (320, 80), (1, 320), 0), out=buf1786)
        buf1787 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_507], Original ATen: [aten.mm]
        extern_kernels.mm(buf1786, reinterpret_tensor(primals_1194, (80, 320), (1, 80), 0), out=buf1787)
        buf1788 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_744], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1195, (320, 320), (1, 320), 0), out=buf1788)
        buf1789 = reinterpret_tensor(buf1410, (4096, 80), (80, 1), 0); del buf1410  # reuse
        # Topologically Sorted Source Nodes: [linear_509], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1196, (320, 80), (1, 320), 0), out=buf1789)
        buf1790 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_510], Original ATen: [aten.mm]
        extern_kernels.mm(buf1789, reinterpret_tensor(primals_1197, (80, 320), (1, 80), 0), out=buf1790)
        buf1791 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_747], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1198, (320, 320), (1, 320), 0), out=buf1791)
        buf1792 = reinterpret_tensor(buf1387, (4096, 80), (80, 1), 0); del buf1387  # reuse
        # Topologically Sorted Source Nodes: [linear_512], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1199, (320, 80), (1, 320), 0), out=buf1792)
        buf1793 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_513], Original ATen: [aten.mm]
        extern_kernels.mm(buf1792, reinterpret_tensor(primals_1200, (80, 320), (1, 80), 0), out=buf1793)
        buf1794 = reinterpret_tensor(buf1785, (4, 1024, 320), (327680, 320, 1), 0); del buf1785  # reuse
        # Topologically Sorted Source Nodes: [mul_266, result_742], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1794, buf1787, 1310720, grid=grid(1310720), stream=stream0)
        buf1795 = reinterpret_tensor(buf1788, (4, 1024, 320), (327680, 320, 1), 0); del buf1788  # reuse
        # Topologically Sorted Source Nodes: [mul_267, result_745], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1795, buf1790, 1310720, grid=grid(1310720), stream=stream0)
        buf1796 = reinterpret_tensor(buf1791, (4, 1024, 320), (327680, 320, 1), 0); del buf1791  # reuse
        # Topologically Sorted Source Nodes: [mul_268, result_748], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1796, buf1793, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_444], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1797 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1794, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1795, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1796, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), None, True)
        buf1798 = buf1797[0]
        buf1799 = buf1797[1]
        buf1800 = buf1797[2]
        buf1801 = buf1797[3]
        del buf1797
        buf1802 = buf1793; del buf1793  # reuse
        # Topologically Sorted Source Nodes: [result_750], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1798, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1201, (320, 320), (1, 320), 0), out=buf1802)
        buf1803 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_515], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1798, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1203, (320, 80), (1, 320), 0), out=buf1803)
        buf1804 = buf1790; del buf1790  # reuse
        # Topologically Sorted Source Nodes: [linear_516], Original ATen: [aten.mm]
        extern_kernels.mm(buf1803, reinterpret_tensor(primals_1204, (80, 320), (1, 80), 0), out=buf1804)
        buf1805 = reinterpret_tensor(buf1802, (4, 1024, 320), (327680, 320, 1), 0); del buf1802  # reuse
        buf1809 = reinterpret_tensor(buf1787, (4, 1024, 320), (327680, 320, 1), 0); del buf1787  # reuse
        buf1810 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2070 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_738, mul_265, result_739, mul_269, result_751, hidden_states_448, hidden_states_449, norm_hidden_states_40], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40.run(buf1805, primals_1202, buf1804, buf1776, primals_1187, buf1779, primals_1205, primals_1206, buf1809, buf1810, buf2070, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1187
        del primals_1202
        del primals_1206
        buf1811 = buf1804; del buf1804  # reuse
        # Topologically Sorted Source Nodes: [result_753], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1810, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1207, (320, 320), (1, 320), 0), out=buf1811)
        buf1812 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_518], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1810, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1208, (320, 80), (1, 320), 0), out=buf1812)
        buf1813 = buf1779; del buf1779  # reuse
        # Topologically Sorted Source Nodes: [linear_519], Original ATen: [aten.mm]
        extern_kernels.mm(buf1812, reinterpret_tensor(primals_1209, (80, 320), (1, 80), 0), out=buf1813)
        buf1814 = buf442; del buf442  # reuse
        # Topologically Sorted Source Nodes: [result_756], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1210, (1024, 320), (1, 1024), 0), out=buf1814)
        del primals_1210
        buf1815 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_521], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1211, (1024, 80), (1, 1024), 0), out=buf1815)
        del primals_1211
        buf1816 = buf439; del buf439  # reuse
        # Topologically Sorted Source Nodes: [linear_522], Original ATen: [aten.mm]
        extern_kernels.mm(buf1815, reinterpret_tensor(primals_1212, (80, 320), (1, 80), 0), out=buf1816)
        buf1817 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_759], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1213, (1024, 320), (1, 1024), 0), out=buf1817)
        del primals_1213
        buf1818 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_524], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1214, (1024, 80), (1, 1024), 0), out=buf1818)
        del primals_1214
        buf1819 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_525], Original ATen: [aten.mm]
        extern_kernels.mm(buf1818, reinterpret_tensor(primals_1215, (80, 320), (1, 80), 0), out=buf1819)
        buf1820 = reinterpret_tensor(buf1811, (4, 1024, 320), (327680, 320, 1), 0); del buf1811  # reuse
        # Topologically Sorted Source Nodes: [mul_270, result_754], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1820, buf1813, 1310720, grid=grid(1310720), stream=stream0)
        buf1821 = reinterpret_tensor(buf1814, (4, 77, 320), (24640, 320, 1), 0); del buf1814  # reuse
        # Topologically Sorted Source Nodes: [mul_271, result_757], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf1821, buf1816, 98560, grid=grid(98560), stream=stream0)
        buf1822 = reinterpret_tensor(buf1817, (4, 77, 320), (24640, 320, 1), 0); del buf1817  # reuse
        # Topologically Sorted Source Nodes: [mul_272, result_760], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf1822, buf1819, 98560, grid=grid(98560), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_450], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1823 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1820, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1821, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf1822, (4, 5, 77, 64), (24640, 64, 320, 1), 0), None, True)
        buf1824 = buf1823[0]
        buf1825 = buf1823[1]
        buf1826 = buf1823[2]
        buf1827 = buf1823[3]
        del buf1823
        buf1828 = buf1813; del buf1813  # reuse
        # Topologically Sorted Source Nodes: [result_762], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1824, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1216, (320, 320), (1, 320), 0), out=buf1828)
        buf1829 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_527], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1824, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1218, (320, 80), (1, 320), 0), out=buf1829)
        buf1830 = reinterpret_tensor(buf1776, (4096, 320), (320, 1), 0); del buf1776  # reuse
        # Topologically Sorted Source Nodes: [linear_528], Original ATen: [aten.mm]
        extern_kernels.mm(buf1829, reinterpret_tensor(primals_1219, (80, 320), (1, 80), 0), out=buf1830)
        buf1834 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf1835 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2069 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_273, result_763, hidden_states_454, hidden_states_455, norm_hidden_states_41], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42.run(buf1828, primals_1217, buf1830, buf1805, primals_1220, primals_1221, buf1834, buf1835, buf2069, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1221
        buf1836 = buf461; del buf461  # reuse
        # Topologically Sorted Source Nodes: [result_765], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1835, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1222, (320, 2560), (1, 320), 0), out=buf1836)
        buf1837 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_530], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1835, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1224, (320, 80), (1, 320), 0), out=buf1837)
        buf1838 = empty_strided_cuda((4096, 2560), (2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_531], Original ATen: [aten.mm]
        extern_kernels.mm(buf1837, reinterpret_tensor(primals_1225, (80, 2560), (1, 80), 0), out=buf1838)
        buf1839 = reinterpret_tensor(buf1836, (4, 1024, 2560), (2621440, 2560, 1), 0); del buf1836  # reuse
        # Topologically Sorted Source Nodes: [mul_274, result_766], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_43.run(buf1839, primals_1223, buf1838, 10485760, grid=grid(10485760), stream=stream0)
        del primals_1223
        buf1840 = reinterpret_tensor(buf1731, (4, 1024, 1280), (1310720, 1280, 1), 0); del buf1731  # reuse
        # Topologically Sorted Source Nodes: [gelu_13, hidden_states_457], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_44.run(buf1839, buf1840, 5242880, grid=grid(5242880), stream=stream0)
        buf1841 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_768], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1840, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_1226, (1280, 320), (1, 1280), 0), out=buf1841)
        buf1842 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_533], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1840, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_1228, (1280, 80), (1, 1280), 0), out=buf1842)
        buf1843 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_534], Original ATen: [aten.mm]
        extern_kernels.mm(buf1842, reinterpret_tensor(primals_1229, (80, 320), (1, 80), 0), out=buf1843)
        buf1844 = reinterpret_tensor(buf1841, (4, 1024, 320), (327680, 320, 1), 0); del buf1841  # reuse
        # Topologically Sorted Source Nodes: [mul_273, result_763, hidden_states_454, hidden_states_455, mul_276, result_769, hidden_states_459], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_45.run(buf1844, primals_1227, buf1843, buf1828, primals_1217, buf1830, buf1805, 1310720, grid=grid(1310720), stream=stream0)
        del primals_1217
        del primals_1227
        buf1845 = buf1843; del buf1843  # reuse
        # Topologically Sorted Source Nodes: [result_771], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1844, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1230, (320, 320), (1, 320), 0), out=buf1845)
        buf1846 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_536], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1844, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1232, (320, 80), (1, 320), 0), out=buf1846)
        buf1847 = buf1830; del buf1830  # reuse
        # Topologically Sorted Source Nodes: [linear_537], Original ATen: [aten.mm]
        extern_kernels.mm(buf1846, reinterpret_tensor(primals_1233, (80, 320), (1, 80), 0), out=buf1847)
        buf1848 = buf1745; del buf1745  # reuse
        buf1849 = reinterpret_tensor(buf1772, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1772  # reuse
        buf1850 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1852 = reinterpret_tensor(buf1850, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1850  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_461, hidden_states_462], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_123.run(buf1852, buf1845, primals_1231, buf1847, buf1770, buf372, buf1848, buf1849, 128, 20480, grid=grid(128), stream=stream0)
        del primals_1231
        buf1853 = buf1743; del buf1743  # reuse
        buf1854 = buf1853; del buf1853  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_462, hidden_states_463], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_124.run(buf1854, buf1848, buf1849, buf1852, primals_1234, primals_1235, 2621440, grid=grid(2621440), stream=stream0)
        # Topologically Sorted Source Nodes: [result_774], Original ATen: [aten.convolution]
        buf1855 = extern_kernels.convolution(buf1854, primals_1236, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1855, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_260], Original ATen: [aten.convolution]
        buf1856 = extern_kernels.convolution(buf1854, primals_1238, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1856, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_261], Original ATen: [aten.convolution]
        buf1857 = extern_kernels.convolution(buf1856, primals_1239, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1857, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf1858 = buf1756; del buf1756  # reuse
        # Topologically Sorted Source Nodes: [linear_538], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_1240, (1280, 320), (1, 1280), 0), out=buf1858)
        del primals_1240
        buf1859 = buf1855; del buf1855  # reuse
        buf1860 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1861 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1863 = reinterpret_tensor(buf1861, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1861  # reuse
        # Topologically Sorted Source Nodes: [result_774, mul_278, result_775, hidden_states_464, hidden_states_465], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_34.run(buf1859, buf1863, primals_1237, buf1857, buf1858, primals_1241, buf1860, 128, 10240, grid=grid(128), stream=stream0)
        del primals_1237
        del primals_1241
        buf1864 = buf1857; del buf1857  # reuse
        buf1865 = buf1864; del buf1864  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_465, hidden_states_466], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf1865, buf1859, buf1860, buf1863, primals_1242, primals_1243, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_777], Original ATen: [aten.convolution]
        buf1866 = extern_kernels.convolution(buf1865, primals_1244, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1866, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_263], Original ATen: [aten.convolution]
        buf1867 = extern_kernels.convolution(buf1865, primals_1246, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1867, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_264], Original ATen: [aten.convolution]
        buf1868 = extern_kernels.convolution(buf1867, primals_1247, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1868, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [result_780], Original ATen: [aten.convolution]
        buf1869 = extern_kernels.convolution(buf1848, primals_1248, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1869, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_266], Original ATen: [aten.convolution]
        buf1870 = extern_kernels.convolution(buf1848, primals_1250, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1870, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_267], Original ATen: [aten.convolution]
        buf1871 = extern_kernels.convolution(buf1870, primals_1251, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1871, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf1872 = buf1869; del buf1869  # reuse
        buf1873 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1874 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1876 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_777, mul_279, result_778, result_780, mul_280, result_781, add_109, output_tensor_30, hidden_states_468], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_122.run(buf1872, primals_1249, buf1871, buf1866, primals_1245, buf1868, buf1873, buf1874, buf1876, 128, 10240, grid=grid(128), stream=stream0)
        del primals_1245
        del primals_1249
        buf1877 = buf1871; del buf1871  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_468], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_36.run(buf1872, buf1873, buf1874, primals_1252, primals_1253, buf1877, 1310720, grid=grid(1310720), stream=stream0)
        del primals_1253
        buf1878 = reinterpret_tensor(buf1868, (4, 1024, 320), (327680, 320, 1), 0); del buf1868  # reuse
        # Topologically Sorted Source Nodes: [result_783], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1877, (4, 1024, 320), (327680, 1, 1024), 0), reinterpret_tensor(primals_1254, (4, 320, 320), (0, 1, 320), 0), out=buf1878)
        buf1879 = reinterpret_tensor(buf1866, (4, 1024, 320), (327680, 320, 1), 0); del buf1866  # reuse
        # Topologically Sorted Source Nodes: [linear_540], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_37.run(buf1877, buf1879, 4096, 320, grid=grid(4096, 320), stream=stream0)
        buf1880 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_540], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1879, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1256, (320, 80), (1, 320), 0), out=buf1880)
        buf1881 = reinterpret_tensor(buf1877, (4096, 320), (320, 1), 0); del buf1877  # reuse
        # Topologically Sorted Source Nodes: [linear_541], Original ATen: [aten.mm]
        extern_kernels.mm(buf1880, reinterpret_tensor(primals_1257, (80, 320), (1, 80), 0), out=buf1881)
        buf1885 = reinterpret_tensor(buf1847, (4, 1024, 320), (327680, 320, 1), 0); del buf1847  # reuse
        buf1886 = reinterpret_tensor(buf1845, (4, 1024, 320), (327680, 320, 1), 0); del buf1845  # reuse
        buf2068 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_783, mul_281, result_784, norm_hidden_states_42], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38.run(buf1878, primals_1255, buf1881, primals_1258, primals_1259, buf1885, buf1886, buf2068, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1259
        buf1887 = buf1828; del buf1828  # reuse
        # Topologically Sorted Source Nodes: [result_786], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1260, (320, 320), (1, 320), 0), out=buf1887)
        buf1888 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_543], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1261, (320, 80), (1, 320), 0), out=buf1888)
        buf1889 = reinterpret_tensor(buf1805, (4096, 320), (320, 1), 0); del buf1805  # reuse
        # Topologically Sorted Source Nodes: [linear_544], Original ATen: [aten.mm]
        extern_kernels.mm(buf1888, reinterpret_tensor(primals_1262, (80, 320), (1, 80), 0), out=buf1889)
        buf1890 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_789], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1263, (320, 320), (1, 320), 0), out=buf1890)
        buf1891 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_546], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1264, (320, 80), (1, 320), 0), out=buf1891)
        buf1892 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_547], Original ATen: [aten.mm]
        extern_kernels.mm(buf1891, reinterpret_tensor(primals_1265, (80, 320), (1, 80), 0), out=buf1892)
        buf1893 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_792], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1266, (320, 320), (1, 320), 0), out=buf1893)
        buf1894 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_549], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1267, (320, 80), (1, 320), 0), out=buf1894)
        buf1895 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_550], Original ATen: [aten.mm]
        extern_kernels.mm(buf1894, reinterpret_tensor(primals_1268, (80, 320), (1, 80), 0), out=buf1895)
        buf1896 = reinterpret_tensor(buf1887, (4, 1024, 320), (327680, 320, 1), 0); del buf1887  # reuse
        # Topologically Sorted Source Nodes: [mul_282, result_787], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1896, buf1889, 1310720, grid=grid(1310720), stream=stream0)
        buf1897 = reinterpret_tensor(buf1890, (4, 1024, 320), (327680, 320, 1), 0); del buf1890  # reuse
        # Topologically Sorted Source Nodes: [mul_283, result_790], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1897, buf1892, 1310720, grid=grid(1310720), stream=stream0)
        buf1898 = reinterpret_tensor(buf1893, (4, 1024, 320), (327680, 320, 1), 0); del buf1893  # reuse
        # Topologically Sorted Source Nodes: [mul_284, result_793], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1898, buf1895, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_470], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1899 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1896, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1897, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1898, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), None, True)
        buf1900 = buf1899[0]
        buf1901 = buf1899[1]
        buf1902 = buf1899[2]
        buf1903 = buf1899[3]
        del buf1899
        buf1904 = buf1895; del buf1895  # reuse
        # Topologically Sorted Source Nodes: [result_795], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1900, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1269, (320, 320), (1, 320), 0), out=buf1904)
        buf1905 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_552], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1900, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1271, (320, 80), (1, 320), 0), out=buf1905)
        buf1906 = buf1892; del buf1892  # reuse
        # Topologically Sorted Source Nodes: [linear_553], Original ATen: [aten.mm]
        extern_kernels.mm(buf1905, reinterpret_tensor(primals_1272, (80, 320), (1, 80), 0), out=buf1906)
        buf1907 = reinterpret_tensor(buf1904, (4, 1024, 320), (327680, 320, 1), 0); del buf1904  # reuse
        buf1911 = reinterpret_tensor(buf1889, (4, 1024, 320), (327680, 320, 1), 0); del buf1889  # reuse
        buf1912 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2067 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_783, mul_281, result_784, mul_285, result_796, hidden_states_474, hidden_states_475, norm_hidden_states_43], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40.run(buf1907, primals_1270, buf1906, buf1878, primals_1255, buf1881, primals_1273, primals_1274, buf1911, buf1912, buf2067, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1255
        del primals_1270
        del primals_1274
        buf1913 = buf1906; del buf1906  # reuse
        # Topologically Sorted Source Nodes: [result_798], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1912, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1275, (320, 320), (1, 320), 0), out=buf1913)
        buf1914 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_555], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1912, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1276, (320, 80), (1, 320), 0), out=buf1914)
        buf1915 = buf1881; del buf1881  # reuse
        # Topologically Sorted Source Nodes: [linear_556], Original ATen: [aten.mm]
        extern_kernels.mm(buf1914, reinterpret_tensor(primals_1277, (80, 320), (1, 80), 0), out=buf1915)
        buf1916 = buf1819; del buf1819  # reuse
        # Topologically Sorted Source Nodes: [result_801], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1278, (1024, 320), (1, 1024), 0), out=buf1916)
        del primals_1278
        buf1917 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_558], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1279, (1024, 80), (1, 1024), 0), out=buf1917)
        del primals_1279
        buf1918 = buf1816; del buf1816  # reuse
        # Topologically Sorted Source Nodes: [linear_559], Original ATen: [aten.mm]
        extern_kernels.mm(buf1917, reinterpret_tensor(primals_1280, (80, 320), (1, 80), 0), out=buf1918)
        buf1919 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_804], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1281, (1024, 320), (1, 1024), 0), out=buf1919)
        del primals_1281
        buf1920 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_561], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1282, (1024, 80), (1, 1024), 0), out=buf1920)
        del primals_1282
        buf1921 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_562], Original ATen: [aten.mm]
        extern_kernels.mm(buf1920, reinterpret_tensor(primals_1283, (80, 320), (1, 80), 0), out=buf1921)
        buf1922 = reinterpret_tensor(buf1913, (4, 1024, 320), (327680, 320, 1), 0); del buf1913  # reuse
        # Topologically Sorted Source Nodes: [mul_286, result_799], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1922, buf1915, 1310720, grid=grid(1310720), stream=stream0)
        buf1923 = reinterpret_tensor(buf1916, (4, 77, 320), (24640, 320, 1), 0); del buf1916  # reuse
        # Topologically Sorted Source Nodes: [mul_287, result_802], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf1923, buf1918, 98560, grid=grid(98560), stream=stream0)
        buf1924 = reinterpret_tensor(buf1919, (4, 77, 320), (24640, 320, 1), 0); del buf1919  # reuse
        # Topologically Sorted Source Nodes: [mul_288, result_805], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf1924, buf1921, 98560, grid=grid(98560), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_476], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf1925 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1922, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1923, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf1924, (4, 5, 77, 64), (24640, 64, 320, 1), 0), None, True)
        buf1926 = buf1925[0]
        buf1927 = buf1925[1]
        buf1928 = buf1925[2]
        buf1929 = buf1925[3]
        del buf1925
        buf1930 = buf1915; del buf1915  # reuse
        # Topologically Sorted Source Nodes: [result_807], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1926, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1284, (320, 320), (1, 320), 0), out=buf1930)
        buf1931 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_564], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1926, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1286, (320, 80), (1, 320), 0), out=buf1931)
        buf1932 = reinterpret_tensor(buf1878, (4096, 320), (320, 1), 0); del buf1878  # reuse
        # Topologically Sorted Source Nodes: [linear_565], Original ATen: [aten.mm]
        extern_kernels.mm(buf1931, reinterpret_tensor(primals_1287, (80, 320), (1, 80), 0), out=buf1932)
        buf1936 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf1937 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2066 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_289, result_808, hidden_states_480, hidden_states_481, norm_hidden_states_44], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42.run(buf1930, primals_1285, buf1932, buf1907, primals_1288, primals_1289, buf1936, buf1937, buf2066, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1289
        buf1938 = buf1838; del buf1838  # reuse
        # Topologically Sorted Source Nodes: [result_810], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1937, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1290, (320, 2560), (1, 320), 0), out=buf1938)
        buf1939 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_567], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1937, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1292, (320, 80), (1, 320), 0), out=buf1939)
        buf1940 = empty_strided_cuda((4096, 2560), (2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_568], Original ATen: [aten.mm]
        extern_kernels.mm(buf1939, reinterpret_tensor(primals_1293, (80, 2560), (1, 80), 0), out=buf1940)
        buf1941 = reinterpret_tensor(buf1938, (4, 1024, 2560), (2621440, 2560, 1), 0); del buf1938  # reuse
        # Topologically Sorted Source Nodes: [mul_290, result_811], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_43.run(buf1941, primals_1291, buf1940, 10485760, grid=grid(10485760), stream=stream0)
        del primals_1291
        buf1942 = empty_strided_cuda((4, 1024, 1280), (1310720, 1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_14, hidden_states_483], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_44.run(buf1941, buf1942, 5242880, grid=grid(5242880), stream=stream0)
        buf1943 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_813], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1942, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_1294, (1280, 320), (1, 1280), 0), out=buf1943)
        buf1944 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_570], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1942, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_1296, (1280, 80), (1, 1280), 0), out=buf1944)
        buf1945 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_571], Original ATen: [aten.mm]
        extern_kernels.mm(buf1944, reinterpret_tensor(primals_1297, (80, 320), (1, 80), 0), out=buf1945)
        buf1946 = reinterpret_tensor(buf1943, (4, 1024, 320), (327680, 320, 1), 0); del buf1943  # reuse
        # Topologically Sorted Source Nodes: [mul_289, result_808, hidden_states_480, hidden_states_481, mul_292, result_814, hidden_states_485], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_45.run(buf1946, primals_1295, buf1945, buf1930, primals_1285, buf1932, buf1907, 1310720, grid=grid(1310720), stream=stream0)
        del primals_1285
        del primals_1295
        buf1947 = buf1945; del buf1945  # reuse
        # Topologically Sorted Source Nodes: [result_816], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf1946, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1298, (320, 320), (1, 320), 0), out=buf1947)
        buf1948 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_573], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1946, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1300, (320, 80), (1, 320), 0), out=buf1948)
        buf1949 = buf1932; del buf1932  # reuse
        # Topologically Sorted Source Nodes: [linear_574], Original ATen: [aten.mm]
        extern_kernels.mm(buf1948, reinterpret_tensor(primals_1301, (80, 320), (1, 80), 0), out=buf1949)
        buf1950 = empty_strided_cuda((4, 640, 32, 32), (655360, 1024, 32, 1), torch.float32)
        buf1951 = reinterpret_tensor(buf1874, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1874  # reuse
        buf1952 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1954 = reinterpret_tensor(buf1952, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1952  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_487, hidden_states_488], Original ATen: [aten.cat, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_cat_native_group_norm_123.run(buf1954, buf1947, primals_1299, buf1949, buf1872, buf272, buf1950, buf1951, 128, 20480, grid=grid(128), stream=stream0)
        del primals_1299
        buf1955 = empty_strided_cuda((4, 640, 32, 32), (655360, 1024, 32, 1), torch.float32)
        buf1956 = buf1955; del buf1955  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_488, hidden_states_489], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_124.run(buf1956, buf1950, buf1951, buf1954, primals_1302, primals_1303, 2621440, grid=grid(2621440), stream=stream0)
        # Topologically Sorted Source Nodes: [result_819], Original ATen: [aten.convolution]
        buf1957 = extern_kernels.convolution(buf1956, primals_1304, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1957, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_269], Original ATen: [aten.convolution]
        buf1958 = extern_kernels.convolution(buf1956, primals_1306, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1958, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_270], Original ATen: [aten.convolution]
        buf1959 = extern_kernels.convolution(buf1958, primals_1307, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1959, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf1960 = buf1858; del buf1858  # reuse
        # Topologically Sorted Source Nodes: [linear_575], Original ATen: [aten.addmm]
        extern_kernels.mm(buf282, reinterpret_tensor(primals_1308, (1280, 320), (1, 1280), 0), out=buf1960)
        del buf282
        del primals_1308
        buf1961 = buf1957; del buf1957  # reuse
        buf1962 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 1, 1), torch.float32)
        buf1963 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1965 = reinterpret_tensor(buf1963, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1963  # reuse
        # Topologically Sorted Source Nodes: [result_819, mul_294, result_820, hidden_states_490, hidden_states_491], Original ATen: [aten.convolution, aten.mul, aten.add, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_mul_native_group_norm_34.run(buf1961, buf1965, primals_1305, buf1959, buf1960, primals_1309, buf1962, 128, 10240, grid=grid(128), stream=stream0)
        del buf1960
        del primals_1305
        del primals_1309
        buf1966 = buf1959; del buf1959  # reuse
        buf1967 = buf1966; del buf1966  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_491, hidden_states_492], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf1967, buf1961, buf1962, buf1965, primals_1310, primals_1311, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_822], Original ATen: [aten.convolution]
        buf1968 = extern_kernels.convolution(buf1967, primals_1312, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1968, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_272], Original ATen: [aten.convolution]
        buf1969 = extern_kernels.convolution(buf1967, primals_1314, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1969, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_273], Original ATen: [aten.convolution]
        buf1970 = extern_kernels.convolution(buf1969, primals_1315, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1970, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [result_825], Original ATen: [aten.convolution]
        buf1971 = extern_kernels.convolution(buf1950, primals_1316, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1971, (4, 320, 32, 32), (327680, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_275], Original ATen: [aten.convolution]
        buf1972 = extern_kernels.convolution(buf1950, primals_1318, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1972, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_276], Original ATen: [aten.convolution]
        buf1973 = extern_kernels.convolution(buf1972, primals_1319, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf1973, (4, 320, 32, 32), (327680, 1024, 32, 1))
        buf1974 = buf1971; del buf1971  # reuse
        buf1975 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1976 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf1978 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        # Topologically Sorted Source Nodes: [result_822, mul_295, result_823, result_825, mul_296, result_826, add_115, output_tensor_31, hidden_states_494], Original ATen: [aten.convolution, aten.mul, aten.add, aten.div, aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_convolution_div_mul_native_group_norm_122.run(buf1974, primals_1317, buf1973, buf1968, primals_1313, buf1970, buf1975, buf1976, buf1978, 128, 10240, grid=grid(128), stream=stream0)
        del primals_1313
        del primals_1317
        buf1979 = buf1973; del buf1973  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_494], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_36.run(buf1974, buf1975, buf1976, primals_1320, primals_1321, buf1979, 1310720, grid=grid(1310720), stream=stream0)
        del primals_1321
        buf1980 = reinterpret_tensor(buf1970, (4, 1024, 320), (327680, 320, 1), 0); del buf1970  # reuse
        # Topologically Sorted Source Nodes: [result_828], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1979, (4, 1024, 320), (327680, 1, 1024), 0), reinterpret_tensor(primals_1322, (4, 320, 320), (0, 1, 320), 0), out=buf1980)
        buf1981 = reinterpret_tensor(buf1968, (4, 1024, 320), (327680, 320, 1), 0); del buf1968  # reuse
        # Topologically Sorted Source Nodes: [linear_577], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_37.run(buf1979, buf1981, 4096, 320, grid=grid(4096, 320), stream=stream0)
        buf1982 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_577], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1981, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1324, (320, 80), (1, 320), 0), out=buf1982)
        buf1983 = reinterpret_tensor(buf1979, (4096, 320), (320, 1), 0); del buf1979  # reuse
        # Topologically Sorted Source Nodes: [linear_578], Original ATen: [aten.mm]
        extern_kernels.mm(buf1982, reinterpret_tensor(primals_1325, (80, 320), (1, 80), 0), out=buf1983)
        buf1987 = reinterpret_tensor(buf1949, (4, 1024, 320), (327680, 320, 1), 0); del buf1949  # reuse
        buf1988 = reinterpret_tensor(buf1947, (4, 1024, 320), (327680, 320, 1), 0); del buf1947  # reuse
        buf2065 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_828, mul_297, result_829, norm_hidden_states_45], Original ATen: [aten.add, aten.mul, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_mul_native_layer_norm_native_layer_norm_backward_38.run(buf1980, primals_1323, buf1983, primals_1326, primals_1327, buf1987, buf1988, buf2065, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1327
        buf1989 = buf1930; del buf1930  # reuse
        # Topologically Sorted Source Nodes: [result_831], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1328, (320, 320), (1, 320), 0), out=buf1989)
        buf1990 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_580], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1329, (320, 80), (1, 320), 0), out=buf1990)
        buf1991 = reinterpret_tensor(buf1907, (4096, 320), (320, 1), 0); del buf1907  # reuse
        # Topologically Sorted Source Nodes: [linear_581], Original ATen: [aten.mm]
        extern_kernels.mm(buf1990, reinterpret_tensor(primals_1330, (80, 320), (1, 80), 0), out=buf1991)
        buf1992 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_834], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1331, (320, 320), (1, 320), 0), out=buf1992)
        buf1993 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_583], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1332, (320, 80), (1, 320), 0), out=buf1993)
        buf1994 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_584], Original ATen: [aten.mm]
        extern_kernels.mm(buf1993, reinterpret_tensor(primals_1333, (80, 320), (1, 80), 0), out=buf1994)
        buf1995 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_837], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1334, (320, 320), (1, 320), 0), out=buf1995)
        buf1996 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_586], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1335, (320, 80), (1, 320), 0), out=buf1996)
        buf1997 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_587], Original ATen: [aten.mm]
        extern_kernels.mm(buf1996, reinterpret_tensor(primals_1336, (80, 320), (1, 80), 0), out=buf1997)
        buf1998 = reinterpret_tensor(buf1989, (4, 1024, 320), (327680, 320, 1), 0); del buf1989  # reuse
        # Topologically Sorted Source Nodes: [mul_298, result_832], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1998, buf1991, 1310720, grid=grid(1310720), stream=stream0)
        buf1999 = reinterpret_tensor(buf1992, (4, 1024, 320), (327680, 320, 1), 0); del buf1992  # reuse
        # Topologically Sorted Source Nodes: [mul_299, result_835], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf1999, buf1994, 1310720, grid=grid(1310720), stream=stream0)
        buf2000 = reinterpret_tensor(buf1995, (4, 1024, 320), (327680, 320, 1), 0); del buf1995  # reuse
        # Topologically Sorted Source Nodes: [mul_300, result_838], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf2000, buf1997, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [hidden_states_496], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf2001 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf1998, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1999, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf2000, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), None, True)
        buf2002 = buf2001[0]
        buf2003 = buf2001[1]
        buf2004 = buf2001[2]
        buf2005 = buf2001[3]
        del buf2001
        buf2006 = buf1997; del buf1997  # reuse
        # Topologically Sorted Source Nodes: [result_840], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2002, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1337, (320, 320), (1, 320), 0), out=buf2006)
        buf2007 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_589], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2002, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1339, (320, 80), (1, 320), 0), out=buf2007)
        buf2008 = buf1994; del buf1994  # reuse
        # Topologically Sorted Source Nodes: [linear_590], Original ATen: [aten.mm]
        extern_kernels.mm(buf2007, reinterpret_tensor(primals_1340, (80, 320), (1, 80), 0), out=buf2008)
        buf2009 = reinterpret_tensor(buf2006, (4, 1024, 320), (327680, 320, 1), 0); del buf2006  # reuse
        buf2013 = reinterpret_tensor(buf1991, (4, 1024, 320), (327680, 320, 1), 0); del buf1991  # reuse
        buf2014 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2064 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_828, mul_297, result_829, mul_301, result_841, hidden_states_500, hidden_states_501, norm_hidden_states_46], Original ATen: [aten.add, aten.mul, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_40.run(buf2009, primals_1338, buf2008, buf1980, primals_1323, buf1983, primals_1341, primals_1342, buf2013, buf2014, buf2064, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1323
        del primals_1338
        del primals_1342
        buf2015 = buf2008; del buf2008  # reuse
        # Topologically Sorted Source Nodes: [result_843], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2014, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1343, (320, 320), (1, 320), 0), out=buf2015)
        buf2016 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_592], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2014, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1344, (320, 80), (1, 320), 0), out=buf2016)
        buf2017 = buf1983; del buf1983  # reuse
        # Topologically Sorted Source Nodes: [linear_593], Original ATen: [aten.mm]
        extern_kernels.mm(buf2016, reinterpret_tensor(primals_1345, (80, 320), (1, 80), 0), out=buf2017)
        buf2018 = buf1921; del buf1921  # reuse
        # Topologically Sorted Source Nodes: [result_846], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1346, (1024, 320), (1, 1024), 0), out=buf2018)
        del primals_1346
        buf2019 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_595], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1347, (1024, 80), (1, 1024), 0), out=buf2019)
        del primals_1347
        buf2020 = buf1918; del buf1918  # reuse
        # Topologically Sorted Source Nodes: [linear_596], Original ATen: [aten.mm]
        extern_kernels.mm(buf2019, reinterpret_tensor(primals_1348, (80, 320), (1, 80), 0), out=buf2020)
        buf2021 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_849], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1349, (1024, 320), (1, 1024), 0), out=buf2021)
        del primals_1349
        buf2022 = empty_strided_cuda((308, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_598], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), reinterpret_tensor(primals_1350, (1024, 80), (1, 1024), 0), out=buf2022)
        del primals_1350
        buf2023 = empty_strided_cuda((308, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_599], Original ATen: [aten.mm]
        extern_kernels.mm(buf2022, reinterpret_tensor(primals_1351, (80, 320), (1, 80), 0), out=buf2023)
        buf2024 = reinterpret_tensor(buf2015, (4, 1024, 320), (327680, 320, 1), 0); del buf2015  # reuse
        # Topologically Sorted Source Nodes: [mul_302, result_844], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_39.run(buf2024, buf2017, 1310720, grid=grid(1310720), stream=stream0)
        buf2025 = reinterpret_tensor(buf2018, (4, 77, 320), (24640, 320, 1), 0); del buf2018  # reuse
        # Topologically Sorted Source Nodes: [mul_303, result_847], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf2025, buf2020, 98560, grid=grid(98560), stream=stream0)
        del buf2020
        buf2026 = reinterpret_tensor(buf2021, (4, 77, 320), (24640, 320, 1), 0); del buf2021  # reuse
        # Topologically Sorted Source Nodes: [mul_304, result_850], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_41.run(buf2026, buf2023, 98560, grid=grid(98560), stream=stream0)
        del buf2023
        # Topologically Sorted Source Nodes: [hidden_states_502], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf2027 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf2024, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf2025, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf2026, (4, 5, 77, 64), (24640, 64, 320, 1), 0), None, True)
        buf2028 = buf2027[0]
        buf2029 = buf2027[1]
        buf2030 = buf2027[2]
        buf2031 = buf2027[3]
        del buf2027
        buf2032 = buf2017; del buf2017  # reuse
        # Topologically Sorted Source Nodes: [result_852], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2028, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1352, (320, 320), (1, 320), 0), out=buf2032)
        buf2033 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_601], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2028, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1354, (320, 80), (1, 320), 0), out=buf2033)
        buf2034 = reinterpret_tensor(buf1980, (4096, 320), (320, 1), 0); del buf1980  # reuse
        # Topologically Sorted Source Nodes: [linear_602], Original ATen: [aten.mm]
        extern_kernels.mm(buf2033, reinterpret_tensor(primals_1355, (80, 320), (1, 80), 0), out=buf2034)
        buf2038 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2039 = empty_strided_cuda((4, 1024, 320), (327680, 320, 1), torch.float32)
        buf2063 = empty_strided_cuda((4, 1024, 1), (1024, 1, 1), torch.float32)
        # Topologically Sorted Source Nodes: [mul_305, result_853, hidden_states_506, hidden_states_507, norm_hidden_states_47], Original ATen: [aten.mul, aten.add, aten.div, aten.native_layer_norm, aten.native_layer_norm_backward]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_div_mul_native_layer_norm_native_layer_norm_backward_42.run(buf2032, primals_1353, buf2034, buf2009, primals_1356, primals_1357, buf2038, buf2039, buf2063, 4096, 320, grid=grid(4096), stream=stream0)
        del primals_1357
        buf2040 = buf1940; del buf1940  # reuse
        # Topologically Sorted Source Nodes: [result_855], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2039, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1358, (320, 2560), (1, 320), 0), out=buf2040)
        buf2041 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_604], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2039, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1360, (320, 80), (1, 320), 0), out=buf2041)
        buf2042 = empty_strided_cuda((4096, 2560), (2560, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_605], Original ATen: [aten.mm]
        extern_kernels.mm(buf2041, reinterpret_tensor(primals_1361, (80, 2560), (1, 80), 0), out=buf2042)
        buf2043 = reinterpret_tensor(buf2040, (4, 1024, 2560), (2621440, 2560, 1), 0); del buf2040  # reuse
        # Topologically Sorted Source Nodes: [mul_306, result_856], Original ATen: [aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_43.run(buf2043, primals_1359, buf2042, 10485760, grid=grid(10485760), stream=stream0)
        del buf2042
        del primals_1359
        buf2044 = empty_strided_cuda((4, 1024, 1280), (1310720, 1280, 1), torch.float32)
        # Topologically Sorted Source Nodes: [gelu_15, hidden_states_509], Original ATen: [aten.gelu, aten.mul]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_mul_44.run(buf2043, buf2044, 5242880, grid=grid(5242880), stream=stream0)
        buf2045 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [result_858], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2044, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_1362, (1280, 320), (1, 1280), 0), out=buf2045)
        buf2046 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_607], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2044, (4096, 1280), (1280, 1), 0), reinterpret_tensor(primals_1364, (1280, 80), (1, 1280), 0), out=buf2046)
        buf2047 = empty_strided_cuda((4096, 320), (320, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_608], Original ATen: [aten.mm]
        extern_kernels.mm(buf2046, reinterpret_tensor(primals_1365, (80, 320), (1, 80), 0), out=buf2047)
        buf2048 = reinterpret_tensor(buf2045, (4, 1024, 320), (327680, 320, 1), 0); del buf2045  # reuse
        # Topologically Sorted Source Nodes: [mul_305, result_853, hidden_states_506, hidden_states_507, mul_308, result_859, hidden_states_511], Original ATen: [aten.mul, aten.add, aten.div]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_div_mul_45.run(buf2048, primals_1363, buf2047, buf2032, primals_1353, buf2034, buf2009, 1310720, grid=grid(1310720), stream=stream0)
        del buf2009
        del primals_1353
        del primals_1363
        buf2049 = buf2047; del buf2047  # reuse
        # Topologically Sorted Source Nodes: [result_861], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2048, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1366, (320, 320), (1, 320), 0), out=buf2049)
        buf2050 = empty_strided_cuda((4096, 80), (80, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_610], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2048, (4096, 320), (320, 1), 0), reinterpret_tensor(primals_1368, (320, 80), (1, 320), 0), out=buf2050)
        buf2051 = buf2034; del buf2034  # reuse
        # Topologically Sorted Source Nodes: [linear_611], Original ATen: [aten.mm]
        extern_kernels.mm(buf2050, reinterpret_tensor(primals_1369, (80, 320), (1, 80), 0), out=buf2051)
        buf2052 = reinterpret_tensor(buf2032, (4, 320, 32, 32), (327680, 1024, 32, 1), 0); del buf2032  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_512, output_15], Original ATen: [aten.clone, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_clone_46.run(buf2049, primals_1367, buf2051, buf1974, buf2052, 1280, 1024, grid=grid(1280, 1024), stream=stream0)
        del buf2049
        del primals_1367
        buf2053 = reinterpret_tensor(buf1976, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf1976  # reuse
        buf2054 = empty_strided_cuda((4, 32, 1, 1), (32, 1, 128, 128), torch.float32)
        buf2056 = reinterpret_tensor(buf2054, (4, 32, 1, 1), (32, 1, 1, 1), 0); del buf2054  # reuse
        # Topologically Sorted Source Nodes: [sample_5], Original ATen: [aten.native_group_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_native_group_norm_47.run(buf2056, buf2052, buf2053, 128, 10240, grid=grid(128), stream=stream0)
        buf2057 = reinterpret_tensor(buf2051, (4, 320, 32, 32), (327680, 1024, 32, 1), 0); del buf2051  # reuse
        buf2058 = buf2057; del buf2057  # reuse
        # Topologically Sorted Source Nodes: [sample_5, sample_6], Original ATen: [aten.native_group_norm, aten.silu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_native_group_norm_silu_33.run(buf2058, buf2052, buf2053, buf2056, primals_1370, primals_1371, 1310720, grid=grid(1310720), stream=stream0)
        # Topologically Sorted Source Nodes: [result_864], Original ATen: [aten.convolution]
        buf2059 = extern_kernels.convolution(buf2058, primals_1372, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf2059, (4, 4, 32, 32), (4096, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_278], Original ATen: [aten.convolution]
        buf2060 = extern_kernels.convolution(buf2058, primals_1374, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf2060, (4, 80, 32, 32), (81920, 1024, 32, 1))
        # Topologically Sorted Source Nodes: [conv2d_279], Original ATen: [aten.convolution]
        buf2061 = extern_kernels.convolution(buf2060, primals_1375, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf2061, (4, 4, 32, 32), (4096, 1024, 32, 1))
        buf2062 = buf2059; del buf2059  # reuse
        # Topologically Sorted Source Nodes: [result_864, mul_310, result_865], Original ATen: [aten.convolution, aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_convolution_mul_125.run(buf2062, primals_1373, buf2061, 16384, grid=grid(16384), stream=stream0)
        del buf2061
        del primals_1373
    return (buf2062, reinterpret_tensor(primals_172, (4, ), (0, ), 0), buf263, buf3, buf47, buf94, buf141, primals_1, primals_4, primals_5, primals_6, primals_7, primals_8, primals_10, primals_11, primals_12, primals_13, primals_14, primals_16, primals_17, primals_18, primals_19, primals_20, primals_22, primals_23, primals_24, primals_25, primals_26, primals_28, primals_29, primals_30, primals_32, primals_33, primals_34, primals_35, primals_36, primals_38, primals_39, primals_40, primals_41, primals_42, primals_44, primals_45, primals_46, primals_48, primals_49, primals_50, primals_51, primals_52, primals_54, primals_55, primals_56, primals_57, primals_58, primals_60, primals_61, primals_62, primals_64, primals_65, primals_66, primals_67, primals_68, primals_70, primals_71, primals_72, primals_73, primals_74, primals_76, primals_77, primals_78, primals_80, primals_81, primals_82, primals_83, primals_84, primals_86, primals_87, primals_88, primals_89, primals_90, primals_92, primals_93, primals_94, primals_96, primals_97, primals_98, primals_99, primals_100, primals_102, primals_103, primals_104, primals_105, primals_106, primals_108, primals_109, primals_110, primals_111, primals_112, primals_114, primals_115, primals_116, primals_117, primals_118, primals_120, primals_121, primals_122, primals_123, primals_124, primals_126, primals_127, primals_128, primals_129, primals_130, primals_132, primals_133, primals_134, primals_136, primals_140, primals_144, primals_152, primals_153, primals_154, primals_156, primals_157, primals_158, primals_159, primals_160, primals_162, primals_163, primals_164, primals_165, primals_166, primals_168, primals_169, primals_170, primals_178, primals_180, primals_181, primals_182, primals_183, primals_184, primals_186, primals_187, primals_190, primals_191, primals_192, primals_194, primals_195, primals_196, primals_198, primals_202, primals_217, primals_232, primals_246, primals_247, primals_248, primals_250, primals_251, primals_254, primals_255, primals_256, primals_258, primals_259, primals_260, primals_262, primals_266, primals_281, primals_296, primals_310, primals_312, primals_313, primals_314, primals_315, primals_316, primals_318, primals_319, primals_322, primals_323, primals_324, primals_326, primals_327, primals_328, primals_330, primals_331, primals_332, primals_334, primals_338, primals_353, primals_368, primals_382, primals_383, primals_384, primals_386, primals_387, primals_390, primals_391, primals_392, primals_394, primals_395, primals_396, primals_398, primals_402, primals_417, primals_432, primals_446, primals_448, primals_449, primals_450, primals_451, primals_452, primals_454, primals_455, primals_458, primals_459, primals_460, primals_462, primals_463, primals_464, primals_466, primals_467, primals_468, primals_470, primals_474, primals_489, primals_504, primals_518, primals_519, primals_520, primals_522, primals_523, primals_526, primals_527, primals_528, primals_530, primals_531, primals_532, primals_534, primals_538, primals_553, primals_568, primals_582, primals_584, primals_585, primals_586, primals_587, primals_588, primals_590, primals_591, primals_594, primals_595, primals_596, primals_598, primals_599, primals_600, primals_601, primals_602, primals_604, primals_605, primals_608, primals_609, primals_610, primals_612, primals_613, primals_614, primals_615, primals_616, primals_618, primals_619, primals_622, primals_623, primals_624, primals_626, primals_627, primals_628, primals_630, primals_634, primals_649, primals_664, primals_678, primals_679, primals_680, primals_682, primals_683, primals_686, primals_687, primals_688, primals_690, primals_691, primals_692, primals_693, primals_694, primals_696, primals_697, primals_700, primals_701, primals_702, primals_704, primals_705, primals_706, primals_708, primals_709, primals_710, primals_711, primals_712, primals_714, primals_715, primals_718, primals_719, primals_720, primals_722, primals_723, primals_724, primals_726, primals_727, primals_728, primals_729, primals_730, primals_732, primals_733, primals_736, primals_737, primals_738, primals_740, primals_741, primals_742, primals_744, primals_745, primals_746, primals_748, primals_749, primals_750, primals_751, primals_752, primals_754, primals_755, primals_758, primals_759, primals_760, primals_762, primals_763, primals_764, primals_766, primals_767, primals_768, primals_770, primals_774, primals_789, primals_804, primals_818, primals_819, primals_820, primals_822, primals_823, primals_826, primals_827, primals_828, primals_830, primals_831, primals_832, primals_834, primals_835, primals_836, primals_838, primals_842, primals_857, primals_872, primals_886, primals_887, primals_888, primals_890, primals_891, primals_894, primals_895, primals_896, primals_898, primals_899, primals_900, primals_902, primals_903, primals_904, primals_906, primals_910, primals_925, primals_940, primals_954, primals_956, primals_957, primals_958, primals_959, primals_960, primals_962, primals_963, primals_966, primals_967, primals_968, primals_970, primals_971, primals_972, primals_974, primals_975, primals_976, primals_978, primals_982, primals_997, primals_1012, primals_1026, primals_1027, primals_1028, primals_1030, primals_1031, primals_1034, primals_1035, primals_1036, primals_1038, primals_1039, primals_1040, primals_1042, primals_1043, primals_1044, primals_1046, primals_1050, primals_1065, primals_1080, primals_1094, primals_1095, primals_1096, primals_1098, primals_1099, primals_1102, primals_1103, primals_1104, primals_1106, primals_1107, primals_1108, primals_1110, primals_1111, primals_1112, primals_1114, primals_1118, primals_1133, primals_1148, primals_1162, primals_1164, primals_1165, primals_1166, primals_1167, primals_1168, primals_1170, primals_1171, primals_1174, primals_1175, primals_1176, primals_1178, primals_1179, primals_1180, primals_1182, primals_1183, primals_1184, primals_1186, primals_1190, primals_1205, primals_1220, primals_1234, primals_1235, primals_1236, primals_1238, primals_1239, primals_1242, primals_1243, primals_1244, primals_1246, primals_1247, primals_1248, primals_1250, primals_1251, primals_1252, primals_1254, primals_1258, primals_1273, primals_1288, primals_1302, primals_1303, primals_1304, primals_1306, primals_1307, primals_1310, primals_1311, primals_1312, primals_1314, primals_1315, primals_1316, primals_1318, primals_1319, primals_1320, primals_1322, primals_1326, primals_1341, primals_1356, primals_1370, primals_1371, primals_1372, primals_1374, primals_1375, buf1, buf3, buf4, buf7, buf9, buf11, buf13, buf14, buf17, buf19, buf21, buf23, buf24, buf27, buf29, buf31, buf33, buf34, buf37, buf39, buf41, buf43, buf45, buf47, buf48, buf51, buf53, buf55, buf57, buf58, buf61, buf63, buf65, buf68, buf70, buf71, buf74, buf76, buf78, buf80, buf81, buf84, buf86, buf88, buf90, buf92, buf94, buf95, buf98, buf100, buf102, buf104, buf105, buf108, buf110, buf112, buf115, buf117, buf118, buf121, buf123, buf125, buf127, buf128, buf131, buf133, buf135, buf137, buf139, buf141, buf142, buf145, buf147, buf149, buf151, buf152, buf155, buf157, buf159, buf161, buf162, buf165, buf167, buf169, buf171, buf172, buf175, buf177, buf179, buf181, buf182, buf185, buf187, buf189, buf191, buf192, buf195, buf197, buf199, reinterpret_tensor(buf201, (4, 512, 1024), (524288, 1024, 1), 0), reinterpret_tensor(buf202, (4, 32), (32, 1), 0), reinterpret_tensor(buf205, (4, 32), (32, 1), 0), reinterpret_tensor(buf208, (4096, 512), (512, 1), 0), buf209, buf212, buf215, reinterpret_tensor(buf217, (4, 1, 1024, 512), (524288, 512, 512, 1), 0), reinterpret_tensor(buf218, (4, 1, 1024, 512), (524288, 512, 512, 1), 0), reinterpret_tensor(buf219, (4, 1, 1024, 512), (524288, 512, 512, 1), 0), buf221, buf222, buf223, buf224, buf226, buf228, buf229, buf232, buf234, buf236, buf238, buf239, buf242, buf244, buf246, buf248, buf249, buf252, buf254, buf256, buf258, reinterpret_tensor(buf260, (4, 4, 32, 32), (8192, 1024, 32, 1), 4096), buf262, buf263, buf270, buf272, buf273, buf276, buf278, buf280, buf284, buf285, buf288, buf290, buf292, buf294, reinterpret_tensor(buf295, (4, 32), (32, 1), 0), reinterpret_tensor(buf298, (4, 32), (32, 1), 0), reinterpret_tensor(buf301, (4096, 320), (320, 1), 0), buf302, buf307, reinterpret_tensor(buf308, (4096, 320), (320, 1), 0), buf310, buf313, buf316, reinterpret_tensor(buf318, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf319, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf320, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), buf322, buf323, buf324, buf325, buf327, buf333, reinterpret_tensor(buf334, (4096, 320), (320, 1), 0), buf336, reinterpret_tensor(primals_177, (308, 1024), (1024, 1), 0), buf339, buf342, reinterpret_tensor(buf344, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf345, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf346, (4, 5, 77, 64), (24640, 64, 320, 1), 0), buf348, buf349, buf350, buf351, buf353, buf358, reinterpret_tensor(buf359, (4096, 320), (320, 1), 0), buf361, reinterpret_tensor(buf363, (4, 1024, 1280), (2621440, 2560, 1), 1280), reinterpret_tensor(buf363, (4, 1024, 1280), (2621440, 2560, 1), 0), reinterpret_tensor(buf364, (4096, 1280), (1280, 1), 0), buf366, reinterpret_tensor(buf368, (4096, 320), (320, 1), 0), buf370, buf372, buf373, buf376, buf378, buf380, buf383, buf384, buf387, buf389, buf391, buf393, reinterpret_tensor(buf394, (4, 32), (32, 1), 0), reinterpret_tensor(buf397, (4, 32), (32, 1), 0), reinterpret_tensor(buf400, (4096, 320), (320, 1), 0), buf401, buf406, reinterpret_tensor(buf407, (4096, 320), (320, 1), 0), buf409, buf412, buf415, reinterpret_tensor(buf417, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf418, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf419, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), buf421, buf422, buf423, buf424, buf426, buf432, reinterpret_tensor(buf433, (4096, 320), (320, 1), 0), buf435, buf438, buf441, reinterpret_tensor(buf443, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf444, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf445, (4, 5, 77, 64), (24640, 64, 320, 1), 0), buf447, buf448, buf449, buf450, buf452, buf457, reinterpret_tensor(buf458, (4096, 320), (320, 1), 0), buf460, reinterpret_tensor(buf462, (4, 1024, 1280), (2621440, 2560, 1), 1280), reinterpret_tensor(buf462, (4, 1024, 1280), (2621440, 2560, 1), 0), reinterpret_tensor(buf463, (4096, 1280), (1280, 1), 0), buf465, reinterpret_tensor(buf467, (4096, 320), (320, 1), 0), buf469, buf471, buf473, buf475, buf476, buf479, buf481, buf483, buf486, buf487, buf490, buf492, buf494, buf497, buf499, reinterpret_tensor(buf500, (4, 32), (32, 1), 0), reinterpret_tensor(buf503, (4, 32), (32, 1), 0), reinterpret_tensor(buf506, (1024, 640), (640, 1), 0), buf507, buf512, reinterpret_tensor(buf513, (1024, 640), (640, 1), 0), buf515, buf518, buf521, reinterpret_tensor(buf523, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf524, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf525, (4, 10, 256, 64), (163840, 64, 640, 1), 0), buf527, buf528, buf529, buf530, buf532, buf538, reinterpret_tensor(buf539, (1024, 640), (640, 1), 0), buf541, buf544, buf547, reinterpret_tensor(buf549, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf550, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf551, (4, 10, 77, 64), (49280, 64, 640, 1), 0), buf553, buf554, buf555, buf556, buf558, buf563, reinterpret_tensor(buf564, (1024, 640), (640, 1), 0), buf566, reinterpret_tensor(buf568, (4, 256, 2560), (1310720, 5120, 1), 2560), reinterpret_tensor(buf568, (4, 256, 2560), (1310720, 5120, 1), 0), reinterpret_tensor(buf569, (1024, 2560), (2560, 1), 0), buf571, reinterpret_tensor(buf573, (1024, 640), (640, 1), 0), buf575, buf577, buf578, buf581, buf583, buf585, buf588, buf589, buf592, buf594, buf596, buf598, reinterpret_tensor(buf599, (4, 32), (32, 1), 0), reinterpret_tensor(buf602, (4, 32), (32, 1), 0), reinterpret_tensor(buf605, (1024, 640), (640, 1), 0), buf606, buf611, reinterpret_tensor(buf612, (1024, 640), (640, 1), 0), buf614, buf617, buf620, reinterpret_tensor(buf622, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf623, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf624, (4, 10, 256, 64), (163840, 64, 640, 1), 0), buf626, buf627, buf628, buf629, buf631, buf637, reinterpret_tensor(buf638, (1024, 640), (640, 1), 0), buf640, buf643, buf646, reinterpret_tensor(buf648, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf649, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf650, (4, 10, 77, 64), (49280, 64, 640, 1), 0), buf652, buf653, buf654, buf655, buf657, buf662, reinterpret_tensor(buf663, (1024, 640), (640, 1), 0), buf665, reinterpret_tensor(buf667, (4, 256, 2560), (1310720, 5120, 1), 2560), reinterpret_tensor(buf667, (4, 256, 2560), (1310720, 5120, 1), 0), reinterpret_tensor(buf668, (1024, 2560), (2560, 1), 0), buf670, reinterpret_tensor(buf672, (1024, 640), (640, 1), 0), buf674, buf676, buf678, buf680, buf681, buf684, buf686, buf688, buf691, buf692, buf695, buf697, buf699, buf702, buf704, reinterpret_tensor(buf705, (4, 32), (32, 1), 0), reinterpret_tensor(buf708, (4, 32), (32, 1), 0), reinterpret_tensor(buf711, (256, 1280), (1280, 1), 0), buf712, buf717, reinterpret_tensor(buf718, (256, 1280), (1280, 1), 0), buf720, buf723, buf726, reinterpret_tensor(buf728, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf729, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf730, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), buf732, buf733, buf734, buf735, buf737, buf743, reinterpret_tensor(buf744, (256, 1280), (1280, 1), 0), buf746, buf749, buf752, reinterpret_tensor(buf754, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf755, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf756, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), buf758, buf759, buf760, buf761, buf763, buf768, reinterpret_tensor(buf769, (256, 1280), (1280, 1), 0), buf771, reinterpret_tensor(buf773, (4, 64, 5120), (655360, 10240, 1), 5120), reinterpret_tensor(buf773, (4, 64, 5120), (655360, 10240, 1), 0), reinterpret_tensor(buf774, (256, 5120), (5120, 1), 0), buf776, reinterpret_tensor(buf778, (256, 1280), (1280, 1), 0), buf780, buf782, buf783, buf786, buf788, buf790, buf793, buf794, buf797, buf799, buf801, buf803, reinterpret_tensor(buf804, (4, 32), (32, 1), 0), reinterpret_tensor(buf807, (4, 32), (32, 1), 0), reinterpret_tensor(buf810, (256, 1280), (1280, 1), 0), buf811, buf816, reinterpret_tensor(buf817, (256, 1280), (1280, 1), 0), buf819, buf822, buf825, reinterpret_tensor(buf827, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf828, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf829, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), buf831, buf832, buf833, buf834, buf836, buf842, reinterpret_tensor(buf843, (256, 1280), (1280, 1), 0), buf845, buf848, buf851, reinterpret_tensor(buf853, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf854, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf855, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), buf857, buf858, buf859, buf860, buf862, buf867, reinterpret_tensor(buf868, (256, 1280), (1280, 1), 0), buf870, reinterpret_tensor(buf872, (4, 64, 5120), (655360, 10240, 1), 5120), reinterpret_tensor(buf872, (4, 64, 5120), (655360, 10240, 1), 0), reinterpret_tensor(buf873, (256, 5120), (5120, 1), 0), buf875, reinterpret_tensor(buf877, (256, 1280), (1280, 1), 0), buf879, buf881, buf883, buf885, buf886, buf889, buf891, buf893, buf896, buf897, buf900, buf902, buf904, buf906, buf907, buf910, buf912, buf914, buf917, buf918, buf921, buf923, buf925, buf927, buf928, buf931, buf933, buf935, buf938, buf939, buf942, buf944, buf946, buf948, reinterpret_tensor(buf949, (4, 32), (32, 1), 0), reinterpret_tensor(buf952, (4, 32), (32, 1), 0), reinterpret_tensor(buf955, (64, 1280), (1280, 1), 0), buf956, buf961, reinterpret_tensor(buf962, (64, 1280), (1280, 1), 0), buf964, buf967, buf970, reinterpret_tensor(buf972, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), reinterpret_tensor(buf973, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), reinterpret_tensor(buf974, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), buf976, buf977, buf978, buf979, buf981, buf987, reinterpret_tensor(buf988, (64, 1280), (1280, 1), 0), buf990, buf993, buf996, reinterpret_tensor(buf998, (4, 20, 16, 64), (20480, 64, 1280, 1), 0), reinterpret_tensor(buf999, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1000, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), buf1002, buf1003, buf1004, buf1005, buf1007, buf1012, reinterpret_tensor(buf1013, (64, 1280), (1280, 1), 0), buf1015, reinterpret_tensor(buf1017, (4, 16, 5120), (163840, 10240, 1), 5120), reinterpret_tensor(buf1017, (4, 16, 5120), (163840, 10240, 1), 0), reinterpret_tensor(buf1018, (64, 5120), (5120, 1), 0), buf1020, reinterpret_tensor(buf1022, (64, 1280), (1280, 1), 0), buf1024, buf1026, buf1027, buf1030, buf1032, buf1034, buf1037, buf1038, buf1041, buf1043, buf1045, buf1047, buf1048, buf1051, buf1053, buf1055, buf1058, buf1059, buf1062, buf1064, buf1066, buf1069, buf1071, buf1072, buf1075, buf1077, buf1079, buf1082, buf1083, buf1086, buf1088, buf1090, buf1093, buf1095, buf1096, buf1099, buf1101, buf1103, buf1106, buf1107, buf1110, buf1112, buf1114, buf1117, buf1119, buf1120, buf1122, buf1124, buf1125, buf1128, buf1130, buf1132, buf1135, buf1136, buf1139, buf1141, buf1143, buf1146, buf1148, reinterpret_tensor(buf1149, (4, 32), (32, 1), 0), reinterpret_tensor(buf1152, (4, 32), (32, 1), 0), reinterpret_tensor(buf1155, (256, 1280), (1280, 1), 0), buf1156, buf1161, reinterpret_tensor(buf1162, (256, 1280), (1280, 1), 0), buf1164, buf1167, buf1170, reinterpret_tensor(buf1172, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1173, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1174, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), buf1176, buf1177, buf1178, buf1179, buf1181, buf1187, reinterpret_tensor(buf1188, (256, 1280), (1280, 1), 0), buf1190, buf1193, buf1196, reinterpret_tensor(buf1198, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1199, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1200, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), buf1202, buf1203, buf1204, buf1205, buf1207, buf1212, reinterpret_tensor(buf1213, (256, 1280), (1280, 1), 0), buf1215, reinterpret_tensor(buf1217, (4, 64, 5120), (655360, 10240, 1), 5120), reinterpret_tensor(buf1217, (4, 64, 5120), (655360, 10240, 1), 0), reinterpret_tensor(buf1218, (256, 5120), (5120, 1), 0), buf1220, reinterpret_tensor(buf1222, (256, 1280), (1280, 1), 0), buf1224, buf1226, buf1227, buf1230, buf1232, buf1234, buf1237, buf1238, buf1241, buf1243, buf1245, buf1248, buf1250, reinterpret_tensor(buf1251, (4, 32), (32, 1), 0), reinterpret_tensor(buf1254, (4, 32), (32, 1), 0), reinterpret_tensor(buf1257, (256, 1280), (1280, 1), 0), buf1258, buf1263, reinterpret_tensor(buf1264, (256, 1280), (1280, 1), 0), buf1266, buf1269, buf1272, reinterpret_tensor(buf1274, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1275, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1276, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), buf1278, buf1279, buf1280, buf1281, buf1283, buf1289, reinterpret_tensor(buf1290, (256, 1280), (1280, 1), 0), buf1292, buf1295, buf1298, reinterpret_tensor(buf1300, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1301, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1302, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), buf1304, buf1305, buf1306, buf1307, buf1309, buf1314, reinterpret_tensor(buf1315, (256, 1280), (1280, 1), 0), buf1317, reinterpret_tensor(buf1319, (4, 64, 5120), (655360, 10240, 1), 5120), reinterpret_tensor(buf1319, (4, 64, 5120), (655360, 10240, 1), 0), reinterpret_tensor(buf1320, (256, 5120), (5120, 1), 0), buf1322, reinterpret_tensor(buf1324, (256, 1280), (1280, 1), 0), buf1326, buf1328, buf1329, buf1332, buf1334, buf1336, buf1339, buf1340, buf1343, buf1345, buf1347, buf1350, buf1352, reinterpret_tensor(buf1353, (4, 32), (32, 1), 0), reinterpret_tensor(buf1356, (4, 32), (32, 1), 0), reinterpret_tensor(buf1359, (256, 1280), (1280, 1), 0), buf1360, buf1365, reinterpret_tensor(buf1366, (256, 1280), (1280, 1), 0), buf1368, buf1371, buf1374, reinterpret_tensor(buf1376, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1377, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1378, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), buf1380, buf1381, buf1382, buf1383, buf1385, buf1391, reinterpret_tensor(buf1392, (256, 1280), (1280, 1), 0), buf1394, buf1397, buf1400, reinterpret_tensor(buf1402, (4, 20, 64, 64), (81920, 64, 1280, 1), 0), reinterpret_tensor(buf1403, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), reinterpret_tensor(buf1404, (4, 20, 77, 64), (98560, 64, 1280, 1), 0), buf1406, buf1407, buf1408, buf1409, buf1411, buf1416, reinterpret_tensor(buf1417, (256, 1280), (1280, 1), 0), buf1419, reinterpret_tensor(buf1421, (4, 64, 5120), (655360, 10240, 1), 5120), reinterpret_tensor(buf1421, (4, 64, 5120), (655360, 10240, 1), 0), reinterpret_tensor(buf1422, (256, 5120), (5120, 1), 0), buf1424, reinterpret_tensor(buf1426, (256, 1280), (1280, 1), 0), buf1428, buf1430, buf1431, buf1433, buf1435, buf1436, buf1439, buf1441, buf1443, buf1446, buf1447, buf1450, buf1452, buf1454, buf1457, buf1459, reinterpret_tensor(buf1460, (4, 32), (32, 1), 0), reinterpret_tensor(buf1463, (4, 32), (32, 1), 0), reinterpret_tensor(buf1466, (1024, 640), (640, 1), 0), buf1467, buf1472, reinterpret_tensor(buf1473, (1024, 640), (640, 1), 0), buf1475, buf1478, buf1481, reinterpret_tensor(buf1483, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1484, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1485, (4, 10, 256, 64), (163840, 64, 640, 1), 0), buf1487, buf1488, buf1489, buf1490, buf1492, buf1498, reinterpret_tensor(buf1499, (1024, 640), (640, 1), 0), buf1501, buf1504, buf1507, reinterpret_tensor(buf1509, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1510, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf1511, (4, 10, 77, 64), (49280, 64, 640, 1), 0), buf1513, buf1514, buf1515, buf1516, buf1518, buf1523, reinterpret_tensor(buf1524, (1024, 640), (640, 1), 0), buf1526, reinterpret_tensor(buf1528, (4, 256, 2560), (1310720, 5120, 1), 2560), reinterpret_tensor(buf1528, (4, 256, 2560), (1310720, 5120, 1), 0), reinterpret_tensor(buf1529, (1024, 2560), (2560, 1), 0), buf1531, reinterpret_tensor(buf1533, (1024, 640), (640, 1), 0), buf1535, buf1537, buf1538, buf1541, buf1543, buf1545, buf1548, buf1549, buf1552, buf1554, buf1556, buf1559, buf1561, reinterpret_tensor(buf1562, (4, 32), (32, 1), 0), reinterpret_tensor(buf1565, (4, 32), (32, 1), 0), reinterpret_tensor(buf1568, (1024, 640), (640, 1), 0), buf1569, buf1574, reinterpret_tensor(buf1575, (1024, 640), (640, 1), 0), buf1577, buf1580, buf1583, reinterpret_tensor(buf1585, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1586, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1587, (4, 10, 256, 64), (163840, 64, 640, 1), 0), buf1589, buf1590, buf1591, buf1592, buf1594, buf1600, reinterpret_tensor(buf1601, (1024, 640), (640, 1), 0), buf1603, buf1606, buf1609, reinterpret_tensor(buf1611, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1612, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf1613, (4, 10, 77, 64), (49280, 64, 640, 1), 0), buf1615, buf1616, buf1617, buf1618, buf1620, buf1625, reinterpret_tensor(buf1626, (1024, 640), (640, 1), 0), buf1628, reinterpret_tensor(buf1630, (4, 256, 2560), (1310720, 5120, 1), 2560), reinterpret_tensor(buf1630, (4, 256, 2560), (1310720, 5120, 1), 0), reinterpret_tensor(buf1631, (1024, 2560), (2560, 1), 0), buf1633, reinterpret_tensor(buf1635, (1024, 640), (640, 1), 0), buf1637, buf1639, buf1640, buf1643, buf1645, buf1647, buf1650, buf1651, buf1654, buf1656, buf1658, buf1661, buf1663, reinterpret_tensor(buf1664, (4, 32), (32, 1), 0), reinterpret_tensor(buf1667, (4, 32), (32, 1), 0), reinterpret_tensor(buf1670, (1024, 640), (640, 1), 0), buf1671, buf1676, reinterpret_tensor(buf1677, (1024, 640), (640, 1), 0), buf1679, buf1682, buf1685, reinterpret_tensor(buf1687, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1688, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1689, (4, 10, 256, 64), (163840, 64, 640, 1), 0), buf1691, buf1692, buf1693, buf1694, buf1696, buf1702, reinterpret_tensor(buf1703, (1024, 640), (640, 1), 0), buf1705, buf1708, buf1711, reinterpret_tensor(buf1713, (4, 10, 256, 64), (163840, 64, 640, 1), 0), reinterpret_tensor(buf1714, (4, 10, 77, 64), (49280, 64, 640, 1), 0), reinterpret_tensor(buf1715, (4, 10, 77, 64), (49280, 64, 640, 1), 0), buf1717, buf1718, buf1719, buf1720, buf1722, buf1727, reinterpret_tensor(buf1728, (1024, 640), (640, 1), 0), buf1730, reinterpret_tensor(buf1732, (4, 256, 2560), (1310720, 5120, 1), 2560), reinterpret_tensor(buf1732, (4, 256, 2560), (1310720, 5120, 1), 0), reinterpret_tensor(buf1733, (1024, 2560), (2560, 1), 0), buf1735, reinterpret_tensor(buf1737, (1024, 640), (640, 1), 0), buf1739, buf1741, buf1742, buf1744, buf1746, buf1747, buf1750, buf1752, buf1754, buf1757, buf1758, buf1761, buf1763, buf1765, buf1768, buf1770, reinterpret_tensor(buf1771, (4, 32), (32, 1), 0), reinterpret_tensor(buf1774, (4, 32), (32, 1), 0), reinterpret_tensor(buf1777, (4096, 320), (320, 1), 0), buf1778, buf1783, reinterpret_tensor(buf1784, (4096, 320), (320, 1), 0), buf1786, buf1789, buf1792, reinterpret_tensor(buf1794, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1795, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1796, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), buf1798, buf1799, buf1800, buf1801, buf1803, buf1809, reinterpret_tensor(buf1810, (4096, 320), (320, 1), 0), buf1812, buf1815, buf1818, reinterpret_tensor(buf1820, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1821, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf1822, (4, 5, 77, 64), (24640, 64, 320, 1), 0), buf1824, buf1825, buf1826, buf1827, buf1829, buf1834, reinterpret_tensor(buf1835, (4096, 320), (320, 1), 0), buf1837, reinterpret_tensor(buf1839, (4, 1024, 1280), (2621440, 2560, 1), 1280), reinterpret_tensor(buf1839, (4, 1024, 1280), (2621440, 2560, 1), 0), reinterpret_tensor(buf1840, (4096, 1280), (1280, 1), 0), buf1842, reinterpret_tensor(buf1844, (4096, 320), (320, 1), 0), buf1846, buf1848, buf1849, buf1852, buf1854, buf1856, buf1859, buf1860, buf1863, buf1865, buf1867, buf1870, buf1872, reinterpret_tensor(buf1873, (4, 32), (32, 1), 0), reinterpret_tensor(buf1876, (4, 32), (32, 1), 0), reinterpret_tensor(buf1879, (4096, 320), (320, 1), 0), buf1880, buf1885, reinterpret_tensor(buf1886, (4096, 320), (320, 1), 0), buf1888, buf1891, buf1894, reinterpret_tensor(buf1896, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1897, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1898, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), buf1900, buf1901, buf1902, buf1903, buf1905, buf1911, reinterpret_tensor(buf1912, (4096, 320), (320, 1), 0), buf1914, buf1917, buf1920, reinterpret_tensor(buf1922, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1923, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf1924, (4, 5, 77, 64), (24640, 64, 320, 1), 0), buf1926, buf1927, buf1928, buf1929, buf1931, buf1936, reinterpret_tensor(buf1937, (4096, 320), (320, 1), 0), buf1939, reinterpret_tensor(buf1941, (4, 1024, 1280), (2621440, 2560, 1), 1280), reinterpret_tensor(buf1941, (4, 1024, 1280), (2621440, 2560, 1), 0), reinterpret_tensor(buf1942, (4096, 1280), (1280, 1), 0), buf1944, reinterpret_tensor(buf1946, (4096, 320), (320, 1), 0), buf1948, buf1950, buf1951, buf1954, buf1956, buf1958, buf1961, buf1962, buf1965, buf1967, buf1969, buf1972, buf1974, reinterpret_tensor(buf1975, (4, 32), (32, 1), 0), reinterpret_tensor(buf1978, (4, 32), (32, 1), 0), reinterpret_tensor(buf1981, (4096, 320), (320, 1), 0), buf1982, buf1987, reinterpret_tensor(buf1988, (4096, 320), (320, 1), 0), buf1990, buf1993, buf1996, reinterpret_tensor(buf1998, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf1999, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf2000, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), buf2002, buf2003, buf2004, buf2005, buf2007, buf2013, reinterpret_tensor(buf2014, (4096, 320), (320, 1), 0), buf2016, buf2019, buf2022, reinterpret_tensor(buf2024, (4, 5, 1024, 64), (327680, 64, 320, 1), 0), reinterpret_tensor(buf2025, (4, 5, 77, 64), (24640, 64, 320, 1), 0), reinterpret_tensor(buf2026, (4, 5, 77, 64), (24640, 64, 320, 1), 0), buf2028, buf2029, buf2030, buf2031, buf2033, buf2038, reinterpret_tensor(buf2039, (4096, 320), (320, 1), 0), buf2041, reinterpret_tensor(buf2043, (4, 1024, 1280), (2621440, 2560, 1), 1280), reinterpret_tensor(buf2043, (4, 1024, 1280), (2621440, 2560, 1), 0), reinterpret_tensor(buf2044, (4096, 1280), (1280, 1), 0), buf2046, reinterpret_tensor(buf2048, (4096, 320), (320, 1), 0), buf2050, buf2052, buf2053, buf2056, buf2058, buf2060, primals_1369, primals_1368, primals_1366, primals_1365, primals_1364, primals_1362, primals_1361, primals_1360, primals_1358, buf2063, primals_1355, primals_1354, primals_1352, primals_1351, primals_1348, primals_1345, primals_1344, primals_1343, buf2064, primals_1340, primals_1339, primals_1337, primals_1336, primals_1335, primals_1334, primals_1333, primals_1332, primals_1331, primals_1330, primals_1329, primals_1328, buf2065, primals_1325, primals_1324, primals_1301, primals_1300, primals_1298, primals_1297, primals_1296, primals_1294, primals_1293, primals_1292, primals_1290, buf2066, primals_1287, primals_1286, primals_1284, primals_1283, primals_1280, primals_1277, primals_1276, primals_1275, buf2067, primals_1272, primals_1271, primals_1269, primals_1268, primals_1267, primals_1266, primals_1265, primals_1264, primals_1263, primals_1262, primals_1261, primals_1260, buf2068, primals_1257, primals_1256, primals_1233, primals_1232, primals_1230, primals_1229, primals_1228, primals_1226, primals_1225, primals_1224, primals_1222, buf2069, primals_1219, primals_1218, primals_1216, primals_1215, primals_1212, primals_1209, primals_1208, primals_1207, buf2070, primals_1204, primals_1203, primals_1201, primals_1200, primals_1199, primals_1198, primals_1197, primals_1196, primals_1195, primals_1194, primals_1193, primals_1192, buf2071, primals_1189, primals_1188, primals_1161, primals_1160, primals_1158, primals_1157, primals_1156, primals_1154, primals_1153, primals_1152, primals_1150, buf2072, primals_1147, primals_1146, primals_1144, primals_1143, primals_1140, primals_1137, primals_1136, primals_1135, buf2073, primals_1132, primals_1131, primals_1129, primals_1128, primals_1127, primals_1126, primals_1125, primals_1124, primals_1123, primals_1122, primals_1121, primals_1120, buf2074, primals_1117, primals_1116, primals_1093, primals_1092, primals_1090, primals_1089, primals_1088, primals_1086, primals_1085, primals_1084, primals_1082, buf2075, primals_1079, primals_1078, primals_1076, primals_1075, primals_1072, primals_1069, primals_1068, primals_1067, buf2076, primals_1064, primals_1063, primals_1061, primals_1060, primals_1059, primals_1058, primals_1057, primals_1056, primals_1055, primals_1054, primals_1053, primals_1052, buf2077, primals_1049, primals_1048, primals_1025, primals_1024, primals_1022, primals_1021, primals_1020, primals_1018, primals_1017, primals_1016, primals_1014, buf2078, primals_1011, primals_1010, primals_1008, primals_1007, primals_1004, primals_1001, primals_1000, primals_999, buf2079, primals_996, primals_995, primals_993, primals_992, primals_991, primals_990, primals_989, primals_988, primals_987, primals_986, primals_985, primals_984, buf2080, primals_981, primals_980, primals_953, primals_952, primals_950, primals_949, primals_948, primals_946, primals_945, primals_944, primals_942, buf2081, primals_939, primals_938, primals_936, primals_935, primals_932, primals_929, primals_928, primals_927, buf2082, primals_924, primals_923, primals_921, primals_920, primals_919, primals_918, primals_917, primals_916, primals_915, primals_914, primals_913, primals_912, buf2083, primals_909, primals_908, primals_885, primals_884, primals_882, primals_881, primals_880, primals_878, primals_877, primals_876, primals_874, buf2084, primals_871, primals_870, primals_868, primals_867, primals_864, primals_861, primals_860, primals_859, buf2085, primals_856, primals_855, primals_853, primals_852, primals_851, primals_850, primals_849, primals_848, primals_847, primals_846, primals_845, primals_844, buf2086, primals_841, primals_840, primals_817, primals_816, primals_814, primals_813, primals_812, primals_810, primals_809, primals_808, primals_806, buf2087, primals_803, primals_802, primals_800, primals_799, primals_796, primals_793, primals_792, primals_791, buf2088, primals_788, primals_787, primals_785, primals_784, primals_783, primals_782, primals_781, primals_780, primals_779, primals_778, primals_777, primals_776, buf2089, primals_773, primals_772, primals_677, primals_676, primals_674, primals_673, primals_672, primals_670, primals_669, primals_668, primals_666, buf2090, primals_663, primals_662, primals_660, primals_659, primals_656, primals_653, primals_652, primals_651, buf2091, primals_648, primals_647, primals_645, primals_644, primals_643, primals_642, primals_641, primals_640, primals_639, primals_638, primals_637, primals_636, buf2092, primals_633, primals_632, primals_581, primals_580, primals_578, primals_577, primals_576, primals_574, primals_573, primals_572, primals_570, buf2093, primals_567, primals_566, primals_564, primals_563, primals_560, primals_557, primals_556, primals_555, buf2094, primals_552, primals_551, primals_549, primals_548, primals_547, primals_546, primals_545, primals_544, primals_543, primals_542, primals_541, primals_540, buf2095, primals_537, primals_536, primals_517, primals_516, primals_514, primals_513, primals_512, primals_510, primals_509, primals_508, primals_506, buf2096, primals_503, primals_502, primals_500, primals_499, primals_496, primals_493, primals_492, primals_491, buf2097, primals_488, primals_487, primals_485, primals_484, primals_483, primals_482, primals_481, primals_480, primals_479, primals_478, primals_477, primals_476, buf2098, primals_473, primals_472, primals_445, primals_444, primals_442, primals_441, primals_440, primals_438, primals_437, primals_436, primals_434, buf2099, primals_431, primals_430, primals_428, primals_427, primals_424, primals_421, primals_420, primals_419, buf2100, primals_416, primals_415, primals_413, primals_412, primals_411, primals_410, primals_409, primals_408, primals_407, primals_406, primals_405, primals_404, buf2101, primals_401, primals_400, primals_381, primals_380, primals_378, primals_377, primals_376, primals_374, primals_373, primals_372, primals_370, buf2102, primals_367, primals_366, primals_364, primals_363, primals_360, primals_357, primals_356, primals_355, buf2103, primals_352, primals_351, primals_349, primals_348, primals_347, primals_346, primals_345, primals_344, primals_343, primals_342, primals_341, primals_340, buf2104, primals_337, primals_336, primals_309, primals_308, primals_306, primals_305, primals_304, primals_302, primals_301, primals_300, primals_298, buf2105, primals_295, primals_294, primals_292, primals_291, primals_288, primals_285, primals_284, primals_283, buf2106, primals_280, primals_279, primals_277, primals_276, primals_275, primals_274, primals_273, primals_272, primals_271, primals_270, primals_269, primals_268, buf2107, primals_265, primals_264, primals_245, primals_244, primals_242, primals_241, primals_240, primals_238, primals_237, primals_236, primals_234, buf2108, primals_231, primals_230, primals_228, primals_227, primals_224, primals_221, primals_220, primals_219, buf2109, primals_216, primals_215, primals_213, primals_212, primals_211, primals_210, primals_209, primals_208, primals_207, primals_206, primals_205, primals_204, buf2110, primals_201, primals_200, primals_151, primals_150, primals_148, primals_147, primals_146, primals_143, primals_142, primals_139, primals_138, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((4, 3, 256, 256), (196608, 65536, 256, 1), device='cuda:0', dtype=torch.float32)
    primals_2 = rand_strided((128, 3, 3, 3), (27, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_3 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_4 = rand_strided((4, 3, 3, 3), (27, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_5 = rand_strided((128, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_6 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_7 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_8 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_9 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_10 = rand_strided((4, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_11 = rand_strided((128, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_12 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_13 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_14 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_15 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_16 = rand_strided((4, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_17 = rand_strided((128, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_18 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_19 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_20 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_21 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_22 = rand_strided((4, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_23 = rand_strided((128, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_24 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_25 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_26 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_27 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_28 = rand_strided((4, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_29 = rand_strided((128, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_30 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_31 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_32 = rand_strided((4, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_33 = rand_strided((128, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_34 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_35 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_36 = rand_strided((256, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_37 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_38 = rand_strided((4, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_39 = rand_strided((256, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_40 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_41 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_42 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_43 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_44 = rand_strided((4, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_45 = rand_strided((256, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_46 = rand_strided((256, 128, 1, 1), (128, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_47 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_48 = rand_strided((4, 128, 1, 1), (128, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_49 = rand_strided((256, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_50 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_51 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_52 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_53 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_54 = rand_strided((4, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_55 = rand_strided((256, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_56 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_57 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_58 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_59 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_60 = rand_strided((4, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_61 = rand_strided((256, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_62 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_63 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_64 = rand_strided((4, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_65 = rand_strided((256, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_66 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_67 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_68 = rand_strided((512, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_69 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_70 = rand_strided((4, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_71 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_72 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_73 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_74 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_75 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_76 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_77 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_78 = rand_strided((512, 256, 1, 1), (256, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_79 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_80 = rand_strided((4, 256, 1, 1), (256, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_81 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_82 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_83 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_84 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_85 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_86 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_87 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_88 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_89 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_90 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_91 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_92 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_93 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_94 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_95 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_96 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_97 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_98 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_99 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_100 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_101 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_102 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_103 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_104 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_105 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_106 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_107 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_108 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_109 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_110 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_111 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_112 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_113 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_114 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_115 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_116 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_117 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_118 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_119 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_120 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_121 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_122 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_123 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_124 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_125 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_126 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_127 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_128 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_129 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_130 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_131 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_132 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_133 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_134 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_135 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_136 = rand_strided((512, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_137 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_138 = rand_strided((4, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_139 = rand_strided((512, 4), (4, 1), device='cuda:0', dtype=torch.float32)
    primals_140 = rand_strided((512, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_141 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_142 = rand_strided((4, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_143 = rand_strided((512, 4), (4, 1), device='cuda:0', dtype=torch.float32)
    primals_144 = rand_strided((512, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_145 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_146 = rand_strided((4, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_147 = rand_strided((512, 4), (4, 1), device='cuda:0', dtype=torch.float32)
    primals_148 = rand_strided((512, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_149 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_150 = rand_strided((4, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_151 = rand_strided((512, 4), (4, 1), device='cuda:0', dtype=torch.float32)
    primals_152 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_153 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_154 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_155 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_156 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_157 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_158 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_159 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_160 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_161 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_162 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_163 = rand_strided((512, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_164 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_165 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_166 = rand_strided((8, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_167 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_168 = rand_strided((4, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_169 = rand_strided((8, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_170 = rand_strided((8, 8, 1, 1), (8, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_171 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_172 = rand_strided((1, ), (1, ), device='cuda:0', dtype=torch.int64)
    primals_173 = rand_strided((1280, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_174 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_175 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_176 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_177 = rand_strided((4, 77, 1024), (78848, 1024, 1), device='cuda:0', dtype=torch.float32)
    primals_178 = rand_strided((320, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_179 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_180 = rand_strided((80, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_181 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_182 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_183 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_184 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_185 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_186 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_187 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_188 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_189 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_190 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_191 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_192 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_193 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_194 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_195 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_196 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_197 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_198 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_199 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_200 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_201 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_202 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_203 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_204 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_205 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_206 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_207 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_208 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_209 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_210 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_211 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_212 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_213 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_214 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_215 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_216 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_217 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_218 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_219 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_220 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_221 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_222 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_223 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_224 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_225 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_226 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_227 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_228 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_229 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_230 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_231 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_232 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_233 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_234 = rand_strided((2560, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_235 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_236 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_237 = rand_strided((2560, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_238 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_239 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_240 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_241 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_242 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_243 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_244 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_245 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_246 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_247 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_248 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_249 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_250 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_251 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_252 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_253 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_254 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_255 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_256 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_257 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_258 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_259 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_260 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_261 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_262 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_263 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_264 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_265 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_266 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_267 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_268 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_269 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_270 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_271 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_272 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_273 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_274 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_275 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_276 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_277 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_278 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_279 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_280 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_281 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_282 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_283 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_284 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_285 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_286 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_287 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_288 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_289 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_290 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_291 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_292 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_293 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_294 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_295 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_296 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_297 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_298 = rand_strided((2560, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_299 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_300 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_301 = rand_strided((2560, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_302 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_303 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_304 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_305 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_306 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_307 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_308 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_309 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_310 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_311 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_312 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_313 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_314 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_315 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_316 = rand_strided((640, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_317 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_318 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_319 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_320 = rand_strided((640, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_321 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_322 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_323 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_324 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_325 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_326 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_327 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_328 = rand_strided((640, 320, 1, 1), (320, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_329 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_330 = rand_strided((80, 320, 1, 1), (320, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_331 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_332 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_333 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_334 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_335 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_336 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_337 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_338 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_339 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_340 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_341 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_342 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_343 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_344 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_345 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_346 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_347 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_348 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_349 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_350 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_351 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_352 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_353 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_354 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_355 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_356 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_357 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_358 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_359 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_360 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_361 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_362 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_363 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_364 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_365 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_366 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_367 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_368 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_369 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_370 = rand_strided((5120, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_371 = rand_strided((5120, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_372 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_373 = rand_strided((5120, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_374 = rand_strided((640, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_375 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_376 = rand_strided((80, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_377 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_378 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_379 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_380 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_381 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_382 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_383 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_384 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_385 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_386 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_387 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_388 = rand_strided((640, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_389 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_390 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_391 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_392 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_393 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_394 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_395 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_396 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_397 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_398 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_399 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_400 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_401 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_402 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_403 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_404 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_405 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_406 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_407 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_408 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_409 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_410 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_411 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_412 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_413 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_414 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_415 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_416 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_417 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_418 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_419 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_420 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_421 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_422 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_423 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_424 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_425 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_426 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_427 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_428 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_429 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_430 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_431 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_432 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_433 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_434 = rand_strided((5120, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_435 = rand_strided((5120, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_436 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_437 = rand_strided((5120, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_438 = rand_strided((640, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_439 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_440 = rand_strided((80, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_441 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_442 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_443 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_444 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_445 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_446 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_447 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_448 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_449 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_450 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_451 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_452 = rand_strided((1280, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_453 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_454 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_455 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_456 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_457 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_458 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_459 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_460 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_461 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_462 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_463 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_464 = rand_strided((1280, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_465 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_466 = rand_strided((80, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_467 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_468 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_469 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_470 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_471 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_472 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_473 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_474 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_475 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_476 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_477 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_478 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_479 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_480 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_481 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_482 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_483 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_484 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_485 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_486 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_487 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_488 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_489 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_490 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_491 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_492 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_493 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_494 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_495 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_496 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_497 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_498 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_499 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_500 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_501 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_502 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_503 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_504 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_505 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_506 = rand_strided((10240, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_507 = rand_strided((10240, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_508 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_509 = rand_strided((10240, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_510 = rand_strided((1280, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_511 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_512 = rand_strided((80, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_513 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_514 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_515 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_516 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_517 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_518 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_519 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_520 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_521 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_522 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_523 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_524 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_525 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_526 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_527 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_528 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_529 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_530 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_531 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_532 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_533 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_534 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_535 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_536 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_537 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_538 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_539 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_540 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_541 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_542 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_543 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_544 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_545 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_546 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_547 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_548 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_549 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_550 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_551 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_552 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_553 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_554 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_555 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_556 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_557 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_558 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_559 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_560 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_561 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_562 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_563 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_564 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_565 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_566 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_567 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_568 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_569 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_570 = rand_strided((10240, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_571 = rand_strided((10240, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_572 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_573 = rand_strided((10240, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_574 = rand_strided((1280, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_575 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_576 = rand_strided((80, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_577 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_578 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_579 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_580 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_581 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_582 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_583 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_584 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_585 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_586 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_587 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_588 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_589 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_590 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_591 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_592 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_593 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_594 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_595 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_596 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_597 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_598 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_599 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_600 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_601 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_602 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_603 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_604 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_605 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_606 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_607 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_608 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_609 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_610 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_611 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_612 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_613 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_614 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_615 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_616 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_617 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_618 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_619 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_620 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_621 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_622 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_623 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_624 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_625 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_626 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_627 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_628 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_629 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_630 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_631 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_632 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_633 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_634 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_635 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_636 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_637 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_638 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_639 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_640 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_641 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_642 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_643 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_644 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_645 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_646 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_647 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_648 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_649 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_650 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_651 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_652 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_653 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_654 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_655 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_656 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_657 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_658 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_659 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_660 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_661 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_662 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_663 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_664 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_665 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_666 = rand_strided((10240, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_667 = rand_strided((10240, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_668 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_669 = rand_strided((10240, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_670 = rand_strided((1280, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_671 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_672 = rand_strided((80, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_673 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_674 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_675 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_676 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_677 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_678 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_679 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_680 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_681 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_682 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_683 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_684 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_685 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_686 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_687 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_688 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_689 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_690 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_691 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_692 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_693 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_694 = rand_strided((1280, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_695 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_696 = rand_strided((80, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_697 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_698 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_699 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_700 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_701 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_702 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_703 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_704 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_705 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_706 = rand_strided((1280, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_707 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_708 = rand_strided((80, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_709 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_710 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_711 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_712 = rand_strided((1280, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_713 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_714 = rand_strided((80, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_715 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_716 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_717 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_718 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_719 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_720 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_721 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_722 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_723 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_724 = rand_strided((1280, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_725 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_726 = rand_strided((80, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_727 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_728 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_729 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_730 = rand_strided((1280, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_731 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_732 = rand_strided((80, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_733 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_734 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_735 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_736 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_737 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_738 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_739 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_740 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_741 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_742 = rand_strided((1280, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_743 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_744 = rand_strided((80, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_745 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_746 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_747 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_748 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_749 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_750 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_751 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_752 = rand_strided((1280, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_753 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_754 = rand_strided((80, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_755 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_756 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_757 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_758 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_759 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_760 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_761 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_762 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_763 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_764 = rand_strided((1280, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_765 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_766 = rand_strided((80, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_767 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_768 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_769 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_770 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_771 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_772 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_773 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_774 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_775 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_776 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_777 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_778 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_779 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_780 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_781 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_782 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_783 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_784 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_785 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_786 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_787 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_788 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_789 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_790 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_791 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_792 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_793 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_794 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_795 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_796 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_797 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_798 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_799 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_800 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_801 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_802 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_803 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_804 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_805 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_806 = rand_strided((10240, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_807 = rand_strided((10240, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_808 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_809 = rand_strided((10240, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_810 = rand_strided((1280, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_811 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_812 = rand_strided((80, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_813 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_814 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_815 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_816 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_817 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_818 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_819 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_820 = rand_strided((1280, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_821 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_822 = rand_strided((80, 2560, 3, 3), (23040, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_823 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_824 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_825 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_826 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_827 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_828 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_829 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_830 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_831 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_832 = rand_strided((1280, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_833 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_834 = rand_strided((80, 2560, 1, 1), (2560, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_835 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_836 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_837 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_838 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_839 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_840 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_841 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_842 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_843 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_844 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_845 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_846 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_847 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_848 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_849 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_850 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_851 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_852 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_853 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_854 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_855 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_856 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_857 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_858 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_859 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_860 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_861 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_862 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_863 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_864 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_865 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_866 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_867 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_868 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_869 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_870 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_871 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_872 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_873 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_874 = rand_strided((10240, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_875 = rand_strided((10240, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_876 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_877 = rand_strided((10240, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_878 = rand_strided((1280, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_879 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_880 = rand_strided((80, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_881 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_882 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_883 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_884 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_885 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_886 = rand_strided((1920, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_887 = rand_strided((1920, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_888 = rand_strided((1280, 1920, 3, 3), (17280, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_889 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_890 = rand_strided((80, 1920, 3, 3), (17280, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_891 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_892 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_893 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_894 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_895 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_896 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_897 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_898 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_899 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_900 = rand_strided((1280, 1920, 1, 1), (1920, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_901 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_902 = rand_strided((80, 1920, 1, 1), (1920, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_903 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_904 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_905 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_906 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_907 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_908 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_909 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_910 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_911 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_912 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_913 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_914 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_915 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_916 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_917 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_918 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_919 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_920 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_921 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_922 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_923 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_924 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_925 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_926 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_927 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_928 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_929 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_930 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_931 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_932 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_933 = rand_strided((1280, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_934 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_935 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_936 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_937 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_938 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_939 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_940 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_941 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_942 = rand_strided((10240, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_943 = rand_strided((10240, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_944 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_945 = rand_strided((10240, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_946 = rand_strided((1280, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_947 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_948 = rand_strided((80, 5120), (5120, 1), device='cuda:0', dtype=torch.float32)
    primals_949 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_950 = rand_strided((1280, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_951 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_952 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_953 = rand_strided((1280, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_954 = rand_strided((1280, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_955 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_956 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_957 = rand_strided((1280, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_958 = rand_strided((1920, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_959 = rand_strided((1920, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_960 = rand_strided((640, 1920, 3, 3), (17280, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_961 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_962 = rand_strided((80, 1920, 3, 3), (17280, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_963 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_964 = rand_strided((640, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_965 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_966 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_967 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_968 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_969 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_970 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_971 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_972 = rand_strided((640, 1920, 1, 1), (1920, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_973 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_974 = rand_strided((80, 1920, 1, 1), (1920, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_975 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_976 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_977 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_978 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_979 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_980 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_981 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_982 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_983 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_984 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_985 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_986 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_987 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_988 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_989 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_990 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_991 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_992 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_993 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_994 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_995 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_996 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_997 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_998 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_999 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1000 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1001 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1002 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1003 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1004 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1005 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1006 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1007 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1008 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1009 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1010 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1011 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1012 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1013 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1014 = rand_strided((5120, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1015 = rand_strided((5120, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1016 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1017 = rand_strided((5120, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1018 = rand_strided((640, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_1019 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1020 = rand_strided((80, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_1021 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1022 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1023 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1024 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1025 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1026 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1027 = rand_strided((1280, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1028 = rand_strided((640, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1029 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1030 = rand_strided((80, 1280, 3, 3), (11520, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1031 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1032 = rand_strided((640, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1033 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1034 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1035 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1036 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1037 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1038 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1039 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1040 = rand_strided((640, 1280, 1, 1), (1280, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1041 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1042 = rand_strided((80, 1280, 1, 1), (1280, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1043 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1044 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1045 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1046 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1047 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1048 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1049 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1050 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1051 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1052 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1053 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1054 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1055 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1056 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1057 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1058 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1059 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1060 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1061 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1062 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1063 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1064 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1065 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1066 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1067 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1068 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1069 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1070 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1071 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1072 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1073 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1074 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1075 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1076 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1077 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1078 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1079 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1080 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1081 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1082 = rand_strided((5120, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1083 = rand_strided((5120, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1084 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1085 = rand_strided((5120, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1086 = rand_strided((640, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_1087 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1088 = rand_strided((80, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_1089 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1090 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1091 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1092 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1093 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1094 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1095 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1096 = rand_strided((640, 960, 3, 3), (8640, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1097 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1098 = rand_strided((80, 960, 3, 3), (8640, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1099 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1100 = rand_strided((640, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1101 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1102 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1103 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1104 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1105 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1106 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1107 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1108 = rand_strided((640, 960, 1, 1), (960, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1109 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1110 = rand_strided((80, 960, 1, 1), (960, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1111 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1112 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1113 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1114 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1115 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1116 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1117 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1118 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1119 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1120 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1121 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1122 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1123 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1124 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1125 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1126 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1127 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1128 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1129 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1130 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1131 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1132 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1133 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1134 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1135 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1136 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1137 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1138 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1139 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1140 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1141 = rand_strided((640, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1142 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1143 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1144 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1145 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1146 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1147 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1148 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1149 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1150 = rand_strided((5120, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1151 = rand_strided((5120, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1152 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1153 = rand_strided((5120, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1154 = rand_strided((640, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_1155 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1156 = rand_strided((80, 2560), (2560, 1), device='cuda:0', dtype=torch.float32)
    primals_1157 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1158 = rand_strided((640, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1159 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1160 = rand_strided((80, 640), (640, 1), device='cuda:0', dtype=torch.float32)
    primals_1161 = rand_strided((640, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1162 = rand_strided((640, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1163 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1164 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1165 = rand_strided((640, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1166 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1167 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1168 = rand_strided((320, 960, 3, 3), (8640, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1169 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1170 = rand_strided((80, 960, 3, 3), (8640, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1171 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1172 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1173 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1174 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1175 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1176 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1177 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1178 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1179 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1180 = rand_strided((320, 960, 1, 1), (960, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1181 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1182 = rand_strided((80, 960, 1, 1), (960, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1183 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1184 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1185 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1186 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1187 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1188 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1189 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1190 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1191 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1192 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1193 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1194 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1195 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1196 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1197 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1198 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1199 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1200 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1201 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1202 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1203 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1204 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1205 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1206 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1207 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1208 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1209 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1210 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1211 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1212 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1213 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1214 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1215 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1216 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1217 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1218 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1219 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1220 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1221 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1222 = rand_strided((2560, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1223 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1224 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1225 = rand_strided((2560, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1226 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1227 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1228 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1229 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1230 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1231 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1232 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1233 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1234 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1235 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1236 = rand_strided((320, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1237 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1238 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1239 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1240 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1241 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1242 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1243 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1244 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1245 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1246 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1247 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1248 = rand_strided((320, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1249 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1250 = rand_strided((80, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1251 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1252 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1253 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1254 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1255 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1256 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1257 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1258 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1259 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1260 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1261 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1262 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1263 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1264 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1265 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1266 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1267 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1268 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1269 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1270 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1271 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1272 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1273 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1274 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1275 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1276 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1277 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1278 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1279 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1280 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1281 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1282 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1283 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1284 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1285 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1286 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1287 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1288 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1289 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1290 = rand_strided((2560, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1291 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1292 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1293 = rand_strided((2560, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1294 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1295 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1296 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1297 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1298 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1299 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1300 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1301 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1302 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1303 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1304 = rand_strided((320, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1305 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1306 = rand_strided((80, 640, 3, 3), (5760, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1307 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1308 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1309 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1310 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1311 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1312 = rand_strided((320, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1313 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1314 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1315 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1316 = rand_strided((320, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1317 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1318 = rand_strided((80, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1319 = rand_strided((320, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_1320 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1321 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1322 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1323 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1324 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1325 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1326 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1327 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1328 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1329 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1330 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1331 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1332 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1333 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1334 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1335 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1336 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1337 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1338 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1339 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1340 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1341 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1342 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1343 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1344 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1345 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1346 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1347 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1348 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1349 = rand_strided((320, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1350 = rand_strided((80, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    primals_1351 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1352 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1353 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1354 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1355 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1356 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1357 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1358 = rand_strided((2560, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1359 = rand_strided((2560, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1360 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1361 = rand_strided((2560, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1362 = rand_strided((320, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1363 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1364 = rand_strided((80, 1280), (1280, 1), device='cuda:0', dtype=torch.float32)
    primals_1365 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1366 = rand_strided((320, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1367 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1368 = rand_strided((80, 320), (320, 1), device='cuda:0', dtype=torch.float32)
    primals_1369 = rand_strided((320, 80), (80, 1), device='cuda:0', dtype=torch.float32)
    primals_1370 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1371 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1372 = rand_strided((4, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1373 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_1374 = rand_strided((80, 320, 3, 3), (2880, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_1375 = rand_strided((4, 80, 1, 1), (80, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_128, primals_129, primals_130, primals_131, primals_132, primals_133, primals_134, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_144, primals_145, primals_146, primals_147, primals_148, primals_149, primals_150, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_160, primals_161, primals_162, primals_163, primals_164, primals_165, primals_166, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_176, primals_177, primals_178, primals_179, primals_180, primals_181, primals_182, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_192, primals_193, primals_194, primals_195, primals_196, primals_197, primals_198, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_208, primals_209, primals_210, primals_211, primals_212, primals_213, primals_214, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_224, primals_225, primals_226, primals_227, primals_228, primals_229, primals_230, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_240, primals_241, primals_242, primals_243, primals_244, primals_245, primals_246, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_256, primals_257, primals_258, primals_259, primals_260, primals_261, primals_262, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_272, primals_273, primals_274, primals_275, primals_276, primals_277, primals_278, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_288, primals_289, primals_290, primals_291, primals_292, primals_293, primals_294, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_304, primals_305, primals_306, primals_307, primals_308, primals_309, primals_310, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_320, primals_321, primals_322, primals_323, primals_324, primals_325, primals_326, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_336, primals_337, primals_338, primals_339, primals_340, primals_341, primals_342, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_352, primals_353, primals_354, primals_355, primals_356, primals_357, primals_358, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_368, primals_369, primals_370, primals_371, primals_372, primals_373, primals_374, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_384, primals_385, primals_386, primals_387, primals_388, primals_389, primals_390, primals_391, primals_392, primals_393, primals_394, primals_395, primals_396, primals_397, primals_398, primals_399, primals_400, primals_401, primals_402, primals_403, primals_404, primals_405, primals_406, primals_407, primals_408, primals_409, primals_410, primals_411, primals_412, primals_413, primals_414, primals_415, primals_416, primals_417, primals_418, primals_419, primals_420, primals_421, primals_422, primals_423, primals_424, primals_425, primals_426, primals_427, primals_428, primals_429, primals_430, primals_431, primals_432, primals_433, primals_434, primals_435, primals_436, primals_437, primals_438, primals_439, primals_440, primals_441, primals_442, primals_443, primals_444, primals_445, primals_446, primals_447, primals_448, primals_449, primals_450, primals_451, primals_452, primals_453, primals_454, primals_455, primals_456, primals_457, primals_458, primals_459, primals_460, primals_461, primals_462, primals_463, primals_464, primals_465, primals_466, primals_467, primals_468, primals_469, primals_470, primals_471, primals_472, primals_473, primals_474, primals_475, primals_476, primals_477, primals_478, primals_479, primals_480, primals_481, primals_482, primals_483, primals_484, primals_485, primals_486, primals_487, primals_488, primals_489, primals_490, primals_491, primals_492, primals_493, primals_494, primals_495, primals_496, primals_497, primals_498, primals_499, primals_500, primals_501, primals_502, primals_503, primals_504, primals_505, primals_506, primals_507, primals_508, primals_509, primals_510, primals_511, primals_512, primals_513, primals_514, primals_515, primals_516, primals_517, primals_518, primals_519, primals_520, primals_521, primals_522, primals_523, primals_524, primals_525, primals_526, primals_527, primals_528, primals_529, primals_530, primals_531, primals_532, primals_533, primals_534, primals_535, primals_536, primals_537, primals_538, primals_539, primals_540, primals_541, primals_542, primals_543, primals_544, primals_545, primals_546, primals_547, primals_548, primals_549, primals_550, primals_551, primals_552, primals_553, primals_554, primals_555, primals_556, primals_557, primals_558, primals_559, primals_560, primals_561, primals_562, primals_563, primals_564, primals_565, primals_566, primals_567, primals_568, primals_569, primals_570, primals_571, primals_572, primals_573, primals_574, primals_575, primals_576, primals_577, primals_578, primals_579, primals_580, primals_581, primals_582, primals_583, primals_584, primals_585, primals_586, primals_587, primals_588, primals_589, primals_590, primals_591, primals_592, primals_593, primals_594, primals_595, primals_596, primals_597, primals_598, primals_599, primals_600, primals_601, primals_602, primals_603, primals_604, primals_605, primals_606, primals_607, primals_608, primals_609, primals_610, primals_611, primals_612, primals_613, primals_614, primals_615, primals_616, primals_617, primals_618, primals_619, primals_620, primals_621, primals_622, primals_623, primals_624, primals_625, primals_626, primals_627, primals_628, primals_629, primals_630, primals_631, primals_632, primals_633, primals_634, primals_635, primals_636, primals_637, primals_638, primals_639, primals_640, primals_641, primals_642, primals_643, primals_644, primals_645, primals_646, primals_647, primals_648, primals_649, primals_650, primals_651, primals_652, primals_653, primals_654, primals_655, primals_656, primals_657, primals_658, primals_659, primals_660, primals_661, primals_662, primals_663, primals_664, primals_665, primals_666, primals_667, primals_668, primals_669, primals_670, primals_671, primals_672, primals_673, primals_674, primals_675, primals_676, primals_677, primals_678, primals_679, primals_680, primals_681, primals_682, primals_683, primals_684, primals_685, primals_686, primals_687, primals_688, primals_689, primals_690, primals_691, primals_692, primals_693, primals_694, primals_695, primals_696, primals_697, primals_698, primals_699, primals_700, primals_701, primals_702, primals_703, primals_704, primals_705, primals_706, primals_707, primals_708, primals_709, primals_710, primals_711, primals_712, primals_713, primals_714, primals_715, primals_716, primals_717, primals_718, primals_719, primals_720, primals_721, primals_722, primals_723, primals_724, primals_725, primals_726, primals_727, primals_728, primals_729, primals_730, primals_731, primals_732, primals_733, primals_734, primals_735, primals_736, primals_737, primals_738, primals_739, primals_740, primals_741, primals_742, primals_743, primals_744, primals_745, primals_746, primals_747, primals_748, primals_749, primals_750, primals_751, primals_752, primals_753, primals_754, primals_755, primals_756, primals_757, primals_758, primals_759, primals_760, primals_761, primals_762, primals_763, primals_764, primals_765, primals_766, primals_767, primals_768, primals_769, primals_770, primals_771, primals_772, primals_773, primals_774, primals_775, primals_776, primals_777, primals_778, primals_779, primals_780, primals_781, primals_782, primals_783, primals_784, primals_785, primals_786, primals_787, primals_788, primals_789, primals_790, primals_791, primals_792, primals_793, primals_794, primals_795, primals_796, primals_797, primals_798, primals_799, primals_800, primals_801, primals_802, primals_803, primals_804, primals_805, primals_806, primals_807, primals_808, primals_809, primals_810, primals_811, primals_812, primals_813, primals_814, primals_815, primals_816, primals_817, primals_818, primals_819, primals_820, primals_821, primals_822, primals_823, primals_824, primals_825, primals_826, primals_827, primals_828, primals_829, primals_830, primals_831, primals_832, primals_833, primals_834, primals_835, primals_836, primals_837, primals_838, primals_839, primals_840, primals_841, primals_842, primals_843, primals_844, primals_845, primals_846, primals_847, primals_848, primals_849, primals_850, primals_851, primals_852, primals_853, primals_854, primals_855, primals_856, primals_857, primals_858, primals_859, primals_860, primals_861, primals_862, primals_863, primals_864, primals_865, primals_866, primals_867, primals_868, primals_869, primals_870, primals_871, primals_872, primals_873, primals_874, primals_875, primals_876, primals_877, primals_878, primals_879, primals_880, primals_881, primals_882, primals_883, primals_884, primals_885, primals_886, primals_887, primals_888, primals_889, primals_890, primals_891, primals_892, primals_893, primals_894, primals_895, primals_896, primals_897, primals_898, primals_899, primals_900, primals_901, primals_902, primals_903, primals_904, primals_905, primals_906, primals_907, primals_908, primals_909, primals_910, primals_911, primals_912, primals_913, primals_914, primals_915, primals_916, primals_917, primals_918, primals_919, primals_920, primals_921, primals_922, primals_923, primals_924, primals_925, primals_926, primals_927, primals_928, primals_929, primals_930, primals_931, primals_932, primals_933, primals_934, primals_935, primals_936, primals_937, primals_938, primals_939, primals_940, primals_941, primals_942, primals_943, primals_944, primals_945, primals_946, primals_947, primals_948, primals_949, primals_950, primals_951, primals_952, primals_953, primals_954, primals_955, primals_956, primals_957, primals_958, primals_959, primals_960, primals_961, primals_962, primals_963, primals_964, primals_965, primals_966, primals_967, primals_968, primals_969, primals_970, primals_971, primals_972, primals_973, primals_974, primals_975, primals_976, primals_977, primals_978, primals_979, primals_980, primals_981, primals_982, primals_983, primals_984, primals_985, primals_986, primals_987, primals_988, primals_989, primals_990, primals_991, primals_992, primals_993, primals_994, primals_995, primals_996, primals_997, primals_998, primals_999, primals_1000, primals_1001, primals_1002, primals_1003, primals_1004, primals_1005, primals_1006, primals_1007, primals_1008, primals_1009, primals_1010, primals_1011, primals_1012, primals_1013, primals_1014, primals_1015, primals_1016, primals_1017, primals_1018, primals_1019, primals_1020, primals_1021, primals_1022, primals_1023, primals_1024, primals_1025, primals_1026, primals_1027, primals_1028, primals_1029, primals_1030, primals_1031, primals_1032, primals_1033, primals_1034, primals_1035, primals_1036, primals_1037, primals_1038, primals_1039, primals_1040, primals_1041, primals_1042, primals_1043, primals_1044, primals_1045, primals_1046, primals_1047, primals_1048, primals_1049, primals_1050, primals_1051, primals_1052, primals_1053, primals_1054, primals_1055, primals_1056, primals_1057, primals_1058, primals_1059, primals_1060, primals_1061, primals_1062, primals_1063, primals_1064, primals_1065, primals_1066, primals_1067, primals_1068, primals_1069, primals_1070, primals_1071, primals_1072, primals_1073, primals_1074, primals_1075, primals_1076, primals_1077, primals_1078, primals_1079, primals_1080, primals_1081, primals_1082, primals_1083, primals_1084, primals_1085, primals_1086, primals_1087, primals_1088, primals_1089, primals_1090, primals_1091, primals_1092, primals_1093, primals_1094, primals_1095, primals_1096, primals_1097, primals_1098, primals_1099, primals_1100, primals_1101, primals_1102, primals_1103, primals_1104, primals_1105, primals_1106, primals_1107, primals_1108, primals_1109, primals_1110, primals_1111, primals_1112, primals_1113, primals_1114, primals_1115, primals_1116, primals_1117, primals_1118, primals_1119, primals_1120, primals_1121, primals_1122, primals_1123, primals_1124, primals_1125, primals_1126, primals_1127, primals_1128, primals_1129, primals_1130, primals_1131, primals_1132, primals_1133, primals_1134, primals_1135, primals_1136, primals_1137, primals_1138, primals_1139, primals_1140, primals_1141, primals_1142, primals_1143, primals_1144, primals_1145, primals_1146, primals_1147, primals_1148, primals_1149, primals_1150, primals_1151, primals_1152, primals_1153, primals_1154, primals_1155, primals_1156, primals_1157, primals_1158, primals_1159, primals_1160, primals_1161, primals_1162, primals_1163, primals_1164, primals_1165, primals_1166, primals_1167, primals_1168, primals_1169, primals_1170, primals_1171, primals_1172, primals_1173, primals_1174, primals_1175, primals_1176, primals_1177, primals_1178, primals_1179, primals_1180, primals_1181, primals_1182, primals_1183, primals_1184, primals_1185, primals_1186, primals_1187, primals_1188, primals_1189, primals_1190, primals_1191, primals_1192, primals_1193, primals_1194, primals_1195, primals_1196, primals_1197, primals_1198, primals_1199, primals_1200, primals_1201, primals_1202, primals_1203, primals_1204, primals_1205, primals_1206, primals_1207, primals_1208, primals_1209, primals_1210, primals_1211, primals_1212, primals_1213, primals_1214, primals_1215, primals_1216, primals_1217, primals_1218, primals_1219, primals_1220, primals_1221, primals_1222, primals_1223, primals_1224, primals_1225, primals_1226, primals_1227, primals_1228, primals_1229, primals_1230, primals_1231, primals_1232, primals_1233, primals_1234, primals_1235, primals_1236, primals_1237, primals_1238, primals_1239, primals_1240, primals_1241, primals_1242, primals_1243, primals_1244, primals_1245, primals_1246, primals_1247, primals_1248, primals_1249, primals_1250, primals_1251, primals_1252, primals_1253, primals_1254, primals_1255, primals_1256, primals_1257, primals_1258, primals_1259, primals_1260, primals_1261, primals_1262, primals_1263, primals_1264, primals_1265, primals_1266, primals_1267, primals_1268, primals_1269, primals_1270, primals_1271, primals_1272, primals_1273, primals_1274, primals_1275, primals_1276, primals_1277, primals_1278, primals_1279, primals_1280, primals_1281, primals_1282, primals_1283, primals_1284, primals_1285, primals_1286, primals_1287, primals_1288, primals_1289, primals_1290, primals_1291, primals_1292, primals_1293, primals_1294, primals_1295, primals_1296, primals_1297, primals_1298, primals_1299, primals_1300, primals_1301, primals_1302, primals_1303, primals_1304, primals_1305, primals_1306, primals_1307, primals_1308, primals_1309, primals_1310, primals_1311, primals_1312, primals_1313, primals_1314, primals_1315, primals_1316, primals_1317, primals_1318, primals_1319, primals_1320, primals_1321, primals_1322, primals_1323, primals_1324, primals_1325, primals_1326, primals_1327, primals_1328, primals_1329, primals_1330, primals_1331, primals_1332, primals_1333, primals_1334, primals_1335, primals_1336, primals_1337, primals_1338, primals_1339, primals_1340, primals_1341, primals_1342, primals_1343, primals_1344, primals_1345, primals_1346, primals_1347, primals_1348, primals_1349, primals_1350, primals_1351, primals_1352, primals_1353, primals_1354, primals_1355, primals_1356, primals_1357, primals_1358, primals_1359, primals_1360, primals_1361, primals_1362, primals_1363, primals_1364, primals_1365, primals_1366, primals_1367, primals_1368, primals_1369, primals_1370, primals_1371, primals_1372, primals_1373, primals_1374, primals_1375])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)
