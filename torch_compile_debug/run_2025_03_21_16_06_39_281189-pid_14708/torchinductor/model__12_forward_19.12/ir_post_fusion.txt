op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 16384})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('primals_1', c2 + 1024*(I), {c0: 4, c1: 4, c2: 1024}),
        MemoryDep('primals_2', c2 + 1024*(I), {c0: 4, c1: 4, c2: 1024}),
        MemoryDep('primals_3', c2 + 1024*(I), {c0: 4, c1: 4, c2: 1024}),
        MemoryDep('primals_4', c2 + 1024*(I), {c0: 4, c1: 4, c2: 1024})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (16384, 1)
op0.sizes = ([4, 4, 1024], [])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 32], stride=[1024, 32, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 32], stride=[1024, 32, 1])
primals_2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 32], stride=[1024, 32, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 32], stride=[1024, 32, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
class op0_loop_body:
    var_ranges = {p0: 4, p1: 4, p2: 1024}
    index0 = 4*p0 + p1
    index1 = p2 + 1024*(I)
    index2 = p2 + 1024*(I)
    index3 = p2 + 1024*(I)
    index4 = p2 + 1024*(I)
    index5 = 4096*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(4, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(4, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(8, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(12, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(12, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(16, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        constant_8 = ops.constant(5.489980785067252, torch.float32)
        mul = ops.mul(where_2, constant_8)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf0', get_index_8, mul, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_4', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('primals_3', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('primals_2', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('primals_1', get_index)
        return load


op1: ExternKernelSchedulerNode(ExternKernelAlloc)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op1.met_dependencies = [StarDep(name='primals_5', mode=None)]
op1.outputs = [
    buf1: ExternKernelAlloc
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.node.kernel = extern_kernels.convolution


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 16384})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 16384})]
op2.met_dependencies = [MemoryDep('primals_6', c1, {c0: 4, c1: 4})]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (16384, 1)
op2.sizes = ([4, 4, 1024], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[4], stride=[1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
class op2_loop_body:
    var_ranges = {p0: 4, p1: 4, p2: 1024}
    index0 = 4096*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_6', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2', get_index_2, add, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelAlloc)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='primals_7', mode=None)]
op3.outputs = [
    buf3: ExternKernelAlloc
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op3.node.kernel = extern_kernels.convolution


op4: ExternKernelSchedulerNode(ExternKernelAlloc)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op4.met_dependencies = [StarDep(name='primals_9', mode=None)]
op4.outputs = [
    buf4: ExternKernelAlloc
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.node.kernel = extern_kernels.convolution


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='primals_10', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6_op7_op8_op10: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op6_op7_op8_op10.writes = 
    [   MemoryDep('buf10', c0, {c0: 128}),
        MemoryDep('buf6', c0, {c0: 2097152}),
        MemoryDep('buf7', c0, {c0: 128}),
        MemoryDep('buf8', c0, {c0: 128})]
op6_op7_op8_op10.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}), MemoryDep('buf5', c0, {c0: 2097152})]
op6_op7_op8_op10.met_dependencies = [MemoryDep('primals_8', c1, {c0: 4, c1: 512})]
op6_op7_op8_op10.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf8.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6_op7_op8_op10.snodes[0] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 2097152})]
op6.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}), MemoryDep('buf5', c0, {c0: 2097152})]
op6.met_dependencies = [MemoryDep('primals_8', c1, {c0: 4, c1: 512})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (2097152, 1)
op6.sizes = ([4, 512, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op6_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_8', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf6', get_index_3, add_1, None)
        return store
op6_op7_op8_op10.snodes[1] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 128})]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 2097152})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (128, 16384)
op7.sizes = ([128], [16384])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op7_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_1, getitem)
        return store_reduction
op6_op7_op8_op10.snodes[2] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 128})]
op8.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 2097152})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf8.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (128, 16384)
op8.sizes = ([128], [16384])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op8_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, getitem_1)
        return store_reduction
op6_op7_op8_op10.snodes[3] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 128})]
op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 128})]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (128, 1)
op10.sizes = ([128], [])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op10_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf10', get_index_1, rsqrt, None)
        return store


op11_op12: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op11_op12.writes = [MemoryDep('buf11', c0, {c0: 2097152}), MemoryDep('buf12', c0, {c0: 2097152})]
op11_op12.unmet_dependencies = 
    [   MemoryDep('buf10', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf6', c0, {c0: 2097152}),
        MemoryDep('buf7', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op11_op12.met_dependencies = 
    [   MemoryDep('primals_175', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_176', c1, {c0: 4, c1: 512})]
op11_op12.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11_op12.snodes[0] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 2097152})]
op11.unmet_dependencies = 
    [   MemoryDep('buf10', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf6', c0, {c0: 2097152}),
        MemoryDep('buf7', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op11.met_dependencies = 
    [   MemoryDep('primals_175', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_176', c1, {c0: 4, c1: 512})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (2097152, 1)
op11.sizes = ([4, 512, 1024], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_175_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_176_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op11_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf7', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf10', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_175', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_176', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, add, None)
        return store
op11_op12.snodes[1] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2097152})]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 2097152})]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (2097152, 1)
op12.sizes = ([2097152], [])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op12_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf12', get_index_2, mul, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='primals_177', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op14.met_dependencies = [StarDep(name='primals_179', mode=None)]
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf14.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op14.node.kernel = extern_kernels.convolution


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='primals_180', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16_op17_op18_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op16_op17_op18_op20.writes = 
    [   MemoryDep('buf16', c0, {c0: 2097152}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf18', c0, {c0: 128}),
        MemoryDep('buf20', c0, {c0: 128})]
op16_op17_op18_op20.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 2097152}), MemoryDep('buf15', c0, {c0: 2097152})]
op16_op17_op18_op20.met_dependencies = [MemoryDep('primals_178', c1, {c0: 4, c1: 512})]
op16_op17_op18_op20.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op16_op17_op18_op20.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 2097152})]
op16.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 2097152}), MemoryDep('buf15', c0, {c0: 2097152})]
op16.met_dependencies = [MemoryDep('primals_178', c1, {c0: 4, c1: 512})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (2097152, 1)
op16.sizes = ([4, 512, 1024], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_178_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op16_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_178', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf16', get_index_3, add_1, None)
        return store
op16_op17_op18_op20.snodes[1] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 128})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 2097152})]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (128, 16384)
op17.sizes = ([128], [16384])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op17_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_1, getitem)
        return store_reduction
op16_op17_op18_op20.snodes[2] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 128})]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 2097152})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (128, 16384)
op18.sizes = ([128], [16384])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op18_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem_1)
        return store_reduction
op16_op17_op18_op20.snodes[3] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 128})]
op20.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 128})]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (128, 1)
op20.sizes = ([128], [])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op20_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf20', get_index_1, rsqrt, None)
        return store


op21_op22: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op21_op22.writes = [MemoryDep('buf21', c0, {c0: 2097152}), MemoryDep('buf22', c0, {c0: 2097152})]
op21_op22.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 2097152}),
        MemoryDep('buf17', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf20', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op21_op22.met_dependencies = 
    [   MemoryDep('primals_181', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_182', c1, {c0: 4, c1: 512})]
op21_op22.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op21_op22.snodes[0] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 2097152})]
op21.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 2097152}),
        MemoryDep('buf17', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf20', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op21.met_dependencies = 
    [   MemoryDep('primals_181', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_182', c1, {c0: 4, c1: 512})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2097152, 1)
op21.sizes = ([4, 512, 1024], [])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_181_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_182_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op21_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf20', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_181', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_182', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add, None)
        return store
op21_op22.snodes[1] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 2097152})]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 2097152})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (2097152, 1)
op22.sizes = ([2097152], [])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op22_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf21', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf22', get_index_2, mul, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelAlloc)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='primals_183', mode=None)]
op23.outputs = [
    buf23: ExternKernelAlloc
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.convolution


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op24.met_dependencies = [StarDep(name='primals_185', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.convolution


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='primals_186', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26_op27_op28_op30: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op26_op27_op28_op30.writes = 
    [   MemoryDep('buf26', c0, {c0: 2097152}),
        MemoryDep('buf27', c0, {c0: 128}),
        MemoryDep('buf28', c0, {c0: 128}),
        MemoryDep('buf30', c0, {c0: 128})]
op26_op27_op28_op30.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 2097152}),
        MemoryDep('buf25', c0, {c0: 2097152}),
        MemoryDep('buf6', c0, {c0: 2097152})]
op26_op27_op28_op30.met_dependencies = [MemoryDep('primals_184', c1, {c0: 4, c1: 512})]
op26_op27_op28_op30.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf30.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op26_op27_op28_op30.snodes[0] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 2097152})]
op26.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 2097152}),
        MemoryDep('buf25', c0, {c0: 2097152}),
        MemoryDep('buf6', c0, {c0: 2097152})]
op26.met_dependencies = [MemoryDep('primals_184', c1, {c0: 4, c1: 512})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (2097152, 1)
op26.sizes = ([4, 512, 1024], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_184_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op26_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_184', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf25', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf26', get_index_4, mul_1, None)
        return store
op26_op27_op28_op30.snodes[1] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 128})]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 2097152})]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (128, 16384)
op27.sizes = ([128], [16384])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op27_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, getitem)
        return store_reduction
op26_op27_op28_op30.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 128})]
op28.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 2097152})]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (128, 16384)
op28.sizes = ([128], [16384])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op28_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_1, getitem_1)
        return store_reduction
op26_op27_op28_op30.snodes[3] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 128})]
op30.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 128})]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf30.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (128, 1)
op30.sizes = ([128], [])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op30_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf30', get_index_1, rsqrt, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2097152})]
op31.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 2097152}),
        MemoryDep('buf27', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf28', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op31.met_dependencies = 
    [   MemoryDep('primals_187', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_188', c1, {c0: 4, c1: 512})]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 1024], stride=[524288, 1024, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (2097152, 1)
op31.sizes = ([4, 512, 1024], [])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_187_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_188_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 1024], stride=[524288, 1024, 1])
class op31_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_187', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_188', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf31', get_index_5, add_1, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='primals_189', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.bmm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2097152})]
op33.unmet_dependencies = [MemoryDep('buf31', 524288*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 512})]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf33.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (2097152, 1)
op33.sizes = ([4, 1024, 512], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 1024], stride=[524288, 1024, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op33_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 512}
    index0 = 524288*p0 + p1 + 1024*p2
    index1 = 524288*p0 + 512*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, load, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='primals_191', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.mm


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='primals_192', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.mm


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op36.met_dependencies = [StarDep(name='primals_193', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.bmm


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op37.met_dependencies = [StarDep(name='primals_195', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.node.kernel = extern_kernels.mm


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='primals_196', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op39.met_dependencies = [StarDep(name='primals_197', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op39.node.kernel = extern_kernels.bmm


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op40.met_dependencies = [StarDep(name='primals_199', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='primals_200', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2097152})]
op42.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 2097152}), MemoryDep('buf35', c0, {c0: 2097152})]
op42.met_dependencies = [MemoryDep('primals_190', c1, {c0: 4096, c1: 512})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf42.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (2097152, 1)
op42.sizes = ([4096, 512], [])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
primals_190_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op42_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_190', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf35', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf42', get_index_3, add_1, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 2097152})]
op43.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 2097152}), MemoryDep('buf38', c0, {c0: 2097152})]
op43.met_dependencies = [MemoryDep('primals_194', c1, {c0: 4096, c1: 512})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (2097152, 1)
op43.sizes = ([4096, 512], [])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
primals_194_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op43_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_194', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf38', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf43', get_index_3, add_1, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 2097152})]
op44.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 2097152}), MemoryDep('buf41', c0, {c0: 2097152})]
op44.met_dependencies = [MemoryDep('primals_198', c1, {c0: 4096, c1: 512})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf44.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (2097152, 1)
op44.sizes = ([4096, 512], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
primals_198_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op44_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_198', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf41', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf44', get_index_3, add_1, None)
        return store


op45: ExternKernelSchedulerNode(FallbackKernel)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = 
    [   StarDep(name='buf42', mode=None),
        StarDep(name='buf43', mode=None),
        StarDep(name='buf44', mode=None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: FallbackKernel
    buf45.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op45.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op46: ExternKernelSchedulerNode(MultiOutput)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: MultiOutput
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1024, 512], stride=[524288, 512, 512, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op46.node.kernel = None


op47: ExternKernelSchedulerNode(MultiOutput)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: MultiOutput
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1024], stride=[1024, 1024, 1])
    buf47.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op47.node.kernel = None


op48: ExternKernelSchedulerNode(MultiOutput)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: MultiOutput
    buf48.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf48.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op48.node.kernel = None


op49: ExternKernelSchedulerNode(MultiOutput)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: MultiOutput
    buf49.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf49.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op49.node.kernel = None


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op50.met_dependencies = [StarDep(name='primals_201', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op50.node.kernel = extern_kernels.mm


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op51.met_dependencies = [StarDep(name='primals_203', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op51.node.kernel = extern_kernels.mm


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='primals_204', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 2097152})]
op53.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 2097152}),
        MemoryDep('buf50', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf52', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024})]
op53.met_dependencies = [MemoryDep('primals_202', c1, {c0: 4, c1: 512})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (2097152, 1)
op53.sizes = ([4, 512, 1024], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
primals_202_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op53_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + p1 + 512*p2
    index1 = p1
    index2 = 524288*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf26', get_index_3)
        add_2 = ops.add(add_1, load_3)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf53', get_index_4, mul_1, None)
        return store


op54_op55_op57: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op54_op55_op57.writes = 
    [   MemoryDep('buf54', c0, {c0: 128}),
        MemoryDep('buf55', c0, {c0: 128}),
        MemoryDep('buf57', c0, {c0: 128})]
op54_op55_op57.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 2097152})]
op54_op55_op57.met_dependencies = []
op54_op55_op57.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op54_op55_op57.snodes[0] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 128})]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 2097152})]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (128, 16384)
op54.sizes = ([128], [16384])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op54_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf54', get_index_1, getitem)
        return store_reduction
op54_op55_op57.snodes[1] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 128})]
op55.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 2097152})]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (128, 16384)
op55.sizes = ([128], [16384])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op55_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf55', get_index_1, getitem_1)
        return store_reduction
op54_op55_op57.snodes[2] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 128})]
op57.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 128})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (128, 1)
op57.sizes = ([128], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op57_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf57', get_index_1, rsqrt, None)
        return store


op58_op59: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op58_op59.writes = [MemoryDep('buf58', c0, {c0: 2097152}), MemoryDep('buf59', c0, {c0: 2097152})]
op58_op59.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 2097152}),
        MemoryDep('buf54', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf57', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op58_op59.met_dependencies = 
    [   MemoryDep('primals_205', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_206', c1, {c0: 4, c1: 512})]
op58_op59.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58_op59.snodes[0] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2097152})]
op58.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 2097152}),
        MemoryDep('buf54', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf57', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op58.met_dependencies = 
    [   MemoryDep('primals_205', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_206', c1, {c0: 4, c1: 512})]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (2097152, 1)
op58.sizes = ([4, 512, 1024], [])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_205_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_206_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op58_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf54', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf57', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_205', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_206', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add, None)
        return store
op58_op59.snodes[1] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 2097152})]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2097152})]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (2097152, 1)
op59.sizes = ([2097152], [])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op59_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf58', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf59', get_index_2, mul, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='primals_207', mode=None)]
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op61.met_dependencies = [StarDep(name='primals_209', mode=None)]
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.convolution


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='primals_210', mode=None)]
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63_op64_op65_op67: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op63_op64_op65_op67.writes = 
    [   MemoryDep('buf63', c0, {c0: 2097152}),
        MemoryDep('buf64', c0, {c0: 128}),
        MemoryDep('buf65', c0, {c0: 128}),
        MemoryDep('buf67', c0, {c0: 128})]
op63_op64_op65_op67.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 2097152}), MemoryDep('buf62', c0, {c0: 2097152})]
op63_op64_op65_op67.met_dependencies = [MemoryDep('primals_208', c1, {c0: 4, c1: 512})]
op63_op64_op65_op67.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63_op64_op65_op67.snodes[0] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 2097152})]
op63.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 2097152}), MemoryDep('buf62', c0, {c0: 2097152})]
op63.met_dependencies = [MemoryDep('primals_208', c1, {c0: 4, c1: 512})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (2097152, 1)
op63.sizes = ([4, 512, 1024], [])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_208_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op63_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_208', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf63', get_index_3, add_1, None)
        return store
op63_op64_op65_op67.snodes[1] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 128})]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 2097152})]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (128, 16384)
op64.sizes = ([128], [16384])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op64_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, getitem)
        return store_reduction
op63_op64_op65_op67.snodes[2] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 128})]
op65.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 2097152})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (128, 16384)
op65.sizes = ([128], [16384])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op65_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf65', get_index_1, getitem_1)
        return store_reduction
op63_op64_op65_op67.snodes[3] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 128})]
op67.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 128})]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (128, 1)
op67.sizes = ([128], [])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op67_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf67', get_index_1, rsqrt, None)
        return store


op68_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op68_op69.writes = [MemoryDep('buf68', c0, {c0: 2097152}), MemoryDep('buf69', c0, {c0: 2097152})]
op68_op69.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 2097152}),
        MemoryDep('buf64', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf67', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op68_op69.met_dependencies = 
    [   MemoryDep('primals_211', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_212', c1, {c0: 4, c1: 512})]
op68_op69.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op68_op69.snodes[0] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 2097152})]
op68.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 2097152}),
        MemoryDep('buf64', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf67', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op68.met_dependencies = 
    [   MemoryDep('primals_211', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_212', c1, {c0: 4, c1: 512})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (2097152, 1)
op68.sizes = ([4, 512, 1024], [])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_211_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_212_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op68_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf64', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf67', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_211', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_212', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, add, None)
        return store
op68_op69.snodes[1] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2097152})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 2097152})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (2097152, 1)
op69.sizes = ([2097152], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op69_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, mul, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='primals_213', mode=None)]
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf70.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op71.met_dependencies = [StarDep(name='primals_215', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op71.node.kernel = extern_kernels.convolution


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='primals_216', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 2097152})]
op73.unmet_dependencies = []
op73.met_dependencies = [MemoryDep('primals_217', c0, {c0: 2097152})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf73.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (2097152, 1)
op73.sizes = ([2097152], [])
primals_217_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op73_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_217', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf73', get_index_1, mul, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='primals_218', mode=None)]
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op75.met_dependencies = [StarDep(name='primals_219', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf75.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.convolution


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='primals_220', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op77_op78.writes = [MemoryDep('buf77', c0, {c0: 2097152}), MemoryDep('buf78', c0, {c0: 2097152})]
op77_op78.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 2097152}),
        MemoryDep('buf50', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf52', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf70', c0, {c0: 2097152}),
        MemoryDep('buf72', c0, {c0: 2097152}),
        MemoryDep('buf74', c0, {c0: 2097152}),
        MemoryDep('buf76', c0, {c0: 2097152})]
op77_op78.met_dependencies = 
    [   MemoryDep('primals_202', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_214', c1, {c0: 4, c1: 512})]
op77_op78.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op77_op78.snodes[0] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 2097152})]
op77.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 2097152}),
        MemoryDep('buf50', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf52', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf70', c0, {c0: 2097152}),
        MemoryDep('buf72', c0, {c0: 2097152}),
        MemoryDep('buf74', c0, {c0: 2097152}),
        MemoryDep('buf76', c0, {c0: 2097152})]
op77.met_dependencies = 
    [   MemoryDep('primals_202', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_214', c1, {c0: 4, c1: 512})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (2097152, 1)
op77.sizes = ([4, 512, 1024], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
primals_202_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_214_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op77_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + p1 + 512*p2
    index1 = p1
    index2 = 524288*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf26', get_index_3)
        add_2 = ops.add(add_1, load_3)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf70', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_214', get_index_5)
        add_3 = ops.add(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf72', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_6, constant_2)
        add_4 = ops.add(add_3, mul_2)
        add_5 = ops.add(mul_1, add_4)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(add_5, constant_3)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf74', get_index_7)
        get_index_8 = self.get_index('index2')
        load_8 = ops.load('buf76', get_index_8)
        constant_4 = ops.constant(2.0, torch.float32)
        mul_4 = ops.mul(load_8, constant_4)
        add_6 = ops.add(load_7, mul_4)
        add_7 = ops.add(mul_3, add_6)
        get_index_9 = self.get_index('index2')
        store = ops.store('buf77', get_index_9, add_7, None)
        return store
op77_op78.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 2097152})]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 2097152})]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (2097152, 1)
op78.sizes = ([2097152], [])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op78_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf78', get_index_1, load, None)
        return store


op79_op80_op82: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op79_op80_op82.writes = 
    [   MemoryDep('buf79', c0, {c0: 128}),
        MemoryDep('buf80', c0, {c0: 128}),
        MemoryDep('buf82', c0, {c0: 128})]
op79_op80_op82.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 2097152})]
op79_op80_op82.met_dependencies = []
op79_op80_op82.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op79_op80_op82.snodes[0] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 128})]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 2097152})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (128, 16384)
op79.sizes = ([128], [16384])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op79_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, getitem)
        return store_reduction
op79_op80_op82.snodes[1] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 128})]
op80.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 2097152})]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (128, 16384)
op80.sizes = ([128], [16384])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op80_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_1, getitem_1)
        return store_reduction
op79_op80_op82.snodes[2] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 128})]
op82.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 128})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (128, 1)
op82.sizes = ([128], [])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op82_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf82', get_index_1, rsqrt, None)
        return store


op83_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op83_op84.writes = [MemoryDep('buf83', c0, {c0: 2097152}), MemoryDep('buf84', c0, {c0: 2097152})]
op83_op84.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 2097152}),
        MemoryDep('buf79', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf82', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op83_op84.met_dependencies = 
    [   MemoryDep('primals_11', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_12', c1, {c0: 4, c1: 512})]
op83_op84.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op83_op84.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 2097152})]
op83.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 2097152}),
        MemoryDep('buf79', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf82', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op83.met_dependencies = 
    [   MemoryDep('primals_11', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_12', c1, {c0: 4, c1: 512})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (2097152, 1)
op83.sizes = ([4, 512, 1024], [])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op83_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf82', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_11', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_12', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf83', get_index_5, add, None)
        return store
op83_op84.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2097152})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 2097152})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (2097152, 1)
op84.sizes = ([2097152], [])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op84_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf84', get_index_2, mul, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelAlloc)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='primals_13', mode=None)]
op85.outputs = [
    buf85: ExternKernelAlloc
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op85.node.kernel = extern_kernels.convolution


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op86.met_dependencies = [StarDep(name='primals_15', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.convolution


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='primals_16', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88_op89_op90_op92: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op88_op89_op90_op92.writes = 
    [   MemoryDep('buf88', c0, {c0: 2097152}),
        MemoryDep('buf89', c0, {c0: 128}),
        MemoryDep('buf90', c0, {c0: 128}),
        MemoryDep('buf92', c0, {c0: 128})]
op88_op89_op90_op92.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 2097152}), MemoryDep('buf87', c0, {c0: 2097152})]
op88_op89_op90_op92.met_dependencies = [MemoryDep('primals_14', c1, {c0: 4, c1: 512})]
op88_op89_op90_op92.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op88_op89_op90_op92.snodes[0] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 2097152})]
op88.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 2097152}), MemoryDep('buf87', c0, {c0: 2097152})]
op88.met_dependencies = [MemoryDep('primals_14', c1, {c0: 4, c1: 512})]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op88.group.device = cuda:0
op88.group.iteration = (2097152, 1)
op88.sizes = ([4, 512, 1024], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op88_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf88', get_index_3, add_1, None)
        return store
op88_op89_op90_op92.snodes[1] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 128})]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 2097152})]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (128, 16384)
op89.sizes = ([128], [16384])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op89_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_1, getitem)
        return store_reduction
op88_op89_op90_op92.snodes[2] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 128})]
op90.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 2097152})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (128, 16384)
op90.sizes = ([128], [16384])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op90_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf90', get_index_1, getitem_1)
        return store_reduction
op88_op89_op90_op92.snodes[3] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 128})]
op92.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 128})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (128, 1)
op92.sizes = ([128], [])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op92_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, rsqrt, None)
        return store


op93_op94: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op93_op94.writes = [MemoryDep('buf93', c0, {c0: 2097152}), MemoryDep('buf94', c0, {c0: 2097152})]
op93_op94.unmet_dependencies = 
    [   MemoryDep('buf88', c0, {c0: 2097152}),
        MemoryDep('buf89', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf92', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op93_op94.met_dependencies = 
    [   MemoryDep('primals_17', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_18', c1, {c0: 4, c1: 512})]
op93_op94.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op93_op94.snodes[0] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2097152})]
op93.unmet_dependencies = 
    [   MemoryDep('buf88', c0, {c0: 2097152}),
        MemoryDep('buf89', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf92', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op93.met_dependencies = 
    [   MemoryDep('primals_17', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_18', c1, {c0: 4, c1: 512})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (2097152, 1)
op93.sizes = ([4, 512, 1024], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op93_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf89', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf92', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_17', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_18', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, add, None)
        return store
op93_op94.snodes[1] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 2097152})]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 2097152})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (2097152, 1)
op94.sizes = ([2097152], [])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op94_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf94', get_index_2, mul, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='primals_19', mode=None)]
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op95.node.kernel = extern_kernels.convolution


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op96.met_dependencies = [StarDep(name='primals_21', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf96.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op96.node.kernel = extern_kernels.convolution


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='primals_22', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op97.node.kernel = extern_kernels.convolution


op98_op99_op100_op102: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op98_op99_op100_op102.writes = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf102', c0, {c0: 128}),
        MemoryDep('buf98', c0, {c0: 2097152}),
        MemoryDep('buf99', c0, {c0: 128})]
op98_op99_op100_op102.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 2097152}),
        MemoryDep('buf95', c0, {c0: 2097152}),
        MemoryDep('buf97', c0, {c0: 2097152})]
op98_op99_op100_op102.met_dependencies = [MemoryDep('primals_20', c1, {c0: 4, c1: 512})]
op98_op99_op100_op102.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98_op99_op100_op102.snodes[0] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 2097152})]
op98.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 2097152}),
        MemoryDep('buf95', c0, {c0: 2097152}),
        MemoryDep('buf97', c0, {c0: 2097152})]
op98.met_dependencies = [MemoryDep('primals_20', c1, {c0: 4, c1: 512})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (2097152, 1)
op98.sizes = ([4, 512, 1024], [])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op98_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf95', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_20', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf97', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_1, None)
        return store
op98_op99_op100_op102.snodes[1] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 128})]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 2097152})]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (128, 16384)
op99.sizes = ([128], [16384])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op99_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_1, getitem)
        return store_reduction
op98_op99_op100_op102.snodes[2] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 128})]
op100.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 2097152})]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (128, 16384)
op100.sizes = ([128], [16384])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op100_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf100', get_index_1, getitem_1)
        return store_reduction
op98_op99_op100_op102.snodes[3] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 128})]
op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 128})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (128, 1)
op102.sizes = ([128], [])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op102_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf102', get_index_1, rsqrt, None)
        return store


op103_op104: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op103_op104.writes = [MemoryDep('buf103', c0, {c0: 2097152}), MemoryDep('buf104', c0, {c0: 2097152})]
op103_op104.unmet_dependencies = 
    [   MemoryDep('buf102', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf98', c0, {c0: 2097152}),
        MemoryDep('buf99', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op103_op104.met_dependencies = 
    [   MemoryDep('primals_23', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_24', c1, {c0: 4, c1: 512})]
op103_op104.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op103_op104.snodes[0] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 2097152})]
op103.unmet_dependencies = 
    [   MemoryDep('buf102', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf98', c0, {c0: 2097152}),
        MemoryDep('buf99', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op103.met_dependencies = 
    [   MemoryDep('primals_23', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_24', c1, {c0: 4, c1: 512})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (2097152, 1)
op103.sizes = ([4, 512, 1024], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op103_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf102', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_23', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_24', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, add, None)
        return store
op103_op104.snodes[1] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 2097152})]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 2097152})]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (2097152, 1)
op104.sizes = ([2097152], [])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op104_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf104', get_index_2, mul, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelAlloc)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='primals_25', mode=None)]
op105.outputs = [
    buf105: ExternKernelAlloc
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.convolution


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op106.met_dependencies = [StarDep(name='primals_27', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.convolution


op107: ExternKernelSchedulerNode(ExternKernelAlloc)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='primals_28', mode=None)]
op107.outputs = [
    buf107: ExternKernelAlloc
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.convolution


op108_op109_op110_op112: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op108_op109_op110_op112.writes = 
    [   MemoryDep('buf108', c0, {c0: 2097152}),
        MemoryDep('buf109', c0, {c0: 128}),
        MemoryDep('buf110', c0, {c0: 128}),
        MemoryDep('buf112', c0, {c0: 128})]
op108_op109_op110_op112.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 2097152}), MemoryDep('buf107', c0, {c0: 2097152})]
op108_op109_op110_op112.met_dependencies = [MemoryDep('primals_26', c1, {c0: 4, c1: 512})]
op108_op109_op110_op112.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op108_op109_op110_op112.snodes[0] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 2097152})]
op108.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 2097152}), MemoryDep('buf107', c0, {c0: 2097152})]
op108.met_dependencies = [MemoryDep('primals_26', c1, {c0: 4, c1: 512})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (2097152, 1)
op108.sizes = ([4, 512, 1024], [])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op108_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_26', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf107', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf108', get_index_3, add_1, None)
        return store
op108_op109_op110_op112.snodes[1] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 128})]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 2097152})]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (128, 16384)
op109.sizes = ([128], [16384])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op109_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_1, getitem)
        return store_reduction
op108_op109_op110_op112.snodes[2] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 128})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 2097152})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (128, 16384)
op110.sizes = ([128], [16384])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op110_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf110', get_index_1, getitem_1)
        return store_reduction
op108_op109_op110_op112.snodes[3] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 128})]
op112.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 128})]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (128, 1)
op112.sizes = ([128], [])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op112_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf112', get_index_1, rsqrt, None)
        return store


op113_op114: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op113_op114.writes = [MemoryDep('buf113', c0, {c0: 2097152}), MemoryDep('buf114', c0, {c0: 2097152})]
op113_op114.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 2097152}),
        MemoryDep('buf109', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf112', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op113_op114.met_dependencies = 
    [   MemoryDep('primals_29', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_30', c1, {c0: 4, c1: 512})]
op113_op114.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf114.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op113_op114.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 2097152})]
op113.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 2097152}),
        MemoryDep('buf109', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf112', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op113.met_dependencies = 
    [   MemoryDep('primals_29', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_30', c1, {c0: 4, c1: 512})]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (2097152, 1)
op113.sizes = ([4, 512, 1024], [])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op113_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf112', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_29', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_30', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, add, None)
        return store
op113_op114.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 2097152})]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 2097152})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf114.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (2097152, 1)
op114.sizes = ([2097152], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op114_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf114', get_index_2, mul, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelAlloc)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='primals_31', mode=None)]
op115.outputs = [
    buf115: ExternKernelAlloc
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.convolution


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op116.met_dependencies = [StarDep(name='primals_33', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op116.node.kernel = extern_kernels.convolution


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='primals_34', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118_op119_op120_op121_op123: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op118_op119_op120_op121_op123.writes = 
    [   MemoryDep('buf118', c0, {c0: 2097152}),
        MemoryDep('buf119', c0, {c0: 2097152}),
        MemoryDep('buf120', c0, {c0: 128}),
        MemoryDep('buf121', c0, {c0: 128}),
        MemoryDep('buf123', c0, {c0: 128})]
op118_op119_op120_op121_op123.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}),
        MemoryDep('buf117', c0, {c0: 2097152}),
        MemoryDep('buf77', c0, {c0: 2097152}),
        MemoryDep('buf95', c0, {c0: 2097152}),
        MemoryDep('buf97', c0, {c0: 2097152})]
op118_op119_op120_op121_op123.met_dependencies = 
    [   MemoryDep('primals_20', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_32', c1, {c0: 4, c1: 512})]
op118_op119_op120_op121_op123.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op118_op119_op120_op121_op123.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 2097152})]
op118.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 2097152}),
        MemoryDep('buf117', c0, {c0: 2097152}),
        MemoryDep('buf77', c0, {c0: 2097152}),
        MemoryDep('buf95', c0, {c0: 2097152}),
        MemoryDep('buf97', c0, {c0: 2097152})]
op118.met_dependencies = 
    [   MemoryDep('primals_20', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_32', c1, {c0: 4, c1: 512})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (2097152, 1)
op118.sizes = ([4, 512, 1024], [])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_32_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op118_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf95', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_20', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf97', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf115', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_32', get_index_5)
        add_3 = ops.add(load_4, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf117', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_6, constant_2)
        add_4 = ops.add(add_3, mul_2)
        add_5 = ops.add(mul_1, add_4)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(add_5, constant_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf118', get_index_7, mul_3, None)
        return store
op118_op119_op120_op121_op123.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 2097152})]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 2097152})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (2097152, 1)
op119.sizes = ([2097152], [])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op119_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf119', get_index_1, load, None)
        return store
op118_op119_op120_op121_op123.snodes[2] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 128})]
op120.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 2097152})]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (128, 16384)
op120.sizes = ([128], [16384])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op120_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_1, getitem)
        return store_reduction
op118_op119_op120_op121_op123.snodes[3] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 128})]
op121.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 2097152})]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (128, 16384)
op121.sizes = ([128], [16384])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op121_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf121', get_index_1, getitem_1)
        return store_reduction
op118_op119_op120_op121_op123.snodes[4] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 128})]
op123.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 128})]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (128, 1)
op123.sizes = ([128], [])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op123_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf123', get_index_1, rsqrt, None)
        return store


op124_op125: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op124_op125.writes = [MemoryDep('buf124', c0, {c0: 2097152}), MemoryDep('buf125', c0, {c0: 2097152})]
op124_op125.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 2097152}),
        MemoryDep('buf120', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf123', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op124_op125.met_dependencies = 
    [   MemoryDep('primals_35', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_36', c1, {c0: 4, c1: 512})]
op124_op125.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op124_op125.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2097152})]
op124.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 2097152}),
        MemoryDep('buf120', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf123', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op124.met_dependencies = 
    [   MemoryDep('primals_35', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_36', c1, {c0: 4, c1: 512})]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2097152, 1)
op124.sizes = ([4, 512, 1024], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_36_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op124_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf120', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf123', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_35', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_36', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, add, None)
        return store
op124_op125.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2097152})]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 2097152})]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (2097152, 1)
op125.sizes = ([2097152], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op125_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf125', get_index_2, mul, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='primals_37', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op127.met_dependencies = [StarDep(name='primals_39', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.convolution


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='primals_40', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129_op130_op131_op133: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op129_op130_op131_op133.writes = 
    [   MemoryDep('buf129', c0, {c0: 2097152}),
        MemoryDep('buf130', c0, {c0: 128}),
        MemoryDep('buf131', c0, {c0: 128}),
        MemoryDep('buf133', c0, {c0: 128})]
op129_op130_op131_op133.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 2097152}), MemoryDep('buf128', c0, {c0: 2097152})]
op129_op130_op131_op133.met_dependencies = [MemoryDep('primals_38', c1, {c0: 4, c1: 512})]
op129_op130_op131_op133.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op129_op130_op131_op133.snodes[0] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 2097152})]
op129.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 2097152}), MemoryDep('buf128', c0, {c0: 2097152})]
op129.met_dependencies = [MemoryDep('primals_38', c1, {c0: 4, c1: 512})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (2097152, 1)
op129.sizes = ([4, 512, 1024], [])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op129_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_38', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf128', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf129', get_index_3, add_1, None)
        return store
op129_op130_op131_op133.snodes[1] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 128})]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 2097152})]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (128, 16384)
op130.sizes = ([128], [16384])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op130_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_1, getitem)
        return store_reduction
op129_op130_op131_op133.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 128})]
op131.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 2097152})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (128, 16384)
op131.sizes = ([128], [16384])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op131_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_1, getitem_1)
        return store_reduction
op129_op130_op131_op133.snodes[3] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 128})]
op133.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 128})]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (128, 1)
op133.sizes = ([128], [])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op133_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf133', get_index_1, rsqrt, None)
        return store


op134_op135: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op134_op135.writes = [MemoryDep('buf134', c0, {c0: 2097152}), MemoryDep('buf135', c0, {c0: 2097152})]
op134_op135.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 2097152}),
        MemoryDep('buf130', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf133', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op134_op135.met_dependencies = 
    [   MemoryDep('primals_41', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_42', c1, {c0: 4, c1: 512})]
op134_op135.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op134_op135.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 2097152})]
op134.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 2097152}),
        MemoryDep('buf130', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf133', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op134.met_dependencies = 
    [   MemoryDep('primals_41', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_42', c1, {c0: 4, c1: 512})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (2097152, 1)
op134.sizes = ([4, 512, 1024], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_42_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op134_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_41', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_42', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add, None)
        return store
op134_op135.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 2097152})]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 2097152})]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (2097152, 1)
op135.sizes = ([2097152], [])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op135_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, mul, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='primals_43', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op137.met_dependencies = [StarDep(name='primals_45', mode=None)]
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op137.node.kernel = extern_kernels.convolution


op138: ExternKernelSchedulerNode(ExternKernelAlloc)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='primals_46', mode=None)]
op138.outputs = [
    buf138: ExternKernelAlloc
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.node.kernel = extern_kernels.convolution


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 64})]
op139.unmet_dependencies = []
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (64, 1)
op139.sizes = ([64], [])
buf139_layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
class op139_loop_body:
    var_ranges = {p0: 64}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf139', get_index_1, to_dtype, None)
        return store


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 8388608})]
op140.unmet_dependencies = 
    [   MemoryDep('buf118', 524288*c0 + 1024*c2 + 32*tmp0 + tmp1, {c0: 4, c1: 4096, c2: 512}),
        MemoryDep('buf136', 524288*c0 + 1024*c2 + 32*tmp0 + tmp1, {c0: 4, c1: 4096, c2: 512}),
        MemoryDep('buf138', 524288*c0 + 1024*c2 + 32*tmp0 + tmp1, {c0: 4, c1: 4096, c2: 512}),
        MemoryDep('buf139', c1, {c0: 256, c1: 64}),
        MemoryDep('buf139', c1, {c0: 4, c1: 64})]
op140.met_dependencies = [MemoryDep('primals_44', c1, {c0: 16384, c1: 512})]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 1, 32768, 512])
    buf140.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (8388608, 1)
op140.sizes = ([4, 64, 64, 512], [])
buf139_layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_44_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 1, 32768, 512])
class op140_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 64, p3: 512}
    index0 = p1
    index1 = p2
    index2 = 32*indirect0 + indirect1 + 524288*p0 + 1024*p3
    index3 = p3
    index4 = 2097152*p0 + 32768*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf118', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf136', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_44', get_index_4)
        add = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf138', get_index_5)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_5, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load_2, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf140', get_index_6, mul_1, None)
        return store


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op141.unmet_dependencies = []
op141.met_dependencies = [MemoryDep('primals_47', c0, {c0: 2359296})]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (2359296, 1)
op141.sizes = ([512, 512, 9], [])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op141_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf141', get_index_1, load, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf140', mode=None), StarDep(name='buf141', mode=None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 1, 32768, 512])
    buf142.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', 4608*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 9})]
op143.unmet_dependencies = []
op143.met_dependencies = [MemoryDep('primals_49', c0, {c0: 18432})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (18432, 1)
op143.sizes = ([4, 512, 9], [])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 3, 3], stride=[4608, 9, 3, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op143_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelAlloc)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf140', mode=None), StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ExternKernelAlloc
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 1, 256, 4])
    buf144.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op144.node.kernel = extern_kernels.convolution


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='primals_50', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 1, 32768, 512])
    buf145.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = extern_kernels.convolution


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 4194304})]
op146.unmet_dependencies = []
op146.met_dependencies = [MemoryDep('primals_221', c0, {c0: 4194304})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (4194304, 1)
op146.sizes = ([4194304], [])
primals_221_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op146_loop_body:
    var_ranges = {p0: 4194304}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_221', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf146', get_index_1, mul, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='primals_222', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: ExternKernelSchedulerNode(ExternKernelAlloc)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op148.met_dependencies = [StarDep(name='primals_223', mode=None)]
op148.outputs = [
    buf148: ExternKernelAlloc
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.convolution


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='primals_224', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150_op151: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op150_op151.writes = [MemoryDep('buf150', c0, {c0: 8388608}), MemoryDep('buf151', c0, {c0: 8388608})]
op150_op151.unmet_dependencies = 
    [   MemoryDep('buf142', 2097152*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 4096}),
        MemoryDep('buf145', 2097152*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 4096}),
        MemoryDep('buf147', c0, {c0: 8388608}),
        MemoryDep('buf149', c0, {c0: 8388608})]
op150_op151.met_dependencies = [MemoryDep('primals_48', c1, {c0: 4, c1: 512})]
op150_op151.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op150_op151.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 8388608})]
op150.unmet_dependencies = 
    [   MemoryDep('buf142', 2097152*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 4096}),
        MemoryDep('buf145', 2097152*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 4096}),
        MemoryDep('buf147', c0, {c0: 8388608}),
        MemoryDep('buf149', c0, {c0: 8388608})]
op150.met_dependencies = [MemoryDep('primals_48', c1, {c0: 4, c1: 512})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (8388608, 1)
op150.sizes = ([4, 512, 4096], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 1, 32768, 512])
primals_48_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 1, 32768, 512])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op150_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + p1 + 512*p2
    index1 = p1
    index2 = 2097152*p0 + 4096*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_48', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf147', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf149', get_index_4)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_1)
        add_2 = ops.add(load_3, mul_1)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf150', get_index_5, add_3, None)
        return store
op150_op151.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 8388608})]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 8388608})]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (8388608, 1)
op151.sizes = ([8388608], [])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op151_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf151', get_index_1, load, None)
        return store


op152_op153_op155: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op152_op153_op155.writes = 
    [   MemoryDep('buf152', c0, {c0: 128}),
        MemoryDep('buf153', c0, {c0: 128}),
        MemoryDep('buf155', c0, {c0: 128})]
op152_op153_op155.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 8388608})]
op152_op153_op155.met_dependencies = []
op152_op153_op155.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op152_op153_op155.snodes[0] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 128})]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 8388608})]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (128, 65536)
op152.sizes = ([128], [65536])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op152_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_1, getitem)
        return store_reduction
op152_op153_op155.snodes[1] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 128})]
op153.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 8388608})]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (128, 65536)
op153.sizes = ([128], [65536])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op153_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf153', get_index_1, getitem_1)
        return store_reduction
op152_op153_op155.snodes[2] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 128})]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 128})]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (128, 1)
op155.sizes = ([128], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op155_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf155', get_index_1, rsqrt, None)
        return store


op156_op157: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op156_op157.writes = [MemoryDep('buf156', c0, {c0: 8388608}), MemoryDep('buf157', c0, {c0: 8388608})]
op156_op157.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 8388608}),
        MemoryDep('buf152', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf155', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op156_op157.met_dependencies = 
    [   MemoryDep('primals_51', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_52', c1, {c0: 4, c1: 512})]
op156_op157.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op156_op157.snodes[0] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 8388608})]
op156.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 8388608}),
        MemoryDep('buf152', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf155', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op156.met_dependencies = 
    [   MemoryDep('primals_51', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_52', c1, {c0: 4, c1: 512})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (8388608, 1)
op156.sizes = ([4, 512, 4096], [])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_51', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_52', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf156', get_index_5, add, None)
        return store
op156_op157.snodes[1] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 8388608})]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 8388608})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (8388608, 1)
op157.sizes = ([8388608], [])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op157_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf157', get_index_2, mul, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelAlloc)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='primals_53', mode=None)]
op158.outputs = [
    buf158: ExternKernelAlloc
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.convolution


op159: ExternKernelSchedulerNode(ExternKernelAlloc)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op159.met_dependencies = [StarDep(name='primals_55', mode=None)]
op159.outputs = [
    buf159: ExternKernelAlloc
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.convolution


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='primals_56', mode=None)]
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161_op162_op163_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op161_op162_op163_op165.writes = 
    [   MemoryDep('buf161', c0, {c0: 8388608}),
        MemoryDep('buf162', c0, {c0: 128}),
        MemoryDep('buf163', c0, {c0: 128}),
        MemoryDep('buf165', c0, {c0: 128})]
op161_op162_op163_op165.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 8388608}), MemoryDep('buf160', c0, {c0: 8388608})]
op161_op162_op163_op165.met_dependencies = [MemoryDep('primals_54', c1, {c0: 4, c1: 512})]
op161_op162_op163_op165.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161_op162_op163_op165.snodes[0] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 8388608})]
op161.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 8388608}), MemoryDep('buf160', c0, {c0: 8388608})]
op161.met_dependencies = [MemoryDep('primals_54', c1, {c0: 4, c1: 512})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (8388608, 1)
op161.sizes = ([4, 512, 4096], [])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_54_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op161_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_54', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf161', get_index_3, add_1, None)
        return store
op161_op162_op163_op165.snodes[1] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 128})]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 8388608})]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (128, 65536)
op162.sizes = ([128], [65536])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op162_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_1, getitem)
        return store_reduction
op161_op162_op163_op165.snodes[2] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 128})]
op163.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 8388608})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (128, 65536)
op163.sizes = ([128], [65536])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op163_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf163', get_index_1, getitem_1)
        return store_reduction
op161_op162_op163_op165.snodes[3] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 128})]
op165.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 128})]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (128, 1)
op165.sizes = ([128], [])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op165_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf165', get_index_1, rsqrt, None)
        return store


op166_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op166_op167.writes = [MemoryDep('buf166', c0, {c0: 8388608}), MemoryDep('buf167', c0, {c0: 8388608})]
op166_op167.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 8388608}),
        MemoryDep('buf162', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf165', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op166_op167.met_dependencies = 
    [   MemoryDep('primals_57', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_58', c1, {c0: 4, c1: 512})]
op166_op167.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op166_op167.snodes[0] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 8388608})]
op166.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 8388608}),
        MemoryDep('buf162', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf165', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op166.met_dependencies = 
    [   MemoryDep('primals_57', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_58', c1, {c0: 4, c1: 512})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (8388608, 1)
op166.sizes = ([4, 512, 4096], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op166_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf165', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_57', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_58', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf166', get_index_5, add, None)
        return store
op166_op167.snodes[1] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 8388608})]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 8388608})]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (8388608, 1)
op167.sizes = ([8388608], [])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op167_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf167', get_index_2, mul, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='primals_59', mode=None)]
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
]
op168.node.kernel = extern_kernels.convolution


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op169.met_dependencies = [StarDep(name='primals_61', mode=None)]
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.convolution


op170: ExternKernelSchedulerNode(ExternKernelAlloc)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='primals_62', mode=None)]
op170.outputs = [
    buf170: ExternKernelAlloc
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
]
op170.node.kernel = extern_kernels.convolution


op171_op172_op173_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op171_op172_op173_op175.writes = 
    [   MemoryDep('buf171', c0, {c0: 8388608}),
        MemoryDep('buf172', c0, {c0: 128}),
        MemoryDep('buf173', c0, {c0: 128}),
        MemoryDep('buf175', c0, {c0: 128})]
op171_op172_op173_op175.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 8388608}),
        MemoryDep('buf168', c0, {c0: 8388608}),
        MemoryDep('buf170', c0, {c0: 8388608})]
op171_op172_op173_op175.met_dependencies = [MemoryDep('primals_60', c1, {c0: 4, c1: 512})]
op171_op172_op173_op175.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op171_op172_op173_op175.snodes[0] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 8388608})]
op171.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 8388608}),
        MemoryDep('buf168', c0, {c0: 8388608}),
        MemoryDep('buf170', c0, {c0: 8388608})]
op171.met_dependencies = [MemoryDep('primals_60', c1, {c0: 4, c1: 512})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (8388608, 1)
op171.sizes = ([4, 512, 4096], [])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_60_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op171_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf168', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_60', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf170', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf171', get_index_4, mul_1, None)
        return store
op171_op172_op173_op175.snodes[1] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 128})]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 8388608})]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (128, 65536)
op172.sizes = ([128], [65536])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op172_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_1, getitem)
        return store_reduction
op171_op172_op173_op175.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 128})]
op173.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 8388608})]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (128, 65536)
op173.sizes = ([128], [65536])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op173_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem_1)
        return store_reduction
op171_op172_op173_op175.snodes[3] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 128})]
op175.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 128})]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (128, 1)
op175.sizes = ([128], [])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op175_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf175', get_index_1, rsqrt, None)
        return store


op176_op177: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op176_op177.writes = [MemoryDep('buf176', c0, {c0: 8388608}), MemoryDep('buf177', c0, {c0: 8388608})]
op176_op177.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 8388608}),
        MemoryDep('buf172', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf175', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op176_op177.met_dependencies = 
    [   MemoryDep('primals_63', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_64', c1, {c0: 4, c1: 512})]
op176_op177.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op176_op177.snodes[0] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 8388608})]
op176.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 8388608}),
        MemoryDep('buf172', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf175', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op176.met_dependencies = 
    [   MemoryDep('primals_63', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_64', c1, {c0: 4, c1: 512})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (8388608, 1)
op176.sizes = ([4, 512, 4096], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op176_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf175', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_63', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_64', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, add, None)
        return store
op176_op177.snodes[1] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 8388608})]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 8388608})]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (8388608, 1)
op177.sizes = ([8388608], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op177_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf176', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf177', get_index_2, mul, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='primals_65', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op179.met_dependencies = [StarDep(name='primals_67', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf179.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op179.node.kernel = extern_kernels.convolution


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='primals_68', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181_op182_op183_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op181_op182_op183_op185.writes = 
    [   MemoryDep('buf181', c0, {c0: 8388608}),
        MemoryDep('buf182', c0, {c0: 128}),
        MemoryDep('buf183', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128})]
op181_op182_op183_op185.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 8388608}), MemoryDep('buf180', c0, {c0: 8388608})]
op181_op182_op183_op185.met_dependencies = [MemoryDep('primals_66', c1, {c0: 4, c1: 512})]
op181_op182_op183_op185.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op181_op182_op183_op185.snodes[0] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 8388608})]
op181.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 8388608}), MemoryDep('buf180', c0, {c0: 8388608})]
op181.met_dependencies = [MemoryDep('primals_66', c1, {c0: 4, c1: 512})]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (8388608, 1)
op181.sizes = ([4, 512, 4096], [])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_66_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op181_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_66', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf181', get_index_3, add_1, None)
        return store
op181_op182_op183_op185.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 128})]
op182.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 8388608})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (128, 65536)
op182.sizes = ([128], [65536])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op182_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_1, getitem)
        return store_reduction
op181_op182_op183_op185.snodes[2] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 128})]
op183.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 8388608})]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (128, 65536)
op183.sizes = ([128], [65536])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op183_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf183', get_index_1, getitem_1)
        return store_reduction
op181_op182_op183_op185.snodes[3] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 128})]
op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 128})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (128, 1)
op185.sizes = ([128], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op185_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf185', get_index_1, rsqrt, None)
        return store


op186_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op186_op187.writes = [MemoryDep('buf186', c0, {c0: 8388608}), MemoryDep('buf187', c0, {c0: 8388608})]
op186_op187.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 8388608}),
        MemoryDep('buf182', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf185', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op186_op187.met_dependencies = 
    [   MemoryDep('primals_69', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_70', c1, {c0: 4, c1: 512})]
op186_op187.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op186_op187.snodes[0] =
op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 8388608})]
op186.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 8388608}),
        MemoryDep('buf182', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf185', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op186.met_dependencies = 
    [   MemoryDep('primals_69', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_70', c1, {c0: 4, c1: 512})]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (8388608, 1)
op186.sizes = ([4, 512, 4096], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op186_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf182', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_69', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_70', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf186', get_index_5, add, None)
        return store
op186_op187.snodes[1] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 8388608})]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 8388608})]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (8388608, 1)
op187.sizes = ([8388608], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op187_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf187', get_index_2, mul, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelAlloc)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='primals_71', mode=None)]
op188.outputs = [
    buf188: ExternKernelAlloc
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.convolution


op189: ExternKernelSchedulerNode(ExternKernelAlloc)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op189.met_dependencies = [StarDep(name='primals_73', mode=None)]
op189.outputs = [
    buf189: ExternKernelAlloc
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op189.node.kernel = extern_kernels.convolution


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='primals_74', mode=None)]
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191_op192_op193_op194_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op191_op192_op193_op194_op196.writes = 
    [   MemoryDep('buf191', c0, {c0: 8388608}),
        MemoryDep('buf192', c0, {c0: 8388608}),
        MemoryDep('buf193', c0, {c0: 128}),
        MemoryDep('buf194', c0, {c0: 128}),
        MemoryDep('buf196', c0, {c0: 128})]
op191_op192_op193_op194_op196.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 8388608}),
        MemoryDep('buf168', c0, {c0: 8388608}),
        MemoryDep('buf170', c0, {c0: 8388608}),
        MemoryDep('buf188', c0, {c0: 8388608}),
        MemoryDep('buf190', c0, {c0: 8388608})]
op191_op192_op193_op194_op196.met_dependencies = 
    [   MemoryDep('primals_60', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_72', c1, {c0: 4, c1: 512})]
op191_op192_op193_op194_op196.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op191_op192_op193_op194_op196.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 8388608})]
op191.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 8388608}),
        MemoryDep('buf168', c0, {c0: 8388608}),
        MemoryDep('buf170', c0, {c0: 8388608}),
        MemoryDep('buf188', c0, {c0: 8388608}),
        MemoryDep('buf190', c0, {c0: 8388608})]
op191.met_dependencies = 
    [   MemoryDep('primals_60', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_72', c1, {c0: 4, c1: 512})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (8388608, 1)
op191.sizes = ([4, 512, 4096], [])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_60_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_72_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op191_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf168', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_60', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf170', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf188', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_72', get_index_5)
        add_3 = ops.add(load_4, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf190', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_6, constant_2)
        add_4 = ops.add(add_3, mul_2)
        add_5 = ops.add(mul_1, add_4)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(add_5, constant_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf191', get_index_7, mul_3, None)
        return store
op191_op192_op193_op194_op196.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 8388608})]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 8388608})]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (8388608, 1)
op192.sizes = ([8388608], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op192_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf192', get_index_1, load, None)
        return store
op191_op192_op193_op194_op196.snodes[2] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 128})]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 8388608})]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (128, 65536)
op193.sizes = ([128], [65536])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op193_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction
op191_op192_op193_op194_op196.snodes[3] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 128})]
op194.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 8388608})]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (128, 65536)
op194.sizes = ([128], [65536])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction
op191_op192_op193_op194_op196.snodes[4] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 128})]
op196.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 128})]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (128, 1)
op196.sizes = ([128], [])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op196_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf196', get_index_1, rsqrt, None)
        return store


op197_op198: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op197_op198.writes = [MemoryDep('buf197', c0, {c0: 8388608}), MemoryDep('buf198', c0, {c0: 8388608})]
op197_op198.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 8388608}),
        MemoryDep('buf193', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf196', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op197_op198.met_dependencies = 
    [   MemoryDep('primals_75', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_76', c1, {c0: 4, c1: 512})]
op197_op198.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op197_op198.snodes[0] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 8388608})]
op197.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 8388608}),
        MemoryDep('buf193', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf196', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op197.met_dependencies = 
    [   MemoryDep('primals_75', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_76', c1, {c0: 4, c1: 512})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (8388608, 1)
op197.sizes = ([4, 512, 4096], [])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op197_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf196', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_75', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_76', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf197', get_index_5, add, None)
        return store
op197_op198.snodes[1] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 8388608})]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 8388608})]
op198.met_dependencies = []
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (8388608, 1)
op198.sizes = ([8388608], [])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op198_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf197', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf198', get_index_2, mul, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='primals_77', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op200.met_dependencies = [StarDep(name='primals_79', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.convolution


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='primals_80', mode=None)]
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202_op203_op204_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op202_op203_op204_op206.writes = 
    [   MemoryDep('buf202', c0, {c0: 8388608}),
        MemoryDep('buf203', c0, {c0: 128}),
        MemoryDep('buf204', c0, {c0: 128}),
        MemoryDep('buf206', c0, {c0: 128})]
op202_op203_op204_op206.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 8388608}), MemoryDep('buf201', c0, {c0: 8388608})]
op202_op203_op204_op206.met_dependencies = [MemoryDep('primals_78', c1, {c0: 4, c1: 512})]
op202_op203_op204_op206.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op202_op203_op204_op206.snodes[0] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 8388608})]
op202.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 8388608}), MemoryDep('buf201', c0, {c0: 8388608})]
op202.met_dependencies = [MemoryDep('primals_78', c1, {c0: 4, c1: 512})]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (8388608, 1)
op202.sizes = ([4, 512, 4096], [])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_78_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op202_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_78', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf201', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf202', get_index_3, add_1, None)
        return store
op202_op203_op204_op206.snodes[1] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 128})]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 8388608})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (128, 65536)
op203.sizes = ([128], [65536])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op203_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_1, getitem)
        return store_reduction
op202_op203_op204_op206.snodes[2] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 128})]
op204.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 8388608})]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (128, 65536)
op204.sizes = ([128], [65536])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op204_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_1, getitem_1)
        return store_reduction
op202_op203_op204_op206.snodes[3] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 128})]
op206.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 128})]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (128, 1)
op206.sizes = ([128], [])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op206_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf206', get_index_1, rsqrt, None)
        return store


op207_op208: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op207_op208.writes = [MemoryDep('buf207', c0, {c0: 8388608}), MemoryDep('buf208', c0, {c0: 8388608})]
op207_op208.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 8388608}),
        MemoryDep('buf203', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf206', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op207_op208.met_dependencies = 
    [   MemoryDep('primals_81', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_82', c1, {c0: 4, c1: 512})]
op207_op208.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op207_op208.snodes[0] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 8388608})]
op207.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 8388608}),
        MemoryDep('buf203', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf206', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op207.met_dependencies = 
    [   MemoryDep('primals_81', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_82', c1, {c0: 4, c1: 512})]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (8388608, 1)
op207.sizes = ([4, 512, 4096], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_82_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op207_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf206', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_81', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_82', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf207', get_index_5, add, None)
        return store
op207_op208.snodes[1] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 8388608})]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 8388608})]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (8388608, 1)
op208.sizes = ([8388608], [])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op208_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf208', get_index_2, mul, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelAlloc)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='primals_83', mode=None)]
op209.outputs = [
    buf209: ExternKernelAlloc
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.convolution


op210: ExternKernelSchedulerNode(ExternKernelAlloc)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op210.met_dependencies = [StarDep(name='primals_85', mode=None)]
op210.outputs = [
    buf210: ExternKernelAlloc
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf210.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op210.node.kernel = extern_kernels.convolution


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='primals_86', mode=None)]
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 128})]
op212.unmet_dependencies = []
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.int64, size=[128], stride=[1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (128, 1)
op212.sizes = ([128], [])
buf212_layout = FixedLayout('cuda:0', torch.int64, size=[128], stride=[1])
class op212_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf212', get_index_1, to_dtype, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 33554432})]
op213.unmet_dependencies = 
    [   MemoryDep('buf191', 2097152*c0 + 4096*c2 + 64*tmp0 + tmp1, {c0: 4, c1: 16384, c2: 512}),
        MemoryDep('buf209', 2097152*c0 + 4096*c2 + 64*tmp0 + tmp1, {c0: 4, c1: 16384, c2: 512}),
        MemoryDep('buf211', 2097152*c0 + 4096*c2 + 64*tmp0 + tmp1, {c0: 4, c1: 16384, c2: 512}),
        MemoryDep('buf212', c1, {c0: 4, c1: 128}),
        MemoryDep('buf212', c1, {c0: 512, c1: 128})]
op213.met_dependencies = [MemoryDep('primals_84', c1, {c0: 65536, c1: 512})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (33554432, 1)
op213.sizes = ([4, 128, 128, 512], [])
buf212_layout = FixedLayout('cuda:0', torch.int64, size=[128], stride=[1])
buf212_layout = FixedLayout('cuda:0', torch.int64, size=[128], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_84_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
class op213_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 128, p3: 512}
    index0 = p1
    index1 = p2
    index2 = 64*indirect0 + indirect1 + 2097152*p0 + 4096*p3
    index3 = p3
    index4 = 8388608*p0 + 65536*p1 + 512*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf209', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_84', get_index_4)
        add = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf211', get_index_5)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_5, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load_2, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf213', get_index_6, mul_1, None)
        return store


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
op214.unmet_dependencies = []
op214.met_dependencies = [MemoryDep('primals_87', c0, {c0: 2359296})]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (2359296, 1)
op214.sizes = ([512, 512, 9], [])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op214_loop_body:
    var_ranges = {p0: 512, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_87', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf214', get_index_1, load, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelAlloc)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf213', mode=None), StarDep(name='buf214', mode=None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ExternKernelAlloc
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
    buf215.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.convolution


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', 4608*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 9})]
op216.unmet_dependencies = []
op216.met_dependencies = [MemoryDep('primals_89', c0, {c0: 18432})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (18432, 1)
op216.sizes = ([4, 512, 9], [])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 3, 3], stride=[4608, 9, 3, 1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op216_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 9}
    index0 = 4608*p0 + 9*p1 + p2
    index1 = 4608*p0 + p1 + 512*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf216', get_index_1, load, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelAlloc)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf213', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ExternKernelAlloc
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 1, 512, 4])
    buf217.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op217.node.kernel = extern_kernels.convolution


op218: ExternKernelSchedulerNode(ExternKernelAlloc)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='primals_90', mode=None)]
op218.outputs = [
    buf218: ExternKernelAlloc
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.convolution


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 8388608})]
op219.unmet_dependencies = []
op219.met_dependencies = [MemoryDep('primals_225', c0, {c0: 8388608})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (8388608, 1)
op219.sizes = ([8388608], [])
primals_225_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
class op219_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_225', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf219', get_index_1, mul, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelAlloc)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='primals_226', mode=None)]
op220.outputs = [
    buf220: ExternKernelAlloc
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = extern_kernels.convolution


op221: ExternKernelSchedulerNode(ExternKernelAlloc)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op221.met_dependencies = [StarDep(name='primals_227', mode=None)]
op221.outputs = [
    buf221: ExternKernelAlloc
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op221.node.kernel = extern_kernels.convolution


op222: ExternKernelSchedulerNode(ExternKernelAlloc)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='primals_228', mode=None)]
op222.outputs = [
    buf222: ExternKernelAlloc
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.convolution


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 33554432})]
op223.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 33554432}),
        MemoryDep('buf218', c0, {c0: 33554432}),
        MemoryDep('buf220', 8388608*c0 + c1 + 16384*c2, {c0: 4, c1: 16384, c2: 512}),
        MemoryDep('buf222', 8388608*c0 + c1 + 16384*c2, {c0: 4, c1: 16384, c2: 512})]
op223.met_dependencies = [MemoryDep('primals_88', c1, {c0: 65536, c1: 512})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (33554432, 1)
op223.sizes = ([4, 16384, 512], [])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
primals_88_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
class op223_loop_body:
    var_ranges = {p0: 4, p1: 16384, p2: 512}
    index0 = 8388608*p0 + 512*p1 + p2
    index1 = p2
    index2 = 8388608*p0 + p1 + 16384*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_88', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf218', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf220', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf222', get_index_4)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_1)
        add_2 = ops.add(load_3, mul_1)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, add_3, None)
        return store


op224_op225_op227: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op224_op225_op227.writes = 
    [   MemoryDep('buf224', c0, {c0: 128}),
        MemoryDep('buf225', c0, {c0: 128}),
        MemoryDep('buf227', c0, {c0: 128})]
op224_op225_op227.unmet_dependencies = [   MemoryDep('buf223', 8388608*c0 + 16*c1 + 512*c2 + c3, {c0: 4, c1: 32, c2: 16384, c3: 16})]
op224_op225_op227.met_dependencies = []
op224_op225_op227.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False)]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op224_op225_op227.snodes[0] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 128})]
op224.unmet_dependencies = [   MemoryDep('buf223', 8388608*c0 + 16*c1 + 512*c2 + c3, {c0: 4, c1: 32, c2: 16384, c3: 16})]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (128, 262144)
op224.sizes = ([4, 32], [16384, 16])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op224_loop_body:
    var_ranges = {p0: 4, p1: 32, p2: 16384, p3: 16}
    index0 = 8388608*p0 + 16*p1 + 512*p2 + p3
    index1 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf224', get_index_1, getitem)
        return store_reduction
op224_op225_op227.snodes[1] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 128})]
op225.unmet_dependencies = [   MemoryDep('buf223', 8388608*c0 + 16*c1 + 512*c2 + c3, {c0: 4, c1: 32, c2: 16384, c3: 16})]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (128, 262144)
op225.sizes = ([4, 32], [16384, 16])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op225_loop_body:
    var_ranges = {p0: 4, p1: 32, p2: 16384, p3: 16}
    index0 = 8388608*p0 + 16*p1 + 512*p2 + p3
    index1 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf225', get_index_1, getitem_1)
        return store_reduction
op224_op225_op227.snodes[2] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 128})]
op227.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 128})]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (128, 1)
op227.sizes = ([128], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op227_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf227', get_index_1, rsqrt, None)
        return store


op228_op229: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op228_op229.writes = 
    [   MemoryDep('buf228', c0, {c0: 33554432}),
        MemoryDep('buf229', 8388608*c0 + c1 + 16384*c2, {c0: 4, c1: 16384, c2: 512})]
op228_op229.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 33554432}),
        MemoryDep('buf224', 32*c0 + ((c2//16)), {c0: 4, c1: 16384, c2: 512}),
        MemoryDep('buf227', 32*c0 + ((c2//16)), {c0: 4, c1: 16384, c2: 512})]
op228_op229.met_dependencies = 
    [   MemoryDep('primals_91', c1, {c0: 65536, c1: 512}),
        MemoryDep('primals_92', c1, {c0: 65536, c1: 512})]
op228_op229.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op228_op229.snodes[0] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 33554432})]
op228.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 33554432}),
        MemoryDep('buf224', 32*c0 + ((c2//16)), {c0: 4, c1: 16384, c2: 512}),
        MemoryDep('buf227', 32*c0 + ((c2//16)), {c0: 4, c1: 16384, c2: 512})]
op228.met_dependencies = 
    [   MemoryDep('primals_91', c1, {c0: 65536, c1: 512}),
        MemoryDep('primals_92', c1, {c0: 65536, c1: 512})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (33554432, 1)
op228.sizes = ([4, 16384, 512], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_91_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_92_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
class op228_loop_body:
    var_ranges = {p0: 4, p1: 16384, p2: 512}
    index0 = 8388608*p0 + 512*p1 + p2
    index1 = 32*p0 + ((p2//16))
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf227', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_91', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_92', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf228', get_index_5, add, None)
        return store
op228_op229.snodes[1] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', 8388608*c0 + c1 + 16384*c2, {c0: 4, c1: 16384, c2: 512})]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 33554432})]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (33554432, 1)
op229.sizes = ([4, 16384, 512], [])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 1, 65536, 512])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 128, 128], stride=[8388608, 16384, 128, 1])
class op229_loop_body:
    var_ranges = {p0: 4, p1: 16384, p2: 512}
    index0 = 8388608*p0 + 512*p1 + p2
    index1 = 8388608*p0 + p1 + 16384*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf229', get_index_2, mul, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelAlloc)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='primals_93', mode=None)]
op230.outputs = [
    buf230: ExternKernelAlloc
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.convolution


op231: ExternKernelSchedulerNode(ExternKernelAlloc)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op231.met_dependencies = [StarDep(name='primals_95', mode=None)]
op231.outputs = [
    buf231: ExternKernelAlloc
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf231.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op231.node.kernel = extern_kernels.convolution


op232: ExternKernelSchedulerNode(ExternKernelAlloc)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='primals_96', mode=None)]
op232.outputs = [
    buf232: ExternKernelAlloc
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False)]
]
op232.node.kernel = extern_kernels.convolution


op233_op234_op235_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op233_op234_op235_op237.writes = 
    [   MemoryDep('buf233', c0, {c0: 16777216}),
        MemoryDep('buf234', c0, {c0: 128}),
        MemoryDep('buf235', c0, {c0: 128}),
        MemoryDep('buf237', c0, {c0: 128})]
op233_op234_op235_op237.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 16777216}),
        MemoryDep('buf232', c0, {c0: 16777216})]
op233_op234_op235_op237.met_dependencies = [MemoryDep('primals_94', c1, {c0: 4, c1: 256})]
op233_op234_op235_op237.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op233_op234_op235_op237.snodes[0] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 16777216})]
op233.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 16777216}),
        MemoryDep('buf232', c0, {c0: 16777216})]
op233.met_dependencies = [MemoryDep('primals_94', c1, {c0: 4, c1: 256})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (16777216, 1)
op233.sizes = ([4, 256, 16384], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_94_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op233_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_94', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf233', get_index_3, add_1, None)
        return store
op233_op234_op235_op237.snodes[1] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 128})]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 16777216})]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (128, 131072)
op234.sizes = ([128], [131072])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op234_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf234', get_index_1, getitem)
        return store_reduction
op233_op234_op235_op237.snodes[2] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 128})]
op235.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 16777216})]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (128, 131072)
op235.sizes = ([128], [131072])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op235_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf235', get_index_1, getitem_1)
        return store_reduction
op233_op234_op235_op237.snodes[3] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 128})]
op237.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 128})]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (128, 1)
op237.sizes = ([128], [])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op237_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf237', get_index_1, rsqrt, None)
        return store


op238_op239: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op238_op239.writes = 
    [   MemoryDep('buf238', c0, {c0: 16777216}),
        MemoryDep('buf239', c0, {c0: 16777216})]
op238_op239.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 16777216}),
        MemoryDep('buf234', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf237', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op238_op239.met_dependencies = 
    [   MemoryDep('primals_97', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_98', c1, {c0: 4, c1: 256})]
op238_op239.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op238_op239.snodes[0] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 16777216})]
op238.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 16777216}),
        MemoryDep('buf234', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf237', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op238.met_dependencies = 
    [   MemoryDep('primals_97', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_98', c1, {c0: 4, c1: 256})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (16777216, 1)
op238.sizes = ([4, 256, 16384], [])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_97_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op238_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf234', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf237', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_97', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_98', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf238', get_index_5, add, None)
        return store
op238_op239.snodes[1] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 16777216})]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 16777216})]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (16777216, 1)
op239.sizes = ([16777216], [])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op239_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf239', get_index_2, mul, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='primals_99', mode=None)]
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: ExternKernelSchedulerNode(ExternKernelAlloc)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op241.met_dependencies = [StarDep(name='primals_101', mode=None)]
op241.outputs = [
    buf241: ExternKernelAlloc
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf241.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op241.node.kernel = extern_kernels.convolution


op242: ExternKernelSchedulerNode(ExternKernelAlloc)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='primals_102', mode=None)]
op242.outputs = [
    buf242: ExternKernelAlloc
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.convolution


op243: ExternKernelSchedulerNode(ExternKernelAlloc)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op243.met_dependencies = [StarDep(name='primals_103', mode=None)]
op243.outputs = [
    buf243: ExternKernelAlloc
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 1, 32768, 256])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.convolution


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op244.met_dependencies = [StarDep(name='primals_105', mode=None)]
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 1, 512, 4])
    buf244.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op244.node.kernel = extern_kernels.convolution


op245: ExternKernelSchedulerNode(ExternKernelAlloc)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='primals_106', mode=None)]
op245.outputs = [
    buf245: ExternKernelAlloc
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 1, 32768, 256])
    buf245.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.node.kernel = extern_kernels.convolution


op246_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op246_op247.writes = 
    [   MemoryDep('buf246', c0, {c0: 16777216}),
        MemoryDep('buf247', c0, {c0: 16777216})]
op246_op247.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 16777216}),
        MemoryDep('buf242', c0, {c0: 16777216}),
        MemoryDep('buf243', 4194304*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 16384}),
        MemoryDep('buf245', 4194304*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 16384})]
op246_op247.met_dependencies = 
    [   MemoryDep('primals_100', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_104', c1, {c0: 4, c1: 256})]
op246_op247.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op246_op247.snodes[0] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 16777216})]
op246.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 16777216}),
        MemoryDep('buf242', c0, {c0: 16777216}),
        MemoryDep('buf243', 4194304*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 16384}),
        MemoryDep('buf245', 4194304*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 16384})]
op246.met_dependencies = 
    [   MemoryDep('primals_100', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_104', c1, {c0: 4, c1: 256})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op246.group.device = cuda:0
op246.group.iteration = (16777216, 1)
op246.sizes = ([4, 256, 16384], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 1, 32768, 256])
primals_104_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 1, 32768, 256])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_100_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op246_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + p1 + 256*p2
    index1 = p1
    index2 = 4194304*p0 + 16384*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_104', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf240', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_100', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf242', get_index_5)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf246', get_index_6, mul_2, None)
        return store
op246_op247.snodes[1] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 16777216})]
op247.unmet_dependencies = [MemoryDep('buf246', c0, {c0: 16777216})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op247.group.device = cuda:0
op247.group.iteration = (16777216, 1)
op247.sizes = ([16777216], [])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op247_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf247', get_index_1, load, None)
        return store


op248_op249_op251: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op248_op249_op251.writes = 
    [   MemoryDep('buf248', c0, {c0: 128}),
        MemoryDep('buf249', c0, {c0: 128}),
        MemoryDep('buf251', c0, {c0: 128})]
op248_op249_op251.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 16777216})]
op248_op249_op251.met_dependencies = []
op248_op249_op251.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf249.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False)]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op248_op249_op251.snodes[0] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 128})]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 16777216})]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (128, 131072)
op248.sizes = ([128], [131072])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op248_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf248', get_index_1, getitem)
        return store_reduction
op248_op249_op251.snodes[1] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 128})]
op249.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 16777216})]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf249.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (128, 131072)
op249.sizes = ([128], [131072])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op249_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf249', get_index_1, getitem_1)
        return store_reduction
op248_op249_op251.snodes[2] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 128})]
op251.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 128})]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (128, 1)
op251.sizes = ([128], [])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op251_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf251', get_index_1, rsqrt, None)
        return store


op252_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op252_op253.writes = 
    [   MemoryDep('buf252', c0, {c0: 16777216}),
        MemoryDep('buf253', c0, {c0: 16777216})]
op252_op253.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 16777216}),
        MemoryDep('buf248', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf251', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op252_op253.met_dependencies = 
    [   MemoryDep('primals_107', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_108', c1, {c0: 4, c1: 256})]
op252_op253.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf252.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op252_op253.snodes[0] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 16777216})]
op252.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 16777216}),
        MemoryDep('buf248', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf251', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op252.met_dependencies = 
    [   MemoryDep('primals_107', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_108', c1, {c0: 4, c1: 256})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf252.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (16777216, 1)
op252.sizes = ([4, 256, 16384], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_108_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op252_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf248', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf251', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_107', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_108', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, add, None)
        return store
op252_op253.snodes[1] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 16777216})]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 16777216})]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (16777216, 1)
op253.sizes = ([16777216], [])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op253_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf252', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf253', get_index_2, mul, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelAlloc)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='primals_109', mode=None)]
op254.outputs = [
    buf254: ExternKernelAlloc
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.convolution


op255: ExternKernelSchedulerNode(ExternKernelAlloc)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='primals_111', mode=None)]
op255.outputs = [
    buf255: ExternKernelAlloc
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf255.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op255.node.kernel = extern_kernels.convolution


op256: ExternKernelSchedulerNode(ExternKernelAlloc)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='primals_112', mode=None)]
op256.outputs = [
    buf256: ExternKernelAlloc
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op256.node.kernel = extern_kernels.convolution


op257_op258_op259_op261: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op257_op258_op259_op261.writes = 
    [   MemoryDep('buf257', c0, {c0: 16777216}),
        MemoryDep('buf258', c0, {c0: 128}),
        MemoryDep('buf259', c0, {c0: 128}),
        MemoryDep('buf261', c0, {c0: 128})]
op257_op258_op259_op261.unmet_dependencies = 
    [   MemoryDep('buf254', c0, {c0: 16777216}),
        MemoryDep('buf256', c0, {c0: 16777216})]
op257_op258_op259_op261.met_dependencies = [MemoryDep('primals_110', c1, {c0: 4, c1: 256})]
op257_op258_op259_op261.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op257_op258_op259_op261.snodes[0] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 16777216})]
op257.unmet_dependencies = 
    [   MemoryDep('buf254', c0, {c0: 16777216}),
        MemoryDep('buf256', c0, {c0: 16777216})]
op257.met_dependencies = [MemoryDep('primals_110', c1, {c0: 4, c1: 256})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (16777216, 1)
op257.sizes = ([4, 256, 16384], [])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op257_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_110', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf256', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf257', get_index_3, add_1, None)
        return store
op257_op258_op259_op261.snodes[1] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 128})]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 16777216})]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (128, 131072)
op258.sizes = ([128], [131072])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op258_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf258', get_index_1, getitem)
        return store_reduction
op257_op258_op259_op261.snodes[2] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 128})]
op259.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 16777216})]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (128, 131072)
op259.sizes = ([128], [131072])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op259_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_1, getitem_1)
        return store_reduction
op257_op258_op259_op261.snodes[3] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 128})]
op261.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 128})]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (128, 1)
op261.sizes = ([128], [])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op261_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf261', get_index_1, rsqrt, None)
        return store


op262_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op262_op263.writes = 
    [   MemoryDep('buf262', c0, {c0: 16777216}),
        MemoryDep('buf263', c0, {c0: 16777216})]
op262_op263.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 16777216}),
        MemoryDep('buf258', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf261', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op262_op263.met_dependencies = 
    [   MemoryDep('primals_113', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_114', c1, {c0: 4, c1: 256})]
op262_op263.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262_op263.snodes[0] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 16777216})]
op262.unmet_dependencies = 
    [   MemoryDep('buf257', c0, {c0: 16777216}),
        MemoryDep('buf258', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf261', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op262.met_dependencies = 
    [   MemoryDep('primals_113', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_114', c1, {c0: 4, c1: 256})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (16777216, 1)
op262.sizes = ([4, 256, 16384], [])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_114_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op262_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf261', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_113', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_114', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf262', get_index_5, add, None)
        return store
op262_op263.snodes[1] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 16777216})]
op263.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 16777216})]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (16777216, 1)
op263.sizes = ([16777216], [])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op263_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf263', get_index_2, mul, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelAlloc)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='primals_115', mode=None)]
op264.outputs = [
    buf264: ExternKernelAlloc
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op264.node.kernel = extern_kernels.convolution


op265: ExternKernelSchedulerNode(ExternKernelAlloc)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op265.met_dependencies = [StarDep(name='primals_117', mode=None)]
op265.outputs = [
    buf265: ExternKernelAlloc
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op265.node.kernel = extern_kernels.convolution


op266: ExternKernelSchedulerNode(ExternKernelAlloc)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='primals_118', mode=None)]
op266.outputs = [
    buf266: ExternKernelAlloc
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf266.users = [
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op266.node.kernel = extern_kernels.convolution


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 16777216}),
        MemoryDep('buf268', c0, {c0: 128}),
        MemoryDep('buf269', c0, {c0: 128}),
        MemoryDep('buf271', c0, {c0: 128})]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf246', c0, {c0: 16777216}),
        MemoryDep('buf264', c0, {c0: 16777216}),
        MemoryDep('buf266', c0, {c0: 16777216})]
op267_op268_op269_op271.met_dependencies = [MemoryDep('primals_116', c1, {c0: 4, c1: 256})]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf271.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 16777216})]
op267.unmet_dependencies = 
    [   MemoryDep('buf246', c0, {c0: 16777216}),
        MemoryDep('buf264', c0, {c0: 16777216}),
        MemoryDep('buf266', c0, {c0: 16777216})]
op267.met_dependencies = [MemoryDep('primals_116', c1, {c0: 4, c1: 256})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (16777216, 1)
op267.sizes = ([4, 256, 16384], [])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op267_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf264', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_116', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf267', get_index_4, mul_1, None)
        return store
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 128})]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 16777216})]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf268.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op268.group.device = cuda:0
op268.group.iteration = (128, 131072)
op268.sizes = ([128], [131072])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op268_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 128})]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 16777216})]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (128, 131072)
op269.sizes = ([128], [131072])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op269_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 128})]
op271.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 128})]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf271.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op271.group.device = cuda:0
op271.group.iteration = (128, 1)
op271.sizes = ([128], [])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op271_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf271', get_index_1, rsqrt, None)
        return store


op272_op273: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op272_op273.writes = 
    [   MemoryDep('buf272', c0, {c0: 16777216}),
        MemoryDep('buf273', c0, {c0: 16777216})]
op272_op273.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 16777216}),
        MemoryDep('buf268', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf271', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op272_op273.met_dependencies = 
    [   MemoryDep('primals_119', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_120', c1, {c0: 4, c1: 256})]
op272_op273.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf273.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op272_op273.snodes[0] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 16777216})]
op272.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 16777216}),
        MemoryDep('buf268', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf271', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op272.met_dependencies = 
    [   MemoryDep('primals_119', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_120', c1, {c0: 4, c1: 256})]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (16777216, 1)
op272.sizes = ([4, 256, 16384], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_120_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op272_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf271', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_120', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf272', get_index_5, add, None)
        return store
op272_op273.snodes[1] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 16777216})]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 16777216})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf273.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (16777216, 1)
op273.sizes = ([16777216], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op273_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf273', get_index_2, mul, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelAlloc)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='primals_121', mode=None)]
op274.outputs = [
    buf274: ExternKernelAlloc
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False)]
]
op274.node.kernel = extern_kernels.convolution


op275: ExternKernelSchedulerNode(ExternKernelAlloc)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op275.met_dependencies = [StarDep(name='primals_123', mode=None)]
op275.outputs = [
    buf275: ExternKernelAlloc
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf275.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op275.node.kernel = extern_kernels.convolution


op276: ExternKernelSchedulerNode(ExternKernelAlloc)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf275', mode=None)]
op276.met_dependencies = [StarDep(name='primals_124', mode=None)]
op276.outputs = [
    buf276: ExternKernelAlloc
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False)]
]
op276.node.kernel = extern_kernels.convolution


op277_op278_op279_op281: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op277_op278_op279_op281.writes = 
    [   MemoryDep('buf277', c0, {c0: 16777216}),
        MemoryDep('buf278', c0, {c0: 128}),
        MemoryDep('buf279', c0, {c0: 128}),
        MemoryDep('buf281', c0, {c0: 128})]
op277_op278_op279_op281.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 16777216}),
        MemoryDep('buf276', c0, {c0: 16777216})]
op277_op278_op279_op281.met_dependencies = [MemoryDep('primals_122', c1, {c0: 4, c1: 256})]
op277_op278_op279_op281.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf279.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False)]
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op277_op278_op279_op281.snodes[0] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 16777216})]
op277.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 16777216}),
        MemoryDep('buf276', c0, {c0: 16777216})]
op277.met_dependencies = [MemoryDep('primals_122', c1, {c0: 4, c1: 256})]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (16777216, 1)
op277.sizes = ([4, 256, 16384], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op277_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_122', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf276', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf277', get_index_3, add_1, None)
        return store
op277_op278_op279_op281.snodes[1] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 128})]
op278.unmet_dependencies = [MemoryDep('buf277', c0, {c0: 16777216})]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (128, 131072)
op278.sizes = ([128], [131072])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op278_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf278', get_index_1, getitem)
        return store_reduction
op277_op278_op279_op281.snodes[2] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 128})]
op279.unmet_dependencies = [MemoryDep('buf277', c0, {c0: 16777216})]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf279.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (128, 131072)
op279.sizes = ([128], [131072])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op279_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf279', get_index_1, getitem_1)
        return store_reduction
op277_op278_op279_op281.snodes[3] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 128})]
op281.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 128})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (128, 1)
op281.sizes = ([128], [])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op281_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf281', get_index_1, rsqrt, None)
        return store


op282_op283: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op282_op283.writes = 
    [   MemoryDep('buf282', c0, {c0: 16777216}),
        MemoryDep('buf283', c0, {c0: 16777216})]
op282_op283.unmet_dependencies = 
    [   MemoryDep('buf277', c0, {c0: 16777216}),
        MemoryDep('buf278', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf281', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op282_op283.met_dependencies = 
    [   MemoryDep('primals_125', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_126', c1, {c0: 4, c1: 256})]
op282_op283.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op282_op283.snodes[0] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 16777216})]
op282.unmet_dependencies = 
    [   MemoryDep('buf277', c0, {c0: 16777216}),
        MemoryDep('buf278', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf281', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op282.met_dependencies = 
    [   MemoryDep('primals_125', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_126', c1, {c0: 4, c1: 256})]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (16777216, 1)
op282.sizes = ([4, 256, 16384], [])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_126_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op282_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf278', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf281', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_125', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_126', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf282', get_index_5, add, None)
        return store
op282_op283.snodes[1] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 16777216})]
op283.unmet_dependencies = [MemoryDep('buf282', c0, {c0: 16777216})]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (16777216, 1)
op283.sizes = ([16777216], [])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op283_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf282', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf283', get_index_2, mul, None)
        return store


op284: ExternKernelSchedulerNode(ExternKernelAlloc)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='primals_127', mode=None)]
op284.outputs = [
    buf284: ExternKernelAlloc
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op284.node.kernel = extern_kernels.convolution


op285: ExternKernelSchedulerNode(ExternKernelAlloc)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op285.met_dependencies = [StarDep(name='primals_129', mode=None)]
op285.outputs = [
    buf285: ExternKernelAlloc
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf285.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op285.node.kernel = extern_kernels.convolution


op286: ExternKernelSchedulerNode(ExternKernelAlloc)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='primals_130', mode=None)]
op286.outputs = [
    buf286: ExternKernelAlloc
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.convolution


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 256})]
op287.unmet_dependencies = []
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.int64, size=[256], stride=[1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (256, 1)
op287.sizes = ([256], [])
buf287_layout = FixedLayout('cuda:0', torch.int64, size=[256], stride=[1])
class op287_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf287', get_index_1, to_dtype, None)
        return store


op288_op289: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op288_op289.writes = 
    [   MemoryDep('buf288', c0, {c0: 67108864}),
        MemoryDep('buf289', 16777216*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 65536})]
op288_op289.unmet_dependencies = 
    [   MemoryDep('buf246', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf264', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf266', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf284', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf286', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf287', c1, {c0: 1024, c1: 256}),
        MemoryDep('buf287', c1, {c0: 262144, c1: 256})]
op288_op289.met_dependencies = 
    [   MemoryDep('primals_116', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_128', c1, {c0: 4, c1: 256})]
op288_op289.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf289.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op288_op289.snodes[0] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 67108864})]
op288.unmet_dependencies = 
    [   MemoryDep('buf246', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf264', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf266', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf284', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf286', 16384*c0 + 128*tmp0 + tmp1, {c0: 1024}),
        MemoryDep('buf287', c1, {c0: 1024, c1: 256}),
        MemoryDep('buf287', c1, {c0: 262144, c1: 256})]
op288.met_dependencies = 
    [   MemoryDep('primals_116', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_128', c1, {c0: 4, c1: 256})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (67108864, 1)
op288.sizes = ([4, 256, 256, 256], [])
buf287_layout = FixedLayout('cuda:0', torch.int64, size=[256], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.int64, size=[256], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_128_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
class op288_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 256, p3: 256}
    index0 = p2
    index1 = p3
    index2 = 128*indirect0 + indirect1 + 4194304*p0 + 16384*p1
    index3 = p1
    index4 = 16777216*p0 + 65536*p1 + 256*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf246', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf264', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_116', get_index_4)
        add = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf266', get_index_5)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_5, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load_2, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf284', get_index_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('primals_128', get_index_7)
        add_3 = ops.add(load_6, load_7)
        get_index_8 = self.get_index('index2')
        load_8 = ops.load('buf286', get_index_8)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_8, constant_2)
        add_4 = ops.add(add_3, mul_2)
        add_5 = ops.add(mul_1, add_4)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(add_5, constant_3)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf288', get_index_9, mul_3, None)
        return store
op288_op289.snodes[1] =
op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', 16777216*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 65536})]
op289.unmet_dependencies = [MemoryDep('buf288', c0, {c0: 67108864})]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf289.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op289.group.device = cuda:0
op289.group.iteration = (67108864, 1)
op289.sizes = ([4, 256, 65536], [])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
class op289_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 65536}
    index0 = 16777216*p0 + 65536*p1 + p2
    index1 = 16777216*p0 + p1 + 256*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf289', get_index_1, load, None)
        return store


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
op290.unmet_dependencies = []
op290.met_dependencies = [MemoryDep('primals_131', c0, {c0: 589824})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (589824, 1)
op290.sizes = ([256, 256, 9], [])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op290_loop_body:
    var_ranges = {p0: 256, p1: 256, p2: 9}
    index0 = 2304*p0 + 9*p1 + p2
    index1 = 2304*p0 + p1 + 256*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_131', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelAlloc)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf289', mode=None), StarDep(name='buf290', mode=None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ExternKernelAlloc
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf291.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.convolution


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', 2304*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 9})]
op292.unmet_dependencies = []
op292.met_dependencies = [MemoryDep('primals_133', c0, {c0: 9216})]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (9216, 1)
op292.sizes = ([4, 256, 9], [])
primals_133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 3, 3], stride=[2304, 9, 3, 1])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 3, 3], stride=[2304, 1, 768, 256])
class op292_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 9}
    index0 = 2304*p0 + 9*p1 + p2
    index1 = 2304*p0 + p1 + 256*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf292', get_index_1, load, None)
        return store


op293: ExternKernelSchedulerNode(ExternKernelAlloc)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf289', mode=None), StarDep(name='buf292', mode=None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ExternKernelAlloc
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 1, 1024, 4])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op293.node.kernel = extern_kernels.convolution


op294: ExternKernelSchedulerNode(ExternKernelAlloc)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='primals_134', mode=None)]
op294.outputs = [
    buf294: ExternKernelAlloc
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf294.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.convolution


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 33554432})]
op295.unmet_dependencies = []
op295.met_dependencies = [MemoryDep('primals_229', c0, {c0: 33554432})]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf295.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (33554432, 1)
op295.sizes = ([33554432], [])
primals_229_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op295_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_229', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf295', get_index_1, mul, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelAlloc)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='primals_230', mode=None)]
op296.outputs = [
    buf296: ExternKernelAlloc
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
    buf296.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op296.node.kernel = extern_kernels.convolution


op297: ExternKernelSchedulerNode(ExternKernelAlloc)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op297.met_dependencies = [StarDep(name='primals_231', mode=None)]
op297.outputs = [
    buf297: ExternKernelAlloc
    buf297.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf297.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op297.node.kernel = extern_kernels.convolution


op298: ExternKernelSchedulerNode(ExternKernelAlloc)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = [StarDep(name='primals_232', mode=None)]
op298.outputs = [
    buf298: ExternKernelAlloc
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.node.kernel = extern_kernels.convolution


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 67108864})]
op299.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 67108864}),
        MemoryDep('buf294', c0, {c0: 67108864}),
        MemoryDep('buf296', 16777216*c0 + c1 + 65536*c2, {c0: 4, c1: 65536, c2: 256}),
        MemoryDep('buf298', 16777216*c0 + c1 + 65536*c2, {c0: 4, c1: 65536, c2: 256})]
op299.met_dependencies = [MemoryDep('primals_132', c1, {c0: 262144, c1: 256})]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op299.group.device = cuda:0
op299.group.iteration = (67108864, 1)
op299.sizes = ([4, 65536, 256], [])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
primals_132_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
class op299_loop_body:
    var_ranges = {p0: 4, p1: 65536, p2: 256}
    index0 = 16777216*p0 + 256*p1 + p2
    index1 = p2
    index2 = 16777216*p0 + p1 + 65536*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_132', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf296', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf298', get_index_4)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_1)
        add_2 = ops.add(load_3, mul_1)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf299', get_index_5, add_3, None)
        return store


op300_op301_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op300_op301_op303.writes = 
    [   MemoryDep('buf300', c0, {c0: 128}),
        MemoryDep('buf301', c0, {c0: 128}),
        MemoryDep('buf303', c0, {c0: 128})]
op300_op301_op303.unmet_dependencies = [   MemoryDep('buf299', 16777216*c0 + 8*c1 + 256*c2 + c3, {c0: 4, c1: 32, c2: 65536, c3: 8})]
op300_op301_op303.met_dependencies = []
op300_op301_op303.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op300_op301_op303.snodes[0] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 128})]
op300.unmet_dependencies = [   MemoryDep('buf299', 16777216*c0 + 8*c1 + 256*c2 + c3, {c0: 4, c1: 32, c2: 65536, c3: 8})]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (128, 524288)
op300.sizes = ([4, 32], [65536, 8])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op300_loop_body:
    var_ranges = {p0: 4, p1: 32, p2: 65536, p3: 8}
    index0 = 16777216*p0 + 8*p1 + 256*p2 + p3
    index1 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_1, getitem)
        return store_reduction
op300_op301_op303.snodes[1] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 128})]
op301.unmet_dependencies = [   MemoryDep('buf299', 16777216*c0 + 8*c1 + 256*c2 + c3, {c0: 4, c1: 32, c2: 65536, c3: 8})]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (128, 524288)
op301.sizes = ([4, 32], [65536, 8])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op301_loop_body:
    var_ranges = {p0: 4, p1: 32, p2: 65536, p3: 8}
    index0 = 16777216*p0 + 8*p1 + 256*p2 + p3
    index1 = 32*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_1, getitem_1)
        return store_reduction
op300_op301_op303.snodes[2] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 128})]
op303.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 128})]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (128, 1)
op303.sizes = ([128], [])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op303_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        constant = ops.constant(524288.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf303', get_index_1, rsqrt, None)
        return store


op304_op305: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op304_op305.writes = 
    [   MemoryDep('buf304', c0, {c0: 67108864}),
        MemoryDep('buf305', 16777216*c0 + c1 + 65536*c2, {c0: 4, c1: 65536, c2: 256})]
op304_op305.unmet_dependencies = 
    [   MemoryDep('buf299', c0, {c0: 67108864}),
        MemoryDep('buf300', 32*c0 + ((c2//8)), {c0: 4, c1: 65536, c2: 256}),
        MemoryDep('buf303', 32*c0 + ((c2//8)), {c0: 4, c1: 65536, c2: 256})]
op304_op305.met_dependencies = 
    [   MemoryDep('primals_135', c1, {c0: 262144, c1: 256}),
        MemoryDep('primals_136', c1, {c0: 262144, c1: 256})]
op304_op305.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
    buf305.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op304_op305.snodes[0] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 67108864})]
op304.unmet_dependencies = 
    [   MemoryDep('buf299', c0, {c0: 67108864}),
        MemoryDep('buf300', 32*c0 + ((c2//8)), {c0: 4, c1: 65536, c2: 256}),
        MemoryDep('buf303', 32*c0 + ((c2//8)), {c0: 4, c1: 65536, c2: 256})]
op304.met_dependencies = 
    [   MemoryDep('primals_135', c1, {c0: 262144, c1: 256}),
        MemoryDep('primals_136', c1, {c0: 262144, c1: 256})]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (67108864, 1)
op304.sizes = ([4, 65536, 256], [])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_136_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
class op304_loop_body:
    var_ranges = {p0: 4, p1: 65536, p2: 256}
    index0 = 16777216*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p2//8))
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf303', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_135', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_136', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf304', get_index_5, add, None)
        return store
op304_op305.snodes[1] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', 16777216*c0 + c1 + 65536*c2, {c0: 4, c1: 65536, c2: 256})]
op305.unmet_dependencies = [MemoryDep('buf304', c0, {c0: 67108864})]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
    buf305.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (67108864, 1)
op305.sizes = ([4, 65536, 256], [])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 1, 65536, 256])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 256, 256], stride=[16777216, 65536, 256, 1])
class op305_loop_body:
    var_ranges = {p0: 4, p1: 65536, p2: 256}
    index0 = 16777216*p0 + 256*p1 + p2
    index1 = 16777216*p0 + p1 + 65536*p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf305', get_index_2, mul, None)
        return store


op306: ExternKernelSchedulerNode(ExternKernelAlloc)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op306.met_dependencies = [StarDep(name='primals_137', mode=None)]
op306.outputs = [
    buf306: ExternKernelAlloc
    buf306.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf306.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False)]
]
op306.node.kernel = extern_kernels.convolution


op307: ExternKernelSchedulerNode(ExternKernelAlloc)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op307.met_dependencies = [StarDep(name='primals_139', mode=None)]
op307.outputs = [
    buf307: ExternKernelAlloc
    buf307.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf307.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op307.node.kernel = extern_kernels.convolution


op308: ExternKernelSchedulerNode(ExternKernelAlloc)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op308.met_dependencies = [StarDep(name='primals_140', mode=None)]
op308.outputs = [
    buf308: ExternKernelAlloc
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf308.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False)]
]
op308.node.kernel = extern_kernels.convolution


op309_op310_op311_op313: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op309_op310_op311_op313.writes = 
    [   MemoryDep('buf309', c0, {c0: 33554432}),
        MemoryDep('buf310', c0, {c0: 128}),
        MemoryDep('buf311', c0, {c0: 128}),
        MemoryDep('buf313', c0, {c0: 128})]
op309_op310_op311_op313.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 33554432}),
        MemoryDep('buf308', c0, {c0: 33554432})]
op309_op310_op311_op313.met_dependencies = [MemoryDep('primals_138', c1, {c0: 4, c1: 128})]
op309_op310_op311_op313.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op309_op310_op311_op313.snodes[0] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 33554432})]
op309.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 33554432}),
        MemoryDep('buf308', c0, {c0: 33554432})]
op309.met_dependencies = [MemoryDep('primals_138', c1, {c0: 4, c1: 128})]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (33554432, 1)
op309.sizes = ([4, 128, 65536], [])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_138_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op309_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_138', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf308', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf309', get_index_3, add_1, None)
        return store
op309_op310_op311_op313.snodes[1] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 128})]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 33554432})]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op310.group.device = cuda:0
op310.group.iteration = (128, 262144)
op310.sizes = ([128], [262144])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op310_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf310', get_index_1, getitem)
        return store_reduction
op309_op310_op311_op313.snodes[2] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 128})]
op311.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 33554432})]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (128, 262144)
op311.sizes = ([128], [262144])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op311_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf311', get_index_1, getitem_1)
        return store_reduction
op309_op310_op311_op313.snodes[3] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 128})]
op313.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 128})]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (128, 1)
op313.sizes = ([128], [])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf313_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op313_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf313', get_index_1, rsqrt, None)
        return store


op314_op315: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op314_op315.writes = 
    [   MemoryDep('buf314', c0, {c0: 33554432}),
        MemoryDep('buf315', c0, {c0: 33554432})]
op314_op315.unmet_dependencies = 
    [   MemoryDep('buf309', c0, {c0: 33554432}),
        MemoryDep('buf310', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf313', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op314_op315.met_dependencies = 
    [   MemoryDep('primals_141', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_142', c1, {c0: 4, c1: 128})]
op314_op315.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False)]
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op314_op315.snodes[0] =
op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 33554432})]
op314.unmet_dependencies = 
    [   MemoryDep('buf309', c0, {c0: 33554432}),
        MemoryDep('buf310', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf313', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op314.met_dependencies = 
    [   MemoryDep('primals_141', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_142', c1, {c0: 4, c1: 128})]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (33554432, 1)
op314.sizes = ([4, 128, 65536], [])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf313_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_142_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf314_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op314_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf310', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf313', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_141', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_142', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf314', get_index_5, add, None)
        return store
op314_op315.snodes[1] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 33554432})]
op315.unmet_dependencies = [MemoryDep('buf314', c0, {c0: 33554432})]
op315.met_dependencies = []
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (33554432, 1)
op315.sizes = ([33554432], [])
buf314_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf315_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op315_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf314', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf315', get_index_2, mul, None)
        return store


op316: ExternKernelSchedulerNode(ExternKernelAlloc)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='primals_143', mode=None)]
op316.outputs = [
    buf316: ExternKernelAlloc
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf316.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
]
op316.node.kernel = extern_kernels.convolution


op317: ExternKernelSchedulerNode(ExternKernelAlloc)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op317.met_dependencies = [StarDep(name='primals_145', mode=None)]
op317.outputs = [
    buf317: ExternKernelAlloc
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op317.node.kernel = extern_kernels.convolution


op318: ExternKernelSchedulerNode(ExternKernelAlloc)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='primals_146', mode=None)]
op318.outputs = [
    buf318: ExternKernelAlloc
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf318.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
]
op318.node.kernel = extern_kernels.convolution


op319: ExternKernelSchedulerNode(ExternKernelAlloc)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op319.met_dependencies = [StarDep(name='primals_147', mode=None)]
op319.outputs = [
    buf319: ExternKernelAlloc
    buf319.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 1, 32768, 128])
    buf319.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op319.node.kernel = extern_kernels.convolution


op320: ExternKernelSchedulerNode(ExternKernelAlloc)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op320.met_dependencies = [StarDep(name='primals_149', mode=None)]
op320.outputs = [
    buf320: ExternKernelAlloc
    buf320.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 1, 1024, 4])
    buf320.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.convolution


op321: ExternKernelSchedulerNode(ExternKernelAlloc)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op321.met_dependencies = [StarDep(name='primals_150', mode=None)]
op321.outputs = [
    buf321: ExternKernelAlloc
    buf321.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 1, 32768, 128])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.node.kernel = extern_kernels.convolution


op322_op323: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op322_op323.writes = 
    [   MemoryDep('buf322', c0, {c0: 33554432}),
        MemoryDep('buf323', c0, {c0: 33554432})]
op322_op323.unmet_dependencies = 
    [   MemoryDep('buf316', c0, {c0: 33554432}),
        MemoryDep('buf318', c0, {c0: 33554432}),
        MemoryDep('buf319', 8388608*c0 + c1 + 128*c2, {c0: 4, c1: 128, c2: 65536}),
        MemoryDep('buf321', 8388608*c0 + c1 + 128*c2, {c0: 4, c1: 128, c2: 65536})]
op322_op323.met_dependencies = 
    [   MemoryDep('primals_144', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_148', c1, {c0: 4, c1: 128})]
op322_op323.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op322_op323.snodes[0] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 33554432})]
op322.unmet_dependencies = 
    [   MemoryDep('buf316', c0, {c0: 33554432}),
        MemoryDep('buf318', c0, {c0: 33554432}),
        MemoryDep('buf319', 8388608*c0 + c1 + 128*c2, {c0: 4, c1: 128, c2: 65536}),
        MemoryDep('buf321', 8388608*c0 + c1 + 128*c2, {c0: 4, c1: 128, c2: 65536})]
op322.met_dependencies = 
    [   MemoryDep('primals_144', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_148', c1, {c0: 4, c1: 128})]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op322.group.device = cuda:0
op322.group.iteration = (33554432, 1)
op322.sizes = ([4, 128, 65536], [])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 1, 32768, 128])
primals_148_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 1, 32768, 128])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_144_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op322_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + p1 + 128*p2
    index1 = p1
    index2 = 8388608*p0 + 65536*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_148', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf321', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf316', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_144', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf318', get_index_5)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf322', get_index_6, mul_2, None)
        return store
op322_op323.snodes[1] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 33554432})]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 33554432})]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op323.group.device = cuda:0
op323.group.iteration = (33554432, 1)
op323.sizes = ([33554432], [])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op323_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf323', get_index_1, load, None)
        return store


op324_op325_op327: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op324_op325_op327.writes = 
    [   MemoryDep('buf324', c0, {c0: 128}),
        MemoryDep('buf325', c0, {c0: 128}),
        MemoryDep('buf327', c0, {c0: 128})]
op324_op325_op327.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 33554432})]
op324_op325_op327.met_dependencies = []
op324_op325_op327.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf324.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf325.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=True, is_weak=False)]
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op324_op325_op327.snodes[0] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 128})]
op324.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 33554432})]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf324.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op324.group.device = cuda:0
op324.group.iteration = (128, 262144)
op324.sizes = ([128], [262144])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op324_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_1, getitem)
        return store_reduction
op324_op325_op327.snodes[1] =
op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 128})]
op325.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 33554432})]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf325.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=True, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (128, 262144)
op325.sizes = ([128], [262144])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op325_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf325', get_index_1, getitem_1)
        return store_reduction
op324_op325_op327.snodes[2] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 128})]
op327.unmet_dependencies = [MemoryDep('buf325', c0, {c0: 128})]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op327.group.device = cuda:0
op327.group.iteration = (128, 1)
op327.sizes = ([128], [])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op327_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf327', get_index_1, rsqrt, None)
        return store


op328_op329: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op328_op329.writes = 
    [   MemoryDep('buf328', c0, {c0: 33554432}),
        MemoryDep('buf329', c0, {c0: 33554432})]
op328_op329.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 33554432}),
        MemoryDep('buf324', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf327', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op328_op329.met_dependencies = 
    [   MemoryDep('primals_151', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_152', c1, {c0: 4, c1: 128})]
op328_op329.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf329.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op328_op329.snodes[0] =
op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 33554432})]
op328.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 33554432}),
        MemoryDep('buf324', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf327', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op328.met_dependencies = 
    [   MemoryDep('primals_151', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_152', c1, {c0: 4, c1: 128})]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (33554432, 1)
op328.sizes = ([4, 128, 65536], [])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_151_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_152_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op328_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf324', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf327', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_151', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_152', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf328', get_index_5, add, None)
        return store
op328_op329.snodes[1] =
op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 33554432})]
op329.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 33554432})]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf329.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op329.group.device = cuda:0
op329.group.iteration = (33554432, 1)
op329.sizes = ([33554432], [])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op329_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf328', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf329', get_index_2, mul, None)
        return store


op330: ExternKernelSchedulerNode(ExternKernelAlloc)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='primals_153', mode=None)]
op330.outputs = [
    buf330: ExternKernelAlloc
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf330.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.convolution


op331: ExternKernelSchedulerNode(ExternKernelAlloc)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op331.met_dependencies = [StarDep(name='primals_155', mode=None)]
op331.outputs = [
    buf331: ExternKernelAlloc
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf331.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op331.node.kernel = extern_kernels.convolution


op332: ExternKernelSchedulerNode(ExternKernelAlloc)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='primals_156', mode=None)]
op332.outputs = [
    buf332: ExternKernelAlloc
    buf332.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf332.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op332.node.kernel = extern_kernels.convolution


op333_op334_op335_op337: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op333_op334_op335_op337.writes = 
    [   MemoryDep('buf333', c0, {c0: 33554432}),
        MemoryDep('buf334', c0, {c0: 128}),
        MemoryDep('buf335', c0, {c0: 128}),
        MemoryDep('buf337', c0, {c0: 128})]
op333_op334_op335_op337.unmet_dependencies = 
    [   MemoryDep('buf330', c0, {c0: 33554432}),
        MemoryDep('buf332', c0, {c0: 33554432})]
op333_op334_op335_op337.met_dependencies = [MemoryDep('primals_154', c1, {c0: 4, c1: 128})]
op333_op334_op335_op337.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf335.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op333_op334_op335_op337.snodes[0] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 33554432})]
op333.unmet_dependencies = 
    [   MemoryDep('buf330', c0, {c0: 33554432}),
        MemoryDep('buf332', c0, {c0: 33554432})]
op333.met_dependencies = [MemoryDep('primals_154', c1, {c0: 4, c1: 128})]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (33554432, 1)
op333.sizes = ([4, 128, 65536], [])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_154_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op333_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_154', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf332', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf333', get_index_3, add_1, None)
        return store
op333_op334_op335_op337.snodes[1] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 128})]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 33554432})]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (128, 262144)
op334.sizes = ([128], [262144])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op334_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf334', get_index_1, getitem)
        return store_reduction
op333_op334_op335_op337.snodes[2] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 128})]
op335.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 33554432})]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf335.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (128, 262144)
op335.sizes = ([128], [262144])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op335_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf335', get_index_1, getitem_1)
        return store_reduction
op333_op334_op335_op337.snodes[3] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 128})]
op337.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 128})]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (128, 1)
op337.sizes = ([128], [])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op337_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf337', get_index_1, rsqrt, None)
        return store


op338_op339: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op338_op339.writes = 
    [   MemoryDep('buf338', c0, {c0: 33554432}),
        MemoryDep('buf339', c0, {c0: 33554432})]
op338_op339.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 33554432}),
        MemoryDep('buf334', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf337', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op338_op339.met_dependencies = 
    [   MemoryDep('primals_157', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_158', c1, {c0: 4, c1: 128})]
op338_op339.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False)]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op338_op339.snodes[0] =
op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 33554432})]
op338.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 33554432}),
        MemoryDep('buf334', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf337', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op338.met_dependencies = 
    [   MemoryDep('primals_157', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_158', c1, {c0: 4, c1: 128})]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (33554432, 1)
op338.sizes = ([4, 128, 65536], [])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_157_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_158_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op338_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf337', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_157', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_158', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf338', get_index_5, add, None)
        return store
op338_op339.snodes[1] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 33554432})]
op339.unmet_dependencies = [MemoryDep('buf338', c0, {c0: 33554432})]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (33554432, 1)
op339.sizes = ([33554432], [])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op339_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf339', get_index_2, mul, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='primals_159', mode=None)]
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op340.node.kernel = extern_kernels.convolution


op341: ExternKernelSchedulerNode(ExternKernelAlloc)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op341.met_dependencies = [StarDep(name='primals_161', mode=None)]
op341.outputs = [
    buf341: ExternKernelAlloc
    buf341.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf341.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op341.node.kernel = extern_kernels.convolution


op342: ExternKernelSchedulerNode(ExternKernelAlloc)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='primals_162', mode=None)]
op342.outputs = [
    buf342: ExternKernelAlloc
    buf342.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op342.node.kernel = extern_kernels.convolution


op343_op344_op345_op347: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op343_op344_op345_op347.writes = 
    [   MemoryDep('buf343', c0, {c0: 33554432}),
        MemoryDep('buf344', c0, {c0: 128}),
        MemoryDep('buf345', c0, {c0: 128}),
        MemoryDep('buf347', c0, {c0: 128})]
op343_op344_op345_op347.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 33554432}),
        MemoryDep('buf340', c0, {c0: 33554432}),
        MemoryDep('buf342', c0, {c0: 33554432})]
op343_op344_op345_op347.met_dependencies = [MemoryDep('primals_160', c1, {c0: 4, c1: 128})]
op343_op344_op345_op347.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf345.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False)]
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343_op344_op345_op347.snodes[0] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 33554432})]
op343.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 33554432}),
        MemoryDep('buf340', c0, {c0: 33554432}),
        MemoryDep('buf342', c0, {c0: 33554432})]
op343.met_dependencies = [MemoryDep('primals_160', c1, {c0: 4, c1: 128})]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (33554432, 1)
op343.sizes = ([4, 128, 65536], [])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf340_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_160_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op343_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_160', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf342', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf343', get_index_4, mul_1, None)
        return store
op343_op344_op345_op347.snodes[1] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 128})]
op344.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 33554432})]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op344.group.device = cuda:0
op344.group.iteration = (128, 262144)
op344.sizes = ([128], [262144])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op344_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf344', get_index_1, getitem)
        return store_reduction
op343_op344_op345_op347.snodes[2] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 128})]
op345.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 33554432})]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf345.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (128, 262144)
op345.sizes = ([128], [262144])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op345_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf345', get_index_1, getitem_1)
        return store_reduction
op343_op344_op345_op347.snodes[3] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 128})]
op347.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 128})]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op347.group.device = cuda:0
op347.group.iteration = (128, 1)
op347.sizes = ([128], [])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op347_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf347', get_index_1, rsqrt, None)
        return store


op348_op349: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op348_op349.writes = 
    [   MemoryDep('buf348', c0, {c0: 33554432}),
        MemoryDep('buf349', c0, {c0: 33554432})]
op348_op349.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 33554432}),
        MemoryDep('buf344', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf347', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op348_op349.met_dependencies = 
    [   MemoryDep('primals_163', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_164', c1, {c0: 4, c1: 128})]
op348_op349.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf349.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op348_op349.snodes[0] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 33554432})]
op348.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 33554432}),
        MemoryDep('buf344', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf347', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op348.met_dependencies = 
    [   MemoryDep('primals_163', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_164', c1, {c0: 4, c1: 128})]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (33554432, 1)
op348.sizes = ([4, 128, 65536], [])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_163_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_164_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op348_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf344', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf347', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_163', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_164', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf348', get_index_5, add, None)
        return store
op348_op349.snodes[1] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 33554432})]
op349.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 33554432})]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf349.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (33554432, 1)
op349.sizes = ([33554432], [])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op349_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf348', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf349', get_index_2, mul, None)
        return store


op350: ExternKernelSchedulerNode(ExternKernelAlloc)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op350.met_dependencies = [StarDep(name='primals_165', mode=None)]
op350.outputs = [
    buf350: ExternKernelAlloc
    buf350.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf350.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False)]
]
op350.node.kernel = extern_kernels.convolution


op351: ExternKernelSchedulerNode(ExternKernelAlloc)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op351.met_dependencies = [StarDep(name='primals_167', mode=None)]
op351.outputs = [
    buf351: ExternKernelAlloc
    buf351.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf351.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op351.node.kernel = extern_kernels.convolution


op352: ExternKernelSchedulerNode(ExternKernelAlloc)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf351', mode=None)]
op352.met_dependencies = [StarDep(name='primals_168', mode=None)]
op352.outputs = [
    buf352: ExternKernelAlloc
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False)]
]
op352.node.kernel = extern_kernels.convolution


op353_op354_op355_op357: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op353_op354_op355_op357.writes = 
    [   MemoryDep('buf353', c0, {c0: 33554432}),
        MemoryDep('buf354', c0, {c0: 128}),
        MemoryDep('buf355', c0, {c0: 128}),
        MemoryDep('buf357', c0, {c0: 128})]
op353_op354_op355_op357.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 33554432}),
        MemoryDep('buf352', c0, {c0: 33554432})]
op353_op354_op355_op357.met_dependencies = [MemoryDep('primals_166', c1, {c0: 4, c1: 128})]
op353_op354_op355_op357.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf355.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False)]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op353_op354_op355_op357.snodes[0] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 33554432})]
op353.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 33554432}),
        MemoryDep('buf352', c0, {c0: 33554432})]
op353.met_dependencies = [MemoryDep('primals_166', c1, {c0: 4, c1: 128})]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (33554432, 1)
op353.sizes = ([4, 128, 65536], [])
buf350_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_166_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op353_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_166', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf352', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf353', get_index_3, add_1, None)
        return store
op353_op354_op355_op357.snodes[1] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 128})]
op354.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 33554432})]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (128, 262144)
op354.sizes = ([128], [262144])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op354_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf354', get_index_1, getitem)
        return store_reduction
op353_op354_op355_op357.snodes[2] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 128})]
op355.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 33554432})]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf355.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (128, 262144)
op355.sizes = ([128], [262144])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op355_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf355', get_index_1, getitem_1)
        return store_reduction
op353_op354_op355_op357.snodes[3] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 128})]
op357.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 128})]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op357.group.device = cuda:0
op357.group.iteration = (128, 1)
op357.sizes = ([128], [])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf357_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op357_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf357', get_index_1, rsqrt, None)
        return store


op358_op359: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op358_op359.writes = 
    [   MemoryDep('buf358', c0, {c0: 33554432}),
        MemoryDep('buf359', c0, {c0: 33554432})]
op358_op359.unmet_dependencies = 
    [   MemoryDep('buf353', c0, {c0: 33554432}),
        MemoryDep('buf354', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf357', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op358_op359.met_dependencies = 
    [   MemoryDep('primals_169', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_170', c1, {c0: 4, c1: 128})]
op358_op359.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf358.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False)]
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf359.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op358_op359.snodes[0] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 33554432})]
op358.unmet_dependencies = 
    [   MemoryDep('buf353', c0, {c0: 33554432}),
        MemoryDep('buf354', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf357', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op358.met_dependencies = 
    [   MemoryDep('primals_169', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_170', c1, {c0: 4, c1: 128})]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf358.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (33554432, 1)
op358.sizes = ([4, 128, 65536], [])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf357_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_169_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_170_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op358_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf354', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf357', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_169', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_170', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf358', get_index_5, add, None)
        return store
op358_op359.snodes[1] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 33554432})]
op359.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 33554432})]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf359.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op359.group.device = cuda:0
op359.group.iteration = (33554432, 1)
op359.sizes = ([33554432], [])
buf358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf359_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op359_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf358', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf359', get_index_2, mul, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelAlloc)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op360.met_dependencies = [StarDep(name='primals_171', mode=None)]
op360.outputs = [
    buf360: ExternKernelAlloc
    buf360.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf360.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op360.node.kernel = extern_kernels.convolution


op361: ExternKernelSchedulerNode(ExternKernelAlloc)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op361.met_dependencies = [StarDep(name='primals_173', mode=None)]
op361.outputs = [
    buf361: ExternKernelAlloc
    buf361.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf361.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op361.node.kernel = extern_kernels.convolution


op362: ExternKernelSchedulerNode(ExternKernelAlloc)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='primals_174', mode=None)]
op362.outputs = [
    buf362: ExternKernelAlloc
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.convolution


op363_op364_op365_op367: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op363_op364_op365_op367.writes = 
    [   MemoryDep('buf363', c0, {c0: 33554432}),
        MemoryDep('buf364', c0, {c0: 128}),
        MemoryDep('buf365', c0, {c0: 128}),
        MemoryDep('buf367', c0, {c0: 128})]
op363_op364_op365_op367.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 33554432}),
        MemoryDep('buf340', c0, {c0: 33554432}),
        MemoryDep('buf342', c0, {c0: 33554432}),
        MemoryDep('buf360', c0, {c0: 33554432}),
        MemoryDep('buf362', c0, {c0: 33554432})]
op363_op364_op365_op367.met_dependencies = 
    [   MemoryDep('primals_160', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_172', c1, {c0: 4, c1: 128})]
op363_op364_op365_op367.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363_op364_op365_op367.snodes[0] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 33554432})]
op363.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 33554432}),
        MemoryDep('buf340', c0, {c0: 33554432}),
        MemoryDep('buf342', c0, {c0: 33554432}),
        MemoryDep('buf360', c0, {c0: 33554432}),
        MemoryDep('buf362', c0, {c0: 33554432})]
op363.met_dependencies = 
    [   MemoryDep('primals_160', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_172', c1, {c0: 4, c1: 128})]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (33554432, 1)
op363.sizes = ([4, 128, 65536], [])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf340_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_160_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf360_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_172_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op363_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_160', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf342', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf360', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_172', get_index_5)
        add_3 = ops.add(load_4, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf362', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_6, constant_2)
        add_4 = ops.add(add_3, mul_2)
        add_5 = ops.add(mul_1, add_4)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(add_5, constant_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf363', get_index_7, mul_3, None)
        return store
op363_op364_op365_op367.snodes[1] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 128})]
op364.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 33554432})]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (128, 262144)
op364.sizes = ([128], [262144])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op364_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf364', get_index_1, getitem)
        return store_reduction
op363_op364_op365_op367.snodes[2] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 128})]
op365.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 33554432})]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (128, 262144)
op365.sizes = ([128], [262144])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op365_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf365', get_index_1, getitem_1)
        return store_reduction
op363_op364_op365_op367.snodes[3] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 128})]
op367.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 128})]
op367.met_dependencies = []
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op367.group.device = cuda:0
op367.group.iteration = (128, 1)
op367.sizes = ([128], [])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op367_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf367', get_index_1, rsqrt, None)
        return store


op368_op369: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op368_op369.writes = 
    [   MemoryDep('buf368', c0, {c0: 33554432}),
        MemoryDep('buf369', c0, {c0: 33554432})]
op368_op369.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 33554432}),
        MemoryDep('buf364', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf367', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op368_op369.met_dependencies = 
    [   MemoryDep('primals_233', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_234', c1, {c0: 4, c1: 128})]
op368_op369.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False)]
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf369.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op368_op369.snodes[0] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 33554432})]
op368.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 33554432}),
        MemoryDep('buf364', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf367', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op368.met_dependencies = 
    [   MemoryDep('primals_233', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_234', c1, {c0: 4, c1: 128})]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (33554432, 1)
op368.sizes = ([4, 128, 65536], [])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_233_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_234_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op368_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf364', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf367', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_233', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_234', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf368', get_index_5, add, None)
        return store
op368_op369.snodes[1] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 33554432})]
op369.unmet_dependencies = [MemoryDep('buf368', c0, {c0: 33554432})]
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf369.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op369.group.device = cuda:0
op369.group.iteration = (33554432, 1)
op369.sizes = ([33554432], [])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op369_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf368', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf369', get_index_2, mul, None)
        return store


op370: ExternKernelSchedulerNode(ExternKernelAlloc)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op370.met_dependencies = [StarDep(name='primals_235', mode=None)]
op370.outputs = [
    buf370: ExternKernelAlloc
    buf370.layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.convolution


op371: ExternKernelSchedulerNode(ExternKernelAlloc)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op371.met_dependencies = [StarDep(name='primals_237', mode=None)]
op371.outputs = [
    buf371: ExternKernelAlloc
    buf371.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf371.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op371.node.kernel = extern_kernels.convolution


op372: ExternKernelSchedulerNode(ExternKernelAlloc)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf371', mode=None)]
op372.met_dependencies = [StarDep(name='primals_238', mode=None)]
op372.outputs = [
    buf372: ExternKernelAlloc
    buf372.layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op372.node.kernel = extern_kernels.convolution


op373_op374: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op373_op374.writes = [MemoryDep('buf373', c0, {c0: 786432}), MemoryDep('buf374', c0, {c0: 786432})]
op373_op374.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 786432}), MemoryDep('buf372', c0, {c0: 786432})]
op373_op374.met_dependencies = [MemoryDep('primals_236', c1, {c0: 4, c1: 3})]
op373_op374.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf373.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.bool, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf374.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op373_op374.snodes[0] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 786432})]
op373.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 786432}), MemoryDep('buf372', c0, {c0: 786432})]
op373.met_dependencies = [MemoryDep('primals_236', c1, {c0: 4, c1: 3})]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf373.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (786432, 1)
op373.sizes = ([4, 3, 65536], [])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_236_layout = FixedLayout('cuda:0', torch.float32, size=[3], stride=[1])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
class op373_loop_body:
    var_ranges = {p0: 4, p1: 3, p2: 65536}
    index0 = 196608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_236', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf372', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(-1.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf373', get_index_3, minimum, None)
        return store
op373_op374.snodes[1] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 786432})]
op374.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 786432}), MemoryDep('buf372', c0, {c0: 786432})]
op374.met_dependencies = [MemoryDep('primals_236', c1, {c0: 4, c1: 3})]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.bool, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
    buf374.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (786432, 1)
op374.sizes = ([4, 3, 65536], [])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
primals_236_layout = FixedLayout('cuda:0', torch.float32, size=[3], stride=[1])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf374_layout = FixedLayout('cuda:0', torch.bool, size=[4, 3, 256, 256], stride=[196608, 65536, 256, 1])
class op374_loop_body:
    var_ranges = {p0: 4, p1: 3, p2: 65536}
    index0 = 196608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_236', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf372', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(-1.0, torch.float32)
        ge = ops.ge(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf370', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_236', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf372', get_index_5)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_1)
        constant_3 = ops.constant(1.0, torch.float32)
        le = ops.le(add_3, constant_3)
        logical_and = ops.logical_and(ge, le)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf374', get_index_6, logical_and, None)
        return store


