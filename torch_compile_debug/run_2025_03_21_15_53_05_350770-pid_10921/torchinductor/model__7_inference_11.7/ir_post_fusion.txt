op0: ExternKernelSchedulerNode(RandomSeeds)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = []
op0.outputs = [
    buf0: RandomSeeds
    buf0.layout = FixedLayout('cuda:0', torch.int64, size=[1], stride=[1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.node.kernel = aten.randint.low_out


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 4096})]
op1.unmet_dependencies = [MemoryDep('buf0', 0, {})]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 32], stride=[1024, 32, 1])
    buf1.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (4096, 1)
op1.sizes = ([4096], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[1], stride=[1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 32], stride=[1024, 32, 1])
class op1_loop_body:
    var_ranges = {p0: 4096}
    index0 = 0
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf0', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        randn = ops.randn(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, randn, None)
        return store


