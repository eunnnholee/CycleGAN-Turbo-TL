op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='primals_1', mode=None), StarDep(name='primals_2', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op0.node.kernel = extern_kernels.convolution


op1: ExternKernelSchedulerNode(ExternKernelAlloc)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = []
op1.met_dependencies = [StarDep(name='primals_1', mode=None), StarDep(name='primals_4', mode=None)]
op1.outputs = [
    buf1: ExternKernelAlloc
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1.node.kernel = extern_kernels.convolution


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='primals_5', mode=None)]
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 33554432})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 33554432}), MemoryDep('buf2', c0, {c0: 33554432})]
op3.met_dependencies = [MemoryDep('primals_3', c1, {c0: 4, c1: 128})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (33554432, 1)
op3.sizes = ([4, 128, 65536], [])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op3_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf3', get_index_3, add_1, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 128})]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 33554432})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (128, 262144)
op4.sizes = ([128], [262144])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op4_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 128})]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 33554432})]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (128, 262144)
op5.sizes = ([128], [262144])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op5_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_1, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 128})]
op7.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 128})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (128, 1)
op7.sizes = ([128], [])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op7_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, rsqrt, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 33554432})]
op8.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 33554432}),
        MemoryDep('buf4', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf7', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op8.met_dependencies = 
    [   MemoryDep('primals_6', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_7', c1, {c0: 4, c1: 128})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (33554432, 1)
op8.sizes = ([4, 128, 65536], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op8_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf7', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_6', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_7', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf8', get_index_5, add, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 33554432})]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 33554432})]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (33554432, 1)
op9.sizes = ([33554432], [])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op9_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf8', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf9', get_index_2, mul, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='primals_8', mode=None)]
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: ExternKernelSchedulerNode(ExternKernelAlloc)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op11.met_dependencies = [StarDep(name='primals_10', mode=None)]
op11.outputs = [
    buf11: ExternKernelAlloc
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.node.kernel = extern_kernels.convolution


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='primals_11', mode=None)]
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 33554432})]
op13.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 33554432}), MemoryDep('buf12', c0, {c0: 33554432})]
op13.met_dependencies = [MemoryDep('primals_9', c1, {c0: 4, c1: 128})]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (33554432, 1)
op13.sizes = ([4, 128, 65536], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op13_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_9', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf12', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf13', get_index_3, add_1, None)
        return store


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 128})]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 33554432})]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (128, 262144)
op14.sizes = ([128], [262144])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op14_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf14', get_index_1, getitem)
        return store_reduction


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 128})]
op15.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 33554432})]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf15.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (128, 262144)
op15.sizes = ([128], [262144])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op15_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf15', get_index_1, getitem_1)
        return store_reduction


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 128})]
op17.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 128})]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (128, 1)
op17.sizes = ([128], [])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op17_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf17', get_index_1, rsqrt, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 33554432})]
op18.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 33554432}),
        MemoryDep('buf14', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf17', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op18.met_dependencies = 
    [   MemoryDep('primals_12', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_13', c1, {c0: 4, c1: 128})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (33554432, 1)
op18.sizes = ([4, 128, 65536], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op18_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf14', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf17', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_12', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_13', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf18', get_index_5, add, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 33554432})]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 33554432})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (33554432, 1)
op19.sizes = ([33554432], [])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op19_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf19', get_index_2, mul, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='primals_14', mode=None)]
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op21.met_dependencies = [StarDep(name='primals_16', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf21.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op21.node.kernel = extern_kernels.convolution


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='primals_17', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 33554432})]
op23.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 33554432}),
        MemoryDep('buf22', c0, {c0: 33554432}),
        MemoryDep('buf3', c0, {c0: 33554432})]
op23.met_dependencies = [MemoryDep('primals_15', c1, {c0: 4, c1: 128})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (33554432, 1)
op23.sizes = ([4, 128, 65536], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op23_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_15', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf22', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_1, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 128})]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 33554432})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (128, 262144)
op24.sizes = ([128], [262144])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op24_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 128})]
op25.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 33554432})]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (128, 262144)
op25.sizes = ([128], [262144])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op25_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, getitem_1)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 128})]
op27.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 128})]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (128, 1)
op27.sizes = ([128], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op27_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf27', get_index_1, rsqrt, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 33554432})]
op28.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 33554432}),
        MemoryDep('buf24', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf27', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op28.met_dependencies = 
    [   MemoryDep('primals_18', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_19', c1, {c0: 4, c1: 128})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (33554432, 1)
op28.sizes = ([4, 128, 65536], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op28_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf27', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_18', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_19', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf28', get_index_5, add, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 33554432})]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 33554432})]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (33554432, 1)
op29.sizes = ([33554432], [])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op29_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf28', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf29', get_index_2, mul, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='primals_20', mode=None)]
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='primals_22', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.convolution


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='primals_23', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 33554432})]
op33.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 33554432}), MemoryDep('buf32', c0, {c0: 33554432})]
op33.met_dependencies = [MemoryDep('primals_21', c1, {c0: 4, c1: 128})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (33554432, 1)
op33.sizes = ([4, 128, 65536], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op33_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_21', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf33', get_index_3, add_1, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 128})]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 33554432})]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (128, 262144)
op34.sizes = ([128], [262144])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op34_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_1, getitem)
        return store_reduction


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 128})]
op35.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 33554432})]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (128, 262144)
op35.sizes = ([128], [262144])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op35_loop_body:
    var_ranges = {p0: 128, p1: 262144}
    index0 = 262144*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_1, getitem_1)
        return store_reduction


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 128})]
op37.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 128})]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (128, 1)
op37.sizes = ([128], [])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op37_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(262144.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf37', get_index_1, rsqrt, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 33554432})]
op38.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 33554432}),
        MemoryDep('buf34', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf37', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op38.met_dependencies = 
    [   MemoryDep('primals_24', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_25', c1, {c0: 4, c1: 128})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (33554432, 1)
op38.sizes = ([4, 128, 65536], [])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op38_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 65536}
    index0 = 8388608*p0 + 65536*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf37', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_24', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_25', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, add, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 33554432})]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 33554432})]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (33554432, 1)
op39.sizes = ([33554432], [])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
class op39_loop_body:
    var_ranges = {p0: 33554432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf39', get_index_2, mul, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='primals_26', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op41.met_dependencies = [StarDep(name='primals_28', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 256, 256], stride=[262144, 65536, 256, 1])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op41.node.kernel = extern_kernels.convolution


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='primals_29', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 33817088})]
op43.unmet_dependencies = 
    [   MemoryDep('buf23', 65536*c0 + 256*c1 + c2, {c0: 512, c1: 257, c2: 257}),
        MemoryDep('buf40', 65536*c0 + 256*c1 + c2, {c0: 512, c1: 257, c2: 257}),
        MemoryDep('buf42', 65536*c0 + 256*c1 + c2, {c0: 512, c1: 257, c2: 257})]
op43.met_dependencies = [MemoryDep('primals_27', c1, {c0: 4, c1: 128})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 257, 257], stride=[8454272, 66049, 257, 1])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (33817088, 1)
op43.sizes = ([4, 128, 257, 257], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 256, 256], stride=[8388608, 65536, 256, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 257, 257], stride=[8454272, 66049, 257, 1])
class op43_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 257, p3: 257}
    index0 = p2
    index1 = p3
    index2 = 8388608*p0 + 65536*p1 + 256*p2 + p3
    index3 = p1
    index4 = 8454272*p0 + 66049*p1 + 257*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf43', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('primals_27', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf42', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        return mul_1


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='primals_30', mode=None)]
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op45.met_dependencies = [StarDep(name='primals_32', mode=None)]
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op45.node.kernel = extern_kernels.convolution


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='primals_33', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 8388608})]
op47.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 8388608}), MemoryDep('buf46', c0, {c0: 8388608})]
op47.met_dependencies = [MemoryDep('primals_31', c1, {c0: 4, c1: 128})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (8388608, 1)
op47.sizes = ([4, 128, 16384], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
class op47_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 16384}
    index0 = 2097152*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_31', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf47', get_index_3, add_1, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 128})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 8388608})]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (128, 65536)
op48.sizes = ([128], [65536])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_1, getitem)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 128})]
op49.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 8388608})]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (128, 65536)
op49.sizes = ([128], [65536])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op49_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, getitem_1)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 128})]
op51.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 128})]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (128, 1)
op51.sizes = ([128], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op51_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf51', get_index_1, rsqrt, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 8388608})]
op52.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 8388608}),
        MemoryDep('buf48', 32*c0 + ((c1//4)), {c0: 4, c1: 128}),
        MemoryDep('buf51', 32*c0 + ((c1//4)), {c0: 4, c1: 128})]
op52.met_dependencies = 
    [   MemoryDep('primals_34', c1, {c0: 4, c1: 128}),
        MemoryDep('primals_35', c1, {c0: 4, c1: 128})]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (8388608, 1)
op52.sizes = ([4, 128, 16384], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
class op52_loop_body:
    var_ranges = {p0: 4, p1: 128, p2: 16384}
    index0 = 2097152*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//4))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf51', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_34', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_35', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf52', get_index_5, add, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 8388608})]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 8388608})]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (8388608, 1)
op53.sizes = ([8388608], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[4, 128, 128, 128], stride=[2097152, 16384, 128, 1])
class op53_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf53', get_index_2, mul, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='primals_36', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='primals_38', mode=None)]
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.convolution


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='primals_39', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 16777216})]
op57.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 16777216}), MemoryDep('buf56', c0, {c0: 16777216})]
op57.met_dependencies = [MemoryDep('primals_37', c1, {c0: 4, c1: 256})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (16777216, 1)
op57.sizes = ([4, 256, 16384], [])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op57_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_37', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf56', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf57', get_index_3, add_1, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 128})]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 16777216})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (128, 131072)
op58.sizes = ([128], [131072])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op58_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf58', get_index_1, getitem)
        return store_reduction


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 128})]
op59.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 16777216})]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (128, 131072)
op59.sizes = ([128], [131072])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op59_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf59', get_index_1, getitem_1)
        return store_reduction


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 128})]
op61.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 128})]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op61.group.device = cuda:0
op61.group.iteration = (128, 1)
op61.sizes = ([128], [])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op61_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf61', get_index_1, rsqrt, None)
        return store


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 16777216})]
op62.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 16777216}),
        MemoryDep('buf58', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf61', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op62.met_dependencies = 
    [   MemoryDep('primals_40', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_41', c1, {c0: 4, c1: 256})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (16777216, 1)
op62.sizes = ([4, 256, 16384], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op62_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_40', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_41', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, add, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 16777216})]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 16777216})]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (16777216, 1)
op63.sizes = ([16777216], [])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op63_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf63', get_index_2, mul, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelAlloc)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='primals_42', mode=None)]
op64.outputs = [
    buf64: ExternKernelAlloc
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op64.node.kernel = extern_kernels.convolution


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op65.met_dependencies = [StarDep(name='primals_44', mode=None)]
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf65.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.convolution


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='primals_45', mode=None)]
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op67.met_dependencies = [StarDep(name='primals_46', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op68.met_dependencies = [StarDep(name='primals_48', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf68.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op68.node.kernel = extern_kernels.convolution


op69: ExternKernelSchedulerNode(ExternKernelAlloc)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='primals_49', mode=None)]
op69.outputs = [
    buf69: ExternKernelAlloc
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.convolution


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 16777216})]
op70.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 16777216}),
        MemoryDep('buf66', c0, {c0: 16777216}),
        MemoryDep('buf67', c0, {c0: 16777216}),
        MemoryDep('buf69', c0, {c0: 16777216})]
op70.met_dependencies = 
    [   MemoryDep('primals_43', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_47', c1, {c0: 4, c1: 256})]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (16777216, 1)
op70.sizes = ([4, 256, 16384], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op70_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf64', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_43', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf66', get_index_5)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf70', get_index_6, mul_2, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 128})]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 16777216})]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (128, 131072)
op71.sizes = ([128], [131072])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op71_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_1, getitem)
        return store_reduction


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 128})]
op72.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 16777216})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (128, 131072)
op72.sizes = ([128], [131072])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op72_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_1, getitem_1)
        return store_reduction


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 128})]
op74.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 128})]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (128, 1)
op74.sizes = ([128], [])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op74_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf74', get_index_1, rsqrt, None)
        return store


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 16777216})]
op75.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 16777216}),
        MemoryDep('buf71', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf74', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op75.met_dependencies = 
    [   MemoryDep('primals_50', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_51', c1, {c0: 4, c1: 256})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (16777216, 1)
op75.sizes = ([4, 256, 16384], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op75_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf74', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_50', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_51', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, add, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 16777216})]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 16777216})]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf76.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (16777216, 1)
op76.sizes = ([16777216], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op76_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf76', get_index_2, mul, None)
        return store


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='primals_52', mode=None)]
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op78.met_dependencies = [StarDep(name='primals_54', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op78.node.kernel = extern_kernels.convolution


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='primals_55', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.node.kernel = extern_kernels.convolution


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 16777216})]
op80.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 16777216}), MemoryDep('buf79', c0, {c0: 16777216})]
op80.met_dependencies = [MemoryDep('primals_53', c1, {c0: 4, c1: 256})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (16777216, 1)
op80.sizes = ([4, 256, 16384], [])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op80_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_53', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf80', get_index_3, add_1, None)
        return store


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 128})]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 16777216})]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (128, 131072)
op81.sizes = ([128], [131072])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op81_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf81', get_index_1, getitem)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 128})]
op82.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 16777216})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (128, 131072)
op82.sizes = ([128], [131072])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op82_loop_body:
    var_ranges = {p0: 128, p1: 131072}
    index0 = 131072*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf82', get_index_1, getitem_1)
        return store_reduction


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 128})]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 128})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (128, 1)
op84.sizes = ([128], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op84_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(131072.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf84', get_index_1, rsqrt, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 16777216})]
op85.unmet_dependencies = 
    [   MemoryDep('buf80', c0, {c0: 16777216}),
        MemoryDep('buf81', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf84', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op85.met_dependencies = 
    [   MemoryDep('primals_56', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_57', c1, {c0: 4, c1: 256})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (16777216, 1)
op85.sizes = ([4, 256, 16384], [])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_56_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op85_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 16384}
    index0 = 4194304*p0 + 16384*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf81', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_56', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_57', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, add, None)
        return store


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 16777216})]
op86.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 16777216})]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (16777216, 1)
op86.sizes = ([16777216], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
class op86_loop_body:
    var_ranges = {p0: 16777216}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf86', get_index_2, mul, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='primals_58', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op88.met_dependencies = [StarDep(name='primals_60', mode=None)]
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 128, 128], stride=[65536, 16384, 128, 1])
    buf88.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.convolution


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='primals_61', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 17040384})]
op90.unmet_dependencies = 
    [   MemoryDep('buf70', 16384*c0 + 128*c1 + c2, {c0: 1024, c1: 129, c2: 129}),
        MemoryDep('buf87', 16384*c0 + 128*c1 + c2, {c0: 1024, c1: 129, c2: 129}),
        MemoryDep('buf89', 16384*c0 + 128*c1 + c2, {c0: 1024, c1: 129, c2: 129})]
op90.met_dependencies = [MemoryDep('primals_59', c1, {c0: 4, c1: 256})]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 129, 129], stride=[4260096, 16641, 129, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (17040384, 1)
op90.sizes = ([4, 256, 129, 129], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 128, 128], stride=[4194304, 16384, 128, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 129, 129], stride=[4260096, 16641, 129, 1])
class op90_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 129, p3: 129}
    index0 = p2
    index1 = p3
    index2 = 4194304*p0 + 16384*p1 + 128*p2 + p3
    index3 = p1
    index4 = 4260096*p0 + 16641*p1 + 129*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf90', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('primals_59', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf89', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        return mul_1


op91: ExternKernelSchedulerNode(ExternKernelAlloc)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='primals_62', mode=None)]
op91.outputs = [
    buf91: ExternKernelAlloc
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.convolution


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op92.met_dependencies = [StarDep(name='primals_64', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf92.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.node.kernel = extern_kernels.convolution


op93: ExternKernelSchedulerNode(ExternKernelAlloc)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='primals_65', mode=None)]
op93.outputs = [
    buf93: ExternKernelAlloc
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.convolution


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 4194304})]
op94.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 4194304}), MemoryDep('buf93', c0, {c0: 4194304})]
op94.met_dependencies = [MemoryDep('primals_63', c1, {c0: 4, c1: 256})]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (4194304, 1)
op94.sizes = ([4, 256, 4096], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op94_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 4096}
    index0 = 1048576*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_63', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf94', get_index_3, add_1, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 128})]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 4194304})]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (128, 32768)
op95.sizes = ([128], [32768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op95_loop_body:
    var_ranges = {p0: 128, p1: 32768}
    index0 = 32768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, getitem)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 128})]
op96.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 4194304})]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf96.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (128, 32768)
op96.sizes = ([128], [32768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op96_loop_body:
    var_ranges = {p0: 128, p1: 32768}
    index0 = 32768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_1, getitem_1)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 128})]
op98.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 128})]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (128, 1)
op98.sizes = ([128], [])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op98_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        constant = ops.constant(32768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf98', get_index_1, rsqrt, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 4194304})]
op99.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 4194304}),
        MemoryDep('buf95', 32*c0 + ((c1//8)), {c0: 4, c1: 256}),
        MemoryDep('buf98', 32*c0 + ((c1//8)), {c0: 4, c1: 256})]
op99.met_dependencies = 
    [   MemoryDep('primals_66', c1, {c0: 4, c1: 256}),
        MemoryDep('primals_67', c1, {c0: 4, c1: 256})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (4194304, 1)
op99.sizes = ([4, 256, 4096], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_66_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[256], stride=[1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op99_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 4096}
    index0 = 1048576*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//8))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf98', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_66', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_67', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, add, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 4194304})]
op100.unmet_dependencies = [MemoryDep('buf99', c0, {c0: 4194304})]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (4194304, 1)
op100.sizes = ([4194304], [])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op100_loop_body:
    var_ranges = {p0: 4194304}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf100', get_index_2, mul, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelAlloc)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='primals_68', mode=None)]
op101.outputs = [
    buf101: ExternKernelAlloc
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.convolution


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op102.met_dependencies = [StarDep(name='primals_70', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op102.node.kernel = extern_kernels.convolution


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='primals_71', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 8388608})]
op104.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 8388608}), MemoryDep('buf103', c0, {c0: 8388608})]
op104.met_dependencies = [MemoryDep('primals_69', c1, {c0: 4, c1: 512})]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (8388608, 1)
op104.sizes = ([4, 512, 4096], [])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op104_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_69', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf104', get_index_3, add_1, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 128})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 8388608})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (128, 65536)
op105.sizes = ([128], [65536])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op105_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, getitem)
        return store_reduction


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 128})]
op106.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 8388608})]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (128, 65536)
op106.sizes = ([128], [65536])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op106_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_1, getitem_1)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 128})]
op108.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 128})]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (128, 1)
op108.sizes = ([128], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op108_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf108', get_index_1, rsqrt, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 8388608})]
op109.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 8388608}),
        MemoryDep('buf105', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf108', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op109.met_dependencies = 
    [   MemoryDep('primals_72', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_73', c1, {c0: 4, c1: 512})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (8388608, 1)
op109.sizes = ([4, 512, 4096], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_72_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op109_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_72', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_73', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf109', get_index_5, add, None)
        return store


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 8388608})]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 8388608})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (8388608, 1)
op110.sizes = ([8388608], [])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op110_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf110', get_index_2, mul, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelAlloc)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='primals_74', mode=None)]
op111.outputs = [
    buf111: ExternKernelAlloc
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.convolution


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op112.met_dependencies = [StarDep(name='primals_76', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.convolution


op113: ExternKernelSchedulerNode(ExternKernelAlloc)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='primals_77', mode=None)]
op113.outputs = [
    buf113: ExternKernelAlloc
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.convolution


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op114.met_dependencies = [StarDep(name='primals_78', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: ExternKernelSchedulerNode(ExternKernelAlloc)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op115.met_dependencies = [StarDep(name='primals_80', mode=None)]
op115.outputs = [
    buf115: ExternKernelAlloc
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.convolution


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='primals_81', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 8388608})]
op117.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 8388608}),
        MemoryDep('buf113', c0, {c0: 8388608}),
        MemoryDep('buf114', c0, {c0: 8388608}),
        MemoryDep('buf116', c0, {c0: 8388608})]
op117.met_dependencies = 
    [   MemoryDep('primals_75', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_79', c1, {c0: 4, c1: 512})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (8388608, 1)
op117.sizes = ([4, 512, 4096], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_79_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op117_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_79', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf111', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_75', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf113', get_index_5)
        constant_1 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf117', get_index_6, mul_2, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 128})]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 8388608})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (128, 65536)
op118.sizes = ([128], [65536])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op118_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 128})]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 8388608})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (128, 65536)
op119.sizes = ([128], [65536])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op119_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 128})]
op121.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 128})]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op121.group.device = cuda:0
op121.group.iteration = (128, 1)
op121.sizes = ([128], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op121_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf121', get_index_1, rsqrt, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 8388608})]
op122.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 8388608}),
        MemoryDep('buf118', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf121', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op122.met_dependencies = 
    [   MemoryDep('primals_82', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_83', c1, {c0: 4, c1: 512})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (8388608, 1)
op122.sizes = ([4, 512, 4096], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_82_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op122_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf121', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_82', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_83', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf122', get_index_5, add, None)
        return store


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 8388608})]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 8388608})]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf123.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (8388608, 1)
op123.sizes = ([8388608], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op123_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf123', get_index_2, mul, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelAlloc)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='primals_84', mode=None)]
op124.outputs = [
    buf124: ExternKernelAlloc
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op124.node.kernel = extern_kernels.convolution


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op125.met_dependencies = [StarDep(name='primals_86', mode=None)]
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op125.node.kernel = extern_kernels.convolution


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='primals_87', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 8388608})]
op127.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 8388608}), MemoryDep('buf126', c0, {c0: 8388608})]
op127.met_dependencies = [MemoryDep('primals_85', c1, {c0: 4, c1: 512})]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (8388608, 1)
op127.sizes = ([4, 512, 4096], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_85_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op127_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_85', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf126', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf127', get_index_3, add_1, None)
        return store


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 128})]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 8388608})]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (128, 65536)
op128.sizes = ([128], [65536])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op128_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf128', get_index_1, getitem)
        return store_reduction


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 128})]
op129.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 8388608})]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (128, 65536)
op129.sizes = ([128], [65536])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op129_loop_body:
    var_ranges = {p0: 128, p1: 65536}
    index0 = 65536*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, getitem_1)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 128})]
op131.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 128})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (128, 1)
op131.sizes = ([128], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op131_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        constant = ops.constant(65536.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf131', get_index_1, rsqrt, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 8388608})]
op132.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 8388608}),
        MemoryDep('buf128', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf131', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op132.met_dependencies = 
    [   MemoryDep('primals_88', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_89', c1, {c0: 4, c1: 512})]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (8388608, 1)
op132.sizes = ([4, 512, 4096], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_88_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op132_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 4096}
    index0 = 2097152*p0 + 4096*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf128', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf131', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_88', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_89', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf132', get_index_5, add, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 8388608})]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 8388608})]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf133.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (8388608, 1)
op133.sizes = ([8388608], [])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
class op133_loop_body:
    var_ranges = {p0: 8388608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf132', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf133', get_index_2, mul, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelAlloc)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='primals_90', mode=None)]
op134.outputs = [
    buf134: ExternKernelAlloc
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.convolution


op135: ExternKernelSchedulerNode(ExternKernelAlloc)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op135.met_dependencies = [StarDep(name='primals_92', mode=None)]
op135.outputs = [
    buf135: ExternKernelAlloc
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 64, 64], stride=[16384, 4096, 64, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op135.node.kernel = extern_kernels.convolution


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='primals_93', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 8652800})]
op137.unmet_dependencies = 
    [   MemoryDep('buf117', 4096*c0 + 64*c1 + c2, {c0: 2048, c1: 65, c2: 65}),
        MemoryDep('buf134', 4096*c0 + 64*c1 + c2, {c0: 2048, c1: 65, c2: 65}),
        MemoryDep('buf136', 4096*c0 + 64*c1 + c2, {c0: 2048, c1: 65, c2: 65})]
op137.met_dependencies = [MemoryDep('primals_91', c1, {c0: 4, c1: 512})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 65, 65], stride=[2163200, 4225, 65, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (8652800, 1)
op137.sizes = ([4, 512, 65, 65], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
primals_91_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 64, 64], stride=[2097152, 4096, 64, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 65, 65], stride=[2163200, 4225, 65, 1])
class op137_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 65, p3: 65}
    index0 = p2
    index1 = p3
    index2 = 2097152*p0 + 4096*p1 + 64*p2 + p3
    index3 = p1
    index4 = 2163200*p0 + 4225*p1 + 65*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(64, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf137', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('primals_91', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf136', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        return mul_1


op138: ExternKernelSchedulerNode(ExternKernelAlloc)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='primals_94', mode=None)]
op138.outputs = [
    buf138: ExternKernelAlloc
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op138.node.kernel = extern_kernels.convolution


op139: ExternKernelSchedulerNode(ExternKernelAlloc)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op139.met_dependencies = [StarDep(name='primals_96', mode=None)]
op139.outputs = [
    buf139: ExternKernelAlloc
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.convolution


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='primals_97', mode=None)]
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 2097152})]
op141.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 2097152}), MemoryDep('buf140', c0, {c0: 2097152})]
op141.met_dependencies = [MemoryDep('primals_95', c1, {c0: 4, c1: 512})]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (2097152, 1)
op141.sizes = ([4, 512, 1024], [])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op141_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf141', get_index_3, add_1, None)
        return store


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 128})]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 2097152})]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (128, 16384)
op142.sizes = ([128], [16384])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op142_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf142', get_index_1, getitem)
        return store_reduction


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 2097152})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 16384)
op143.sizes = ([128], [16384])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem_1)
        return store_reduction


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 128})]
op145.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 128})]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (128, 1)
op145.sizes = ([128], [])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op145_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf145', get_index_1, rsqrt, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 2097152})]
op146.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 2097152}),
        MemoryDep('buf142', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf145', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op146.met_dependencies = 
    [   MemoryDep('primals_98', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_99', c1, {c0: 4, c1: 512})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (2097152, 1)
op146.sizes = ([4, 512, 1024], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op146_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf142', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf145', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_98', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_99', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 2097152})]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 2097152})]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf147.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (2097152, 1)
op147.sizes = ([2097152], [])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op147_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf147', get_index_2, mul, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelAlloc)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='primals_100', mode=None)]
op148.outputs = [
    buf148: ExternKernelAlloc
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op148.node.kernel = extern_kernels.convolution


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op149.met_dependencies = [StarDep(name='primals_102', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.convolution


op150: ExternKernelSchedulerNode(ExternKernelAlloc)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='primals_103', mode=None)]
op150.outputs = [
    buf150: ExternKernelAlloc
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.convolution


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 2097152})]
op151.unmet_dependencies = [MemoryDep('buf148', c0, {c0: 2097152}), MemoryDep('buf150', c0, {c0: 2097152})]
op151.met_dependencies = [MemoryDep('primals_101', c1, {c0: 4, c1: 512})]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (2097152, 1)
op151.sizes = ([4, 512, 1024], [])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_101_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op151_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_101', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf151', get_index_3, add_1, None)
        return store


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 128})]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 2097152})]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (128, 16384)
op152.sizes = ([128], [16384])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op152_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_1, getitem)
        return store_reduction


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 128})]
op153.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 2097152})]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (128, 16384)
op153.sizes = ([128], [16384])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op153_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf153', get_index_1, getitem_1)
        return store_reduction


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 128})]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 128})]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (128, 1)
op155.sizes = ([128], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op155_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf155', get_index_1, rsqrt, None)
        return store


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 2097152})]
op156.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 2097152}),
        MemoryDep('buf152', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf155', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op156.met_dependencies = 
    [   MemoryDep('primals_104', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_105', c1, {c0: 4, c1: 512})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (2097152, 1)
op156.sizes = ([4, 512, 1024], [])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_104_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op156_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf152', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_104', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_105', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf156', get_index_5, add, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 2097152})]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 2097152})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (2097152, 1)
op157.sizes = ([2097152], [])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op157_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf157', get_index_2, mul, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelAlloc)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='primals_106', mode=None)]
op158.outputs = [
    buf158: ExternKernelAlloc
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.convolution


op159: ExternKernelSchedulerNode(ExternKernelAlloc)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op159.met_dependencies = [StarDep(name='primals_108', mode=None)]
op159.outputs = [
    buf159: ExternKernelAlloc
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.convolution


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='primals_109', mode=None)]
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 2097152})]
op161.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 2097152}),
        MemoryDep('buf158', c0, {c0: 2097152}),
        MemoryDep('buf160', c0, {c0: 2097152})]
op161.met_dependencies = [MemoryDep('primals_107', c1, {c0: 4, c1: 512})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (2097152, 1)
op161.sizes = ([4, 512, 1024], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op161_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf158', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_107', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf160', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf161', get_index_4, mul_1, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 128})]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 2097152})]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (128, 16384)
op162.sizes = ([128], [16384])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op162_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_1, getitem)
        return store_reduction


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 128})]
op163.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 2097152})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (128, 16384)
op163.sizes = ([128], [16384])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op163_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf163', get_index_1, getitem_1)
        return store_reduction


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 128})]
op165.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 128})]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (128, 1)
op165.sizes = ([128], [])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op165_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf165', get_index_1, rsqrt, None)
        return store


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 2097152})]
op166.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 2097152}),
        MemoryDep('buf162', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf165', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op166.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_111', c1, {c0: 4, c1: 512})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (2097152, 1)
op166.sizes = ([4, 512, 1024], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op166_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf165', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_110', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_111', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf166', get_index_5, add, None)
        return store


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 2097152})]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 2097152})]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (2097152, 1)
op167.sizes = ([2097152], [])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op167_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf167', get_index_2, mul, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='primals_112', mode=None)]
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.convolution


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op169.met_dependencies = [StarDep(name='primals_114', mode=None)]
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.convolution


op170: ExternKernelSchedulerNode(ExternKernelAlloc)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='primals_115', mode=None)]
op170.outputs = [
    buf170: ExternKernelAlloc
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.node.kernel = extern_kernels.convolution


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 2097152})]
op171.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 2097152}), MemoryDep('buf170', c0, {c0: 2097152})]
op171.met_dependencies = [MemoryDep('primals_113', c1, {c0: 4, c1: 512})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (2097152, 1)
op171.sizes = ([4, 512, 1024], [])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op171_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_113', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf171', get_index_3, add_1, None)
        return store


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 128})]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 2097152})]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (128, 16384)
op172.sizes = ([128], [16384])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op172_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_1, getitem)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 128})]
op173.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 2097152})]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (128, 16384)
op173.sizes = ([128], [16384])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op173_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem_1)
        return store_reduction


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 128})]
op175.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 128})]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (128, 1)
op175.sizes = ([128], [])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op175_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf175', get_index_1, rsqrt, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 2097152})]
op176.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 2097152}),
        MemoryDep('buf172', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf175', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op176.met_dependencies = 
    [   MemoryDep('primals_116', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_117', c1, {c0: 4, c1: 512})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (2097152, 1)
op176.sizes = ([4, 512, 1024], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op176_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf175', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_116', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_117', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, add, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2097152})]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 2097152})]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (2097152, 1)
op177.sizes = ([2097152], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op177_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf176', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf177', get_index_2, mul, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='primals_118', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op179.met_dependencies = [StarDep(name='primals_120', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf179.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op179.node.kernel = extern_kernels.convolution


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='primals_121', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 2097152})]
op181.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 2097152}),
        MemoryDep('buf178', c0, {c0: 2097152}),
        MemoryDep('buf180', c0, {c0: 2097152})]
op181.met_dependencies = [MemoryDep('primals_119', c1, {c0: 4, c1: 512})]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (2097152, 1)
op181.sizes = ([4, 512, 1024], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op181_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_119', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf181', get_index_4, mul_1, None)
        return store


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 128})]
op182.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 2097152})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (128, 16384)
op182.sizes = ([128], [16384])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op182_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_1, getitem)
        return store_reduction


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 128})]
op183.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 2097152})]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (128, 16384)
op183.sizes = ([128], [16384])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op183_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf183', get_index_1, getitem_1)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 128})]
op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 128})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (128, 1)
op185.sizes = ([128], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op185_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf185', get_index_1, rsqrt, None)
        return store


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 2097152})]
op186.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 2097152}),
        MemoryDep('buf182', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf185', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op186.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_123', c1, {c0: 4, c1: 512})]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (2097152, 1)
op186.sizes = ([4, 512, 1024], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op186_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf182', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_122', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_123', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf186', get_index_5, add, None)
        return store


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 2097152})]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 2097152})]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (2097152, 1)
op187.sizes = ([2097152], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op187_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf187', get_index_2, mul, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelAlloc)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='primals_124', mode=None)]
op188.outputs = [
    buf188: ExternKernelAlloc
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.convolution


op189: ExternKernelSchedulerNode(ExternKernelAlloc)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op189.met_dependencies = [StarDep(name='primals_126', mode=None)]
op189.outputs = [
    buf189: ExternKernelAlloc
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op189.node.kernel = extern_kernels.convolution


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='primals_127', mode=None)]
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 2097152})]
op191.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 2097152}), MemoryDep('buf190', c0, {c0: 2097152})]
op191.met_dependencies = [MemoryDep('primals_125', c1, {c0: 4, c1: 512})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (2097152, 1)
op191.sizes = ([4, 512, 1024], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op191_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_125', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf191', get_index_3, add_1, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 128})]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 2097152})]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (128, 16384)
op192.sizes = ([128], [16384])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf192', get_index_1, getitem)
        return store_reduction


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 128})]
op193.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 2097152})]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf193.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (128, 16384)
op193.sizes = ([128], [16384])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op193_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem_1)
        return store_reduction


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 128})]
op195.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 128})]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (128, 1)
op195.sizes = ([128], [])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op195_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf195', get_index_1, rsqrt, None)
        return store


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 2097152})]
op196.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 2097152}),
        MemoryDep('buf192', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf195', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op196.met_dependencies = 
    [   MemoryDep('primals_128', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_129', c1, {c0: 4, c1: 512})]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (2097152, 1)
op196.sizes = ([4, 512, 1024], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_128_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op196_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf195', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_128', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_129', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add, None)
        return store


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 2097152})]
op197.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 2097152})]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op197.group.device = cuda:0
op197.group.iteration = (2097152, 1)
op197.sizes = ([2097152], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op197_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf196', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf197', get_index_2, mul, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='primals_130', mode=None)]
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op199.met_dependencies = [StarDep(name='primals_132', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.convolution


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='primals_133', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.convolution


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2097152})]
op201.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 2097152}),
        MemoryDep('buf198', c0, {c0: 2097152}),
        MemoryDep('buf200', c0, {c0: 2097152})]
op201.met_dependencies = [MemoryDep('primals_131', c1, {c0: 4, c1: 512})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (2097152, 1)
op201.sizes = ([4, 512, 1024], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op201_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_131', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf200', get_index_3)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf201', get_index_4, mul_1, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 128})]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 2097152})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (128, 16384)
op202.sizes = ([128], [16384])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op202_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf202', get_index_1, getitem)
        return store_reduction


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 128})]
op203.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 2097152})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (128, 16384)
op203.sizes = ([128], [16384])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op203_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_1, getitem_1)
        return store_reduction


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 128})]
op205.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 128})]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf205.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (128, 1)
op205.sizes = ([128], [])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op205_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf205', get_index_1, rsqrt, None)
        return store


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 2097152})]
op206.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 2097152}),
        MemoryDep('buf202', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf203', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op206.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_135', c1, {c0: 4, c1: 512})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 1024], stride=[524288, 1024, 1])
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (2097152, 1)
op206.sizes = ([4, 512, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 1024], stride=[524288, 1024, 1])
class op206_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf203', get_index_2)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_134', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_135', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf206', get_index_5, add_1, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='primals_136', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.bmm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 2097152})]
op208.unmet_dependencies = [MemoryDep('buf206', 524288*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 512})]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (2097152, 1)
op208.sizes = ([4, 1024, 512], [])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 1024], stride=[524288, 1024, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op208_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 512}
    index0 = 524288*p0 + p1 + 1024*p2
    index1 = 524288*p0 + 512*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf208', get_index_1, load, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='primals_138', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf209.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op209.node.kernel = extern_kernels.mm


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='primals_139', mode=None)]
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf210.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.mm


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op211.met_dependencies = [StarDep(name='primals_140', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.bmm


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op212.met_dependencies = [StarDep(name='primals_142', mode=None)]
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op212.node.kernel = extern_kernels.mm


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='primals_143', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf213.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.mm


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op214.met_dependencies = [StarDep(name='primals_144', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op214.node.kernel = extern_kernels.bmm


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op215.met_dependencies = [StarDep(name='primals_146', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf215.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op215.node.kernel = extern_kernels.mm


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='primals_147', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 2097152})]
op217.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 2097152}), MemoryDep('buf210', c0, {c0: 2097152})]
op217.met_dependencies = [MemoryDep('primals_137', c1, {c0: 4096, c1: 512})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf217.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (2097152, 1)
op217.sizes = ([4096, 512], [])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
primals_137_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op217_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_137', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf210', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf217', get_index_3, add_1, None)
        return store


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 2097152})]
op218.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 2097152}), MemoryDep('buf213', c0, {c0: 2097152})]
op218.met_dependencies = [MemoryDep('primals_141', c1, {c0: 4096, c1: 512})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf218.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (2097152, 1)
op218.sizes = ([4096, 512], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op218_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_141', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf218', get_index_3, add_1, None)
        return store


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 2097152})]
op219.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 2097152}), MemoryDep('buf216', c0, {c0: 2097152})]
op219.met_dependencies = [MemoryDep('primals_145', c1, {c0: 4096, c1: 512})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (2097152, 1)
op219.sizes = ([4096, 512], [])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
primals_145_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 512], stride=[524288, 512, 1])
class op219_loop_body:
    var_ranges = {p0: 4096, p1: 512}
    index0 = 512*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_145', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf216', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf219', get_index_3, add_1, None)
        return store


op220: ExternKernelSchedulerNode(FallbackKernel)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = 
    [   StarDep(name='buf217', mode=None),
        StarDep(name='buf218', mode=None),
        StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: FallbackKernel
    buf220.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf220.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op220.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op221: ExternKernelSchedulerNode(MultiOutput)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: MultiOutput
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1024, 512], stride=[524288, 512, 512, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op221.node.kernel = None


op222: ExternKernelSchedulerNode(MultiOutput)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: MultiOutput
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1, 1024], stride=[1024, 1024, 1])
    buf222.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op222.node.kernel = None


op223: ExternKernelSchedulerNode(MultiOutput)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: MultiOutput
    buf223.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf223.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op223.node.kernel = None


op224: ExternKernelSchedulerNode(MultiOutput)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: MultiOutput
    buf224.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf224.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op224.node.kernel = None


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op225.met_dependencies = [StarDep(name='primals_148', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.mm


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op226.met_dependencies = [StarDep(name='primals_150', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 4], stride=[4, 1])
    buf226.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op226.node.kernel = extern_kernels.mm


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='primals_151', mode=None)]
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op227.node.kernel = extern_kernels.mm


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 2097152})]
op228.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 2097152}),
        MemoryDep('buf225', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf227', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024})]
op228.met_dependencies = [MemoryDep('primals_149', c1, {c0: 4, c1: 512})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (2097152, 1)
op228.sizes = ([4, 512, 1024], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
primals_149_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op228_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + p1 + 512*p2
    index1 = p1
    index2 = 524288*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_149', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf227', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf201', get_index_3)
        add_2 = ops.add(add_1, load_3)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf228', get_index_4, mul_1, None)
        return store


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 128})]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 2097152})]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (128, 16384)
op229.sizes = ([128], [16384])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op229_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_1, getitem)
        return store_reduction


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 128})]
op230.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 2097152})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf230.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (128, 16384)
op230.sizes = ([128], [16384])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op230_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_1, getitem_1)
        return store_reduction


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 128})]
op232.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 128})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (128, 1)
op232.sizes = ([128], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op232_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf232', get_index_1, rsqrt, None)
        return store


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 2097152})]
op233.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 2097152}),
        MemoryDep('buf229', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf232', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op233.met_dependencies = 
    [   MemoryDep('primals_152', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_153', c1, {c0: 4, c1: 512})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (2097152, 1)
op233.sizes = ([4, 512, 1024], [])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_152_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_153_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op233_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf229', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf232', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_152', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_153', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf233', get_index_5, add, None)
        return store


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 2097152})]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 2097152})]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf234.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (2097152, 1)
op234.sizes = ([2097152], [])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op234_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf234', get_index_2, mul, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='primals_154', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236: ExternKernelSchedulerNode(ExternKernelAlloc)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op236.met_dependencies = [StarDep(name='primals_156', mode=None)]
op236.outputs = [
    buf236: ExternKernelAlloc
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op236.node.kernel = extern_kernels.convolution


op237: ExternKernelSchedulerNode(ExternKernelAlloc)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='primals_157', mode=None)]
op237.outputs = [
    buf237: ExternKernelAlloc
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op237.node.kernel = extern_kernels.convolution


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 2097152})]
op238.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 2097152}), MemoryDep('buf237', c0, {c0: 2097152})]
op238.met_dependencies = [MemoryDep('primals_155', c1, {c0: 4, c1: 512})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (2097152, 1)
op238.sizes = ([4, 512, 1024], [])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_155_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op238_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_155', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf237', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf238', get_index_3, add_1, None)
        return store


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 128})]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 2097152})]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (128, 16384)
op239.sizes = ([128], [16384])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op239_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf239', get_index_1, getitem)
        return store_reduction


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 128})]
op240.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 2097152})]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf240.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (128, 16384)
op240.sizes = ([128], [16384])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op240_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf240', get_index_1, getitem_1)
        return store_reduction


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 128})]
op242.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 128})]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (128, 1)
op242.sizes = ([128], [])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op242_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf242', get_index_1, rsqrt, None)
        return store


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 2097152})]
op243.unmet_dependencies = 
    [   MemoryDep('buf238', c0, {c0: 2097152}),
        MemoryDep('buf239', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf242', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op243.met_dependencies = 
    [   MemoryDep('primals_158', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_159', c1, {c0: 4, c1: 512})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (2097152, 1)
op243.sizes = ([4, 512, 1024], [])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_158_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_159_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op243_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf239', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf242', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_158', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_159', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf243', get_index_5, add, None)
        return store


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 2097152})]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 2097152})]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf244.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (2097152, 1)
op244.sizes = ([2097152], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op244_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf244', get_index_2, mul, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelAlloc)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='primals_160', mode=None)]
op245.outputs = [
    buf245: ExternKernelAlloc
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op245.node.kernel = extern_kernels.convolution


op246: ExternKernelSchedulerNode(ExternKernelAlloc)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op246.met_dependencies = [StarDep(name='primals_162', mode=None)]
op246.outputs = [
    buf246: ExternKernelAlloc
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf246.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op246.node.kernel = extern_kernels.convolution


op247: ExternKernelSchedulerNode(ExternKernelAlloc)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='primals_163', mode=None)]
op247.outputs = [
    buf247: ExternKernelAlloc
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.convolution


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 2097152})]
op248.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 2097152}),
        MemoryDep('buf225', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf227', 524288*c0 + c1 + 512*c2, {c0: 4, c1: 512, c2: 1024}),
        MemoryDep('buf245', c0, {c0: 2097152}),
        MemoryDep('buf247', c0, {c0: 2097152})]
op248.met_dependencies = 
    [   MemoryDep('primals_149', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_161', c1, {c0: 4, c1: 512})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (2097152, 1)
op248.sizes = ([4, 512, 1024], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
primals_149_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 512], stride=[512, 1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
primals_161_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op248_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + p1 + 512*p2
    index1 = p1
    index2 = 524288*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_149', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf227', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf201', get_index_3)
        add_2 = ops.add(add_1, load_3)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf245', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_161', get_index_5)
        add_3 = ops.add(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf247', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(load_6, constant_2)
        add_4 = ops.add(add_3, mul_2)
        add_5 = ops.add(mul_1, add_4)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(add_5, constant_3)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf248', get_index_7, mul_3, None)
        return store


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 128})]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 2097152})]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (128, 16384)
op249.sizes = ([128], [16384])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op249_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf249', get_index_1, getitem)
        return store_reduction


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 128})]
op250.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 2097152})]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (128, 16384)
op250.sizes = ([128], [16384])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op250_loop_body:
    var_ranges = {p0: 128, p1: 16384}
    index0 = 16384*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf250', get_index_1, getitem_1)
        return store_reduction


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 128})]
op252.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 128})]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (128, 1)
op252.sizes = ([128], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op252_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(16384.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf252', get_index_1, rsqrt, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 2097152})]
op253.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 2097152}),
        MemoryDep('buf249', 32*c0 + ((c1//16)), {c0: 4, c1: 512}),
        MemoryDep('buf252', 32*c0 + ((c1//16)), {c0: 4, c1: 512})]
op253.met_dependencies = 
    [   MemoryDep('primals_164', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_165', c1, {c0: 4, c1: 512})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (2097152, 1)
op253.sizes = ([4, 512, 1024], [])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_164_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
primals_165_layout = FixedLayout('cuda:0', torch.float32, size=[512], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op253_loop_body:
    var_ranges = {p0: 4, p1: 512, p2: 1024}
    index0 = 524288*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//16))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf249', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf252', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_164', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_165', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf253', get_index_5, add, None)
        return store


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 2097152})]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 2097152})]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf254.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (2097152, 1)
op254.sizes = ([2097152], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[4, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op254_loop_body:
    var_ranges = {p0: 2097152}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf253', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf254', get_index_2, mul, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelAlloc)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = [StarDep(name='primals_166', mode=None)]
op255.outputs = [
    buf255: ExternKernelAlloc
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op255.node.kernel = extern_kernels.convolution


op256: ExternKernelSchedulerNode(ExternKernelAlloc)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op256.met_dependencies = [StarDep(name='primals_168', mode=None)]
op256.outputs = [
    buf256: ExternKernelAlloc
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op256.node.kernel = extern_kernels.convolution


op257: ExternKernelSchedulerNode(ExternKernelAlloc)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='primals_169', mode=None)]
op257.outputs = [
    buf257: ExternKernelAlloc
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.convolution


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 32768})]
op258.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 32768}), MemoryDep('buf257', c0, {c0: 32768})]
op258.met_dependencies = [MemoryDep('primals_167', c1, {c0: 4, c1: 8})]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
    buf258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (32768, 1)
op258.sizes = ([4, 8, 1024], [])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
primals_167_layout = FixedLayout('cuda:0', torch.float32, size=[8], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
class op258_loop_body:
    var_ranges = {p0: 4, p1: 8, p2: 1024}
    index0 = 8192*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_167', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf257', get_index_2)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf258', get_index_3, add_1, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelAlloc)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='primals_170', mode=None)]
op259.outputs = [
    buf259: ExternKernelAlloc
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False)]
]
op259.node.kernel = extern_kernels.convolution


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 32768})]
op260.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 32768})]
op260.met_dependencies = [MemoryDep('primals_171', c1, {c0: 4, c1: 8})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (32768, 1)
op260.sizes = ([4, 8, 1024], [])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
primals_171_layout = FixedLayout('cuda:0', torch.float32, size=[8], stride=[1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
class op260_loop_body:
    var_ranges = {p0: 4, p1: 8, p2: 1024}
    index0 = 8192*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_171', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf260', get_index_2, add, None)
        return store


op261: ExternKernelSchedulerNode(RandomSeeds)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = []
op261.met_dependencies = []
op261.outputs = [
    buf261: RandomSeeds
    buf261.layout = FixedLayout('cuda:0', torch.int64, size=[1], stride=[1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = aten.randint.low_out


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 16384})]
op262.unmet_dependencies = [MemoryDep('buf261', 0, {})]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (16384, 1)
op262.sizes = ([16384], [])
buf261_layout = FixedLayout('cuda:0', torch.int64, size=[1], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
class op262_loop_body:
    var_ranges = {p0: 16384}
    index0 = 0
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf261', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        randn = ops.randn(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, randn, None)
        return store


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 16384})]
op263.unmet_dependencies = 
    [   MemoryDep('buf260', 8192*c0 + c1 + 4096, {c0: 4, c1: 4096}),
        MemoryDep('buf260', 8192*c0 + c1, {c0: 4, c1: 4096}),
        MemoryDep('buf262', c0, {c0: 16384})]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (16384, 1)
op263.sizes = ([4, 4096], [])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 8, 32, 32], stride=[8192, 1024, 32, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
class op263_loop_body:
    var_ranges = {p0: 4, p1: 4096}
    index0 = 8192*p0 + p1
    index1 = 8192*p0 + p1 + 4096
    index2 = 4096*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf260', get_index_1)
        constant = ops.constant(-30.0, torch.float32)
        maximum = ops.maximum(load_1, constant)
        constant_1 = ops.constant(20.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul = ops.mul(minimum, constant_2)
        exp = ops.exp(mul)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf262', get_index_2)
        mul_1 = ops.mul(exp, load_2)
        add = ops.add(load, mul_1)
        constant_3 = ops.constant(0.18215, torch.float32)
        mul_2 = ops.mul(add, constant_3)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf263', get_index_3, mul_2, None)
        return store


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1280})]
op264.unmet_dependencies = []
op264.met_dependencies = [MemoryDep('primals_172', 0, {})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (1280, 1)
op264.sizes = ([4, 320], [])
primals_172_layout = FixedLayout('cuda:0', torch.int64, size=[1], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
class op264_loop_body:
    var_ranges = {p0: 4, p1: 320}
    index0 = p1
    index1 = 0
    index2 = I
    index3 = I
    index4 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(160, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(160, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(320, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf264', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_172', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        get_index_1 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_1, torch.float32)
        constant = ops.constant(-9.210340371976184, torch.float32)
        mul = ops.mul(index_expr, constant)
        constant_1 = ops.constant(0.00625, torch.float32)
        mul_1 = ops.mul(mul, constant_1)
        exp = ops.exp(mul_1)
        mul_2 = ops.mul(to_dtype, exp)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_2)
        sin = ops.sin(mul_3)
        return sin
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('primals_172', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        get_index_1 = self.get_index('index3')
        index_expr = ops.index_expr(get_index_1, torch.float32)
        constant = ops.constant(-9.210340371976184, torch.float32)
        mul = ops.mul(index_expr, constant)
        constant_1 = ops.constant(0.00625, torch.float32)
        mul_1 = ops.mul(mul, constant_1)
        exp = ops.exp(mul_1)
        mul_2 = ops.mul(to_dtype, exp)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_2)
        cos = ops.cos(mul_3)
        return cos


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 1280})]
op265.unmet_dependencies = 
    [   MemoryDep('buf264', 320*c0 + (I) + 160, {c0: 4, c1: 320}),
        MemoryDep('buf264', 320*c0 + (I), {c0: 4, c1: 320})]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (1280, 1)
op265.sizes = ([4, 320], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
class op265_loop_body:
    var_ranges = {p0: 4, p1: 320}
    index0 = p1
    index1 = 320*p0 + (I) + 160
    index2 = 320*p0 + (I)
    index3 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(160, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(160, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(320, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf265', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf264', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf264', get_index)
        return load


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='primals_173', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 5120})]
op267.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 5120})]
op267.met_dependencies = [MemoryDep('primals_174', c1, {c0: 4, c1: 1280})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (5120, 1)
op267.sizes = ([4, 1280], [])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_174_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
class op267_loop_body:
    var_ranges = {p0: 4, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_174', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf266', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_174', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf267', get_index_4, mul, None)
        return store


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='primals_175', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op269: ExternKernelSchedulerNode(ExternKernelAlloc)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op269.met_dependencies = [StarDep(name='primals_178', mode=None)]
op269.outputs = [
    buf269: ExternKernelAlloc
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.convolution


op270: ExternKernelSchedulerNode(ExternKernelAlloc)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op270.met_dependencies = [StarDep(name='primals_180', mode=None)]
op270.outputs = [
    buf270: ExternKernelAlloc
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf270.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op270.node.kernel = extern_kernels.convolution


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='primals_181', mode=None)]
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.convolution


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 1310720})]
op272.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 1310720}), MemoryDep('buf271', c0, {c0: 1310720})]
op272.met_dependencies = [MemoryDep('primals_179', c1, {c0: 4, c1: 320})]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1950'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op272.group.device = cuda:0
op272.group.iteration = (1310720, 1)
op272.sizes = ([4, 320, 1024], [])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_179_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op272_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_179', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf271', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf272', get_index_3, add_1, None)
        return store


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 128})]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 1310720})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (128, 10240)
op273.sizes = ([128], [10240])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op273_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf273', get_index_1, getitem)
        return store_reduction


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 128})]
op274.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 1310720})]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf274.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (128, 10240)
op274.sizes = ([128], [10240])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op274_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_1, getitem_1)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 128})]
op276.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 128})]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (128, 1)
op276.sizes = ([128], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op276_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf276', get_index_1, rsqrt, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 1310720})]
op277.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 1310720}),
        MemoryDep('buf273', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf276', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op277.met_dependencies = 
    [   MemoryDep('primals_182', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_183', c1, {c0: 4, c1: 320})]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (1310720, 1)
op277.sizes = ([4, 320, 1024], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_182_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_183_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op277_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_182', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_183', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf277', get_index_5, add, None)
        return store


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1310720})]
op278.unmet_dependencies = [MemoryDep('buf277', c0, {c0: 1310720})]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (1310720, 1)
op278.sizes = ([1310720], [])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op278_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf278', get_index_2, mul, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelAlloc)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='primals_184', mode=None)]
op279.outputs = [
    buf279: ExternKernelAlloc
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op279.node.kernel = extern_kernels.convolution


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op280.met_dependencies = [StarDep(name='primals_186', mode=None)]
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf280.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.convolution


op281: ExternKernelSchedulerNode(ExternKernelAlloc)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='primals_187', mode=None)]
op281.outputs = [
    buf281: ExternKernelAlloc
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.convolution


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 5120})]
op282.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 5120})]
op282.met_dependencies = [MemoryDep('primals_176', c1, {c0: 4, c1: 1280})]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf282.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op690'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op916'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op937'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1036'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1057'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1081'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1236'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1338'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1445'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1547'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1649'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1756'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1858'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1960'), can_inplace=False, is_weak=False),
    ]
]
op282.group.device = cuda:0
op282.group.iteration = (5120, 1)
op282.sizes = ([4, 1280], [])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_176_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
class op282_loop_body:
    var_ranges = {p0: 4, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_176', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf268', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_176', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf282', get_index_4, mul, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='primals_188', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.node.kernel = extern_kernels.mm


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1310720})]
op284.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 1310720}),
        MemoryDep('buf281', c0, {c0: 1310720}),
        MemoryDep('buf283', c0, {c0: 1280})]
op284.met_dependencies = 
    [   MemoryDep('primals_185', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_189', c1, {c0: 4, c1: 320})]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (1310720, 1)
op284.sizes = ([4, 320, 1024], [])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_185_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
primals_189_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op284_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    index2 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_185', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf283', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_189', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf284', get_index_5, add_3, None)
        return store


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 128})]
op285.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 1310720})]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (128, 10240)
op285.sizes = ([128], [10240])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op285_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf285', get_index_1, getitem)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 128})]
op286.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 1310720})]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf286.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (128, 10240)
op286.sizes = ([128], [10240])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op286_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf286', get_index_1, getitem_1)
        return store_reduction


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 128})]
op288.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 128})]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf288.users = [
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op288.group.device = cuda:0
op288.group.iteration = (128, 1)
op288.sizes = ([128], [])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op288_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf288', get_index_1, rsqrt, None)
        return store


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 1310720})]
op289.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 1310720}),
        MemoryDep('buf285', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf288', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op289.met_dependencies = 
    [   MemoryDep('primals_190', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_191', c1, {c0: 4, c1: 320})]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (1310720, 1)
op289.sizes = ([4, 320, 1024], [])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_190_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_191_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op289_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf285', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_190', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_191', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf289', get_index_5, add, None)
        return store


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 1310720})]
op290.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 1310720})]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf290.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op290.group.device = cuda:0
op290.group.iteration = (1310720, 1)
op290.sizes = ([1310720], [])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op290_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf289', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf290', get_index_2, mul, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelAlloc)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='primals_192', mode=None)]
op291.outputs = [
    buf291: ExternKernelAlloc
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.convolution


op292: ExternKernelSchedulerNode(ExternKernelAlloc)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op292.met_dependencies = [StarDep(name='primals_194', mode=None)]
op292.outputs = [
    buf292: ExternKernelAlloc
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op292.node.kernel = extern_kernels.convolution


op293: ExternKernelSchedulerNode(ExternKernelAlloc)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='primals_195', mode=None)]
op293.outputs = [
    buf293: ExternKernelAlloc
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.convolution


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 1310720})]
op294.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 1310720}),
        MemoryDep('buf291', c0, {c0: 1310720}),
        MemoryDep('buf293', c0, {c0: 1310720})]
op294.met_dependencies = [MemoryDep('primals_193', c1, {c0: 4, c1: 320})]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (1310720, 1)
op294.sizes = ([4, 320, 1024], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_193_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op294_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_193', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf293', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf294', get_index_4, mul_1, None)
        return store


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 128})]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1310720})]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (128, 10240)
op295.sizes = ([128], [10240])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op295_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_1, getitem)
        return store_reduction


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 128})]
op296.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1310720})]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (128, 10240)
op296.sizes = ([128], [10240])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op296_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf296', get_index_1, getitem_1)
        return store_reduction


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 128})]
op298.unmet_dependencies = [MemoryDep('buf296', c0, {c0: 128})]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf298.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (128, 1)
op298.sizes = ([128], [])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op298_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf298', get_index_1, rsqrt, None)
        return store


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 1310720})]
op299.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 1310720}),
        MemoryDep('buf295', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf296', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op299.met_dependencies = 
    [   MemoryDep('primals_196', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_197', c1, {c0: 4, c1: 320})]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf299.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
    ]
]
op299.group.device = cuda:0
op299.group.iteration = (1310720, 1)
op299.sizes = ([4, 320, 1024], [])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_196_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_197_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op299_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf295', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf296', get_index_2)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_196', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_197', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf299', get_index_5, add_1, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='primals_198', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op300.node.kernel = extern_kernels.bmm


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 1310720})]
op301.unmet_dependencies = [MemoryDep('buf299', 327680*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 320})]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf301.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op301.group.device = cuda:0
op301.group.iteration = (1310720, 1)
op301.sizes = ([4, 1024, 320], [])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op301_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 320}
    index0 = 327680*p0 + p1 + 1024*p2
    index1 = 327680*p0 + 320*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf301', get_index_1, load, None)
        return store


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf301', mode=None)]
op302.met_dependencies = [StarDep(name='primals_200', mode=None)]
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf302.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op302.node.kernel = extern_kernels.mm


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='primals_201', mode=None)]
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op303.node.kernel = extern_kernels.mm


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 4096})]
op304.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 1310720}), MemoryDep('buf303', c0, {c0: 1310720})]
op304.met_dependencies = [MemoryDep('primals_199', c1, {c0: 4096, c1: 320})]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf304.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (4096, 320)
op304.sizes = ([4096], [320])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_199_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op304_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_199', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf303', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf304', get_index_3, getitem)
        return store_reduction


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 4096})]
op305.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 1310720}), MemoryDep('buf303', c0, {c0: 1310720})]
op305.met_dependencies = [MemoryDep('primals_199', c1, {c0: 4096, c1: 320})]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2110'), can_inplace=True, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (4096, 320)
op305.sizes = ([4096], [320])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_199_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op305_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_199', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf303', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf305', get_index_3, getitem_1)
        return store_reduction


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 1310720})]
op307.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 1310720}),
        MemoryDep('buf303', c0, {c0: 1310720}),
        MemoryDep('buf304', c0, {c0: 4096}),
        MemoryDep('buf305', c0, {c0: 4096})]
op307.met_dependencies = [MemoryDep('primals_199', c1, {c0: 4096, c1: 320})]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op307.group.device = cuda:0
op307.group.iteration = (1310720, 1)
op307.sizes = ([4096, 320], [])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_199_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf307_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op307_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_199', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf303', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf304', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf305', get_index_4)
        constant_1 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf307', get_index_5, mul_1, None)
        return store


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 1310720})]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 1310720})]
op308.met_dependencies = 
    [   MemoryDep('primals_202', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_203', c1, {c0: 4096, c1: 320})]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf308.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (1310720, 1)
op308.sizes = ([4096, 320], [])
buf307_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_202_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_203_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op308_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_202', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_203', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf308', get_index_3, add, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='primals_204', mode=None)]
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.mm


op310: ExternKernelSchedulerNode(ExternKernelOut)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op310.met_dependencies = [StarDep(name='primals_205', mode=None)]
op310.outputs = [
    buf310: ExternKernelOut
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf310.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op310.node.kernel = extern_kernels.mm


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='primals_206', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312: ExternKernelSchedulerNode(ExternKernelOut)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op312.met_dependencies = [StarDep(name='primals_207', mode=None)]
op312.outputs = [
    buf312: ExternKernelOut
    buf312.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf312.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op312.node.kernel = extern_kernels.mm


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op313.met_dependencies = [StarDep(name='primals_208', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op313.node.kernel = extern_kernels.mm


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='primals_209', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op314.node.kernel = extern_kernels.mm


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op315.met_dependencies = [StarDep(name='primals_210', mode=None)]
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf315.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op315.node.kernel = extern_kernels.mm


op316: ExternKernelSchedulerNode(ExternKernelOut)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op316.met_dependencies = [StarDep(name='primals_211', mode=None)]
op316.outputs = [
    buf316: ExternKernelOut
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op316.node.kernel = extern_kernels.mm


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='primals_212', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op317.node.kernel = extern_kernels.mm


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1310720})]
op318.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 1310720}), MemoryDep('buf311', c0, {c0: 1310720})]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf318.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (1310720, 1)
op318.sizes = ([1310720], [])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf311_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op318_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf311', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf318', get_index_2, add, None)
        return store


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 1310720})]
op319.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 1310720}), MemoryDep('buf314', c0, {c0: 1310720})]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf319.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (1310720, 1)
op319.sizes = ([1310720], [])
buf312_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf314_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op319_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf314', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf319', get_index_2, add, None)
        return store


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1310720})]
op320.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 1310720}), MemoryDep('buf317', c0, {c0: 1310720})]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf320.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (1310720, 1)
op320.sizes = ([1310720], [])
buf315_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op320_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf320', get_index_2, add, None)
        return store


op321: ExternKernelSchedulerNode(FallbackKernel)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = 
    [   StarDep(name='buf318', mode=None),
        StarDep(name='buf319', mode=None),
        StarDep(name='buf320', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: FallbackKernel
    buf321.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf321.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op321.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op322: ExternKernelSchedulerNode(MultiOutput)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: MultiOutput
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf322.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op322.node.kernel = None


op323: ExternKernelSchedulerNode(MultiOutput)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: MultiOutput
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf323.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op323.node.kernel = None


op324: ExternKernelSchedulerNode(MultiOutput)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: MultiOutput
    buf324.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf324.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op324.node.kernel = None


op325: ExternKernelSchedulerNode(MultiOutput)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: MultiOutput
    buf325.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf325.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op325.node.kernel = None


op326: ExternKernelSchedulerNode(ExternKernelOut)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op326.met_dependencies = [StarDep(name='primals_213', mode=None)]
op326.outputs = [
    buf326: ExternKernelOut
    buf326.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf326.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
]
op326.node.kernel = extern_kernels.mm


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op327.met_dependencies = [StarDep(name='primals_215', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf327.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op327.node.kernel = extern_kernels.mm


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='primals_216', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
]
op328.node.kernel = extern_kernels.mm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 1310720})]
op329.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 1310720}),
        MemoryDep('buf303', c0, {c0: 1310720}),
        MemoryDep('buf326', c0, {c0: 1310720}),
        MemoryDep('buf328', c0, {c0: 1310720})]
op329.met_dependencies = 
    [   MemoryDep('primals_199', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_214', c1, {c0: 4096, c1: 320})]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
]
op329.group.device = cuda:0
op329.group.iteration = (1310720, 1)
op329.sizes = ([4096, 320], [])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_214_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_199_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op329_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_214', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf328', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf300', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_199', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf303', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf329', get_index_6, add_4, None)
        return store


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 4096})]
op330.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 1310720})]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf330.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (4096, 320)
op330.sizes = ([4096], [320])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op330_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf330', get_index_1, getitem)
        return store_reduction


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 4096})]
op331.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 1310720})]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2109'), can_inplace=True, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (4096, 320)
op331.sizes = ([4096], [320])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op331_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf331', get_index_1, getitem_1)
        return store_reduction


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 1310720})]
op333.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 1310720}),
        MemoryDep('buf330', c0, {c0: 4096}),
        MemoryDep('buf331', c0, {c0: 4096})]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (1310720, 1)
op333.sizes = ([4096, 320], [])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op333_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf330', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf331', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf333', get_index_3, mul, None)
        return store


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 1310720})]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 1310720})]
op334.met_dependencies = 
    [   MemoryDep('primals_217', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_218', c1, {c0: 4096, c1: 320})]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf334.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (1310720, 1)
op334.sizes = ([4096, 320], [])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_217_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_218_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op334_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_217', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_218', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf334', get_index_3, add, None)
        return store


op335: ExternKernelSchedulerNode(ExternKernelOut)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='primals_219', mode=None)]
op335.outputs = [
    buf335: ExternKernelOut
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf335.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False)]
]
op335.node.kernel = extern_kernels.mm


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op336.met_dependencies = [StarDep(name='primals_220', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf336.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op336.node.kernel = extern_kernels.mm


op337: ExternKernelSchedulerNode(ExternKernelOut)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf336', mode=None)]
op337.met_dependencies = [StarDep(name='primals_221', mode=None)]
op337.outputs = [
    buf337: ExternKernelOut
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False)]
]
op337.node.kernel = extern_kernels.mm


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = []
op338.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_222', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
]
op338.node.kernel = extern_kernels.mm


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = []
op339.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_223', mode=None)]
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op339.node.kernel = extern_kernels.mm


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='primals_224', mode=None)]
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
]
op340.node.kernel = extern_kernels.mm


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = []
op341.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_225', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = []
op342.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_226', mode=None)]
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf342.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op342.node.kernel = extern_kernels.mm


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf342', mode=None)]
op343.met_dependencies = [StarDep(name='primals_227', mode=None)]
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op343.node.kernel = extern_kernels.mm


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1310720})]
op344.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 1310720}), MemoryDep('buf337', c0, {c0: 1310720})]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf344.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op344.group.device = cuda:0
op344.group.iteration = (1310720, 1)
op344.sizes = ([1310720], [])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op344_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf337', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf344', get_index_2, add, None)
        return store


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 98560})]
op345.unmet_dependencies = [MemoryDep('buf338', c0, {c0: 98560}), MemoryDep('buf340', c0, {c0: 98560})]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf345.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (98560, 1)
op345.sizes = ([98560], [])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf340_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op345_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf345', get_index_2, add, None)
        return store


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 98560})]
op346.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 98560}), MemoryDep('buf343', c0, {c0: 98560})]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf346.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op346.group.device = cuda:0
op346.group.iteration = (98560, 1)
op346.sizes = ([98560], [])
buf341_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op346_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf346', get_index_2, add, None)
        return store


op347: ExternKernelSchedulerNode(FallbackKernel)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = 
    [   StarDep(name='buf344', mode=None),
        StarDep(name='buf345', mode=None),
        StarDep(name='buf346', mode=None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: FallbackKernel
    buf347.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf347.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
    ]
]
op347.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op348: ExternKernelSchedulerNode(MultiOutput)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: MultiOutput
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf348.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op348.node.kernel = None


op349: ExternKernelSchedulerNode(MultiOutput)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: MultiOutput
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf349.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op349.node.kernel = None


op350: ExternKernelSchedulerNode(MultiOutput)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: MultiOutput
    buf350.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf350.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op350.node.kernel = None


op351: ExternKernelSchedulerNode(MultiOutput)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: MultiOutput
    buf351.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf351.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op351.node.kernel = None


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf348', mode=None)]
op352.met_dependencies = [StarDep(name='primals_228', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
]
op352.node.kernel = extern_kernels.mm


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf348', mode=None)]
op353.met_dependencies = [StarDep(name='primals_230', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op353.node.kernel = extern_kernels.mm


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op354.met_dependencies = [StarDep(name='primals_231', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
]
op354.node.kernel = extern_kernels.mm


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 4096})]
op355.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 1310720}),
        MemoryDep('buf352', c0, {c0: 1310720}),
        MemoryDep('buf354', c0, {c0: 1310720})]
op355.met_dependencies = [MemoryDep('primals_229', c1, {c0: 4096, c1: 320})]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf355.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (4096, 320)
op355.sizes = ([4096], [320])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_229_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op355_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_229', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf329', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf355', get_index_4, getitem)
        return store_reduction


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 4096})]
op356.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 1310720}),
        MemoryDep('buf352', c0, {c0: 1310720}),
        MemoryDep('buf354', c0, {c0: 1310720})]
op356.met_dependencies = [MemoryDep('primals_229', c1, {c0: 4096, c1: 320})]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2108'), can_inplace=True, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (4096, 320)
op356.sizes = ([4096], [320])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_229_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op356_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_229', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf329', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf356', get_index_4, getitem_1)
        return store_reduction


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 1310720})]
op358.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 1310720}),
        MemoryDep('buf352', c0, {c0: 1310720}),
        MemoryDep('buf354', c0, {c0: 1310720}),
        MemoryDep('buf355', c0, {c0: 4096}),
        MemoryDep('buf356', c0, {c0: 4096})]
op358.met_dependencies = [MemoryDep('primals_229', c1, {c0: 4096, c1: 320})]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op358.group.device = cuda:0
op358.group.iteration = (1310720, 1)
op358.sizes = ([4096, 320], [])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_229_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op358_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_229', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf329', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf355', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf356', get_index_5)
        constant_2 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf358', get_index_6, mul_2, None)
        return store


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 1310720})]
op359.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 1310720})]
op359.met_dependencies = 
    [   MemoryDep('primals_232', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_233', c1, {c0: 4096, c1: 320})]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf359.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op359.group.device = cuda:0
op359.group.iteration = (1310720, 1)
op359.sizes = ([4096, 320], [])
buf358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_232_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_233_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf359_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op359_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_232', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_233', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf359', get_index_3, add, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelOut)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op360.met_dependencies = [StarDep(name='primals_234', mode=None)]
op360.outputs = [
    buf360: ExternKernelOut
    buf360.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf360.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op360.node.kernel = extern_kernels.mm


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op361.met_dependencies = [StarDep(name='primals_236', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf361.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op361.node.kernel = extern_kernels.mm


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='primals_237', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 10485760})]
op363.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 10485760}),
        MemoryDep('buf362', c0, {c0: 10485760})]
op363.met_dependencies = [MemoryDep('primals_235', c1, {c0: 4096, c1: 2560})]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (10485760, 1)
op363.sizes = ([4096, 2560], [])
buf360_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
primals_235_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
class op363_loop_body:
    var_ranges = {p0: 4096, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf362', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf363', get_index_3, add_1, None)
        return store


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 5242880})]
op364.unmet_dependencies = 
    [   MemoryDep('buf363', 2560*c0 + c1 + 1280, {c0: 4096, c1: 1280}),
        MemoryDep('buf363', 2560*c0 + c1, {c0: 4096, c1: 1280})]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
    buf364.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (5242880, 1)
op364.sizes = ([4096, 1280], [])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
class op364_loop_body:
    var_ranges = {p0: 4096, p1: 1280}
    index0 = 2560*p0 + p1
    index1 = 2560*p0 + p1 + 1280
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf363', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf363', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf364', get_index_3, mul_3, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='primals_238', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: ExternKernelSchedulerNode(ExternKernelOut)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op366.met_dependencies = [StarDep(name='primals_240', mode=None)]
op366.outputs = [
    buf366: ExternKernelOut
    buf366.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf366.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op366.node.kernel = extern_kernels.mm


op367: ExternKernelSchedulerNode(ExternKernelOut)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='primals_241', mode=None)]
op367.outputs = [
    buf367: ExternKernelOut
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op367.node.kernel = extern_kernels.mm


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 1310720})]
op368.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 1310720}),
        MemoryDep('buf352', c0, {c0: 1310720}),
        MemoryDep('buf354', c0, {c0: 1310720}),
        MemoryDep('buf365', c0, {c0: 1310720}),
        MemoryDep('buf367', c0, {c0: 1310720})]
op368.met_dependencies = 
    [   MemoryDep('primals_229', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_239', c1, {c0: 4096, c1: 320})]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf368.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (1310720, 1)
op368.sizes = ([4096, 320], [])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_239_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_229_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op368_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_239', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf367', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf352', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_229', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf354', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf329', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf368', get_index_7, add_5, None)
        return store


op369: ExternKernelSchedulerNode(ExternKernelOut)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf368', mode=None)]
op369.met_dependencies = [StarDep(name='primals_242', mode=None)]
op369.outputs = [
    buf369: ExternKernelOut
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op369.node.kernel = extern_kernels.mm


op370: ExternKernelSchedulerNode(ExternKernelOut)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf368', mode=None)]
op370.met_dependencies = [StarDep(name='primals_244', mode=None)]
op370.outputs = [
    buf370: ExternKernelOut
    buf370.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf370.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.mm


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf370', mode=None)]
op371.met_dependencies = [StarDep(name='primals_245', mode=None)]
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.node.kernel = extern_kernels.mm


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 1310720})]
op372.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 1310720}),
        MemoryDep('buf369', 327680*c0 + c1 + 320*c2, {c0: 4, c1: 320, c2: 1024}),
        MemoryDep('buf371', 327680*c0 + c1 + 320*c2, {c0: 4, c1: 320, c2: 1024})]
op372.met_dependencies = [MemoryDep('primals_243', c1, {c0: 4, c1: 320})]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1848'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (1310720, 1)
op372.sizes = ([4, 320, 1024], [])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_243_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf371_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op372_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + p1 + 320*p2
    index1 = p1
    index2 = 327680*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_243', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf371', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf294', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf372', get_index_4, add_2, None)
        return store


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 128})]
op373.unmet_dependencies = [MemoryDep('buf372', c0, {c0: 1310720})]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (128, 10240)
op373.sizes = ([128], [10240])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op373_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf373', get_index_1, getitem)
        return store_reduction


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 128})]
op374.unmet_dependencies = [MemoryDep('buf372', c0, {c0: 1310720})]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf374.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (128, 10240)
op374.sizes = ([128], [10240])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op374_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf374', get_index_1, getitem_1)
        return store_reduction


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 128})]
op376.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 128})]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf376.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (128, 1)
op376.sizes = ([128], [])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf376_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op376_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf376', get_index_1, rsqrt, None)
        return store


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 1310720})]
op377.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 1310720}),
        MemoryDep('buf373', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf376', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op377.met_dependencies = 
    [   MemoryDep('primals_246', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_247', c1, {c0: 4, c1: 320})]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (1310720, 1)
op377.sizes = ([4, 320, 1024], [])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf376_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_246_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_247_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf377_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op377_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf373', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf376', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_246', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_247', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf377', get_index_5, add, None)
        return store


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 1310720})]
op378.unmet_dependencies = [MemoryDep('buf377', c0, {c0: 1310720})]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf378.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (1310720, 1)
op378.sizes = ([1310720], [])
buf377_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf378_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op378_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf377', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf378', get_index_2, mul, None)
        return store


op379: ExternKernelSchedulerNode(ExternKernelAlloc)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = [StarDep(name='primals_248', mode=None)]
op379.outputs = [
    buf379: ExternKernelAlloc
    buf379.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf379.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False)]
]
op379.node.kernel = extern_kernels.convolution


op380: ExternKernelSchedulerNode(ExternKernelAlloc)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op380.met_dependencies = [StarDep(name='primals_250', mode=None)]
op380.outputs = [
    buf380: ExternKernelAlloc
    buf380.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf380.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op380.node.kernel = extern_kernels.convolution


op381: ExternKernelSchedulerNode(ExternKernelAlloc)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='primals_251', mode=None)]
op381.outputs = [
    buf381: ExternKernelAlloc
    buf381.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf381.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False)]
]
op381.node.kernel = extern_kernels.convolution


op382: ExternKernelSchedulerNode(ExternKernelOut)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op382.met_dependencies = [StarDep(name='primals_252', mode=None)]
op382.outputs = [
    buf382: ExternKernelOut
    buf382.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.node.kernel = extern_kernels.mm


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 1310720})]
op383.unmet_dependencies = 
    [   MemoryDep('buf379', c0, {c0: 1310720}),
        MemoryDep('buf381', c0, {c0: 1310720}),
        MemoryDep('buf382', c0, {c0: 1280})]
op383.met_dependencies = 
    [   MemoryDep('primals_249', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_253', c1, {c0: 4, c1: 320})]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op383.group.device = cuda:0
op383.group.iteration = (1310720, 1)
op383.sizes = ([4, 320, 1024], [])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_249_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf381_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf382_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
primals_253_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op383_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    index2 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_249', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf382', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_253', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf383', get_index_5, add_3, None)
        return store


op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 128})]
op384.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 1310720})]
op384.met_dependencies = []
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (128, 10240)
op384.sizes = ([128], [10240])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf384_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op384_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf384', get_index_1, getitem)
        return store_reduction


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 128})]
op385.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 1310720})]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf385.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (128, 10240)
op385.sizes = ([128], [10240])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf385_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op385_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf385', get_index_1, getitem_1)
        return store_reduction


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 128})]
op387.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 128})]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (128, 1)
op387.sizes = ([128], [])
buf385_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op387_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf387', get_index_1, rsqrt, None)
        return store


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1310720})]
op388.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 1310720}),
        MemoryDep('buf384', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf387', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op388.met_dependencies = 
    [   MemoryDep('primals_254', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_255', c1, {c0: 4, c1: 320})]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf388.users = [NodeUser(node=SchedulerNode(name='op389'), can_inplace=True, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1310720, 1)
op388.sizes = ([4, 320, 1024], [])
buf383_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf384_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_254_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_255_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf388_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op388_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf384', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf387', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_254', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_255', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf388', get_index_5, add, None)
        return store


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 1310720})]
op389.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 1310720})]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf389.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op389.group.device = cuda:0
op389.group.iteration = (1310720, 1)
op389.sizes = ([1310720], [])
buf388_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf389_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op389_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf389', get_index_2, mul, None)
        return store


op390: ExternKernelSchedulerNode(ExternKernelAlloc)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf389', mode=None)]
op390.met_dependencies = [StarDep(name='primals_256', mode=None)]
op390.outputs = [
    buf390: ExternKernelAlloc
    buf390.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf390.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
]
op390.node.kernel = extern_kernels.convolution


op391: ExternKernelSchedulerNode(ExternKernelAlloc)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf389', mode=None)]
op391.met_dependencies = [StarDep(name='primals_258', mode=None)]
op391.outputs = [
    buf391: ExternKernelAlloc
    buf391.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf391.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op391.node.kernel = extern_kernels.convolution


op392: ExternKernelSchedulerNode(ExternKernelAlloc)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op392.met_dependencies = [StarDep(name='primals_259', mode=None)]
op392.outputs = [
    buf392: ExternKernelAlloc
    buf392.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf392.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
]
op392.node.kernel = extern_kernels.convolution


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 1310720})]
op393.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 1310720}),
        MemoryDep('buf390', c0, {c0: 1310720}),
        MemoryDep('buf392', c0, {c0: 1310720})]
op393.met_dependencies = [MemoryDep('primals_257', c1, {c0: 4, c1: 320})]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op393.group.device = cuda:0
op393.group.iteration = (1310720, 1)
op393.sizes = ([4, 320, 1024], [])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf390_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_257_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf392_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op393_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf390', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_257', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf392', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf393', get_index_4, mul_1, None)
        return store


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 128})]
op394.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 1310720})]
op394.met_dependencies = []
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf394.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op394.group.device = cuda:0
op394.group.iteration = (128, 10240)
op394.sizes = ([128], [10240])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf394_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op394_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf394', get_index_1, getitem)
        return store_reduction


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 128})]
op395.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 1310720})]
op395.met_dependencies = []
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (128, 10240)
op395.sizes = ([128], [10240])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf395_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op395_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf395', get_index_1, getitem_1)
        return store_reduction


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 128})]
op397.unmet_dependencies = [MemoryDep('buf395', c0, {c0: 128})]
op397.met_dependencies = []
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf397.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (128, 1)
op397.sizes = ([128], [])
buf395_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf397_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op397_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf397', get_index_1, rsqrt, None)
        return store


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 1310720})]
op398.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 1310720}),
        MemoryDep('buf394', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf395', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op398.met_dependencies = 
    [   MemoryDep('primals_260', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_261', c1, {c0: 4, c1: 320})]
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf398.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op398.group.device = cuda:0
op398.group.iteration = (1310720, 1)
op398.sizes = ([4, 320, 1024], [])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf394_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf395_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_260_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_261_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf398_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op398_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf394', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf395', get_index_2)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_260', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_261', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf398', get_index_5, add_1, None)
        return store


op399: ExternKernelSchedulerNode(ExternKernelOut)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op399.met_dependencies = [StarDep(name='primals_262', mode=None)]
op399.outputs = [
    buf399: ExternKernelOut
    buf399.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf399.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op399.node.kernel = extern_kernels.bmm


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 1310720})]
op400.unmet_dependencies = [MemoryDep('buf398', 327680*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 320})]
op400.met_dependencies = []
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf400.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op400.group.device = cuda:0
op400.group.iteration = (1310720, 1)
op400.sizes = ([4, 1024, 320], [])
buf398_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf400_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op400_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 320}
    index0 = 327680*p0 + p1 + 1024*p2
    index1 = 327680*p0 + 320*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf400', get_index_1, load, None)
        return store


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op401.met_dependencies = [StarDep(name='primals_264', mode=None)]
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf401.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op401.node.kernel = extern_kernels.mm


op402: ExternKernelSchedulerNode(ExternKernelOut)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf401', mode=None)]
op402.met_dependencies = [StarDep(name='primals_265', mode=None)]
op402.outputs = [
    buf402: ExternKernelOut
    buf402.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf402.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op402.node.kernel = extern_kernels.mm


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 4096})]
op403.unmet_dependencies = [MemoryDep('buf399', c0, {c0: 1310720}), MemoryDep('buf402', c0, {c0: 1310720})]
op403.met_dependencies = [MemoryDep('primals_263', c1, {c0: 4096, c1: 320})]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf403.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (4096, 320)
op403.sizes = ([4096], [320])
buf399_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_263_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf403_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op403_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_263', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf402', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf403', get_index_3, getitem)
        return store_reduction


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 4096})]
op404.unmet_dependencies = [MemoryDep('buf399', c0, {c0: 1310720}), MemoryDep('buf402', c0, {c0: 1310720})]
op404.met_dependencies = [MemoryDep('primals_263', c1, {c0: 4096, c1: 320})]
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf404.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2107'), can_inplace=True, is_weak=False),
    ]
]
op404.group.device = cuda:0
op404.group.iteration = (4096, 320)
op404.sizes = ([4096], [320])
buf399_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_263_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf404_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op404_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_263', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf402', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf404', get_index_3, getitem_1)
        return store_reduction


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 1310720})]
op406.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 1310720}),
        MemoryDep('buf402', c0, {c0: 1310720}),
        MemoryDep('buf403', c0, {c0: 4096}),
        MemoryDep('buf404', c0, {c0: 4096})]
op406.met_dependencies = [MemoryDep('primals_263', c1, {c0: 4096, c1: 320})]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (1310720, 1)
op406.sizes = ([4096, 320], [])
buf399_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_263_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf403_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf404_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op406_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_263', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf402', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf403', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf404', get_index_4)
        constant_1 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf406', get_index_5, mul_1, None)
        return store


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 1310720})]
op407.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 1310720})]
op407.met_dependencies = 
    [   MemoryDep('primals_266', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_267', c1, {c0: 4096, c1: 320})]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf407.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op407.group.device = cuda:0
op407.group.iteration = (1310720, 1)
op407.sizes = ([4096, 320], [])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_266_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_267_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op407_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_266', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_267', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf407', get_index_3, add, None)
        return store


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='primals_268', mode=None)]
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False)]
]
op408.node.kernel = extern_kernels.mm


op409: ExternKernelSchedulerNode(ExternKernelOut)
op409.writes = [StarDep(name='buf409', mode=None)]
op409.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op409.met_dependencies = [StarDep(name='primals_269', mode=None)]
op409.outputs = [
    buf409: ExternKernelOut
    buf409.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf409.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op409.node.kernel = extern_kernels.mm


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf409', mode=None)]
op410.met_dependencies = [StarDep(name='primals_270', mode=None)]
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf410.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False)]
]
op410.node.kernel = extern_kernels.mm


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op411.met_dependencies = [StarDep(name='primals_271', mode=None)]
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False)]
]
op411.node.kernel = extern_kernels.mm


op412: ExternKernelSchedulerNode(ExternKernelOut)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op412.met_dependencies = [StarDep(name='primals_272', mode=None)]
op412.outputs = [
    buf412: ExternKernelOut
    buf412.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf412.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op412.node.kernel = extern_kernels.mm


op413: ExternKernelSchedulerNode(ExternKernelOut)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf412', mode=None)]
op413.met_dependencies = [StarDep(name='primals_273', mode=None)]
op413.outputs = [
    buf413: ExternKernelOut
    buf413.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf413.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False)]
]
op413.node.kernel = extern_kernels.mm


op414: ExternKernelSchedulerNode(ExternKernelOut)
op414.writes = [StarDep(name='buf414', mode=None)]
op414.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op414.met_dependencies = [StarDep(name='primals_274', mode=None)]
op414.outputs = [
    buf414: ExternKernelOut
    buf414.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf414.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False)]
]
op414.node.kernel = extern_kernels.mm


op415: ExternKernelSchedulerNode(ExternKernelOut)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op415.met_dependencies = [StarDep(name='primals_275', mode=None)]
op415.outputs = [
    buf415: ExternKernelOut
    buf415.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf415.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op415.node.kernel = extern_kernels.mm


op416: ExternKernelSchedulerNode(ExternKernelOut)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf415', mode=None)]
op416.met_dependencies = [StarDep(name='primals_276', mode=None)]
op416.outputs = [
    buf416: ExternKernelOut
    buf416.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf416.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False)]
]
op416.node.kernel = extern_kernels.mm


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 1310720})]
op417.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 1310720}), MemoryDep('buf410', c0, {c0: 1310720})]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (1310720, 1)
op417.sizes = ([1310720], [])
buf408_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf410_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf417_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op417_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf417', get_index_2, add, None)
        return store


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 1310720})]
op418.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 1310720}), MemoryDep('buf413', c0, {c0: 1310720})]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf418.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op418.group.device = cuda:0
op418.group.iteration = (1310720, 1)
op418.sizes = ([1310720], [])
buf411_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf413_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf418_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op418_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf413', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf418', get_index_2, add, None)
        return store


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 1310720})]
op419.unmet_dependencies = [MemoryDep('buf414', c0, {c0: 1310720}), MemoryDep('buf416', c0, {c0: 1310720})]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf419.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op419.group.device = cuda:0
op419.group.iteration = (1310720, 1)
op419.sizes = ([1310720], [])
buf414_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf416_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf419_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op419_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf414', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf416', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf419', get_index_2, add, None)
        return store


op420: ExternKernelSchedulerNode(FallbackKernel)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = 
    [   StarDep(name='buf417', mode=None),
        StarDep(name='buf418', mode=None),
        StarDep(name='buf419', mode=None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: FallbackKernel
    buf420.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf420.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False),
    ]
]
op420.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op421: ExternKernelSchedulerNode(MultiOutput)
op421.writes = [StarDep(name='buf421', mode=None)]
op421.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: MultiOutput
    buf421.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf421.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op421.node.kernel = None


op422: ExternKernelSchedulerNode(MultiOutput)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: MultiOutput
    buf422.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf422.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op422.node.kernel = None


op423: ExternKernelSchedulerNode(MultiOutput)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: MultiOutput
    buf423.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf423.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op423.node.kernel = None


op424: ExternKernelSchedulerNode(MultiOutput)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: MultiOutput
    buf424.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf424.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op424.node.kernel = None


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op425.met_dependencies = [StarDep(name='primals_277', mode=None)]
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf425.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op425.node.kernel = extern_kernels.mm


op426: ExternKernelSchedulerNode(ExternKernelOut)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op426.met_dependencies = [StarDep(name='primals_279', mode=None)]
op426.outputs = [
    buf426: ExternKernelOut
    buf426.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf426.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op426.node.kernel = extern_kernels.mm


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = [StarDep(name='primals_280', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 1310720})]
op428.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 1310720}),
        MemoryDep('buf402', c0, {c0: 1310720}),
        MemoryDep('buf425', c0, {c0: 1310720}),
        MemoryDep('buf427', c0, {c0: 1310720})]
op428.met_dependencies = 
    [   MemoryDep('primals_263', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_278', c1, {c0: 4096, c1: 320})]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (1310720, 1)
op428.sizes = ([4096, 320], [])
buf425_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_278_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf427_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf399_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_263_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op428_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_278', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf427', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf399', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_263', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf402', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf428', get_index_6, add_4, None)
        return store


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 4096})]
op429.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 1310720})]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf429.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (4096, 320)
op429.sizes = ([4096], [320])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf429_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op429_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf429', get_index_1, getitem)
        return store_reduction


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 4096})]
op430.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 1310720})]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2106'), can_inplace=True, is_weak=False),
    ]
]
op430.group.device = cuda:0
op430.group.iteration = (4096, 320)
op430.sizes = ([4096], [320])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf430_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op430_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf430', get_index_1, getitem_1)
        return store_reduction


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 1310720})]
op432.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1310720}),
        MemoryDep('buf429', c0, {c0: 4096}),
        MemoryDep('buf430', c0, {c0: 4096})]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op432.group.device = cuda:0
op432.group.iteration = (1310720, 1)
op432.sizes = ([4096, 320], [])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf429_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf430_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf432_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op432_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf429', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf430', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf432', get_index_3, mul, None)
        return store


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 1310720})]
op433.unmet_dependencies = [MemoryDep('buf432', c0, {c0: 1310720})]
op433.met_dependencies = 
    [   MemoryDep('primals_281', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_282', c1, {c0: 4096, c1: 320})]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf433.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op433.group.device = cuda:0
op433.group.iteration = (1310720, 1)
op433.sizes = ([4096, 320], [])
buf432_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_281_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_282_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf433_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op433_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_281', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_282', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf433', get_index_3, add, None)
        return store


op434: ExternKernelSchedulerNode(ExternKernelOut)
op434.writes = [StarDep(name='buf434', mode=None)]
op434.unmet_dependencies = [StarDep(name='buf433', mode=None)]
op434.met_dependencies = [StarDep(name='primals_283', mode=None)]
op434.outputs = [
    buf434: ExternKernelOut
    buf434.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf434.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False)]
]
op434.node.kernel = extern_kernels.mm


op435: ExternKernelSchedulerNode(ExternKernelOut)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf433', mode=None)]
op435.met_dependencies = [StarDep(name='primals_284', mode=None)]
op435.outputs = [
    buf435: ExternKernelOut
    buf435.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf435.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op435.node.kernel = extern_kernels.mm


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op436.met_dependencies = [StarDep(name='primals_285', mode=None)]
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf436.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False)]
]
op436.node.kernel = extern_kernels.mm


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = []
op437.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_286', mode=None)]
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op437.node.kernel = extern_kernels.mm


op438: ExternKernelSchedulerNode(ExternKernelOut)
op438.writes = [StarDep(name='buf438', mode=None)]
op438.unmet_dependencies = []
op438.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_287', mode=None)]
op438.outputs = [
    buf438: ExternKernelOut
    buf438.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf438.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op438.node.kernel = extern_kernels.mm


op439: ExternKernelSchedulerNode(ExternKernelOut)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='primals_288', mode=None)]
op439.outputs = [
    buf439: ExternKernelOut
    buf439.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf439.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op439.node.kernel = extern_kernels.mm


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = []
op440.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_289', mode=None)]
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf440.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=True, is_weak=False)]
]
op440.node.kernel = extern_kernels.mm


op441: ExternKernelSchedulerNode(ExternKernelOut)
op441.writes = [StarDep(name='buf441', mode=None)]
op441.unmet_dependencies = []
op441.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_290', mode=None)]
op441.outputs = [
    buf441: ExternKernelOut
    buf441.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf441.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op441.node.kernel = extern_kernels.mm


op442: ExternKernelSchedulerNode(ExternKernelOut)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf441', mode=None)]
op442.met_dependencies = [StarDep(name='primals_291', mode=None)]
op442.outputs = [
    buf442: ExternKernelOut
    buf442.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf442.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=True, is_weak=False)]
]
op442.node.kernel = extern_kernels.mm


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 1310720})]
op443.unmet_dependencies = [MemoryDep('buf434', c0, {c0: 1310720}), MemoryDep('buf436', c0, {c0: 1310720})]
op443.met_dependencies = []
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf443.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op443.group.device = cuda:0
op443.group.iteration = (1310720, 1)
op443.sizes = ([1310720], [])
buf434_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf436_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf443_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op443_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf443', get_index_2, add, None)
        return store


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 98560})]
op444.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 98560}), MemoryDep('buf439', c0, {c0: 98560})]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf444.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op444.group.device = cuda:0
op444.group.iteration = (98560, 1)
op444.sizes = ([98560], [])
buf437_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf439_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf444_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op444_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf444', get_index_2, add, None)
        return store


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 98560})]
op445.unmet_dependencies = [MemoryDep('buf440', c0, {c0: 98560}), MemoryDep('buf442', c0, {c0: 98560})]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf445.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op445.group.device = cuda:0
op445.group.iteration = (98560, 1)
op445.sizes = ([98560], [])
buf440_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf442_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf445_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op445_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf442', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf445', get_index_2, add, None)
        return store


op446: ExternKernelSchedulerNode(FallbackKernel)
op446.writes = [StarDep(name='buf446', mode=None)]
op446.unmet_dependencies = 
    [   StarDep(name='buf443', mode=None),
        StarDep(name='buf444', mode=None),
        StarDep(name='buf445', mode=None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: FallbackKernel
    buf446.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf446.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
    ]
]
op446.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op447: ExternKernelSchedulerNode(MultiOutput)
op447.writes = [StarDep(name='buf447', mode=None)]
op447.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: MultiOutput
    buf447.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op447.node.kernel = None


op448: ExternKernelSchedulerNode(MultiOutput)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: MultiOutput
    buf448.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf448.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op448.node.kernel = None


op449: ExternKernelSchedulerNode(MultiOutput)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: MultiOutput
    buf449.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf449.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op449.node.kernel = None


op450: ExternKernelSchedulerNode(MultiOutput)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: MultiOutput
    buf450.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf450.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op450.node.kernel = None


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op451.met_dependencies = [StarDep(name='primals_292', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op451.node.kernel = extern_kernels.mm


op452: ExternKernelSchedulerNode(ExternKernelOut)
op452.writes = [StarDep(name='buf452', mode=None)]
op452.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op452.met_dependencies = [StarDep(name='primals_294', mode=None)]
op452.outputs = [
    buf452: ExternKernelOut
    buf452.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf452.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op452.node.kernel = extern_kernels.mm


op453: ExternKernelSchedulerNode(ExternKernelOut)
op453.writes = [StarDep(name='buf453', mode=None)]
op453.unmet_dependencies = [StarDep(name='buf452', mode=None)]
op453.met_dependencies = [StarDep(name='primals_295', mode=None)]
op453.outputs = [
    buf453: ExternKernelOut
    buf453.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op453.node.kernel = extern_kernels.mm


op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 4096})]
op454.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1310720}),
        MemoryDep('buf451', c0, {c0: 1310720}),
        MemoryDep('buf453', c0, {c0: 1310720})]
op454.met_dependencies = [MemoryDep('primals_293', c1, {c0: 4096, c1: 320})]
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf454.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op454.group.device = cuda:0
op454.group.iteration = (4096, 320)
op454.sizes = ([4096], [320])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_293_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf453_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf454_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op454_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_293', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf453', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf428', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf454', get_index_4, getitem)
        return store_reduction


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 4096})]
op455.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1310720}),
        MemoryDep('buf451', c0, {c0: 1310720}),
        MemoryDep('buf453', c0, {c0: 1310720})]
op455.met_dependencies = [MemoryDep('primals_293', c1, {c0: 4096, c1: 320})]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf455.users = [
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2105'), can_inplace=True, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (4096, 320)
op455.sizes = ([4096], [320])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_293_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf453_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf455_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op455_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_293', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf453', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf428', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf455', get_index_4, getitem_1)
        return store_reduction


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 1310720})]
op457.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1310720}),
        MemoryDep('buf451', c0, {c0: 1310720}),
        MemoryDep('buf453', c0, {c0: 1310720}),
        MemoryDep('buf454', c0, {c0: 4096}),
        MemoryDep('buf455', c0, {c0: 4096})]
op457.met_dependencies = [MemoryDep('primals_293', c1, {c0: 4096, c1: 320})]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf457.users = [
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op457.group.device = cuda:0
op457.group.iteration = (1310720, 1)
op457.sizes = ([4096, 320], [])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_293_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf453_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf454_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf455_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf457_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op457_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_293', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf453', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf428', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf454', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf455', get_index_5)
        constant_2 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf457', get_index_6, mul_2, None)
        return store


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 1310720})]
op458.unmet_dependencies = [MemoryDep('buf457', c0, {c0: 1310720})]
op458.met_dependencies = 
    [   MemoryDep('primals_296', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_297', c1, {c0: 4096, c1: 320})]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf458.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op458.group.device = cuda:0
op458.group.iteration = (1310720, 1)
op458.sizes = ([4096, 320], [])
buf457_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_296_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_297_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf458_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op458_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf457', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_296', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_297', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf458', get_index_3, add, None)
        return store


op459: ExternKernelSchedulerNode(ExternKernelOut)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = [StarDep(name='buf458', mode=None)]
op459.met_dependencies = [StarDep(name='primals_298', mode=None)]
op459.outputs = [
    buf459: ExternKernelOut
    buf459.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf459.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False)]
]
op459.node.kernel = extern_kernels.mm


op460: ExternKernelSchedulerNode(ExternKernelOut)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf458', mode=None)]
op460.met_dependencies = [StarDep(name='primals_300', mode=None)]
op460.outputs = [
    buf460: ExternKernelOut
    buf460.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf460.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op460.node.kernel = extern_kernels.mm


op461: ExternKernelSchedulerNode(ExternKernelOut)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf460', mode=None)]
op461.met_dependencies = [StarDep(name='primals_301', mode=None)]
op461.outputs = [
    buf461: ExternKernelOut
    buf461.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf461.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False)]
]
op461.node.kernel = extern_kernels.mm


op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 10485760})]
op462.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 10485760}),
        MemoryDep('buf461', c0, {c0: 10485760})]
op462.met_dependencies = [MemoryDep('primals_299', c1, {c0: 4096, c1: 2560})]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op462.group.device = cuda:0
op462.group.iteration = (10485760, 1)
op462.sizes = ([4096, 2560], [])
buf459_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
primals_299_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf461_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
buf462_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
class op462_loop_body:
    var_ranges = {p0: 4096, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_299', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf461', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf462', get_index_3, add_1, None)
        return store


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 5242880})]
op463.unmet_dependencies = 
    [   MemoryDep('buf462', 2560*c0 + c1 + 1280, {c0: 4096, c1: 1280}),
        MemoryDep('buf462', 2560*c0 + c1, {c0: 4096, c1: 1280})]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
    buf463.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op463.group.device = cuda:0
op463.group.iteration = (5242880, 1)
op463.sizes = ([4096, 1280], [])
buf462_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf462_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf463_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
class op463_loop_body:
    var_ranges = {p0: 4096, p1: 1280}
    index0 = 2560*p0 + p1
    index1 = 2560*p0 + p1 + 1280
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf462', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf462', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf463', get_index_3, mul_3, None)
        return store


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op464.met_dependencies = [StarDep(name='primals_302', mode=None)]
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf464.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False)]
]
op464.node.kernel = extern_kernels.mm


op465: ExternKernelSchedulerNode(ExternKernelOut)
op465.writes = [StarDep(name='buf465', mode=None)]
op465.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op465.met_dependencies = [StarDep(name='primals_304', mode=None)]
op465.outputs = [
    buf465: ExternKernelOut
    buf465.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf465.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op465.node.kernel = extern_kernels.mm


op466: ExternKernelSchedulerNode(ExternKernelOut)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op466.met_dependencies = [StarDep(name='primals_305', mode=None)]
op466.outputs = [
    buf466: ExternKernelOut
    buf466.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf466.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False)]
]
op466.node.kernel = extern_kernels.mm


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 1310720})]
op467.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1310720}),
        MemoryDep('buf451', c0, {c0: 1310720}),
        MemoryDep('buf453', c0, {c0: 1310720}),
        MemoryDep('buf464', c0, {c0: 1310720}),
        MemoryDep('buf466', c0, {c0: 1310720})]
op467.met_dependencies = 
    [   MemoryDep('primals_293', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_303', c1, {c0: 4096, c1: 320})]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf467.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op467.group.device = cuda:0
op467.group.iteration = (1310720, 1)
op467.sizes = ([4096, 320], [])
buf464_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_303_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf466_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_293_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf453_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf428_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf467_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op467_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_303', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf466', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf451', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_293', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf453', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf428', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf467', get_index_7, add_5, None)
        return store


op468: ExternKernelSchedulerNode(ExternKernelOut)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op468.met_dependencies = [StarDep(name='primals_306', mode=None)]
op468.outputs = [
    buf468: ExternKernelOut
    buf468.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op468.node.kernel = extern_kernels.mm


op469: ExternKernelSchedulerNode(ExternKernelOut)
op469.writes = [StarDep(name='buf469', mode=None)]
op469.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op469.met_dependencies = [StarDep(name='primals_308', mode=None)]
op469.outputs = [
    buf469: ExternKernelOut
    buf469.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf469.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op469.node.kernel = extern_kernels.mm


op470: ExternKernelSchedulerNode(ExternKernelOut)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op470.met_dependencies = [StarDep(name='primals_309', mode=None)]
op470.outputs = [
    buf470: ExternKernelOut
    buf470.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.node.kernel = extern_kernels.mm


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 1310720})]
op471.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 1310720}),
        MemoryDep('buf468', 327680*c0 + c1 + 320*c2, {c0: 4, c1: 320, c2: 1024}),
        MemoryDep('buf470', 327680*c0 + c1 + 320*c2, {c0: 4, c1: 320, c2: 1024})]
op471.met_dependencies = [MemoryDep('primals_307', c1, {c0: 4, c1: 320})]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf471.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1746'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op471.group.device = cuda:0
op471.group.iteration = (1310720, 1)
op471.sizes = ([4, 320, 1024], [])
buf468_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_307_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf470_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf471_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op471_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + p1 + 320*p2
    index1 = p1
    index2 = 327680*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_307', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf470', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf393', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf471', get_index_4, add_2, None)
        return store


op472: ExternKernelSchedulerNode(ExternKernelAlloc)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op472.met_dependencies = [StarDep(name='primals_310', mode=None)]
op472.outputs = [
    buf472: ExternKernelAlloc
    buf472.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
    buf472.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=True, is_weak=False)]
]
op472.node.kernel = extern_kernels.convolution


op473: ExternKernelSchedulerNode(ExternKernelAlloc)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op473.met_dependencies = [StarDep(name='primals_312', mode=None)]
op473.outputs = [
    buf473: ExternKernelAlloc
    buf473.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf473.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op473.node.kernel = extern_kernels.convolution


op474: ExternKernelSchedulerNode(ExternKernelAlloc)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op474.met_dependencies = [StarDep(name='primals_313', mode=None)]
op474.outputs = [
    buf474: ExternKernelAlloc
    buf474.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
    buf474.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=True, is_weak=False)]
]
op474.node.kernel = extern_kernels.convolution


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 327680})]
op475.unmet_dependencies = [MemoryDep('buf472', c0, {c0: 327680}), MemoryDep('buf474', c0, {c0: 327680})]
op475.met_dependencies = [MemoryDep('primals_311', c1, {c0: 4, c1: 320})]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
    buf475.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1639'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op475.group.device = cuda:0
op475.group.iteration = (327680, 1)
op475.sizes = ([4, 320, 256], [])
buf472_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
primals_311_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf474_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
buf475_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
class op475_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 256}
    index0 = 81920*p0 + 256*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_311', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf474', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf475', get_index_3, add_1, None)
        return store


op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 128})]
op476.unmet_dependencies = [MemoryDep('buf475', c0, {c0: 327680})]
op476.met_dependencies = []
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf476.users = [
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op476.group.device = cuda:0
op476.group.iteration = (128, 2560)
op476.sizes = ([128], [2560])
buf475_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
buf476_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op476_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf476', get_index_1, getitem)
        return store_reduction


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 128})]
op477.unmet_dependencies = [MemoryDep('buf475', c0, {c0: 327680})]
op477.met_dependencies = []
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (128, 2560)
op477.sizes = ([128], [2560])
buf475_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op477_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf477', get_index_1, getitem_1)
        return store_reduction


op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 128})]
op479.unmet_dependencies = [MemoryDep('buf477', c0, {c0: 128})]
op479.met_dependencies = []
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf479.users = [
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op479.group.device = cuda:0
op479.group.iteration = (128, 1)
op479.sizes = ([128], [])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf479_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op479_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf479', get_index_1, rsqrt, None)
        return store


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 327680})]
op480.unmet_dependencies = 
    [   MemoryDep('buf475', c0, {c0: 327680}),
        MemoryDep('buf476', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf479', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op480.met_dependencies = 
    [   MemoryDep('primals_314', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_315', c1, {c0: 4, c1: 320})]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
    buf480.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=True, is_weak=False)]
]
op480.group.device = cuda:0
op480.group.iteration = (327680, 1)
op480.sizes = ([4, 320, 256], [])
buf475_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
buf476_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf479_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_314_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_315_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf480_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
class op480_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 256}
    index0 = 81920*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf476', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf479', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_314', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_315', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf480', get_index_5, add, None)
        return store


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 327680})]
op481.unmet_dependencies = [MemoryDep('buf480', c0, {c0: 327680})]
op481.met_dependencies = []
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
    buf481.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op481.group.device = cuda:0
op481.group.iteration = (327680, 1)
op481.sizes = ([327680], [])
buf480_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
buf481_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
class op481_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf481', get_index_2, mul, None)
        return store


op482: ExternKernelSchedulerNode(ExternKernelAlloc)
op482.writes = [StarDep(name='buf482', mode=None)]
op482.unmet_dependencies = [StarDep(name='buf481', mode=None)]
op482.met_dependencies = [StarDep(name='primals_316', mode=None)]
op482.outputs = [
    buf482: ExternKernelAlloc
    buf482.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf482.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False)]
]
op482.node.kernel = extern_kernels.convolution


op483: ExternKernelSchedulerNode(ExternKernelAlloc)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf481', mode=None)]
op483.met_dependencies = [StarDep(name='primals_318', mode=None)]
op483.outputs = [
    buf483: ExternKernelAlloc
    buf483.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf483.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op483.node.kernel = extern_kernels.convolution


op484: ExternKernelSchedulerNode(ExternKernelAlloc)
op484.writes = [StarDep(name='buf484', mode=None)]
op484.unmet_dependencies = [StarDep(name='buf483', mode=None)]
op484.met_dependencies = [StarDep(name='primals_319', mode=None)]
op484.outputs = [
    buf484: ExternKernelAlloc
    buf484.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False)]
]
op484.node.kernel = extern_kernels.convolution


op485: ExternKernelSchedulerNode(ExternKernelOut)
op485.writes = [StarDep(name='buf485', mode=None)]
op485.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op485.met_dependencies = [StarDep(name='primals_320', mode=None)]
op485.outputs = [
    buf485: ExternKernelOut
    buf485.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
    buf485.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op485.node.kernel = extern_kernels.mm


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 655360})]
op486.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 655360}),
        MemoryDep('buf484', c0, {c0: 655360}),
        MemoryDep('buf485', c0, {c0: 2560})]
op486.met_dependencies = 
    [   MemoryDep('primals_317', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_321', c1, {c0: 4, c1: 640})]
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf486.users = [
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op486.group.device = cuda:0
op486.group.iteration = (655360, 1)
op486.sizes = ([4, 640, 256], [])
buf482_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_317_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf484_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf485_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
primals_321_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf486_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op486_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    index2 = 640*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_317', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf484', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf485', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_321', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf486', get_index_5, add_3, None)
        return store


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 128})]
op487.unmet_dependencies = [MemoryDep('buf486', c0, {c0: 655360})]
op487.met_dependencies = []
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf487.users = [
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op487.group.device = cuda:0
op487.group.iteration = (128, 5120)
op487.sizes = ([128], [5120])
buf486_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf487_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op487_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf487', get_index_1, getitem)
        return store_reduction


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 128})]
op488.unmet_dependencies = [MemoryDep('buf486', c0, {c0: 655360})]
op488.met_dependencies = []
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf488.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (128, 5120)
op488.sizes = ([128], [5120])
buf486_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf488_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op488_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf488', get_index_1, getitem_1)
        return store_reduction


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 128})]
op490.unmet_dependencies = [MemoryDep('buf488', c0, {c0: 128})]
op490.met_dependencies = []
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf490.users = [
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op490.group.device = cuda:0
op490.group.iteration = (128, 1)
op490.sizes = ([128], [])
buf488_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf490_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op490_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf490', get_index_1, rsqrt, None)
        return store


op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', c0, {c0: 655360})]
op491.unmet_dependencies = 
    [   MemoryDep('buf486', c0, {c0: 655360}),
        MemoryDep('buf487', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf490', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op491.met_dependencies = 
    [   MemoryDep('primals_322', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_323', c1, {c0: 4, c1: 640})]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf491.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False)]
]
op491.group.device = cuda:0
op491.group.iteration = (655360, 1)
op491.sizes = ([4, 640, 256], [])
buf486_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf487_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf490_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_322_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_323_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf491_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op491_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf487', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf490', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_322', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_323', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf491', get_index_5, add, None)
        return store


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 655360})]
op492.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 655360})]
op492.met_dependencies = []
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf492.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op492.group.device = cuda:0
op492.group.iteration = (655360, 1)
op492.sizes = ([655360], [])
buf491_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf492_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op492_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf491', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf492', get_index_2, mul, None)
        return store


op493: ExternKernelSchedulerNode(ExternKernelAlloc)
op493.writes = [StarDep(name='buf493', mode=None)]
op493.unmet_dependencies = [StarDep(name='buf492', mode=None)]
op493.met_dependencies = [StarDep(name='primals_324', mode=None)]
op493.outputs = [
    buf493: ExternKernelAlloc
    buf493.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf493.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False)]
]
op493.node.kernel = extern_kernels.convolution


op494: ExternKernelSchedulerNode(ExternKernelAlloc)
op494.writes = [StarDep(name='buf494', mode=None)]
op494.unmet_dependencies = [StarDep(name='buf492', mode=None)]
op494.met_dependencies = [StarDep(name='primals_326', mode=None)]
op494.outputs = [
    buf494: ExternKernelAlloc
    buf494.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf494.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op494.node.kernel = extern_kernels.convolution


op495: ExternKernelSchedulerNode(ExternKernelAlloc)
op495.writes = [StarDep(name='buf495', mode=None)]
op495.unmet_dependencies = [StarDep(name='buf494', mode=None)]
op495.met_dependencies = [StarDep(name='primals_327', mode=None)]
op495.outputs = [
    buf495: ExternKernelAlloc
    buf495.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf495.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False)]
]
op495.node.kernel = extern_kernels.convolution


op496: ExternKernelSchedulerNode(ExternKernelAlloc)
op496.writes = [StarDep(name='buf496', mode=None)]
op496.unmet_dependencies = [StarDep(name='buf475', mode=None)]
op496.met_dependencies = [StarDep(name='primals_328', mode=None)]
op496.outputs = [
    buf496: ExternKernelAlloc
    buf496.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf496.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False)]
]
op496.node.kernel = extern_kernels.convolution


op497: ExternKernelSchedulerNode(ExternKernelAlloc)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf475', mode=None)]
op497.met_dependencies = [StarDep(name='primals_330', mode=None)]
op497.outputs = [
    buf497: ExternKernelAlloc
    buf497.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf497.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op497.node.kernel = extern_kernels.convolution


op498: ExternKernelSchedulerNode(ExternKernelAlloc)
op498.writes = [StarDep(name='buf498', mode=None)]
op498.unmet_dependencies = [StarDep(name='buf497', mode=None)]
op498.met_dependencies = [StarDep(name='primals_331', mode=None)]
op498.outputs = [
    buf498: ExternKernelAlloc
    buf498.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf498.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False)]
]
op498.node.kernel = extern_kernels.convolution


op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 655360})]
op499.unmet_dependencies = 
    [   MemoryDep('buf493', c0, {c0: 655360}),
        MemoryDep('buf495', c0, {c0: 655360}),
        MemoryDep('buf496', c0, {c0: 655360}),
        MemoryDep('buf498', c0, {c0: 655360})]
op499.met_dependencies = 
    [   MemoryDep('primals_325', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_329', c1, {c0: 4, c1: 640})]
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf499.users = [
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op499.group.device = cuda:0
op499.group.iteration = (655360, 1)
op499.sizes = ([4, 640, 256], [])
buf496_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_329_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf498_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf493_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_325_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf495_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf499_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op499_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_329', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf498', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf493', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_325', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf495', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf499', get_index_6, mul_2, None)
        return store


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 128})]
op500.unmet_dependencies = [MemoryDep('buf499', c0, {c0: 655360})]
op500.met_dependencies = []
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf500.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op500.group.device = cuda:0
op500.group.iteration = (128, 5120)
op500.sizes = ([128], [5120])
buf499_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf500_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op500_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf500', get_index_1, getitem)
        return store_reduction


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 128})]
op501.unmet_dependencies = [MemoryDep('buf499', c0, {c0: 655360})]
op501.met_dependencies = []
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf501.users = [
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
    ]
]
op501.group.device = cuda:0
op501.group.iteration = (128, 5120)
op501.sizes = ([128], [5120])
buf499_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf501_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op501_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf501', get_index_1, getitem_1)
        return store_reduction


op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 128})]
op503.unmet_dependencies = [MemoryDep('buf501', c0, {c0: 128})]
op503.met_dependencies = []
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf503.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op503.group.device = cuda:0
op503.group.iteration = (128, 1)
op503.sizes = ([128], [])
buf501_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf503_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op503_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf503', get_index_1, rsqrt, None)
        return store


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 655360})]
op504.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 655360}),
        MemoryDep('buf500', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf501', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op504.met_dependencies = 
    [   MemoryDep('primals_332', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_333', c1, {c0: 4, c1: 640})]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf504.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op504.group.device = cuda:0
op504.group.iteration = (655360, 1)
op504.sizes = ([4, 640, 256], [])
buf499_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf500_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf501_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_332_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_333_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf504_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op504_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf501', get_index_2)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_332', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_333', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf504', get_index_5, add_1, None)
        return store


op505: ExternKernelSchedulerNode(ExternKernelOut)
op505.writes = [StarDep(name='buf505', mode=None)]
op505.unmet_dependencies = [StarDep(name='buf504', mode=None)]
op505.met_dependencies = [StarDep(name='primals_334', mode=None)]
op505.outputs = [
    buf505: ExternKernelOut
    buf505.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf505.users = [
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=True, is_weak=False),
    ]
]
op505.node.kernel = extern_kernels.bmm


op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 655360})]
op506.unmet_dependencies = [MemoryDep('buf504', 163840*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 640})]
op506.met_dependencies = []
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (655360, 1)
op506.sizes = ([4, 256, 640], [])
buf504_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf506_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op506_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 640}
    index0 = 163840*p0 + p1 + 256*p2
    index1 = 163840*p0 + 640*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf506', get_index_1, load, None)
        return store


op507: ExternKernelSchedulerNode(ExternKernelOut)
op507.writes = [StarDep(name='buf507', mode=None)]
op507.unmet_dependencies = [StarDep(name='buf506', mode=None)]
op507.met_dependencies = [StarDep(name='primals_336', mode=None)]
op507.outputs = [
    buf507: ExternKernelOut
    buf507.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf507.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op507.node.kernel = extern_kernels.mm


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op508.met_dependencies = [StarDep(name='primals_337', mode=None)]
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf508.users = [
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=True, is_weak=False),
    ]
]
op508.node.kernel = extern_kernels.mm


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 1024})]
op509.unmet_dependencies = [MemoryDep('buf505', c0, {c0: 655360}), MemoryDep('buf508', c0, {c0: 655360})]
op509.met_dependencies = [MemoryDep('primals_335', c1, {c0: 1024, c1: 640})]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf509.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (1024, 640)
op509.sizes = ([1024], [640])
buf505_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_335_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf508_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf509_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op509_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_335', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf508', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf509', get_index_3, getitem)
        return store_reduction


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 1024})]
op510.unmet_dependencies = [MemoryDep('buf505', c0, {c0: 655360}), MemoryDep('buf508', c0, {c0: 655360})]
op510.met_dependencies = [MemoryDep('primals_335', c1, {c0: 1024, c1: 640})]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf510.users = [
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2104'), can_inplace=True, is_weak=False),
    ]
]
op510.group.device = cuda:0
op510.group.iteration = (1024, 640)
op510.sizes = ([1024], [640])
buf505_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_335_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf508_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf510_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op510_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_335', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf508', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf510', get_index_3, getitem_1)
        return store_reduction


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 655360})]
op512.unmet_dependencies = 
    [   MemoryDep('buf505', c0, {c0: 655360}),
        MemoryDep('buf508', c0, {c0: 655360}),
        MemoryDep('buf509', c0, {c0: 1024}),
        MemoryDep('buf510', c0, {c0: 1024})]
op512.met_dependencies = [MemoryDep('primals_335', c1, {c0: 1024, c1: 640})]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf512.users = [
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op512.group.device = cuda:0
op512.group.iteration = (655360, 1)
op512.sizes = ([1024, 640], [])
buf505_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_335_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf508_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf509_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf510_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf512_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op512_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_335', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf508', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf509', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf510', get_index_4)
        constant_1 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf512', get_index_5, mul_1, None)
        return store


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 655360})]
op513.unmet_dependencies = [MemoryDep('buf512', c0, {c0: 655360})]
op513.met_dependencies = 
    [   MemoryDep('primals_338', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_339', c1, {c0: 1024, c1: 640})]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf513.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op513.group.device = cuda:0
op513.group.iteration = (655360, 1)
op513.sizes = ([1024, 640], [])
buf512_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_338_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_339_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf513_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op513_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_338', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_339', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf513', get_index_3, add, None)
        return store


op514: ExternKernelSchedulerNode(ExternKernelOut)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op514.met_dependencies = [StarDep(name='primals_340', mode=None)]
op514.outputs = [
    buf514: ExternKernelOut
    buf514.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf514.users = [NodeUser(node=SchedulerNode(name='op523'), can_inplace=True, is_weak=False)]
]
op514.node.kernel = extern_kernels.mm


op515: ExternKernelSchedulerNode(ExternKernelOut)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op515.met_dependencies = [StarDep(name='primals_341', mode=None)]
op515.outputs = [
    buf515: ExternKernelOut
    buf515.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf515.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op515.node.kernel = extern_kernels.mm


op516: ExternKernelSchedulerNode(ExternKernelOut)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op516.met_dependencies = [StarDep(name='primals_342', mode=None)]
op516.outputs = [
    buf516: ExternKernelOut
    buf516.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf516.users = [NodeUser(node=SchedulerNode(name='op523'), can_inplace=True, is_weak=False)]
]
op516.node.kernel = extern_kernels.mm


op517: ExternKernelSchedulerNode(ExternKernelOut)
op517.writes = [StarDep(name='buf517', mode=None)]
op517.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op517.met_dependencies = [StarDep(name='primals_343', mode=None)]
op517.outputs = [
    buf517: ExternKernelOut
    buf517.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf517.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False)]
]
op517.node.kernel = extern_kernels.mm


op518: ExternKernelSchedulerNode(ExternKernelOut)
op518.writes = [StarDep(name='buf518', mode=None)]
op518.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op518.met_dependencies = [StarDep(name='primals_344', mode=None)]
op518.outputs = [
    buf518: ExternKernelOut
    buf518.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf518.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op518.node.kernel = extern_kernels.mm


op519: ExternKernelSchedulerNode(ExternKernelOut)
op519.writes = [StarDep(name='buf519', mode=None)]
op519.unmet_dependencies = [StarDep(name='buf518', mode=None)]
op519.met_dependencies = [StarDep(name='primals_345', mode=None)]
op519.outputs = [
    buf519: ExternKernelOut
    buf519.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf519.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False)]
]
op519.node.kernel = extern_kernels.mm


op520: ExternKernelSchedulerNode(ExternKernelOut)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op520.met_dependencies = [StarDep(name='primals_346', mode=None)]
op520.outputs = [
    buf520: ExternKernelOut
    buf520.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf520.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False)]
]
op520.node.kernel = extern_kernels.mm


op521: ExternKernelSchedulerNode(ExternKernelOut)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op521.met_dependencies = [StarDep(name='primals_347', mode=None)]
op521.outputs = [
    buf521: ExternKernelOut
    buf521.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf521.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op521.node.kernel = extern_kernels.mm


op522: ExternKernelSchedulerNode(ExternKernelOut)
op522.writes = [StarDep(name='buf522', mode=None)]
op522.unmet_dependencies = [StarDep(name='buf521', mode=None)]
op522.met_dependencies = [StarDep(name='primals_348', mode=None)]
op522.outputs = [
    buf522: ExternKernelOut
    buf522.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf522.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False)]
]
op522.node.kernel = extern_kernels.mm


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', c0, {c0: 655360})]
op523.unmet_dependencies = [MemoryDep('buf514', c0, {c0: 655360}), MemoryDep('buf516', c0, {c0: 655360})]
op523.met_dependencies = []
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf523.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op523.group.device = cuda:0
op523.group.iteration = (655360, 1)
op523.sizes = ([655360], [])
buf514_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf516_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf523_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op523_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf516', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf523', get_index_2, add, None)
        return store


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 655360})]
op524.unmet_dependencies = [MemoryDep('buf517', c0, {c0: 655360}), MemoryDep('buf519', c0, {c0: 655360})]
op524.met_dependencies = []
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf524.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op524.group.device = cuda:0
op524.group.iteration = (655360, 1)
op524.sizes = ([655360], [])
buf517_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf519_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf524_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op524_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf519', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf524', get_index_2, add, None)
        return store


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 655360})]
op525.unmet_dependencies = [MemoryDep('buf520', c0, {c0: 655360}), MemoryDep('buf522', c0, {c0: 655360})]
op525.met_dependencies = []
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf525.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op525.group.device = cuda:0
op525.group.iteration = (655360, 1)
op525.sizes = ([655360], [])
buf520_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf522_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf525_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op525_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf522', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf525', get_index_2, add, None)
        return store


op526: ExternKernelSchedulerNode(FallbackKernel)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = 
    [   StarDep(name='buf523', mode=None),
        StarDep(name='buf524', mode=None),
        StarDep(name='buf525', mode=None)]
op526.met_dependencies = []
op526.outputs = [
    buf526: FallbackKernel
    buf526.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf526.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op526.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op527: ExternKernelSchedulerNode(MultiOutput)
op527.writes = [StarDep(name='buf527', mode=None)]
op527.unmet_dependencies = [StarDep(name='buf526', mode=None)]
op527.met_dependencies = []
op527.outputs = [
    buf527: MultiOutput
    buf527.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf527.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op527.node.kernel = None


op528: ExternKernelSchedulerNode(MultiOutput)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf526', mode=None)]
op528.met_dependencies = []
op528.outputs = [
    buf528: MultiOutput
    buf528.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf528.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op528.node.kernel = None


op529: ExternKernelSchedulerNode(MultiOutput)
op529.writes = [StarDep(name='buf529', mode=None)]
op529.unmet_dependencies = [StarDep(name='buf526', mode=None)]
op529.met_dependencies = []
op529.outputs = [
    buf529: MultiOutput
    buf529.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf529.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op529.node.kernel = None


op530: ExternKernelSchedulerNode(MultiOutput)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf526', mode=None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: MultiOutput
    buf530.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf530.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op530.node.kernel = None


op531: ExternKernelSchedulerNode(ExternKernelOut)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = [StarDep(name='buf527', mode=None)]
op531.met_dependencies = [StarDep(name='primals_349', mode=None)]
op531.outputs = [
    buf531: ExternKernelOut
    buf531.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf531.users = [NodeUser(node=SchedulerNode(name='op534'), can_inplace=True, is_weak=False)]
]
op531.node.kernel = extern_kernels.mm


op532: ExternKernelSchedulerNode(ExternKernelOut)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf527', mode=None)]
op532.met_dependencies = [StarDep(name='primals_351', mode=None)]
op532.outputs = [
    buf532: ExternKernelOut
    buf532.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf532.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op532.node.kernel = extern_kernels.mm


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf532', mode=None)]
op533.met_dependencies = [StarDep(name='primals_352', mode=None)]
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf533.users = [NodeUser(node=SchedulerNode(name='op534'), can_inplace=True, is_weak=False)]
]
op533.node.kernel = extern_kernels.mm


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 655360})]
op534.unmet_dependencies = 
    [   MemoryDep('buf505', c0, {c0: 655360}),
        MemoryDep('buf508', c0, {c0: 655360}),
        MemoryDep('buf531', c0, {c0: 655360}),
        MemoryDep('buf533', c0, {c0: 655360})]
op534.met_dependencies = 
    [   MemoryDep('primals_335', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_350', c1, {c0: 1024, c1: 640})]
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf534.users = [
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False),
    ]
]
op534.group.device = cuda:0
op534.group.iteration = (655360, 1)
op534.sizes = ([1024, 640], [])
buf531_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_350_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf533_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf505_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_335_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf508_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op534_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_350', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf533', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf505', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_335', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf508', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf534', get_index_6, add_4, None)
        return store


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 1024})]
op535.unmet_dependencies = [MemoryDep('buf534', c0, {c0: 655360})]
op535.met_dependencies = []
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf535.users = [NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (1024, 640)
op535.sizes = ([1024], [640])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf535_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op535_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf534', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf535', get_index_1, getitem)
        return store_reduction


op536: SchedulerNode(ComputedBuffer)
op536.writes = [MemoryDep('buf536', c0, {c0: 1024})]
op536.unmet_dependencies = [MemoryDep('buf534', c0, {c0: 655360})]
op536.met_dependencies = []
op536.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2103'), can_inplace=True, is_weak=False),
    ]
]
op536.group.device = cuda:0
op536.group.iteration = (1024, 640)
op536.sizes = ([1024], [640])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf536_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op536_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf534', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf536', get_index_1, getitem_1)
        return store_reduction


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 655360})]
op538.unmet_dependencies = 
    [   MemoryDep('buf534', c0, {c0: 655360}),
        MemoryDep('buf535', c0, {c0: 1024}),
        MemoryDep('buf536', c0, {c0: 1024})]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf538.users = [
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op538.group.device = cuda:0
op538.group.iteration = (655360, 1)
op538.sizes = ([1024, 640], [])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf535_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf536_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf538_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op538_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf534', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf535', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf536', get_index_2)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf538', get_index_3, mul, None)
        return store


op539: SchedulerNode(ComputedBuffer)
op539.writes = [MemoryDep('buf539', c0, {c0: 655360})]
op539.unmet_dependencies = [MemoryDep('buf538', c0, {c0: 655360})]
op539.met_dependencies = 
    [   MemoryDep('primals_353', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_354', c1, {c0: 1024, c1: 640})]
op539.outputs = [
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf539.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op539.group.device = cuda:0
op539.group.iteration = (655360, 1)
op539.sizes = ([1024, 640], [])
buf538_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_353_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_354_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf539_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op539_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf538', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_353', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_354', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf539', get_index_3, add, None)
        return store


op540: ExternKernelSchedulerNode(ExternKernelOut)
op540.writes = [StarDep(name='buf540', mode=None)]
op540.unmet_dependencies = [StarDep(name='buf539', mode=None)]
op540.met_dependencies = [StarDep(name='primals_355', mode=None)]
op540.outputs = [
    buf540: ExternKernelOut
    buf540.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf540.users = [NodeUser(node=SchedulerNode(name='op549'), can_inplace=True, is_weak=False)]
]
op540.node.kernel = extern_kernels.mm


op541: ExternKernelSchedulerNode(ExternKernelOut)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf539', mode=None)]
op541.met_dependencies = [StarDep(name='primals_356', mode=None)]
op541.outputs = [
    buf541: ExternKernelOut
    buf541.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf541.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op541.node.kernel = extern_kernels.mm


op542: ExternKernelSchedulerNode(ExternKernelOut)
op542.writes = [StarDep(name='buf542', mode=None)]
op542.unmet_dependencies = [StarDep(name='buf541', mode=None)]
op542.met_dependencies = [StarDep(name='primals_357', mode=None)]
op542.outputs = [
    buf542: ExternKernelOut
    buf542.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf542.users = [NodeUser(node=SchedulerNode(name='op549'), can_inplace=True, is_weak=False)]
]
op542.node.kernel = extern_kernels.mm


op543: ExternKernelSchedulerNode(ExternKernelOut)
op543.writes = [StarDep(name='buf543', mode=None)]
op543.unmet_dependencies = []
op543.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_358', mode=None)]
op543.outputs = [
    buf543: ExternKernelOut
    buf543.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf543.users = [NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False)]
]
op543.node.kernel = extern_kernels.mm


op544: ExternKernelSchedulerNode(ExternKernelOut)
op544.writes = [StarDep(name='buf544', mode=None)]
op544.unmet_dependencies = []
op544.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_359', mode=None)]
op544.outputs = [
    buf544: ExternKernelOut
    buf544.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf544.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op544.node.kernel = extern_kernels.mm


op545: ExternKernelSchedulerNode(ExternKernelOut)
op545.writes = [StarDep(name='buf545', mode=None)]
op545.unmet_dependencies = [StarDep(name='buf544', mode=None)]
op545.met_dependencies = [StarDep(name='primals_360', mode=None)]
op545.outputs = [
    buf545: ExternKernelOut
    buf545.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf545.users = [NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False)]
]
op545.node.kernel = extern_kernels.mm


op546: ExternKernelSchedulerNode(ExternKernelOut)
op546.writes = [StarDep(name='buf546', mode=None)]
op546.unmet_dependencies = []
op546.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_361', mode=None)]
op546.outputs = [
    buf546: ExternKernelOut
    buf546.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf546.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False)]
]
op546.node.kernel = extern_kernels.mm


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = []
op547.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_362', mode=None)]
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf547.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op547.node.kernel = extern_kernels.mm


op548: ExternKernelSchedulerNode(ExternKernelOut)
op548.writes = [StarDep(name='buf548', mode=None)]
op548.unmet_dependencies = [StarDep(name='buf547', mode=None)]
op548.met_dependencies = [StarDep(name='primals_363', mode=None)]
op548.outputs = [
    buf548: ExternKernelOut
    buf548.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf548.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False)]
]
op548.node.kernel = extern_kernels.mm


op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 655360})]
op549.unmet_dependencies = [MemoryDep('buf540', c0, {c0: 655360}), MemoryDep('buf542', c0, {c0: 655360})]
op549.met_dependencies = []
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf549.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op549.group.device = cuda:0
op549.group.iteration = (655360, 1)
op549.sizes = ([655360], [])
buf540_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf542_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf549_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op549_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf542', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf549', get_index_2, add, None)
        return store


op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 197120})]
op550.unmet_dependencies = [MemoryDep('buf543', c0, {c0: 197120}), MemoryDep('buf545', c0, {c0: 197120})]
op550.met_dependencies = []
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf550.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op550.group.device = cuda:0
op550.group.iteration = (197120, 1)
op550.sizes = ([197120], [])
buf543_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf545_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf550_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op550_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf543', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf545', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf550', get_index_2, add, None)
        return store


op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 197120})]
op551.unmet_dependencies = [MemoryDep('buf546', c0, {c0: 197120}), MemoryDep('buf548', c0, {c0: 197120})]
op551.met_dependencies = []
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf551.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (197120, 1)
op551.sizes = ([197120], [])
buf546_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf548_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf551_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op551_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf548', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf551', get_index_2, add, None)
        return store


op552: ExternKernelSchedulerNode(FallbackKernel)
op552.writes = [StarDep(name='buf552', mode=None)]
op552.unmet_dependencies = 
    [   StarDep(name='buf549', mode=None),
        StarDep(name='buf550', mode=None),
        StarDep(name='buf551', mode=None)]
op552.met_dependencies = []
op552.outputs = [
    buf552: FallbackKernel
    buf552.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf552.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
    ]
]
op552.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op553: ExternKernelSchedulerNode(MultiOutput)
op553.writes = [StarDep(name='buf553', mode=None)]
op553.unmet_dependencies = [StarDep(name='buf552', mode=None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: MultiOutput
    buf553.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf553.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op553.node.kernel = None


op554: ExternKernelSchedulerNode(MultiOutput)
op554.writes = [StarDep(name='buf554', mode=None)]
op554.unmet_dependencies = [StarDep(name='buf552', mode=None)]
op554.met_dependencies = []
op554.outputs = [
    buf554: MultiOutput
    buf554.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf554.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op554.node.kernel = None


op555: ExternKernelSchedulerNode(MultiOutput)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf552', mode=None)]
op555.met_dependencies = []
op555.outputs = [
    buf555: MultiOutput
    buf555.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf555.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op555.node.kernel = None


op556: ExternKernelSchedulerNode(MultiOutput)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf552', mode=None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: MultiOutput
    buf556.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf556.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op556.node.kernel = None


op557: ExternKernelSchedulerNode(ExternKernelOut)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op557.met_dependencies = [StarDep(name='primals_364', mode=None)]
op557.outputs = [
    buf557: ExternKernelOut
    buf557.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf557.users = [
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False),
    ]
]
op557.node.kernel = extern_kernels.mm


op558: ExternKernelSchedulerNode(ExternKernelOut)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op558.met_dependencies = [StarDep(name='primals_366', mode=None)]
op558.outputs = [
    buf558: ExternKernelOut
    buf558.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf558.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op558.node.kernel = extern_kernels.mm


op559: ExternKernelSchedulerNode(ExternKernelOut)
op559.writes = [StarDep(name='buf559', mode=None)]
op559.unmet_dependencies = [StarDep(name='buf558', mode=None)]
op559.met_dependencies = [StarDep(name='primals_367', mode=None)]
op559.outputs = [
    buf559: ExternKernelOut
    buf559.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False),
    ]
]
op559.node.kernel = extern_kernels.mm


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 1024})]
op560.unmet_dependencies = 
    [   MemoryDep('buf534', c0, {c0: 655360}),
        MemoryDep('buf557', c0, {c0: 655360}),
        MemoryDep('buf559', c0, {c0: 655360})]
op560.met_dependencies = [MemoryDep('primals_365', c1, {c0: 1024, c1: 640})]
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf560.users = [NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (1024, 640)
op560.sizes = ([1024], [640])
buf557_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_365_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf559_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf560_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op560_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_365', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf559', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf534', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf560', get_index_4, getitem)
        return store_reduction


op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 1024})]
op561.unmet_dependencies = 
    [   MemoryDep('buf534', c0, {c0: 655360}),
        MemoryDep('buf557', c0, {c0: 655360}),
        MemoryDep('buf559', c0, {c0: 655360})]
op561.met_dependencies = [MemoryDep('primals_365', c1, {c0: 1024, c1: 640})]
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf561.users = [
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2102'), can_inplace=True, is_weak=False),
    ]
]
op561.group.device = cuda:0
op561.group.iteration = (1024, 640)
op561.sizes = ([1024], [640])
buf557_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_365_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf559_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op561_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_365', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf559', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf534', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf561', get_index_4, getitem_1)
        return store_reduction


op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 655360})]
op563.unmet_dependencies = 
    [   MemoryDep('buf534', c0, {c0: 655360}),
        MemoryDep('buf557', c0, {c0: 655360}),
        MemoryDep('buf559', c0, {c0: 655360}),
        MemoryDep('buf560', c0, {c0: 1024}),
        MemoryDep('buf561', c0, {c0: 1024})]
op563.met_dependencies = [MemoryDep('primals_365', c1, {c0: 1024, c1: 640})]
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf563.users = [
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op563.group.device = cuda:0
op563.group.iteration = (655360, 1)
op563.sizes = ([1024, 640], [])
buf557_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_365_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf559_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf560_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf563_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op563_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_365', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf559', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf534', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf560', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf561', get_index_5)
        constant_2 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf563', get_index_6, mul_2, None)
        return store


op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 655360})]
op564.unmet_dependencies = [MemoryDep('buf563', c0, {c0: 655360})]
op564.met_dependencies = 
    [   MemoryDep('primals_368', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_369', c1, {c0: 1024, c1: 640})]
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf564.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op564.group.device = cuda:0
op564.group.iteration = (655360, 1)
op564.sizes = ([1024, 640], [])
buf563_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_368_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_369_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf564_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op564_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_368', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_369', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf564', get_index_3, add, None)
        return store


op565: ExternKernelSchedulerNode(ExternKernelOut)
op565.writes = [StarDep(name='buf565', mode=None)]
op565.unmet_dependencies = [StarDep(name='buf564', mode=None)]
op565.met_dependencies = [StarDep(name='primals_370', mode=None)]
op565.outputs = [
    buf565: ExternKernelOut
    buf565.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf565.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False)]
]
op565.node.kernel = extern_kernels.mm


op566: ExternKernelSchedulerNode(ExternKernelOut)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf564', mode=None)]
op566.met_dependencies = [StarDep(name='primals_372', mode=None)]
op566.outputs = [
    buf566: ExternKernelOut
    buf566.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf566.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op566.node.kernel = extern_kernels.mm


op567: ExternKernelSchedulerNode(ExternKernelOut)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op567.met_dependencies = [StarDep(name='primals_373', mode=None)]
op567.outputs = [
    buf567: ExternKernelOut
    buf567.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf567.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False)]
]
op567.node.kernel = extern_kernels.mm


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 5242880})]
op568.unmet_dependencies = [MemoryDep('buf565', c0, {c0: 5242880}), MemoryDep('buf567', c0, {c0: 5242880})]
op568.met_dependencies = [MemoryDep('primals_371', c1, {c0: 1024, c1: 5120})]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
    buf568.users = [
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op568.group.device = cuda:0
op568.group.iteration = (5242880, 1)
op568.sizes = ([1024, 5120], [])
buf565_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
primals_371_layout = FixedLayout('cuda:0', torch.float32, size=[5120], stride=[1])
buf567_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
buf568_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
class op568_loop_body:
    var_ranges = {p0: 1024, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf565', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_371', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf567', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf568', get_index_3, add_1, None)
        return store


op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 2621440})]
op569.unmet_dependencies = 
    [   MemoryDep('buf568', 5120*c0 + c1 + 2560, {c0: 1024, c1: 2560}),
        MemoryDep('buf568', 5120*c0 + c1, {c0: 1024, c1: 2560})]
op569.met_dependencies = []
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
    buf569.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op569.group.device = cuda:0
op569.group.iteration = (2621440, 1)
op569.sizes = ([1024, 2560], [])
buf568_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf568_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf569_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
class op569_loop_body:
    var_ranges = {p0: 1024, p1: 2560}
    index0 = 5120*p0 + p1
    index1 = 5120*p0 + p1 + 2560
    index2 = 2560*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf568', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf568', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf568', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf569', get_index_3, mul_3, None)
        return store


op570: ExternKernelSchedulerNode(ExternKernelOut)
op570.writes = [StarDep(name='buf570', mode=None)]
op570.unmet_dependencies = [StarDep(name='buf569', mode=None)]
op570.met_dependencies = [StarDep(name='primals_374', mode=None)]
op570.outputs = [
    buf570: ExternKernelOut
    buf570.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf570.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False)]
]
op570.node.kernel = extern_kernels.mm


op571: ExternKernelSchedulerNode(ExternKernelOut)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = [StarDep(name='buf569', mode=None)]
op571.met_dependencies = [StarDep(name='primals_376', mode=None)]
op571.outputs = [
    buf571: ExternKernelOut
    buf571.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf571.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op571.node.kernel = extern_kernels.mm


op572: ExternKernelSchedulerNode(ExternKernelOut)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op572.met_dependencies = [StarDep(name='primals_377', mode=None)]
op572.outputs = [
    buf572: ExternKernelOut
    buf572.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf572.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False)]
]
op572.node.kernel = extern_kernels.mm


op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 655360})]
op573.unmet_dependencies = 
    [   MemoryDep('buf534', c0, {c0: 655360}),
        MemoryDep('buf557', c0, {c0: 655360}),
        MemoryDep('buf559', c0, {c0: 655360}),
        MemoryDep('buf570', c0, {c0: 655360}),
        MemoryDep('buf572', c0, {c0: 655360})]
op573.met_dependencies = 
    [   MemoryDep('primals_365', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_375', c1, {c0: 1024, c1: 640})]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf573.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op573.group.device = cuda:0
op573.group.iteration = (655360, 1)
op573.sizes = ([1024, 640], [])
buf570_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_375_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf572_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf557_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_365_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf559_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf534_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf573_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op573_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_375', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf572', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf557', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_365', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf559', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf534', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf573', get_index_7, add_5, None)
        return store


op574: ExternKernelSchedulerNode(ExternKernelOut)
op574.writes = [StarDep(name='buf574', mode=None)]
op574.unmet_dependencies = [StarDep(name='buf573', mode=None)]
op574.met_dependencies = [StarDep(name='primals_378', mode=None)]
op574.outputs = [
    buf574: ExternKernelOut
    buf574.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf574.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op574.node.kernel = extern_kernels.mm


op575: ExternKernelSchedulerNode(ExternKernelOut)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf573', mode=None)]
op575.met_dependencies = [StarDep(name='primals_380', mode=None)]
op575.outputs = [
    buf575: ExternKernelOut
    buf575.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf575.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op575.node.kernel = extern_kernels.mm


op576: ExternKernelSchedulerNode(ExternKernelOut)
op576.writes = [StarDep(name='buf576', mode=None)]
op576.unmet_dependencies = [StarDep(name='buf575', mode=None)]
op576.met_dependencies = [StarDep(name='primals_381', mode=None)]
op576.outputs = [
    buf576: ExternKernelOut
    buf576.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op576.node.kernel = extern_kernels.mm


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 655360})]
op577.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 655360}),
        MemoryDep('buf574', 163840*c0 + c1 + 640*c2, {c0: 4, c1: 640, c2: 256}),
        MemoryDep('buf576', 163840*c0 + c1 + 640*c2, {c0: 4, c1: 640, c2: 256})]
op577.met_dependencies = [MemoryDep('primals_379', c1, {c0: 4, c1: 640})]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf577.users = [
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1537'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op577.group.device = cuda:0
op577.group.iteration = (655360, 1)
op577.sizes = ([4, 640, 256], [])
buf574_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_379_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf576_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf499_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf577_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op577_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + p1 + 640*p2
    index1 = p1
    index2 = 163840*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_379', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf576', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf499', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf577', get_index_4, add_2, None)
        return store


op578: SchedulerNode(ComputedBuffer)
op578.writes = [MemoryDep('buf578', c0, {c0: 128})]
op578.unmet_dependencies = [MemoryDep('buf577', c0, {c0: 655360})]
op578.met_dependencies = []
op578.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf578.users = [
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op578.group.device = cuda:0
op578.group.iteration = (128, 5120)
op578.sizes = ([128], [5120])
buf577_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf578_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op578_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf578', get_index_1, getitem)
        return store_reduction


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 128})]
op579.unmet_dependencies = [MemoryDep('buf577', c0, {c0: 655360})]
op579.met_dependencies = []
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf579.users = [NodeUser(node=SchedulerNode(name='op581'), can_inplace=True, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (128, 5120)
op579.sizes = ([128], [5120])
buf577_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf579_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op579_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf579', get_index_1, getitem_1)
        return store_reduction


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 128})]
op581.unmet_dependencies = [MemoryDep('buf579', c0, {c0: 128})]
op581.met_dependencies = []
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op581.group.device = cuda:0
op581.group.iteration = (128, 1)
op581.sizes = ([128], [])
buf579_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf581_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op581_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf581', get_index_1, rsqrt, None)
        return store


op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 655360})]
op582.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 655360}),
        MemoryDep('buf578', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf581', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op582.met_dependencies = 
    [   MemoryDep('primals_382', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_383', c1, {c0: 4, c1: 640})]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf582.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=True, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (655360, 1)
op582.sizes = ([4, 640, 256], [])
buf577_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf578_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf581_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_382_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_383_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf582_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op582_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf578', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf581', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_382', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_383', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf582', get_index_5, add, None)
        return store


op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 655360})]
op583.unmet_dependencies = [MemoryDep('buf582', c0, {c0: 655360})]
op583.met_dependencies = []
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf583.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op583.group.device = cuda:0
op583.group.iteration = (655360, 1)
op583.sizes = ([655360], [])
buf582_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf583_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op583_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf582', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf582', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf583', get_index_2, mul, None)
        return store


op584: ExternKernelSchedulerNode(ExternKernelAlloc)
op584.writes = [StarDep(name='buf584', mode=None)]
op584.unmet_dependencies = [StarDep(name='buf583', mode=None)]
op584.met_dependencies = [StarDep(name='primals_384', mode=None)]
op584.outputs = [
    buf584: ExternKernelAlloc
    buf584.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf584.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False)]
]
op584.node.kernel = extern_kernels.convolution


op585: ExternKernelSchedulerNode(ExternKernelAlloc)
op585.writes = [StarDep(name='buf585', mode=None)]
op585.unmet_dependencies = [StarDep(name='buf583', mode=None)]
op585.met_dependencies = [StarDep(name='primals_386', mode=None)]
op585.outputs = [
    buf585: ExternKernelAlloc
    buf585.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf585.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op585.node.kernel = extern_kernels.convolution


op586: ExternKernelSchedulerNode(ExternKernelAlloc)
op586.writes = [StarDep(name='buf586', mode=None)]
op586.unmet_dependencies = [StarDep(name='buf585', mode=None)]
op586.met_dependencies = [StarDep(name='primals_387', mode=None)]
op586.outputs = [
    buf586: ExternKernelAlloc
    buf586.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf586.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False)]
]
op586.node.kernel = extern_kernels.convolution


op587: ExternKernelSchedulerNode(ExternKernelOut)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op587.met_dependencies = [StarDep(name='primals_388', mode=None)]
op587.outputs = [
    buf587: ExternKernelOut
    buf587.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
    buf587.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op587.node.kernel = extern_kernels.mm


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 655360})]
op588.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 655360}),
        MemoryDep('buf586', c0, {c0: 655360}),
        MemoryDep('buf587', c0, {c0: 2560})]
op588.met_dependencies = 
    [   MemoryDep('primals_385', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_389', c1, {c0: 4, c1: 640})]
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf588.users = [
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op588.group.device = cuda:0
op588.group.iteration = (655360, 1)
op588.sizes = ([4, 640, 256], [])
buf584_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_385_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf586_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf587_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
primals_389_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf588_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op588_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    index2 = 640*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_385', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf586', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf587', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_389', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf588', get_index_5, add_3, None)
        return store


op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 128})]
op589.unmet_dependencies = [MemoryDep('buf588', c0, {c0: 655360})]
op589.met_dependencies = []
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf589.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op589.group.device = cuda:0
op589.group.iteration = (128, 5120)
op589.sizes = ([128], [5120])
buf588_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf589_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op589_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf589', get_index_1, getitem)
        return store_reduction


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 128})]
op590.unmet_dependencies = [MemoryDep('buf588', c0, {c0: 655360})]
op590.met_dependencies = []
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf590.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (128, 5120)
op590.sizes = ([128], [5120])
buf588_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf590_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op590_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf590', get_index_1, getitem_1)
        return store_reduction


op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 128})]
op592.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 128})]
op592.met_dependencies = []
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op592.group.device = cuda:0
op592.group.iteration = (128, 1)
op592.sizes = ([128], [])
buf590_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op592_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf592', get_index_1, rsqrt, None)
        return store


op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 655360})]
op593.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 655360}),
        MemoryDep('buf589', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf592', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op593.met_dependencies = 
    [   MemoryDep('primals_390', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_391', c1, {c0: 4, c1: 640})]
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf593.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=True, is_weak=False)]
]
op593.group.device = cuda:0
op593.group.iteration = (655360, 1)
op593.sizes = ([4, 640, 256], [])
buf588_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf589_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_390_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_391_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op593_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf589', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf592', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_390', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_391', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf593', get_index_5, add, None)
        return store


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 655360})]
op594.unmet_dependencies = [MemoryDep('buf593', c0, {c0: 655360})]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf594.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op594.group.device = cuda:0
op594.group.iteration = (655360, 1)
op594.sizes = ([655360], [])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf594_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op594_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf593', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf594', get_index_2, mul, None)
        return store


op595: ExternKernelSchedulerNode(ExternKernelAlloc)
op595.writes = [StarDep(name='buf595', mode=None)]
op595.unmet_dependencies = [StarDep(name='buf594', mode=None)]
op595.met_dependencies = [StarDep(name='primals_392', mode=None)]
op595.outputs = [
    buf595: ExternKernelAlloc
    buf595.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf595.users = [NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False)]
]
op595.node.kernel = extern_kernels.convolution


op596: ExternKernelSchedulerNode(ExternKernelAlloc)
op596.writes = [StarDep(name='buf596', mode=None)]
op596.unmet_dependencies = [StarDep(name='buf594', mode=None)]
op596.met_dependencies = [StarDep(name='primals_394', mode=None)]
op596.outputs = [
    buf596: ExternKernelAlloc
    buf596.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf596.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op596.node.kernel = extern_kernels.convolution


op597: ExternKernelSchedulerNode(ExternKernelAlloc)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf596', mode=None)]
op597.met_dependencies = [StarDep(name='primals_395', mode=None)]
op597.outputs = [
    buf597: ExternKernelAlloc
    buf597.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf597.users = [NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False)]
]
op597.node.kernel = extern_kernels.convolution


op598: SchedulerNode(ComputedBuffer)
op598.writes = [MemoryDep('buf598', c0, {c0: 655360})]
op598.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 655360}),
        MemoryDep('buf595', c0, {c0: 655360}),
        MemoryDep('buf597', c0, {c0: 655360})]
op598.met_dependencies = [MemoryDep('primals_393', c1, {c0: 4, c1: 640})]
op598.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf598.users = [
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op598.group.device = cuda:0
op598.group.iteration = (655360, 1)
op598.sizes = ([4, 640, 256], [])
buf577_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf595_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_393_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf597_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op598_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_393', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf597', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf598', get_index_4, mul_1, None)
        return store


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 128})]
op599.unmet_dependencies = [MemoryDep('buf598', c0, {c0: 655360})]
op599.met_dependencies = []
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf599.users = [
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op599.group.device = cuda:0
op599.group.iteration = (128, 5120)
op599.sizes = ([128], [5120])
buf598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf599_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op599_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf599', get_index_1, getitem)
        return store_reduction


op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 128})]
op600.unmet_dependencies = [MemoryDep('buf598', c0, {c0: 655360})]
op600.met_dependencies = []
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf600.users = [
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
    ]
]
op600.group.device = cuda:0
op600.group.iteration = (128, 5120)
op600.sizes = ([128], [5120])
buf598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf600_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op600_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf600', get_index_1, getitem_1)
        return store_reduction


op602: SchedulerNode(ComputedBuffer)
op602.writes = [MemoryDep('buf602', c0, {c0: 128})]
op602.unmet_dependencies = [MemoryDep('buf600', c0, {c0: 128})]
op602.met_dependencies = []
op602.outputs = [
    buf602: ComputedBuffer
    buf602.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf602.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op602.group.device = cuda:0
op602.group.iteration = (128, 1)
op602.sizes = ([128], [])
buf600_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf602_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op602_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf600', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf602', get_index_1, rsqrt, None)
        return store


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 655360})]
op603.unmet_dependencies = 
    [   MemoryDep('buf598', c0, {c0: 655360}),
        MemoryDep('buf599', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf600', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op603.met_dependencies = 
    [   MemoryDep('primals_396', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_397', c1, {c0: 4, c1: 640})]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf603.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
    ]
]
op603.group.device = cuda:0
op603.group.iteration = (655360, 1)
op603.sizes = ([4, 640, 256], [])
buf598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf599_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf600_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_396_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_397_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf603_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op603_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf599', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf600', get_index_2)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_396', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_397', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf603', get_index_5, add_1, None)
        return store


op604: ExternKernelSchedulerNode(ExternKernelOut)
op604.writes = [StarDep(name='buf604', mode=None)]
op604.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op604.met_dependencies = [StarDep(name='primals_398', mode=None)]
op604.outputs = [
    buf604: ExternKernelOut
    buf604.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf604.users = [
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False),
    ]
]
op604.node.kernel = extern_kernels.bmm


op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 655360})]
op605.unmet_dependencies = [MemoryDep('buf603', 163840*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 640})]
op605.met_dependencies = []
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf605.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op605.group.device = cuda:0
op605.group.iteration = (655360, 1)
op605.sizes = ([4, 256, 640], [])
buf603_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf605_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op605_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 640}
    index0 = 163840*p0 + p1 + 256*p2
    index1 = 163840*p0 + 640*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf605', get_index_1, load, None)
        return store


op606: ExternKernelSchedulerNode(ExternKernelOut)
op606.writes = [StarDep(name='buf606', mode=None)]
op606.unmet_dependencies = [StarDep(name='buf605', mode=None)]
op606.met_dependencies = [StarDep(name='primals_400', mode=None)]
op606.outputs = [
    buf606: ExternKernelOut
    buf606.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf606.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op606.node.kernel = extern_kernels.mm


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf606', mode=None)]
op607.met_dependencies = [StarDep(name='primals_401', mode=None)]
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False),
    ]
]
op607.node.kernel = extern_kernels.mm


op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 1024})]
op608.unmet_dependencies = [MemoryDep('buf604', c0, {c0: 655360}), MemoryDep('buf607', c0, {c0: 655360})]
op608.met_dependencies = [MemoryDep('primals_399', c1, {c0: 1024, c1: 640})]
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf608.users = [NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False)]
]
op608.group.device = cuda:0
op608.group.iteration = (1024, 640)
op608.sizes = ([1024], [640])
buf604_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_399_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf607_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf608_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op608_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_399', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf607', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf608', get_index_3, getitem)
        return store_reduction


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 1024})]
op609.unmet_dependencies = [MemoryDep('buf604', c0, {c0: 655360}), MemoryDep('buf607', c0, {c0: 655360})]
op609.met_dependencies = [MemoryDep('primals_399', c1, {c0: 1024, c1: 640})]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf609.users = [
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2101'), can_inplace=True, is_weak=False),
    ]
]
op609.group.device = cuda:0
op609.group.iteration = (1024, 640)
op609.sizes = ([1024], [640])
buf604_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_399_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf607_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf609_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op609_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_399', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf607', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf609', get_index_3, getitem_1)
        return store_reduction


op611: SchedulerNode(ComputedBuffer)
op611.writes = [MemoryDep('buf611', c0, {c0: 655360})]
op611.unmet_dependencies = 
    [   MemoryDep('buf604', c0, {c0: 655360}),
        MemoryDep('buf607', c0, {c0: 655360}),
        MemoryDep('buf608', c0, {c0: 1024}),
        MemoryDep('buf609', c0, {c0: 1024})]
op611.met_dependencies = [MemoryDep('primals_399', c1, {c0: 1024, c1: 640})]
op611.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf611.users = [
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op611.group.device = cuda:0
op611.group.iteration = (655360, 1)
op611.sizes = ([1024, 640], [])
buf604_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_399_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf607_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf608_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf609_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf611_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op611_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_399', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf607', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf608', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf609', get_index_4)
        constant_1 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf611', get_index_5, mul_1, None)
        return store


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 655360})]
op612.unmet_dependencies = [MemoryDep('buf611', c0, {c0: 655360})]
op612.met_dependencies = 
    [   MemoryDep('primals_402', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_403', c1, {c0: 1024, c1: 640})]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf612.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op612.group.device = cuda:0
op612.group.iteration = (655360, 1)
op612.sizes = ([1024, 640], [])
buf611_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_402_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_403_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf612_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op612_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_402', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_403', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf612', get_index_3, add, None)
        return store


op613: ExternKernelSchedulerNode(ExternKernelOut)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op613.met_dependencies = [StarDep(name='primals_404', mode=None)]
op613.outputs = [
    buf613: ExternKernelOut
    buf613.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False)]
]
op613.node.kernel = extern_kernels.mm


op614: ExternKernelSchedulerNode(ExternKernelOut)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op614.met_dependencies = [StarDep(name='primals_405', mode=None)]
op614.outputs = [
    buf614: ExternKernelOut
    buf614.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf614.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op614.node.kernel = extern_kernels.mm


op615: ExternKernelSchedulerNode(ExternKernelOut)
op615.writes = [StarDep(name='buf615', mode=None)]
op615.unmet_dependencies = [StarDep(name='buf614', mode=None)]
op615.met_dependencies = [StarDep(name='primals_406', mode=None)]
op615.outputs = [
    buf615: ExternKernelOut
    buf615.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf615.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False)]
]
op615.node.kernel = extern_kernels.mm


op616: ExternKernelSchedulerNode(ExternKernelOut)
op616.writes = [StarDep(name='buf616', mode=None)]
op616.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op616.met_dependencies = [StarDep(name='primals_407', mode=None)]
op616.outputs = [
    buf616: ExternKernelOut
    buf616.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf616.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False)]
]
op616.node.kernel = extern_kernels.mm


op617: ExternKernelSchedulerNode(ExternKernelOut)
op617.writes = [StarDep(name='buf617', mode=None)]
op617.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op617.met_dependencies = [StarDep(name='primals_408', mode=None)]
op617.outputs = [
    buf617: ExternKernelOut
    buf617.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf617.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op617.node.kernel = extern_kernels.mm


op618: ExternKernelSchedulerNode(ExternKernelOut)
op618.writes = [StarDep(name='buf618', mode=None)]
op618.unmet_dependencies = [StarDep(name='buf617', mode=None)]
op618.met_dependencies = [StarDep(name='primals_409', mode=None)]
op618.outputs = [
    buf618: ExternKernelOut
    buf618.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf618.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False)]
]
op618.node.kernel = extern_kernels.mm


op619: ExternKernelSchedulerNode(ExternKernelOut)
op619.writes = [StarDep(name='buf619', mode=None)]
op619.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op619.met_dependencies = [StarDep(name='primals_410', mode=None)]
op619.outputs = [
    buf619: ExternKernelOut
    buf619.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf619.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op619.node.kernel = extern_kernels.mm


op620: ExternKernelSchedulerNode(ExternKernelOut)
op620.writes = [StarDep(name='buf620', mode=None)]
op620.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op620.met_dependencies = [StarDep(name='primals_411', mode=None)]
op620.outputs = [
    buf620: ExternKernelOut
    buf620.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf620.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op620.node.kernel = extern_kernels.mm


op621: ExternKernelSchedulerNode(ExternKernelOut)
op621.writes = [StarDep(name='buf621', mode=None)]
op621.unmet_dependencies = [StarDep(name='buf620', mode=None)]
op621.met_dependencies = [StarDep(name='primals_412', mode=None)]
op621.outputs = [
    buf621: ExternKernelOut
    buf621.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf621.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op621.node.kernel = extern_kernels.mm


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 655360})]
op622.unmet_dependencies = [MemoryDep('buf613', c0, {c0: 655360}), MemoryDep('buf615', c0, {c0: 655360})]
op622.met_dependencies = []
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf622.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op622.group.device = cuda:0
op622.group.iteration = (655360, 1)
op622.sizes = ([655360], [])
buf613_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf615_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf622_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op622_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf613', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf615', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf622', get_index_2, add, None)
        return store


op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 655360})]
op623.unmet_dependencies = [MemoryDep('buf616', c0, {c0: 655360}), MemoryDep('buf618', c0, {c0: 655360})]
op623.met_dependencies = []
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf623.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op623.group.device = cuda:0
op623.group.iteration = (655360, 1)
op623.sizes = ([655360], [])
buf616_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf618_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf623_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op623_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf616', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf618', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf623', get_index_2, add, None)
        return store


op624: SchedulerNode(ComputedBuffer)
op624.writes = [MemoryDep('buf624', c0, {c0: 655360})]
op624.unmet_dependencies = [MemoryDep('buf619', c0, {c0: 655360}), MemoryDep('buf621', c0, {c0: 655360})]
op624.met_dependencies = []
op624.outputs = [
    buf624: ComputedBuffer
    buf624.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf624.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op624.group.device = cuda:0
op624.group.iteration = (655360, 1)
op624.sizes = ([655360], [])
buf619_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf621_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf624_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op624_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf621', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf624', get_index_2, add, None)
        return store


op625: ExternKernelSchedulerNode(FallbackKernel)
op625.writes = [StarDep(name='buf625', mode=None)]
op625.unmet_dependencies = 
    [   StarDep(name='buf622', mode=None),
        StarDep(name='buf623', mode=None),
        StarDep(name='buf624', mode=None)]
op625.met_dependencies = []
op625.outputs = [
    buf625: FallbackKernel
    buf625.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf625.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False),
    ]
]
op625.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op626: ExternKernelSchedulerNode(MultiOutput)
op626.writes = [StarDep(name='buf626', mode=None)]
op626.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op626.met_dependencies = []
op626.outputs = [
    buf626: MultiOutput
    buf626.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf626.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op626.node.kernel = None


op627: ExternKernelSchedulerNode(MultiOutput)
op627.writes = [StarDep(name='buf627', mode=None)]
op627.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op627.met_dependencies = []
op627.outputs = [
    buf627: MultiOutput
    buf627.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf627.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op627.node.kernel = None


op628: ExternKernelSchedulerNode(MultiOutput)
op628.writes = [StarDep(name='buf628', mode=None)]
op628.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op628.met_dependencies = []
op628.outputs = [
    buf628: MultiOutput
    buf628.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf628.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op628.node.kernel = None


op629: ExternKernelSchedulerNode(MultiOutput)
op629.writes = [StarDep(name='buf629', mode=None)]
op629.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op629.met_dependencies = []
op629.outputs = [
    buf629: MultiOutput
    buf629.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf629.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op629.node.kernel = None


op630: ExternKernelSchedulerNode(ExternKernelOut)
op630.writes = [StarDep(name='buf630', mode=None)]
op630.unmet_dependencies = [StarDep(name='buf626', mode=None)]
op630.met_dependencies = [StarDep(name='primals_413', mode=None)]
op630.outputs = [
    buf630: ExternKernelOut
    buf630.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf630.users = [NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False)]
]
op630.node.kernel = extern_kernels.mm


op631: ExternKernelSchedulerNode(ExternKernelOut)
op631.writes = [StarDep(name='buf631', mode=None)]
op631.unmet_dependencies = [StarDep(name='buf626', mode=None)]
op631.met_dependencies = [StarDep(name='primals_415', mode=None)]
op631.outputs = [
    buf631: ExternKernelOut
    buf631.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf631.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op631.node.kernel = extern_kernels.mm


op632: ExternKernelSchedulerNode(ExternKernelOut)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op632.met_dependencies = [StarDep(name='primals_416', mode=None)]
op632.outputs = [
    buf632: ExternKernelOut
    buf632.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf632.users = [NodeUser(node=SchedulerNode(name='op633'), can_inplace=True, is_weak=False)]
]
op632.node.kernel = extern_kernels.mm


op633: SchedulerNode(ComputedBuffer)
op633.writes = [MemoryDep('buf633', c0, {c0: 655360})]
op633.unmet_dependencies = 
    [   MemoryDep('buf604', c0, {c0: 655360}),
        MemoryDep('buf607', c0, {c0: 655360}),
        MemoryDep('buf630', c0, {c0: 655360}),
        MemoryDep('buf632', c0, {c0: 655360})]
op633.met_dependencies = 
    [   MemoryDep('primals_399', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_414', c1, {c0: 1024, c1: 640})]
op633.outputs = [
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf633.users = [
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False),
    ]
]
op633.group.device = cuda:0
op633.group.iteration = (655360, 1)
op633.sizes = ([1024, 640], [])
buf630_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_414_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf632_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf604_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_399_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf607_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op633_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_414', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf632', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf604', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_399', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf607', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf633', get_index_6, add_4, None)
        return store


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 1024})]
op634.unmet_dependencies = [MemoryDep('buf633', c0, {c0: 655360})]
op634.met_dependencies = []
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf634.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (1024, 640)
op634.sizes = ([1024], [640])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf634_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op634_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf634', get_index_1, getitem)
        return store_reduction


op635: SchedulerNode(ComputedBuffer)
op635.writes = [MemoryDep('buf635', c0, {c0: 1024})]
op635.unmet_dependencies = [MemoryDep('buf633', c0, {c0: 655360})]
op635.met_dependencies = []
op635.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf635.users = [
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2100'), can_inplace=True, is_weak=False),
    ]
]
op635.group.device = cuda:0
op635.group.iteration = (1024, 640)
op635.sizes = ([1024], [640])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf635_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op635_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf635', get_index_1, getitem_1)
        return store_reduction


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 655360})]
op637.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 655360}),
        MemoryDep('buf634', c0, {c0: 1024}),
        MemoryDep('buf635', c0, {c0: 1024})]
op637.met_dependencies = []
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf637.users = [
        NodeUser(node=SchedulerNode(name='op638'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op637.group.device = cuda:0
op637.group.iteration = (655360, 1)
op637.sizes = ([1024, 640], [])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf634_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf635_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf637_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op637_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf634', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf635', get_index_2)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf637', get_index_3, mul, None)
        return store


op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', c0, {c0: 655360})]
op638.unmet_dependencies = [MemoryDep('buf637', c0, {c0: 655360})]
op638.met_dependencies = 
    [   MemoryDep('primals_417', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_418', c1, {c0: 1024, c1: 640})]
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf638.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op638.group.device = cuda:0
op638.group.iteration = (655360, 1)
op638.sizes = ([1024, 640], [])
buf637_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_417_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_418_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf638_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op638_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf637', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_417', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_418', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf638', get_index_3, add, None)
        return store


op639: ExternKernelSchedulerNode(ExternKernelOut)
op639.writes = [StarDep(name='buf639', mode=None)]
op639.unmet_dependencies = [StarDep(name='buf638', mode=None)]
op639.met_dependencies = [StarDep(name='primals_419', mode=None)]
op639.outputs = [
    buf639: ExternKernelOut
    buf639.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf639.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=True, is_weak=False)]
]
op639.node.kernel = extern_kernels.mm


op640: ExternKernelSchedulerNode(ExternKernelOut)
op640.writes = [StarDep(name='buf640', mode=None)]
op640.unmet_dependencies = [StarDep(name='buf638', mode=None)]
op640.met_dependencies = [StarDep(name='primals_420', mode=None)]
op640.outputs = [
    buf640: ExternKernelOut
    buf640.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf640.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op640.node.kernel = extern_kernels.mm


op641: ExternKernelSchedulerNode(ExternKernelOut)
op641.writes = [StarDep(name='buf641', mode=None)]
op641.unmet_dependencies = [StarDep(name='buf640', mode=None)]
op641.met_dependencies = [StarDep(name='primals_421', mode=None)]
op641.outputs = [
    buf641: ExternKernelOut
    buf641.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf641.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=True, is_weak=False)]
]
op641.node.kernel = extern_kernels.mm


op642: ExternKernelSchedulerNode(ExternKernelOut)
op642.writes = [StarDep(name='buf642', mode=None)]
op642.unmet_dependencies = []
op642.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_422', mode=None)]
op642.outputs = [
    buf642: ExternKernelOut
    buf642.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf642.users = [NodeUser(node=SchedulerNode(name='op649'), can_inplace=True, is_weak=False)]
]
op642.node.kernel = extern_kernels.mm


op643: ExternKernelSchedulerNode(ExternKernelOut)
op643.writes = [StarDep(name='buf643', mode=None)]
op643.unmet_dependencies = []
op643.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_423', mode=None)]
op643.outputs = [
    buf643: ExternKernelOut
    buf643.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf643.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op643.node.kernel = extern_kernels.mm


op644: ExternKernelSchedulerNode(ExternKernelOut)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf643', mode=None)]
op644.met_dependencies = [StarDep(name='primals_424', mode=None)]
op644.outputs = [
    buf644: ExternKernelOut
    buf644.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf644.users = [NodeUser(node=SchedulerNode(name='op649'), can_inplace=True, is_weak=False)]
]
op644.node.kernel = extern_kernels.mm


op645: ExternKernelSchedulerNode(ExternKernelOut)
op645.writes = [StarDep(name='buf645', mode=None)]
op645.unmet_dependencies = []
op645.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_425', mode=None)]
op645.outputs = [
    buf645: ExternKernelOut
    buf645.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf645.users = [NodeUser(node=SchedulerNode(name='op650'), can_inplace=True, is_weak=False)]
]
op645.node.kernel = extern_kernels.mm


op646: ExternKernelSchedulerNode(ExternKernelOut)
op646.writes = [StarDep(name='buf646', mode=None)]
op646.unmet_dependencies = []
op646.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_426', mode=None)]
op646.outputs = [
    buf646: ExternKernelOut
    buf646.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf646.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op646.node.kernel = extern_kernels.mm


op647: ExternKernelSchedulerNode(ExternKernelOut)
op647.writes = [StarDep(name='buf647', mode=None)]
op647.unmet_dependencies = [StarDep(name='buf646', mode=None)]
op647.met_dependencies = [StarDep(name='primals_427', mode=None)]
op647.outputs = [
    buf647: ExternKernelOut
    buf647.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf647.users = [NodeUser(node=SchedulerNode(name='op650'), can_inplace=True, is_weak=False)]
]
op647.node.kernel = extern_kernels.mm


op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 655360})]
op648.unmet_dependencies = [MemoryDep('buf639', c0, {c0: 655360}), MemoryDep('buf641', c0, {c0: 655360})]
op648.met_dependencies = []
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf648.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op648.group.device = cuda:0
op648.group.iteration = (655360, 1)
op648.sizes = ([655360], [])
buf639_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf641_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf648_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op648_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf639', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf641', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf648', get_index_2, add, None)
        return store


op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 197120})]
op649.unmet_dependencies = [MemoryDep('buf642', c0, {c0: 197120}), MemoryDep('buf644', c0, {c0: 197120})]
op649.met_dependencies = []
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf649.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op649.group.device = cuda:0
op649.group.iteration = (197120, 1)
op649.sizes = ([197120], [])
buf642_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf644_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf649_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op649_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf642', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf644', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf649', get_index_2, add, None)
        return store


op650: SchedulerNode(ComputedBuffer)
op650.writes = [MemoryDep('buf650', c0, {c0: 197120})]
op650.unmet_dependencies = [MemoryDep('buf645', c0, {c0: 197120}), MemoryDep('buf647', c0, {c0: 197120})]
op650.met_dependencies = []
op650.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf650.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op650.group.device = cuda:0
op650.group.iteration = (197120, 1)
op650.sizes = ([197120], [])
buf645_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf647_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf650_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op650_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf645', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf650', get_index_2, add, None)
        return store


op651: ExternKernelSchedulerNode(FallbackKernel)
op651.writes = [StarDep(name='buf651', mode=None)]
op651.unmet_dependencies = 
    [   StarDep(name='buf648', mode=None),
        StarDep(name='buf649', mode=None),
        StarDep(name='buf650', mode=None)]
op651.met_dependencies = []
op651.outputs = [
    buf651: FallbackKernel
    buf651.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf651.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
]
op651.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op652: ExternKernelSchedulerNode(MultiOutput)
op652.writes = [StarDep(name='buf652', mode=None)]
op652.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op652.met_dependencies = []
op652.outputs = [
    buf652: MultiOutput
    buf652.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf652.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op652.node.kernel = None


op653: ExternKernelSchedulerNode(MultiOutput)
op653.writes = [StarDep(name='buf653', mode=None)]
op653.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op653.met_dependencies = []
op653.outputs = [
    buf653: MultiOutput
    buf653.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf653.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op653.node.kernel = None


op654: ExternKernelSchedulerNode(MultiOutput)
op654.writes = [StarDep(name='buf654', mode=None)]
op654.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op654.met_dependencies = []
op654.outputs = [
    buf654: MultiOutput
    buf654.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf654.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op654.node.kernel = None


op655: ExternKernelSchedulerNode(MultiOutput)
op655.writes = [StarDep(name='buf655', mode=None)]
op655.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op655.met_dependencies = []
op655.outputs = [
    buf655: MultiOutput
    buf655.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf655.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op655.node.kernel = None


op656: ExternKernelSchedulerNode(ExternKernelOut)
op656.writes = [StarDep(name='buf656', mode=None)]
op656.unmet_dependencies = [StarDep(name='buf652', mode=None)]
op656.met_dependencies = [StarDep(name='primals_428', mode=None)]
op656.outputs = [
    buf656: ExternKernelOut
    buf656.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf656.users = [
        NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False),
    ]
]
op656.node.kernel = extern_kernels.mm


op657: ExternKernelSchedulerNode(ExternKernelOut)
op657.writes = [StarDep(name='buf657', mode=None)]
op657.unmet_dependencies = [StarDep(name='buf652', mode=None)]
op657.met_dependencies = [StarDep(name='primals_430', mode=None)]
op657.outputs = [
    buf657: ExternKernelOut
    buf657.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf657.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op657.node.kernel = extern_kernels.mm


op658: ExternKernelSchedulerNode(ExternKernelOut)
op658.writes = [StarDep(name='buf658', mode=None)]
op658.unmet_dependencies = [StarDep(name='buf657', mode=None)]
op658.met_dependencies = [StarDep(name='primals_431', mode=None)]
op658.outputs = [
    buf658: ExternKernelOut
    buf658.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf658.users = [
        NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False),
    ]
]
op658.node.kernel = extern_kernels.mm


op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', c0, {c0: 1024})]
op659.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 655360}),
        MemoryDep('buf656', c0, {c0: 655360}),
        MemoryDep('buf658', c0, {c0: 655360})]
op659.met_dependencies = [MemoryDep('primals_429', c1, {c0: 1024, c1: 640})]
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf659.users = [NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False)]
]
op659.group.device = cuda:0
op659.group.iteration = (1024, 640)
op659.sizes = ([1024], [640])
buf656_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_429_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf659_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op659_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_429', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf658', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf633', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf659', get_index_4, getitem)
        return store_reduction


op660: SchedulerNode(ComputedBuffer)
op660.writes = [MemoryDep('buf660', c0, {c0: 1024})]
op660.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 655360}),
        MemoryDep('buf656', c0, {c0: 655360}),
        MemoryDep('buf658', c0, {c0: 655360})]
op660.met_dependencies = [MemoryDep('primals_429', c1, {c0: 1024, c1: 640})]
op660.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf660.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2099'), can_inplace=True, is_weak=False),
    ]
]
op660.group.device = cuda:0
op660.group.iteration = (1024, 640)
op660.sizes = ([1024], [640])
buf656_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_429_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf660_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op660_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_429', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf658', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf633', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf660', get_index_4, getitem_1)
        return store_reduction


op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 655360})]
op662.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 655360}),
        MemoryDep('buf656', c0, {c0: 655360}),
        MemoryDep('buf658', c0, {c0: 655360}),
        MemoryDep('buf659', c0, {c0: 1024}),
        MemoryDep('buf660', c0, {c0: 1024})]
op662.met_dependencies = [MemoryDep('primals_429', c1, {c0: 1024, c1: 640})]
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf662.users = [
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op662.group.device = cuda:0
op662.group.iteration = (655360, 1)
op662.sizes = ([1024, 640], [])
buf656_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_429_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf659_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf660_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf662_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op662_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_429', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf658', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf633', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf659', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf660', get_index_5)
        constant_2 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf662', get_index_6, mul_2, None)
        return store


op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 655360})]
op663.unmet_dependencies = [MemoryDep('buf662', c0, {c0: 655360})]
op663.met_dependencies = 
    [   MemoryDep('primals_432', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_433', c1, {c0: 1024, c1: 640})]
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf663.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op663.group.device = cuda:0
op663.group.iteration = (655360, 1)
op663.sizes = ([1024, 640], [])
buf662_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_432_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_433_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf663_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op663_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf662', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_432', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_433', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf663', get_index_3, add, None)
        return store


op664: ExternKernelSchedulerNode(ExternKernelOut)
op664.writes = [StarDep(name='buf664', mode=None)]
op664.unmet_dependencies = [StarDep(name='buf663', mode=None)]
op664.met_dependencies = [StarDep(name='primals_434', mode=None)]
op664.outputs = [
    buf664: ExternKernelOut
    buf664.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf664.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op664.node.kernel = extern_kernels.mm


op665: ExternKernelSchedulerNode(ExternKernelOut)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf663', mode=None)]
op665.met_dependencies = [StarDep(name='primals_436', mode=None)]
op665.outputs = [
    buf665: ExternKernelOut
    buf665.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf665.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op665.node.kernel = extern_kernels.mm


op666: ExternKernelSchedulerNode(ExternKernelOut)
op666.writes = [StarDep(name='buf666', mode=None)]
op666.unmet_dependencies = [StarDep(name='buf665', mode=None)]
op666.met_dependencies = [StarDep(name='primals_437', mode=None)]
op666.outputs = [
    buf666: ExternKernelOut
    buf666.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf666.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op666.node.kernel = extern_kernels.mm


op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 5242880})]
op667.unmet_dependencies = [MemoryDep('buf664', c0, {c0: 5242880}), MemoryDep('buf666', c0, {c0: 5242880})]
op667.met_dependencies = [MemoryDep('primals_435', c1, {c0: 1024, c1: 5120})]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
    buf667.users = [
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op667.group.device = cuda:0
op667.group.iteration = (5242880, 1)
op667.sizes = ([1024, 5120], [])
buf664_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
primals_435_layout = FixedLayout('cuda:0', torch.float32, size=[5120], stride=[1])
buf666_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
buf667_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
class op667_loop_body:
    var_ranges = {p0: 1024, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf664', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_435', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf666', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf667', get_index_3, add_1, None)
        return store


op668: SchedulerNode(ComputedBuffer)
op668.writes = [MemoryDep('buf668', c0, {c0: 2621440})]
op668.unmet_dependencies = 
    [   MemoryDep('buf667', 5120*c0 + c1 + 2560, {c0: 1024, c1: 2560}),
        MemoryDep('buf667', 5120*c0 + c1, {c0: 1024, c1: 2560})]
op668.met_dependencies = []
op668.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
    buf668.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op668.group.device = cuda:0
op668.group.iteration = (2621440, 1)
op668.sizes = ([1024, 2560], [])
buf667_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf667_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf668_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
class op668_loop_body:
    var_ranges = {p0: 1024, p1: 2560}
    index0 = 5120*p0 + p1
    index1 = 5120*p0 + p1 + 2560
    index2 = 2560*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf667', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf667', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf668', get_index_3, mul_3, None)
        return store


op669: ExternKernelSchedulerNode(ExternKernelOut)
op669.writes = [StarDep(name='buf669', mode=None)]
op669.unmet_dependencies = [StarDep(name='buf668', mode=None)]
op669.met_dependencies = [StarDep(name='primals_438', mode=None)]
op669.outputs = [
    buf669: ExternKernelOut
    buf669.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf669.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False)]
]
op669.node.kernel = extern_kernels.mm


op670: ExternKernelSchedulerNode(ExternKernelOut)
op670.writes = [StarDep(name='buf670', mode=None)]
op670.unmet_dependencies = [StarDep(name='buf668', mode=None)]
op670.met_dependencies = [StarDep(name='primals_440', mode=None)]
op670.outputs = [
    buf670: ExternKernelOut
    buf670.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf670.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op670.node.kernel = extern_kernels.mm


op671: ExternKernelSchedulerNode(ExternKernelOut)
op671.writes = [StarDep(name='buf671', mode=None)]
op671.unmet_dependencies = [StarDep(name='buf670', mode=None)]
op671.met_dependencies = [StarDep(name='primals_441', mode=None)]
op671.outputs = [
    buf671: ExternKernelOut
    buf671.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf671.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False)]
]
op671.node.kernel = extern_kernels.mm


op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 655360})]
op672.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 655360}),
        MemoryDep('buf656', c0, {c0: 655360}),
        MemoryDep('buf658', c0, {c0: 655360}),
        MemoryDep('buf669', c0, {c0: 655360}),
        MemoryDep('buf671', c0, {c0: 655360})]
op672.met_dependencies = 
    [   MemoryDep('primals_429', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_439', c1, {c0: 1024, c1: 640})]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf672.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op672.group.device = cuda:0
op672.group.iteration = (655360, 1)
op672.sizes = ([1024, 640], [])
buf669_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_439_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf671_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf656_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_429_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf633_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf672_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op672_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf669', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_439', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf671', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf656', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_429', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf658', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf633', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf672', get_index_7, add_5, None)
        return store


op673: ExternKernelSchedulerNode(ExternKernelOut)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op673.met_dependencies = [StarDep(name='primals_442', mode=None)]
op673.outputs = [
    buf673: ExternKernelOut
    buf673.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf673.users = [NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op673.node.kernel = extern_kernels.mm


op674: ExternKernelSchedulerNode(ExternKernelOut)
op674.writes = [StarDep(name='buf674', mode=None)]
op674.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op674.met_dependencies = [StarDep(name='primals_444', mode=None)]
op674.outputs = [
    buf674: ExternKernelOut
    buf674.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf674.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op674.node.kernel = extern_kernels.mm


op675: ExternKernelSchedulerNode(ExternKernelOut)
op675.writes = [StarDep(name='buf675', mode=None)]
op675.unmet_dependencies = [StarDep(name='buf674', mode=None)]
op675.met_dependencies = [StarDep(name='primals_445', mode=None)]
op675.outputs = [
    buf675: ExternKernelOut
    buf675.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf675.users = [NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op675.node.kernel = extern_kernels.mm


op676: SchedulerNode(ComputedBuffer)
op676.writes = [MemoryDep('buf676', c0, {c0: 655360})]
op676.unmet_dependencies = 
    [   MemoryDep('buf598', c0, {c0: 655360}),
        MemoryDep('buf673', 163840*c0 + c1 + 640*c2, {c0: 4, c1: 640, c2: 256}),
        MemoryDep('buf675', 163840*c0 + c1 + 640*c2, {c0: 4, c1: 640, c2: 256})]
op676.met_dependencies = [MemoryDep('primals_443', c1, {c0: 4, c1: 640})]
op676.outputs = [
    buf676: ComputedBuffer
    buf676.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf676.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op677'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1435'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op676.group.device = cuda:0
op676.group.iteration = (655360, 1)
op676.sizes = ([4, 640, 256], [])
buf673_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_443_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf675_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf676_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op676_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + p1 + 640*p2
    index1 = p1
    index2 = 163840*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf673', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_443', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf675', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf598', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf676', get_index_4, add_2, None)
        return store


op677: ExternKernelSchedulerNode(ExternKernelAlloc)
op677.writes = [StarDep(name='buf677', mode=None)]
op677.unmet_dependencies = [StarDep(name='buf676', mode=None)]
op677.met_dependencies = [StarDep(name='primals_446', mode=None)]
op677.outputs = [
    buf677: ExternKernelAlloc
    buf677.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
    buf677.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False)]
]
op677.node.kernel = extern_kernels.convolution


op678: ExternKernelSchedulerNode(ExternKernelAlloc)
op678.writes = [StarDep(name='buf678', mode=None)]
op678.unmet_dependencies = [StarDep(name='buf676', mode=None)]
op678.met_dependencies = [StarDep(name='primals_448', mode=None)]
op678.outputs = [
    buf678: ExternKernelAlloc
    buf678.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf678.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op678.node.kernel = extern_kernels.convolution


op679: ExternKernelSchedulerNode(ExternKernelAlloc)
op679.writes = [StarDep(name='buf679', mode=None)]
op679.unmet_dependencies = [StarDep(name='buf678', mode=None)]
op679.met_dependencies = [StarDep(name='primals_449', mode=None)]
op679.outputs = [
    buf679: ExternKernelAlloc
    buf679.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
    buf679.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False)]
]
op679.node.kernel = extern_kernels.convolution


op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 163840})]
op680.unmet_dependencies = [MemoryDep('buf677', c0, {c0: 163840}), MemoryDep('buf679', c0, {c0: 163840})]
op680.met_dependencies = [MemoryDep('primals_447', c1, {c0: 4, c1: 640})]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
    buf680.users = [
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op685'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op680.group.device = cuda:0
op680.group.iteration = (163840, 1)
op680.sizes = ([4, 640, 64], [])
buf677_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
primals_447_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf679_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
class op680_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 64}
    index0 = 40960*p0 + 64*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf677', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_447', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf679', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf680', get_index_3, add_1, None)
        return store


op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', c0, {c0: 128})]
op681.unmet_dependencies = [MemoryDep('buf680', c0, {c0: 163840})]
op681.met_dependencies = []
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf681.users = [
        NodeUser(node=SchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op681.group.device = cuda:0
op681.group.iteration = (128, 1280)
op681.sizes = ([128], [1280])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
buf681_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op681_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf681', get_index_1, getitem)
        return store_reduction


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 128})]
op682.unmet_dependencies = [MemoryDep('buf680', c0, {c0: 163840})]
op682.met_dependencies = []
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf682.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=True, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (128, 1280)
op682.sizes = ([128], [1280])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
buf682_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op682_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf682', get_index_1, getitem_1)
        return store_reduction


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 128})]
op684.unmet_dependencies = [MemoryDep('buf682', c0, {c0: 128})]
op684.met_dependencies = []
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf684.users = [
        NodeUser(node=SchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op684.group.device = cuda:0
op684.group.iteration = (128, 1)
op684.sizes = ([128], [])
buf682_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf684_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op684_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf682', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf684', get_index_1, rsqrt, None)
        return store


op685: SchedulerNode(ComputedBuffer)
op685.writes = [MemoryDep('buf685', c0, {c0: 163840})]
op685.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 163840}),
        MemoryDep('buf681', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf684', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op685.met_dependencies = 
    [   MemoryDep('primals_450', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_451', c1, {c0: 4, c1: 640})]
op685.outputs = [
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
    buf685.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False)]
]
op685.group.device = cuda:0
op685.group.iteration = (163840, 1)
op685.sizes = ([4, 640, 64], [])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
buf681_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf684_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_450_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_451_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf685_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
class op685_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 64}
    index0 = 40960*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf681', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf684', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_450', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_451', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf685', get_index_5, add, None)
        return store


op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 163840})]
op686.unmet_dependencies = [MemoryDep('buf685', c0, {c0: 163840})]
op686.met_dependencies = []
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
    buf686.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (163840, 1)
op686.sizes = ([163840], [])
buf685_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
buf686_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
class op686_loop_body:
    var_ranges = {p0: 163840}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf685', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf685', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf686', get_index_2, mul, None)
        return store


op687: ExternKernelSchedulerNode(ExternKernelAlloc)
op687.writes = [StarDep(name='buf687', mode=None)]
op687.unmet_dependencies = [StarDep(name='buf686', mode=None)]
op687.met_dependencies = [StarDep(name='primals_452', mode=None)]
op687.outputs = [
    buf687: ExternKernelAlloc
    buf687.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf687.users = [NodeUser(node=SchedulerNode(name='op691'), can_inplace=True, is_weak=False)]
]
op687.node.kernel = extern_kernels.convolution


op688: ExternKernelSchedulerNode(ExternKernelAlloc)
op688.writes = [StarDep(name='buf688', mode=None)]
op688.unmet_dependencies = [StarDep(name='buf686', mode=None)]
op688.met_dependencies = [StarDep(name='primals_454', mode=None)]
op688.outputs = [
    buf688: ExternKernelAlloc
    buf688.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf688.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op688.node.kernel = extern_kernels.convolution


op689: ExternKernelSchedulerNode(ExternKernelAlloc)
op689.writes = [StarDep(name='buf689', mode=None)]
op689.unmet_dependencies = [StarDep(name='buf688', mode=None)]
op689.met_dependencies = [StarDep(name='primals_455', mode=None)]
op689.outputs = [
    buf689: ExternKernelAlloc
    buf689.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf689.users = [NodeUser(node=SchedulerNode(name='op691'), can_inplace=True, is_weak=False)]
]
op689.node.kernel = extern_kernels.convolution


op690: ExternKernelSchedulerNode(ExternKernelOut)
op690.writes = [StarDep(name='buf690', mode=None)]
op690.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op690.met_dependencies = [StarDep(name='primals_456', mode=None)]
op690.outputs = [
    buf690: ExternKernelOut
    buf690.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf690.users = [NodeUser(node=SchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op690.node.kernel = extern_kernels.mm


op691: SchedulerNode(ComputedBuffer)
op691.writes = [MemoryDep('buf691', c0, {c0: 327680})]
op691.unmet_dependencies = 
    [   MemoryDep('buf687', c0, {c0: 327680}),
        MemoryDep('buf689', c0, {c0: 327680}),
        MemoryDep('buf690', c0, {c0: 5120})]
op691.met_dependencies = 
    [   MemoryDep('primals_453', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_457', c1, {c0: 4, c1: 1280})]
op691.outputs = [
    buf691: ComputedBuffer
    buf691.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf691.users = [
        NodeUser(node=SchedulerNode(name='op692'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op691.group.device = cuda:0
op691.group.iteration = (327680, 1)
op691.sizes = ([4, 1280, 64], [])
buf687_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_453_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf689_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf690_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_457_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op691_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf687', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_453', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf689', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf690', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_457', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf691', get_index_5, add_3, None)
        return store


op692: SchedulerNode(ComputedBuffer)
op692.writes = [MemoryDep('buf692', c0, {c0: 128})]
op692.unmet_dependencies = [MemoryDep('buf691', c0, {c0: 327680})]
op692.met_dependencies = []
op692.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf692.users = [
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op692.group.device = cuda:0
op692.group.iteration = (128, 2560)
op692.sizes = ([128], [2560])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf692_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op692_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf692', get_index_1, getitem)
        return store_reduction


op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 128})]
op693.unmet_dependencies = [MemoryDep('buf691', c0, {c0: 327680})]
op693.met_dependencies = []
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf693.users = [NodeUser(node=SchedulerNode(name='op695'), can_inplace=True, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (128, 2560)
op693.sizes = ([128], [2560])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf693_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op693_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf693', get_index_1, getitem_1)
        return store_reduction


op695: SchedulerNode(ComputedBuffer)
op695.writes = [MemoryDep('buf695', c0, {c0: 128})]
op695.unmet_dependencies = [MemoryDep('buf693', c0, {c0: 128})]
op695.met_dependencies = []
op695.outputs = [
    buf695: ComputedBuffer
    buf695.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf695.users = [
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op695.group.device = cuda:0
op695.group.iteration = (128, 1)
op695.sizes = ([128], [])
buf693_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf695_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op695_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf693', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf695', get_index_1, rsqrt, None)
        return store


op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 327680})]
op696.unmet_dependencies = 
    [   MemoryDep('buf691', c0, {c0: 327680}),
        MemoryDep('buf692', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf695', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op696.met_dependencies = 
    [   MemoryDep('primals_458', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_459', c1, {c0: 4, c1: 1280})]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf696.users = [NodeUser(node=SchedulerNode(name='op697'), can_inplace=True, is_weak=False)]
]
op696.group.device = cuda:0
op696.group.iteration = (327680, 1)
op696.sizes = ([4, 1280, 64], [])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf692_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf695_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_458_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_459_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf696_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op696_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf692', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf695', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_458', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_459', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf696', get_index_5, add, None)
        return store


op697: SchedulerNode(ComputedBuffer)
op697.writes = [MemoryDep('buf697', c0, {c0: 327680})]
op697.unmet_dependencies = [MemoryDep('buf696', c0, {c0: 327680})]
op697.met_dependencies = []
op697.outputs = [
    buf697: ComputedBuffer
    buf697.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf697.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op697.group.device = cuda:0
op697.group.iteration = (327680, 1)
op697.sizes = ([327680], [])
buf696_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf697_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op697_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf696', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf697', get_index_2, mul, None)
        return store


op698: ExternKernelSchedulerNode(ExternKernelAlloc)
op698.writes = [StarDep(name='buf698', mode=None)]
op698.unmet_dependencies = [StarDep(name='buf697', mode=None)]
op698.met_dependencies = [StarDep(name='primals_460', mode=None)]
op698.outputs = [
    buf698: ExternKernelAlloc
    buf698.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf698.users = [NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False)]
]
op698.node.kernel = extern_kernels.convolution


op699: ExternKernelSchedulerNode(ExternKernelAlloc)
op699.writes = [StarDep(name='buf699', mode=None)]
op699.unmet_dependencies = [StarDep(name='buf697', mode=None)]
op699.met_dependencies = [StarDep(name='primals_462', mode=None)]
op699.outputs = [
    buf699: ExternKernelAlloc
    buf699.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf699.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op699.node.kernel = extern_kernels.convolution


op700: ExternKernelSchedulerNode(ExternKernelAlloc)
op700.writes = [StarDep(name='buf700', mode=None)]
op700.unmet_dependencies = [StarDep(name='buf699', mode=None)]
op700.met_dependencies = [StarDep(name='primals_463', mode=None)]
op700.outputs = [
    buf700: ExternKernelAlloc
    buf700.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf700.users = [NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False)]
]
op700.node.kernel = extern_kernels.convolution


op701: ExternKernelSchedulerNode(ExternKernelAlloc)
op701.writes = [StarDep(name='buf701', mode=None)]
op701.unmet_dependencies = [StarDep(name='buf680', mode=None)]
op701.met_dependencies = [StarDep(name='primals_464', mode=None)]
op701.outputs = [
    buf701: ExternKernelAlloc
    buf701.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf701.users = [NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False)]
]
op701.node.kernel = extern_kernels.convolution


op702: ExternKernelSchedulerNode(ExternKernelAlloc)
op702.writes = [StarDep(name='buf702', mode=None)]
op702.unmet_dependencies = [StarDep(name='buf680', mode=None)]
op702.met_dependencies = [StarDep(name='primals_466', mode=None)]
op702.outputs = [
    buf702: ExternKernelAlloc
    buf702.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf702.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op702.node.kernel = extern_kernels.convolution


op703: ExternKernelSchedulerNode(ExternKernelAlloc)
op703.writes = [StarDep(name='buf703', mode=None)]
op703.unmet_dependencies = [StarDep(name='buf702', mode=None)]
op703.met_dependencies = [StarDep(name='primals_467', mode=None)]
op703.outputs = [
    buf703: ExternKernelAlloc
    buf703.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf703.users = [NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False)]
]
op703.node.kernel = extern_kernels.convolution


op704: SchedulerNode(ComputedBuffer)
op704.writes = [MemoryDep('buf704', c0, {c0: 327680})]
op704.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 327680}),
        MemoryDep('buf700', c0, {c0: 327680}),
        MemoryDep('buf701', c0, {c0: 327680}),
        MemoryDep('buf703', c0, {c0: 327680})]
op704.met_dependencies = 
    [   MemoryDep('primals_461', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_465', c1, {c0: 4, c1: 1280})]
op704.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf704.users = [
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op704.group.device = cuda:0
op704.group.iteration = (327680, 1)
op704.sizes = ([4, 1280, 64], [])
buf701_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_465_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf703_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_461_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf700_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf704_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op704_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_465', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf703', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf698', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_461', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf700', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf704', get_index_6, mul_2, None)
        return store


op705: SchedulerNode(ComputedBuffer)
op705.writes = [MemoryDep('buf705', c0, {c0: 128})]
op705.unmet_dependencies = [MemoryDep('buf704', c0, {c0: 327680})]
op705.met_dependencies = []
op705.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf705.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op705.group.device = cuda:0
op705.group.iteration = (128, 2560)
op705.sizes = ([128], [2560])
buf704_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf705_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op705_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf704', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf705', get_index_1, getitem)
        return store_reduction


op706: SchedulerNode(ComputedBuffer)
op706.writes = [MemoryDep('buf706', c0, {c0: 128})]
op706.unmet_dependencies = [MemoryDep('buf704', c0, {c0: 327680})]
op706.met_dependencies = []
op706.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf706.users = [
        NodeUser(node=SchedulerNode(name='op708'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
    ]
]
op706.group.device = cuda:0
op706.group.iteration = (128, 2560)
op706.sizes = ([128], [2560])
buf704_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf706_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op706_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf704', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf706', get_index_1, getitem_1)
        return store_reduction


op708: SchedulerNode(ComputedBuffer)
op708.writes = [MemoryDep('buf708', c0, {c0: 128})]
op708.unmet_dependencies = [MemoryDep('buf706', c0, {c0: 128})]
op708.met_dependencies = []
op708.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf708.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op708.group.device = cuda:0
op708.group.iteration = (128, 1)
op708.sizes = ([128], [])
buf706_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf708_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op708_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf708', get_index_1, rsqrt, None)
        return store


op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 327680})]
op709.unmet_dependencies = 
    [   MemoryDep('buf704', c0, {c0: 327680}),
        MemoryDep('buf705', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf706', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op709.met_dependencies = 
    [   MemoryDep('primals_468', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_469', c1, {c0: 4, c1: 1280})]
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf709.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
]
op709.group.device = cuda:0
op709.group.iteration = (327680, 1)
op709.sizes = ([4, 1280, 64], [])
buf704_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf705_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf706_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_468_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_469_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf709_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op709_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf704', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf705', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf706', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_468', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_469', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf709', get_index_5, add_1, None)
        return store


op710: ExternKernelSchedulerNode(ExternKernelOut)
op710.writes = [StarDep(name='buf710', mode=None)]
op710.unmet_dependencies = [StarDep(name='buf709', mode=None)]
op710.met_dependencies = [StarDep(name='primals_470', mode=None)]
op710.outputs = [
    buf710: ExternKernelOut
    buf710.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf710.users = [
        NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=True, is_weak=False),
    ]
]
op710.node.kernel = extern_kernels.bmm


op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', c0, {c0: 327680})]
op711.unmet_dependencies = [MemoryDep('buf709', 81920*c0 + c1 + 64*c2, {c0: 4, c1: 64, c2: 1280})]
op711.met_dependencies = []
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf711.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op711.group.device = cuda:0
op711.group.iteration = (327680, 1)
op711.sizes = ([4, 64, 1280], [])
buf709_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf711_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op711_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 1280}
    index0 = 81920*p0 + p1 + 64*p2
    index1 = 81920*p0 + 1280*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf709', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf711', get_index_1, load, None)
        return store


op712: ExternKernelSchedulerNode(ExternKernelOut)
op712.writes = [StarDep(name='buf712', mode=None)]
op712.unmet_dependencies = [StarDep(name='buf711', mode=None)]
op712.met_dependencies = [StarDep(name='primals_472', mode=None)]
op712.outputs = [
    buf712: ExternKernelOut
    buf712.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf712.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op712.node.kernel = extern_kernels.mm


op713: ExternKernelSchedulerNode(ExternKernelOut)
op713.writes = [StarDep(name='buf713', mode=None)]
op713.unmet_dependencies = [StarDep(name='buf712', mode=None)]
op713.met_dependencies = [StarDep(name='primals_473', mode=None)]
op713.outputs = [
    buf713: ExternKernelOut
    buf713.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf713.users = [
        NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=True, is_weak=False),
    ]
]
op713.node.kernel = extern_kernels.mm


op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', c0, {c0: 256})]
op714.unmet_dependencies = [MemoryDep('buf710', c0, {c0: 327680}), MemoryDep('buf713', c0, {c0: 327680})]
op714.met_dependencies = [MemoryDep('primals_471', c1, {c0: 256, c1: 1280})]
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf714.users = [NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False)]
]
op714.group.device = cuda:0
op714.group.iteration = (256, 1280)
op714.sizes = ([256], [1280])
buf710_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_471_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf713_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf714_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op714_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_471', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf713', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf714', get_index_3, getitem)
        return store_reduction


op715: SchedulerNode(ComputedBuffer)
op715.writes = [MemoryDep('buf715', c0, {c0: 256})]
op715.unmet_dependencies = [MemoryDep('buf710', c0, {c0: 327680}), MemoryDep('buf713', c0, {c0: 327680})]
op715.met_dependencies = [MemoryDep('primals_471', c1, {c0: 256, c1: 1280})]
op715.outputs = [
    buf715: ComputedBuffer
    buf715.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf715.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2098'), can_inplace=True, is_weak=False),
    ]
]
op715.group.device = cuda:0
op715.group.iteration = (256, 1280)
op715.sizes = ([256], [1280])
buf710_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_471_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf713_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf715_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op715_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_471', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf713', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf715', get_index_3, getitem_1)
        return store_reduction


op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 327680})]
op717.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 327680}),
        MemoryDep('buf713', c0, {c0: 327680}),
        MemoryDep('buf714', c0, {c0: 256}),
        MemoryDep('buf715', c0, {c0: 256})]
op717.met_dependencies = [MemoryDep('primals_471', c1, {c0: 256, c1: 1280})]
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf717.users = [
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op717.group.device = cuda:0
op717.group.iteration = (327680, 1)
op717.sizes = ([256, 1280], [])
buf710_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_471_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf713_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf714_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf715_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf717_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op717_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_471', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf713', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf714', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf715', get_index_4)
        constant_1 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf717', get_index_5, mul_1, None)
        return store


op718: SchedulerNode(ComputedBuffer)
op718.writes = [MemoryDep('buf718', c0, {c0: 327680})]
op718.unmet_dependencies = [MemoryDep('buf717', c0, {c0: 327680})]
op718.met_dependencies = 
    [   MemoryDep('primals_474', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_475', c1, {c0: 256, c1: 1280})]
op718.outputs = [
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf718.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op718.group.device = cuda:0
op718.group.iteration = (327680, 1)
op718.sizes = ([256, 1280], [])
buf717_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_474_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_475_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf718_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op718_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf717', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_474', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_475', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf718', get_index_3, add, None)
        return store


op719: ExternKernelSchedulerNode(ExternKernelOut)
op719.writes = [StarDep(name='buf719', mode=None)]
op719.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op719.met_dependencies = [StarDep(name='primals_476', mode=None)]
op719.outputs = [
    buf719: ExternKernelOut
    buf719.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf719.users = [NodeUser(node=SchedulerNode(name='op728'), can_inplace=True, is_weak=False)]
]
op719.node.kernel = extern_kernels.mm


op720: ExternKernelSchedulerNode(ExternKernelOut)
op720.writes = [StarDep(name='buf720', mode=None)]
op720.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op720.met_dependencies = [StarDep(name='primals_477', mode=None)]
op720.outputs = [
    buf720: ExternKernelOut
    buf720.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf720.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op720.node.kernel = extern_kernels.mm


op721: ExternKernelSchedulerNode(ExternKernelOut)
op721.writes = [StarDep(name='buf721', mode=None)]
op721.unmet_dependencies = [StarDep(name='buf720', mode=None)]
op721.met_dependencies = [StarDep(name='primals_478', mode=None)]
op721.outputs = [
    buf721: ExternKernelOut
    buf721.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf721.users = [NodeUser(node=SchedulerNode(name='op728'), can_inplace=True, is_weak=False)]
]
op721.node.kernel = extern_kernels.mm


op722: ExternKernelSchedulerNode(ExternKernelOut)
op722.writes = [StarDep(name='buf722', mode=None)]
op722.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op722.met_dependencies = [StarDep(name='primals_479', mode=None)]
op722.outputs = [
    buf722: ExternKernelOut
    buf722.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf722.users = [NodeUser(node=SchedulerNode(name='op729'), can_inplace=True, is_weak=False)]
]
op722.node.kernel = extern_kernels.mm


op723: ExternKernelSchedulerNode(ExternKernelOut)
op723.writes = [StarDep(name='buf723', mode=None)]
op723.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op723.met_dependencies = [StarDep(name='primals_480', mode=None)]
op723.outputs = [
    buf723: ExternKernelOut
    buf723.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf723.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op723.node.kernel = extern_kernels.mm


op724: ExternKernelSchedulerNode(ExternKernelOut)
op724.writes = [StarDep(name='buf724', mode=None)]
op724.unmet_dependencies = [StarDep(name='buf723', mode=None)]
op724.met_dependencies = [StarDep(name='primals_481', mode=None)]
op724.outputs = [
    buf724: ExternKernelOut
    buf724.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf724.users = [NodeUser(node=SchedulerNode(name='op729'), can_inplace=True, is_weak=False)]
]
op724.node.kernel = extern_kernels.mm


op725: ExternKernelSchedulerNode(ExternKernelOut)
op725.writes = [StarDep(name='buf725', mode=None)]
op725.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op725.met_dependencies = [StarDep(name='primals_482', mode=None)]
op725.outputs = [
    buf725: ExternKernelOut
    buf725.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf725.users = [NodeUser(node=SchedulerNode(name='op730'), can_inplace=True, is_weak=False)]
]
op725.node.kernel = extern_kernels.mm


op726: ExternKernelSchedulerNode(ExternKernelOut)
op726.writes = [StarDep(name='buf726', mode=None)]
op726.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op726.met_dependencies = [StarDep(name='primals_483', mode=None)]
op726.outputs = [
    buf726: ExternKernelOut
    buf726.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf726.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op726.node.kernel = extern_kernels.mm


op727: ExternKernelSchedulerNode(ExternKernelOut)
op727.writes = [StarDep(name='buf727', mode=None)]
op727.unmet_dependencies = [StarDep(name='buf726', mode=None)]
op727.met_dependencies = [StarDep(name='primals_484', mode=None)]
op727.outputs = [
    buf727: ExternKernelOut
    buf727.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf727.users = [NodeUser(node=SchedulerNode(name='op730'), can_inplace=True, is_weak=False)]
]
op727.node.kernel = extern_kernels.mm


op728: SchedulerNode(ComputedBuffer)
op728.writes = [MemoryDep('buf728', c0, {c0: 327680})]
op728.unmet_dependencies = [MemoryDep('buf719', c0, {c0: 327680}), MemoryDep('buf721', c0, {c0: 327680})]
op728.met_dependencies = []
op728.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf728.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op728.group.device = cuda:0
op728.group.iteration = (327680, 1)
op728.sizes = ([327680], [])
buf719_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf721_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf728_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op728_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf719', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf721', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf728', get_index_2, add, None)
        return store


op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', c0, {c0: 327680})]
op729.unmet_dependencies = [MemoryDep('buf722', c0, {c0: 327680}), MemoryDep('buf724', c0, {c0: 327680})]
op729.met_dependencies = []
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf729.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op729.group.device = cuda:0
op729.group.iteration = (327680, 1)
op729.sizes = ([327680], [])
buf722_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf724_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf729_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op729_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf722', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf724', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf729', get_index_2, add, None)
        return store


op730: SchedulerNode(ComputedBuffer)
op730.writes = [MemoryDep('buf730', c0, {c0: 327680})]
op730.unmet_dependencies = [MemoryDep('buf725', c0, {c0: 327680}), MemoryDep('buf727', c0, {c0: 327680})]
op730.met_dependencies = []
op730.outputs = [
    buf730: ComputedBuffer
    buf730.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf730.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op730.group.device = cuda:0
op730.group.iteration = (327680, 1)
op730.sizes = ([327680], [])
buf725_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf727_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf730_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op730_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf727', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf730', get_index_2, add, None)
        return store


op731: ExternKernelSchedulerNode(FallbackKernel)
op731.writes = [StarDep(name='buf731', mode=None)]
op731.unmet_dependencies = 
    [   StarDep(name='buf728', mode=None),
        StarDep(name='buf729', mode=None),
        StarDep(name='buf730', mode=None)]
op731.met_dependencies = []
op731.outputs = [
    buf731: FallbackKernel
    buf731.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf731.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op735'), can_inplace=False, is_weak=False),
    ]
]
op731.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op732: ExternKernelSchedulerNode(MultiOutput)
op732.writes = [StarDep(name='buf732', mode=None)]
op732.unmet_dependencies = [StarDep(name='buf731', mode=None)]
op732.met_dependencies = []
op732.outputs = [
    buf732: MultiOutput
    buf732.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf732.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op732.node.kernel = None


op733: ExternKernelSchedulerNode(MultiOutput)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf731', mode=None)]
op733.met_dependencies = []
op733.outputs = [
    buf733: MultiOutput
    buf733.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf733.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op733.node.kernel = None


op734: ExternKernelSchedulerNode(MultiOutput)
op734.writes = [StarDep(name='buf734', mode=None)]
op734.unmet_dependencies = [StarDep(name='buf731', mode=None)]
op734.met_dependencies = []
op734.outputs = [
    buf734: MultiOutput
    buf734.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf734.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op734.node.kernel = None


op735: ExternKernelSchedulerNode(MultiOutput)
op735.writes = [StarDep(name='buf735', mode=None)]
op735.unmet_dependencies = [StarDep(name='buf731', mode=None)]
op735.met_dependencies = []
op735.outputs = [
    buf735: MultiOutput
    buf735.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf735.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op735.node.kernel = None


op736: ExternKernelSchedulerNode(ExternKernelOut)
op736.writes = [StarDep(name='buf736', mode=None)]
op736.unmet_dependencies = [StarDep(name='buf732', mode=None)]
op736.met_dependencies = [StarDep(name='primals_485', mode=None)]
op736.outputs = [
    buf736: ExternKernelOut
    buf736.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf736.users = [NodeUser(node=SchedulerNode(name='op739'), can_inplace=True, is_weak=False)]
]
op736.node.kernel = extern_kernels.mm


op737: ExternKernelSchedulerNode(ExternKernelOut)
op737.writes = [StarDep(name='buf737', mode=None)]
op737.unmet_dependencies = [StarDep(name='buf732', mode=None)]
op737.met_dependencies = [StarDep(name='primals_487', mode=None)]
op737.outputs = [
    buf737: ExternKernelOut
    buf737.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf737.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op737.node.kernel = extern_kernels.mm


op738: ExternKernelSchedulerNode(ExternKernelOut)
op738.writes = [StarDep(name='buf738', mode=None)]
op738.unmet_dependencies = [StarDep(name='buf737', mode=None)]
op738.met_dependencies = [StarDep(name='primals_488', mode=None)]
op738.outputs = [
    buf738: ExternKernelOut
    buf738.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf738.users = [NodeUser(node=SchedulerNode(name='op739'), can_inplace=True, is_weak=False)]
]
op738.node.kernel = extern_kernels.mm


op739: SchedulerNode(ComputedBuffer)
op739.writes = [MemoryDep('buf739', c0, {c0: 327680})]
op739.unmet_dependencies = 
    [   MemoryDep('buf710', c0, {c0: 327680}),
        MemoryDep('buf713', c0, {c0: 327680}),
        MemoryDep('buf736', c0, {c0: 327680}),
        MemoryDep('buf738', c0, {c0: 327680})]
op739.met_dependencies = 
    [   MemoryDep('primals_471', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_486', c1, {c0: 256, c1: 1280})]
op739.outputs = [
    buf739: ComputedBuffer
    buf739.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf739.users = [
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=True, is_weak=False),
    ]
]
op739.group.device = cuda:0
op739.group.iteration = (327680, 1)
op739.sizes = ([256, 1280], [])
buf736_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_486_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf738_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf710_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_471_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf713_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op739_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf736', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_486', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf738', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf710', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_471', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf713', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf739', get_index_6, add_4, None)
        return store


op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', c0, {c0: 256})]
op740.unmet_dependencies = [MemoryDep('buf739', c0, {c0: 327680})]
op740.met_dependencies = []
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf740.users = [NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op740.group.device = cuda:0
op740.group.iteration = (256, 1280)
op740.sizes = ([256], [1280])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf740_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op740_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf740', get_index_1, getitem)
        return store_reduction


op741: SchedulerNode(ComputedBuffer)
op741.writes = [MemoryDep('buf741', c0, {c0: 256})]
op741.unmet_dependencies = [MemoryDep('buf739', c0, {c0: 327680})]
op741.met_dependencies = []
op741.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf741.users = [
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2097'), can_inplace=True, is_weak=False),
    ]
]
op741.group.device = cuda:0
op741.group.iteration = (256, 1280)
op741.sizes = ([256], [1280])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf741_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op741_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf741', get_index_1, getitem_1)
        return store_reduction


op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 327680})]
op743.unmet_dependencies = 
    [   MemoryDep('buf739', c0, {c0: 327680}),
        MemoryDep('buf740', c0, {c0: 256}),
        MemoryDep('buf741', c0, {c0: 256})]
op743.met_dependencies = []
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf743.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op743.group.device = cuda:0
op743.group.iteration = (327680, 1)
op743.sizes = ([256, 1280], [])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf740_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf741_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf743_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op743_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf740', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf741', get_index_2)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf743', get_index_3, mul, None)
        return store


op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 327680})]
op744.unmet_dependencies = [MemoryDep('buf743', c0, {c0: 327680})]
op744.met_dependencies = 
    [   MemoryDep('primals_489', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_490', c1, {c0: 256, c1: 1280})]
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf744.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op746'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op744.group.device = cuda:0
op744.group.iteration = (327680, 1)
op744.sizes = ([256, 1280], [])
buf743_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_489_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_490_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf744_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op744_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf743', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_489', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_490', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf744', get_index_3, add, None)
        return store


op745: ExternKernelSchedulerNode(ExternKernelOut)
op745.writes = [StarDep(name='buf745', mode=None)]
op745.unmet_dependencies = [StarDep(name='buf744', mode=None)]
op745.met_dependencies = [StarDep(name='primals_491', mode=None)]
op745.outputs = [
    buf745: ExternKernelOut
    buf745.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf745.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False)]
]
op745.node.kernel = extern_kernels.mm


op746: ExternKernelSchedulerNode(ExternKernelOut)
op746.writes = [StarDep(name='buf746', mode=None)]
op746.unmet_dependencies = [StarDep(name='buf744', mode=None)]
op746.met_dependencies = [StarDep(name='primals_492', mode=None)]
op746.outputs = [
    buf746: ExternKernelOut
    buf746.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf746.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op746.node.kernel = extern_kernels.mm


op747: ExternKernelSchedulerNode(ExternKernelOut)
op747.writes = [StarDep(name='buf747', mode=None)]
op747.unmet_dependencies = [StarDep(name='buf746', mode=None)]
op747.met_dependencies = [StarDep(name='primals_493', mode=None)]
op747.outputs = [
    buf747: ExternKernelOut
    buf747.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf747.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False)]
]
op747.node.kernel = extern_kernels.mm


op748: ExternKernelSchedulerNode(ExternKernelOut)
op748.writes = [StarDep(name='buf748', mode=None)]
op748.unmet_dependencies = []
op748.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_494', mode=None)]
op748.outputs = [
    buf748: ExternKernelOut
    buf748.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf748.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False)]
]
op748.node.kernel = extern_kernels.mm


op749: ExternKernelSchedulerNode(ExternKernelOut)
op749.writes = [StarDep(name='buf749', mode=None)]
op749.unmet_dependencies = []
op749.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_495', mode=None)]
op749.outputs = [
    buf749: ExternKernelOut
    buf749.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf749.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op749.node.kernel = extern_kernels.mm


op750: ExternKernelSchedulerNode(ExternKernelOut)
op750.writes = [StarDep(name='buf750', mode=None)]
op750.unmet_dependencies = [StarDep(name='buf749', mode=None)]
op750.met_dependencies = [StarDep(name='primals_496', mode=None)]
op750.outputs = [
    buf750: ExternKernelOut
    buf750.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf750.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False)]
]
op750.node.kernel = extern_kernels.mm


op751: ExternKernelSchedulerNode(ExternKernelOut)
op751.writes = [StarDep(name='buf751', mode=None)]
op751.unmet_dependencies = []
op751.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_497', mode=None)]
op751.outputs = [
    buf751: ExternKernelOut
    buf751.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf751.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=True, is_weak=False)]
]
op751.node.kernel = extern_kernels.mm


op752: ExternKernelSchedulerNode(ExternKernelOut)
op752.writes = [StarDep(name='buf752', mode=None)]
op752.unmet_dependencies = []
op752.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_498', mode=None)]
op752.outputs = [
    buf752: ExternKernelOut
    buf752.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf752.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op752.node.kernel = extern_kernels.mm


op753: ExternKernelSchedulerNode(ExternKernelOut)
op753.writes = [StarDep(name='buf753', mode=None)]
op753.unmet_dependencies = [StarDep(name='buf752', mode=None)]
op753.met_dependencies = [StarDep(name='primals_499', mode=None)]
op753.outputs = [
    buf753: ExternKernelOut
    buf753.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf753.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=True, is_weak=False)]
]
op753.node.kernel = extern_kernels.mm


op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 327680})]
op754.unmet_dependencies = [MemoryDep('buf745', c0, {c0: 327680}), MemoryDep('buf747', c0, {c0: 327680})]
op754.met_dependencies = []
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf754.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op754.group.device = cuda:0
op754.group.iteration = (327680, 1)
op754.sizes = ([327680], [])
buf745_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf747_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf754_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op754_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf745', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf747', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf754', get_index_2, add, None)
        return store


op755: SchedulerNode(ComputedBuffer)
op755.writes = [MemoryDep('buf755', c0, {c0: 394240})]
op755.unmet_dependencies = [MemoryDep('buf748', c0, {c0: 394240}), MemoryDep('buf750', c0, {c0: 394240})]
op755.met_dependencies = []
op755.outputs = [
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf755.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op755.group.device = cuda:0
op755.group.iteration = (394240, 1)
op755.sizes = ([394240], [])
buf748_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf750_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf755_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op755_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf748', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf750', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf755', get_index_2, add, None)
        return store


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', c0, {c0: 394240})]
op756.unmet_dependencies = [MemoryDep('buf751', c0, {c0: 394240}), MemoryDep('buf753', c0, {c0: 394240})]
op756.met_dependencies = []
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf756.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op756.group.device = cuda:0
op756.group.iteration = (394240, 1)
op756.sizes = ([394240], [])
buf751_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf753_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf756_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op756_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf751', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf753', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf756', get_index_2, add, None)
        return store


op757: ExternKernelSchedulerNode(FallbackKernel)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = 
    [   StarDep(name='buf754', mode=None),
        StarDep(name='buf755', mode=None),
        StarDep(name='buf756', mode=None)]
op757.met_dependencies = []
op757.outputs = [
    buf757: FallbackKernel
    buf757.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf757.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op761'), can_inplace=False, is_weak=False),
    ]
]
op757.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op758: ExternKernelSchedulerNode(MultiOutput)
op758.writes = [StarDep(name='buf758', mode=None)]
op758.unmet_dependencies = [StarDep(name='buf757', mode=None)]
op758.met_dependencies = []
op758.outputs = [
    buf758: MultiOutput
    buf758.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf758.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op758.node.kernel = None


op759: ExternKernelSchedulerNode(MultiOutput)
op759.writes = [StarDep(name='buf759', mode=None)]
op759.unmet_dependencies = [StarDep(name='buf757', mode=None)]
op759.met_dependencies = []
op759.outputs = [
    buf759: MultiOutput
    buf759.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf759.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op759.node.kernel = None


op760: ExternKernelSchedulerNode(MultiOutput)
op760.writes = [StarDep(name='buf760', mode=None)]
op760.unmet_dependencies = [StarDep(name='buf757', mode=None)]
op760.met_dependencies = []
op760.outputs = [
    buf760: MultiOutput
    buf760.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf760.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op760.node.kernel = None


op761: ExternKernelSchedulerNode(MultiOutput)
op761.writes = [StarDep(name='buf761', mode=None)]
op761.unmet_dependencies = [StarDep(name='buf757', mode=None)]
op761.met_dependencies = []
op761.outputs = [
    buf761: MultiOutput
    buf761.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf761.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op761.node.kernel = None


op762: ExternKernelSchedulerNode(ExternKernelOut)
op762.writes = [StarDep(name='buf762', mode=None)]
op762.unmet_dependencies = [StarDep(name='buf758', mode=None)]
op762.met_dependencies = [StarDep(name='primals_500', mode=None)]
op762.outputs = [
    buf762: ExternKernelOut
    buf762.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf762.users = [
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=True, is_weak=False),
    ]
]
op762.node.kernel = extern_kernels.mm


op763: ExternKernelSchedulerNode(ExternKernelOut)
op763.writes = [StarDep(name='buf763', mode=None)]
op763.unmet_dependencies = [StarDep(name='buf758', mode=None)]
op763.met_dependencies = [StarDep(name='primals_502', mode=None)]
op763.outputs = [
    buf763: ExternKernelOut
    buf763.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf763.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op763.node.kernel = extern_kernels.mm


op764: ExternKernelSchedulerNode(ExternKernelOut)
op764.writes = [StarDep(name='buf764', mode=None)]
op764.unmet_dependencies = [StarDep(name='buf763', mode=None)]
op764.met_dependencies = [StarDep(name='primals_503', mode=None)]
op764.outputs = [
    buf764: ExternKernelOut
    buf764.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf764.users = [
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=True, is_weak=False),
    ]
]
op764.node.kernel = extern_kernels.mm


op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', c0, {c0: 256})]
op765.unmet_dependencies = 
    [   MemoryDep('buf739', c0, {c0: 327680}),
        MemoryDep('buf762', c0, {c0: 327680}),
        MemoryDep('buf764', c0, {c0: 327680})]
op765.met_dependencies = [MemoryDep('primals_501', c1, {c0: 256, c1: 1280})]
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf765.users = [NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False)]
]
op765.group.device = cuda:0
op765.group.iteration = (256, 1280)
op765.sizes = ([256], [1280])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_501_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf764_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf765_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op765_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf762', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_501', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf764', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf739', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf765', get_index_4, getitem)
        return store_reduction


op766: SchedulerNode(ComputedBuffer)
op766.writes = [MemoryDep('buf766', c0, {c0: 256})]
op766.unmet_dependencies = 
    [   MemoryDep('buf739', c0, {c0: 327680}),
        MemoryDep('buf762', c0, {c0: 327680}),
        MemoryDep('buf764', c0, {c0: 327680})]
op766.met_dependencies = [MemoryDep('primals_501', c1, {c0: 256, c1: 1280})]
op766.outputs = [
    buf766: ComputedBuffer
    buf766.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf766.users = [
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2096'), can_inplace=True, is_weak=False),
    ]
]
op766.group.device = cuda:0
op766.group.iteration = (256, 1280)
op766.sizes = ([256], [1280])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_501_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf764_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf766_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op766_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf762', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_501', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf764', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf739', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf766', get_index_4, getitem_1)
        return store_reduction


op768: SchedulerNode(ComputedBuffer)
op768.writes = [MemoryDep('buf768', c0, {c0: 327680})]
op768.unmet_dependencies = 
    [   MemoryDep('buf739', c0, {c0: 327680}),
        MemoryDep('buf762', c0, {c0: 327680}),
        MemoryDep('buf764', c0, {c0: 327680}),
        MemoryDep('buf765', c0, {c0: 256}),
        MemoryDep('buf766', c0, {c0: 256})]
op768.met_dependencies = [MemoryDep('primals_501', c1, {c0: 256, c1: 1280})]
op768.outputs = [
    buf768: ComputedBuffer
    buf768.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf768.users = [
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op768.group.device = cuda:0
op768.group.iteration = (327680, 1)
op768.sizes = ([256, 1280], [])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_501_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf764_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf765_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf766_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf768_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op768_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf762', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_501', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf764', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf739', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf765', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf766', get_index_5)
        constant_2 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf768', get_index_6, mul_2, None)
        return store


op769: SchedulerNode(ComputedBuffer)
op769.writes = [MemoryDep('buf769', c0, {c0: 327680})]
op769.unmet_dependencies = [MemoryDep('buf768', c0, {c0: 327680})]
op769.met_dependencies = 
    [   MemoryDep('primals_504', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_505', c1, {c0: 256, c1: 1280})]
op769.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf769.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op769.group.device = cuda:0
op769.group.iteration = (327680, 1)
op769.sizes = ([256, 1280], [])
buf768_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_504_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_505_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf769_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op769_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf768', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_504', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_505', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf769', get_index_3, add, None)
        return store


op770: ExternKernelSchedulerNode(ExternKernelOut)
op770.writes = [StarDep(name='buf770', mode=None)]
op770.unmet_dependencies = [StarDep(name='buf769', mode=None)]
op770.met_dependencies = [StarDep(name='primals_506', mode=None)]
op770.outputs = [
    buf770: ExternKernelOut
    buf770.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf770.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=True, is_weak=False)]
]
op770.node.kernel = extern_kernels.mm


op771: ExternKernelSchedulerNode(ExternKernelOut)
op771.writes = [StarDep(name='buf771', mode=None)]
op771.unmet_dependencies = [StarDep(name='buf769', mode=None)]
op771.met_dependencies = [StarDep(name='primals_508', mode=None)]
op771.outputs = [
    buf771: ExternKernelOut
    buf771.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf771.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op771.node.kernel = extern_kernels.mm


op772: ExternKernelSchedulerNode(ExternKernelOut)
op772.writes = [StarDep(name='buf772', mode=None)]
op772.unmet_dependencies = [StarDep(name='buf771', mode=None)]
op772.met_dependencies = [StarDep(name='primals_509', mode=None)]
op772.outputs = [
    buf772: ExternKernelOut
    buf772.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf772.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=True, is_weak=False)]
]
op772.node.kernel = extern_kernels.mm


op773: SchedulerNode(ComputedBuffer)
op773.writes = [MemoryDep('buf773', c0, {c0: 2621440})]
op773.unmet_dependencies = [MemoryDep('buf770', c0, {c0: 2621440}), MemoryDep('buf772', c0, {c0: 2621440})]
op773.met_dependencies = [MemoryDep('primals_507', c1, {c0: 256, c1: 10240})]
op773.outputs = [
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
    buf773.users = [
        NodeUser(node=SchedulerNode(name='op774'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op773.group.device = cuda:0
op773.group.iteration = (2621440, 1)
op773.sizes = ([256, 10240], [])
buf770_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
primals_507_layout = FixedLayout('cuda:0', torch.float32, size=[10240], stride=[1])
buf772_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
buf773_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
class op773_loop_body:
    var_ranges = {p0: 256, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf770', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_507', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf772', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf773', get_index_3, add_1, None)
        return store


op774: SchedulerNode(ComputedBuffer)
op774.writes = [MemoryDep('buf774', c0, {c0: 1310720})]
op774.unmet_dependencies = 
    [   MemoryDep('buf773', 10240*c0 + c1 + 5120, {c0: 256, c1: 5120}),
        MemoryDep('buf773', 10240*c0 + c1, {c0: 256, c1: 5120})]
op774.met_dependencies = []
op774.outputs = [
    buf774: ComputedBuffer
    buf774.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
    buf774.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op774.group.device = cuda:0
op774.group.iteration = (1310720, 1)
op774.sizes = ([256, 5120], [])
buf773_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf773_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf774_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
class op774_loop_body:
    var_ranges = {p0: 256, p1: 5120}
    index0 = 10240*p0 + p1
    index1 = 10240*p0 + p1 + 5120
    index2 = 5120*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf773', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf773', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf773', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf774', get_index_3, mul_3, None)
        return store


op775: ExternKernelSchedulerNode(ExternKernelOut)
op775.writes = [StarDep(name='buf775', mode=None)]
op775.unmet_dependencies = [StarDep(name='buf774', mode=None)]
op775.met_dependencies = [StarDep(name='primals_510', mode=None)]
op775.outputs = [
    buf775: ExternKernelOut
    buf775.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf775.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=True, is_weak=False)]
]
op775.node.kernel = extern_kernels.mm


op776: ExternKernelSchedulerNode(ExternKernelOut)
op776.writes = [StarDep(name='buf776', mode=None)]
op776.unmet_dependencies = [StarDep(name='buf774', mode=None)]
op776.met_dependencies = [StarDep(name='primals_512', mode=None)]
op776.outputs = [
    buf776: ExternKernelOut
    buf776.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf776.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op776.node.kernel = extern_kernels.mm


op777: ExternKernelSchedulerNode(ExternKernelOut)
op777.writes = [StarDep(name='buf777', mode=None)]
op777.unmet_dependencies = [StarDep(name='buf776', mode=None)]
op777.met_dependencies = [StarDep(name='primals_513', mode=None)]
op777.outputs = [
    buf777: ExternKernelOut
    buf777.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf777.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=True, is_weak=False)]
]
op777.node.kernel = extern_kernels.mm


op778: SchedulerNode(ComputedBuffer)
op778.writes = [MemoryDep('buf778', c0, {c0: 327680})]
op778.unmet_dependencies = 
    [   MemoryDep('buf739', c0, {c0: 327680}),
        MemoryDep('buf762', c0, {c0: 327680}),
        MemoryDep('buf764', c0, {c0: 327680}),
        MemoryDep('buf775', c0, {c0: 327680}),
        MemoryDep('buf777', c0, {c0: 327680})]
op778.met_dependencies = 
    [   MemoryDep('primals_501', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_511', c1, {c0: 256, c1: 1280})]
op778.outputs = [
    buf778: ComputedBuffer
    buf778.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf778.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op779'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op778.group.device = cuda:0
op778.group.iteration = (327680, 1)
op778.sizes = ([256, 1280], [])
buf775_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_511_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf777_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_501_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf764_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf739_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf778_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op778_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf775', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_511', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf777', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf762', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_501', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf764', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf739', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf778', get_index_7, add_5, None)
        return store


op779: ExternKernelSchedulerNode(ExternKernelOut)
op779.writes = [StarDep(name='buf779', mode=None)]
op779.unmet_dependencies = [StarDep(name='buf778', mode=None)]
op779.met_dependencies = [StarDep(name='primals_514', mode=None)]
op779.outputs = [
    buf779: ExternKernelOut
    buf779.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf779.users = [NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False)]
]
op779.node.kernel = extern_kernels.mm


op780: ExternKernelSchedulerNode(ExternKernelOut)
op780.writes = [StarDep(name='buf780', mode=None)]
op780.unmet_dependencies = [StarDep(name='buf778', mode=None)]
op780.met_dependencies = [StarDep(name='primals_516', mode=None)]
op780.outputs = [
    buf780: ExternKernelOut
    buf780.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf780.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op780.node.kernel = extern_kernels.mm


op781: ExternKernelSchedulerNode(ExternKernelOut)
op781.writes = [StarDep(name='buf781', mode=None)]
op781.unmet_dependencies = [StarDep(name='buf780', mode=None)]
op781.met_dependencies = [StarDep(name='primals_517', mode=None)]
op781.outputs = [
    buf781: ExternKernelOut
    buf781.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf781.users = [NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False)]
]
op781.node.kernel = extern_kernels.mm


op782: SchedulerNode(ComputedBuffer)
op782.writes = [MemoryDep('buf782', c0, {c0: 327680})]
op782.unmet_dependencies = 
    [   MemoryDep('buf704', c0, {c0: 327680}),
        MemoryDep('buf779', 81920*c0 + c1 + 1280*c2, {c0: 4, c1: 1280, c2: 64}),
        MemoryDep('buf781', 81920*c0 + c1 + 1280*c2, {c0: 4, c1: 1280, c2: 64})]
op782.met_dependencies = [MemoryDep('primals_515', c1, {c0: 4, c1: 1280})]
op782.outputs = [
    buf782: ComputedBuffer
    buf782.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf782.users = [
        NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1226'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op782.group.device = cuda:0
op782.group.iteration = (327680, 1)
op782.sizes = ([4, 1280, 64], [])
buf779_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_515_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf781_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf704_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf782_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op782_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + p1 + 1280*p2
    index1 = p1
    index2 = 81920*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_515', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf781', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf704', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf782', get_index_4, add_2, None)
        return store


op783: SchedulerNode(ComputedBuffer)
op783.writes = [MemoryDep('buf783', c0, {c0: 128})]
op783.unmet_dependencies = [MemoryDep('buf782', c0, {c0: 327680})]
op783.met_dependencies = []
op783.outputs = [
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf783.users = [
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op783.group.device = cuda:0
op783.group.iteration = (128, 2560)
op783.sizes = ([128], [2560])
buf782_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf783_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op783_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf783', get_index_1, getitem)
        return store_reduction


op784: SchedulerNode(ComputedBuffer)
op784.writes = [MemoryDep('buf784', c0, {c0: 128})]
op784.unmet_dependencies = [MemoryDep('buf782', c0, {c0: 327680})]
op784.met_dependencies = []
op784.outputs = [
    buf784: ComputedBuffer
    buf784.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf784.users = [NodeUser(node=SchedulerNode(name='op786'), can_inplace=True, is_weak=False)]
]
op784.group.device = cuda:0
op784.group.iteration = (128, 2560)
op784.sizes = ([128], [2560])
buf782_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf784_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op784_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf784', get_index_1, getitem_1)
        return store_reduction


op786: SchedulerNode(ComputedBuffer)
op786.writes = [MemoryDep('buf786', c0, {c0: 128})]
op786.unmet_dependencies = [MemoryDep('buf784', c0, {c0: 128})]
op786.met_dependencies = []
op786.outputs = [
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf786.users = [
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op786.group.device = cuda:0
op786.group.iteration = (128, 1)
op786.sizes = ([128], [])
buf784_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf786_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op786_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf784', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf786', get_index_1, rsqrt, None)
        return store


op787: SchedulerNode(ComputedBuffer)
op787.writes = [MemoryDep('buf787', c0, {c0: 327680})]
op787.unmet_dependencies = 
    [   MemoryDep('buf782', c0, {c0: 327680}),
        MemoryDep('buf783', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf786', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op787.met_dependencies = 
    [   MemoryDep('primals_518', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_519', c1, {c0: 4, c1: 1280})]
op787.outputs = [
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf787.users = [NodeUser(node=SchedulerNode(name='op788'), can_inplace=True, is_weak=False)]
]
op787.group.device = cuda:0
op787.group.iteration = (327680, 1)
op787.sizes = ([4, 1280, 64], [])
buf782_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf783_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf786_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_518_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_519_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf787_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op787_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf783', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf786', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_518', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_519', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf787', get_index_5, add, None)
        return store


op788: SchedulerNode(ComputedBuffer)
op788.writes = [MemoryDep('buf788', c0, {c0: 327680})]
op788.unmet_dependencies = [MemoryDep('buf787', c0, {c0: 327680})]
op788.met_dependencies = []
op788.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf788.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op788.group.device = cuda:0
op788.group.iteration = (327680, 1)
op788.sizes = ([327680], [])
buf787_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf788_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op788_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf787', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf787', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf788', get_index_2, mul, None)
        return store


op789: ExternKernelSchedulerNode(ExternKernelAlloc)
op789.writes = [StarDep(name='buf789', mode=None)]
op789.unmet_dependencies = [StarDep(name='buf788', mode=None)]
op789.met_dependencies = [StarDep(name='primals_520', mode=None)]
op789.outputs = [
    buf789: ExternKernelAlloc
    buf789.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf789.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
]
op789.node.kernel = extern_kernels.convolution


op790: ExternKernelSchedulerNode(ExternKernelAlloc)
op790.writes = [StarDep(name='buf790', mode=None)]
op790.unmet_dependencies = [StarDep(name='buf788', mode=None)]
op790.met_dependencies = [StarDep(name='primals_522', mode=None)]
op790.outputs = [
    buf790: ExternKernelAlloc
    buf790.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf790.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op791'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op790.node.kernel = extern_kernels.convolution


op791: ExternKernelSchedulerNode(ExternKernelAlloc)
op791.writes = [StarDep(name='buf791', mode=None)]
op791.unmet_dependencies = [StarDep(name='buf790', mode=None)]
op791.met_dependencies = [StarDep(name='primals_523', mode=None)]
op791.outputs = [
    buf791: ExternKernelAlloc
    buf791.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf791.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
]
op791.node.kernel = extern_kernels.convolution


op792: ExternKernelSchedulerNode(ExternKernelOut)
op792.writes = [StarDep(name='buf792', mode=None)]
op792.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op792.met_dependencies = [StarDep(name='primals_524', mode=None)]
op792.outputs = [
    buf792: ExternKernelOut
    buf792.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf792.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=False, is_weak=False)]
]
op792.node.kernel = extern_kernels.mm


op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 327680})]
op793.unmet_dependencies = 
    [   MemoryDep('buf789', c0, {c0: 327680}),
        MemoryDep('buf791', c0, {c0: 327680}),
        MemoryDep('buf792', c0, {c0: 5120})]
op793.met_dependencies = 
    [   MemoryDep('primals_521', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_525', c1, {c0: 4, c1: 1280})]
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf793.users = [
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op793.group.device = cuda:0
op793.group.iteration = (327680, 1)
op793.sizes = ([4, 1280, 64], [])
buf789_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_521_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf791_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf792_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_525_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf793_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op793_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf789', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_521', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf791', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf792', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_525', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf793', get_index_5, add_3, None)
        return store


op794: SchedulerNode(ComputedBuffer)
op794.writes = [MemoryDep('buf794', c0, {c0: 128})]
op794.unmet_dependencies = [MemoryDep('buf793', c0, {c0: 327680})]
op794.met_dependencies = []
op794.outputs = [
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf794.users = [
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op794.group.device = cuda:0
op794.group.iteration = (128, 2560)
op794.sizes = ([128], [2560])
buf793_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf794_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op794_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf794', get_index_1, getitem)
        return store_reduction


op795: SchedulerNode(ComputedBuffer)
op795.writes = [MemoryDep('buf795', c0, {c0: 128})]
op795.unmet_dependencies = [MemoryDep('buf793', c0, {c0: 327680})]
op795.met_dependencies = []
op795.outputs = [
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf795.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False)]
]
op795.group.device = cuda:0
op795.group.iteration = (128, 2560)
op795.sizes = ([128], [2560])
buf793_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf795_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op795_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf795', get_index_1, getitem_1)
        return store_reduction


op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 128})]
op797.unmet_dependencies = [MemoryDep('buf795', c0, {c0: 128})]
op797.met_dependencies = []
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf797.users = [
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op797.group.device = cuda:0
op797.group.iteration = (128, 1)
op797.sizes = ([128], [])
buf795_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf797_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op797_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf795', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf797', get_index_1, rsqrt, None)
        return store


op798: SchedulerNode(ComputedBuffer)
op798.writes = [MemoryDep('buf798', c0, {c0: 327680})]
op798.unmet_dependencies = 
    [   MemoryDep('buf793', c0, {c0: 327680}),
        MemoryDep('buf794', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf797', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op798.met_dependencies = 
    [   MemoryDep('primals_526', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_527', c1, {c0: 4, c1: 1280})]
op798.outputs = [
    buf798: ComputedBuffer
    buf798.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf798.users = [NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False)]
]
op798.group.device = cuda:0
op798.group.iteration = (327680, 1)
op798.sizes = ([4, 1280, 64], [])
buf793_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf794_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf797_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_526_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_527_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf798_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op798_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf794', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf797', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_526', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_527', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf798', get_index_5, add, None)
        return store


op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 327680})]
op799.unmet_dependencies = [MemoryDep('buf798', c0, {c0: 327680})]
op799.met_dependencies = []
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf799.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op799.group.device = cuda:0
op799.group.iteration = (327680, 1)
op799.sizes = ([327680], [])
buf798_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf799_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op799_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf798', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf798', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf799', get_index_2, mul, None)
        return store


op800: ExternKernelSchedulerNode(ExternKernelAlloc)
op800.writes = [StarDep(name='buf800', mode=None)]
op800.unmet_dependencies = [StarDep(name='buf799', mode=None)]
op800.met_dependencies = [StarDep(name='primals_528', mode=None)]
op800.outputs = [
    buf800: ExternKernelAlloc
    buf800.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf800.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False)]
]
op800.node.kernel = extern_kernels.convolution


op801: ExternKernelSchedulerNode(ExternKernelAlloc)
op801.writes = [StarDep(name='buf801', mode=None)]
op801.unmet_dependencies = [StarDep(name='buf799', mode=None)]
op801.met_dependencies = [StarDep(name='primals_530', mode=None)]
op801.outputs = [
    buf801: ExternKernelAlloc
    buf801.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf801.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op802'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op801.node.kernel = extern_kernels.convolution


op802: ExternKernelSchedulerNode(ExternKernelAlloc)
op802.writes = [StarDep(name='buf802', mode=None)]
op802.unmet_dependencies = [StarDep(name='buf801', mode=None)]
op802.met_dependencies = [StarDep(name='primals_531', mode=None)]
op802.outputs = [
    buf802: ExternKernelAlloc
    buf802.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf802.users = [NodeUser(node=SchedulerNode(name='op803'), can_inplace=True, is_weak=False)]
]
op802.node.kernel = extern_kernels.convolution


op803: SchedulerNode(ComputedBuffer)
op803.writes = [MemoryDep('buf803', c0, {c0: 327680})]
op803.unmet_dependencies = 
    [   MemoryDep('buf782', c0, {c0: 327680}),
        MemoryDep('buf800', c0, {c0: 327680}),
        MemoryDep('buf802', c0, {c0: 327680})]
op803.met_dependencies = [MemoryDep('primals_529', c1, {c0: 4, c1: 1280})]
op803.outputs = [
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf803.users = [
        NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op805'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op881'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op803.group.device = cuda:0
op803.group.iteration = (327680, 1)
op803.sizes = ([4, 1280, 64], [])
buf782_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf800_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_529_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf802_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf803_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op803_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf800', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_529', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf802', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf803', get_index_4, mul_1, None)
        return store


op804: SchedulerNode(ComputedBuffer)
op804.writes = [MemoryDep('buf804', c0, {c0: 128})]
op804.unmet_dependencies = [MemoryDep('buf803', c0, {c0: 327680})]
op804.met_dependencies = []
op804.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf804.users = [
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op804.group.device = cuda:0
op804.group.iteration = (128, 2560)
op804.sizes = ([128], [2560])
buf803_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf804_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op804_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf803', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf804', get_index_1, getitem)
        return store_reduction


op805: SchedulerNode(ComputedBuffer)
op805.writes = [MemoryDep('buf805', c0, {c0: 128})]
op805.unmet_dependencies = [MemoryDep('buf803', c0, {c0: 327680})]
op805.met_dependencies = []
op805.outputs = [
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf805.users = [
        NodeUser(node=SchedulerNode(name='op807'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
    ]
]
op805.group.device = cuda:0
op805.group.iteration = (128, 2560)
op805.sizes = ([128], [2560])
buf803_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op805_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf803', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf805', get_index_1, getitem_1)
        return store_reduction


op807: SchedulerNode(ComputedBuffer)
op807.writes = [MemoryDep('buf807', c0, {c0: 128})]
op807.unmet_dependencies = [MemoryDep('buf805', c0, {c0: 128})]
op807.met_dependencies = []
op807.outputs = [
    buf807: ComputedBuffer
    buf807.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf807.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op807.group.device = cuda:0
op807.group.iteration = (128, 1)
op807.sizes = ([128], [])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf807_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op807_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf805', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf807', get_index_1, rsqrt, None)
        return store


op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 327680})]
op808.unmet_dependencies = 
    [   MemoryDep('buf803', c0, {c0: 327680}),
        MemoryDep('buf804', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf805', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op808.met_dependencies = 
    [   MemoryDep('primals_532', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_533', c1, {c0: 4, c1: 1280})]
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf808.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op809'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op810'), can_inplace=False, is_weak=False),
    ]
]
op808.group.device = cuda:0
op808.group.iteration = (327680, 1)
op808.sizes = ([4, 1280, 64], [])
buf803_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf804_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_532_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_533_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf808_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op808_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf803', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf804', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf805', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_532', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_533', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf808', get_index_5, add_1, None)
        return store


op809: ExternKernelSchedulerNode(ExternKernelOut)
op809.writes = [StarDep(name='buf809', mode=None)]
op809.unmet_dependencies = [StarDep(name='buf808', mode=None)]
op809.met_dependencies = [StarDep(name='primals_534', mode=None)]
op809.outputs = [
    buf809: ExternKernelOut
    buf809.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf809.users = [
        NodeUser(node=SchedulerNode(name='op813'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op838'), can_inplace=True, is_weak=False),
    ]
]
op809.node.kernel = extern_kernels.bmm


op810: SchedulerNode(ComputedBuffer)
op810.writes = [MemoryDep('buf810', c0, {c0: 327680})]
op810.unmet_dependencies = [MemoryDep('buf808', 81920*c0 + c1 + 64*c2, {c0: 4, c1: 64, c2: 1280})]
op810.met_dependencies = []
op810.outputs = [
    buf810: ComputedBuffer
    buf810.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf810.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op811'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op810.group.device = cuda:0
op810.group.iteration = (327680, 1)
op810.sizes = ([4, 64, 1280], [])
buf808_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf810_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op810_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 1280}
    index0 = 81920*p0 + p1 + 64*p2
    index1 = 81920*p0 + 1280*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf808', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf810', get_index_1, load, None)
        return store


op811: ExternKernelSchedulerNode(ExternKernelOut)
op811.writes = [StarDep(name='buf811', mode=None)]
op811.unmet_dependencies = [StarDep(name='buf810', mode=None)]
op811.met_dependencies = [StarDep(name='primals_536', mode=None)]
op811.outputs = [
    buf811: ExternKernelOut
    buf811.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf811.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op812'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op811.node.kernel = extern_kernels.mm


op812: ExternKernelSchedulerNode(ExternKernelOut)
op812.writes = [StarDep(name='buf812', mode=None)]
op812.unmet_dependencies = [StarDep(name='buf811', mode=None)]
op812.met_dependencies = [StarDep(name='primals_537', mode=None)]
op812.outputs = [
    buf812: ExternKernelOut
    buf812.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf812.users = [
        NodeUser(node=SchedulerNode(name='op813'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op838'), can_inplace=True, is_weak=False),
    ]
]
op812.node.kernel = extern_kernels.mm


op813: SchedulerNode(ComputedBuffer)
op813.writes = [MemoryDep('buf813', c0, {c0: 256})]
op813.unmet_dependencies = [MemoryDep('buf809', c0, {c0: 327680}), MemoryDep('buf812', c0, {c0: 327680})]
op813.met_dependencies = [MemoryDep('primals_535', c1, {c0: 256, c1: 1280})]
op813.outputs = [
    buf813: ComputedBuffer
    buf813.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf813.users = [NodeUser(node=SchedulerNode(name='op816'), can_inplace=False, is_weak=False)]
]
op813.group.device = cuda:0
op813.group.iteration = (256, 1280)
op813.sizes = ([256], [1280])
buf809_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_535_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf812_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf813_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op813_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf809', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_535', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf812', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf813', get_index_3, getitem)
        return store_reduction


op814: SchedulerNode(ComputedBuffer)
op814.writes = [MemoryDep('buf814', c0, {c0: 256})]
op814.unmet_dependencies = [MemoryDep('buf809', c0, {c0: 327680}), MemoryDep('buf812', c0, {c0: 327680})]
op814.met_dependencies = [MemoryDep('primals_535', c1, {c0: 256, c1: 1280})]
op814.outputs = [
    buf814: ComputedBuffer
    buf814.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf814.users = [
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2095'), can_inplace=True, is_weak=False),
    ]
]
op814.group.device = cuda:0
op814.group.iteration = (256, 1280)
op814.sizes = ([256], [1280])
buf809_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_535_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf812_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf814_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op814_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf809', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_535', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf812', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf814', get_index_3, getitem_1)
        return store_reduction


op816: SchedulerNode(ComputedBuffer)
op816.writes = [MemoryDep('buf816', c0, {c0: 327680})]
op816.unmet_dependencies = 
    [   MemoryDep('buf809', c0, {c0: 327680}),
        MemoryDep('buf812', c0, {c0: 327680}),
        MemoryDep('buf813', c0, {c0: 256}),
        MemoryDep('buf814', c0, {c0: 256})]
op816.met_dependencies = [MemoryDep('primals_535', c1, {c0: 256, c1: 1280})]
op816.outputs = [
    buf816: ComputedBuffer
    buf816.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf816.users = [
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op816.group.device = cuda:0
op816.group.iteration = (327680, 1)
op816.sizes = ([256, 1280], [])
buf809_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_535_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf812_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf813_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf814_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf816_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op816_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf809', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_535', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf812', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf813', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf814', get_index_4)
        constant_1 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf816', get_index_5, mul_1, None)
        return store


op817: SchedulerNode(ComputedBuffer)
op817.writes = [MemoryDep('buf817', c0, {c0: 327680})]
op817.unmet_dependencies = [MemoryDep('buf816', c0, {c0: 327680})]
op817.met_dependencies = 
    [   MemoryDep('primals_538', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_539', c1, {c0: 256, c1: 1280})]
op817.outputs = [
    buf817: ComputedBuffer
    buf817.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf817.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op818'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op819'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op821'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op822'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op824'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op825'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op817.group.device = cuda:0
op817.group.iteration = (327680, 1)
op817.sizes = ([256, 1280], [])
buf816_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_538_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_539_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf817_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op817_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf816', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_538', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_539', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf817', get_index_3, add, None)
        return store


op818: ExternKernelSchedulerNode(ExternKernelOut)
op818.writes = [StarDep(name='buf818', mode=None)]
op818.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op818.met_dependencies = [StarDep(name='primals_540', mode=None)]
op818.outputs = [
    buf818: ExternKernelOut
    buf818.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf818.users = [NodeUser(node=SchedulerNode(name='op827'), can_inplace=True, is_weak=False)]
]
op818.node.kernel = extern_kernels.mm


op819: ExternKernelSchedulerNode(ExternKernelOut)
op819.writes = [StarDep(name='buf819', mode=None)]
op819.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op819.met_dependencies = [StarDep(name='primals_541', mode=None)]
op819.outputs = [
    buf819: ExternKernelOut
    buf819.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf819.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op820'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op819.node.kernel = extern_kernels.mm


op820: ExternKernelSchedulerNode(ExternKernelOut)
op820.writes = [StarDep(name='buf820', mode=None)]
op820.unmet_dependencies = [StarDep(name='buf819', mode=None)]
op820.met_dependencies = [StarDep(name='primals_542', mode=None)]
op820.outputs = [
    buf820: ExternKernelOut
    buf820.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf820.users = [NodeUser(node=SchedulerNode(name='op827'), can_inplace=True, is_weak=False)]
]
op820.node.kernel = extern_kernels.mm


op821: ExternKernelSchedulerNode(ExternKernelOut)
op821.writes = [StarDep(name='buf821', mode=None)]
op821.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op821.met_dependencies = [StarDep(name='primals_543', mode=None)]
op821.outputs = [
    buf821: ExternKernelOut
    buf821.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf821.users = [NodeUser(node=SchedulerNode(name='op828'), can_inplace=True, is_weak=False)]
]
op821.node.kernel = extern_kernels.mm


op822: ExternKernelSchedulerNode(ExternKernelOut)
op822.writes = [StarDep(name='buf822', mode=None)]
op822.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op822.met_dependencies = [StarDep(name='primals_544', mode=None)]
op822.outputs = [
    buf822: ExternKernelOut
    buf822.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf822.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op823'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op822.node.kernel = extern_kernels.mm


op823: ExternKernelSchedulerNode(ExternKernelOut)
op823.writes = [StarDep(name='buf823', mode=None)]
op823.unmet_dependencies = [StarDep(name='buf822', mode=None)]
op823.met_dependencies = [StarDep(name='primals_545', mode=None)]
op823.outputs = [
    buf823: ExternKernelOut
    buf823.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf823.users = [NodeUser(node=SchedulerNode(name='op828'), can_inplace=True, is_weak=False)]
]
op823.node.kernel = extern_kernels.mm


op824: ExternKernelSchedulerNode(ExternKernelOut)
op824.writes = [StarDep(name='buf824', mode=None)]
op824.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op824.met_dependencies = [StarDep(name='primals_546', mode=None)]
op824.outputs = [
    buf824: ExternKernelOut
    buf824.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf824.users = [NodeUser(node=SchedulerNode(name='op829'), can_inplace=True, is_weak=False)]
]
op824.node.kernel = extern_kernels.mm


op825: ExternKernelSchedulerNode(ExternKernelOut)
op825.writes = [StarDep(name='buf825', mode=None)]
op825.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op825.met_dependencies = [StarDep(name='primals_547', mode=None)]
op825.outputs = [
    buf825: ExternKernelOut
    buf825.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf825.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op826'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op825.node.kernel = extern_kernels.mm


op826: ExternKernelSchedulerNode(ExternKernelOut)
op826.writes = [StarDep(name='buf826', mode=None)]
op826.unmet_dependencies = [StarDep(name='buf825', mode=None)]
op826.met_dependencies = [StarDep(name='primals_548', mode=None)]
op826.outputs = [
    buf826: ExternKernelOut
    buf826.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf826.users = [NodeUser(node=SchedulerNode(name='op829'), can_inplace=True, is_weak=False)]
]
op826.node.kernel = extern_kernels.mm


op827: SchedulerNode(ComputedBuffer)
op827.writes = [MemoryDep('buf827', c0, {c0: 327680})]
op827.unmet_dependencies = [MemoryDep('buf818', c0, {c0: 327680}), MemoryDep('buf820', c0, {c0: 327680})]
op827.met_dependencies = []
op827.outputs = [
    buf827: ComputedBuffer
    buf827.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf827.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op827.group.device = cuda:0
op827.group.iteration = (327680, 1)
op827.sizes = ([327680], [])
buf818_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf820_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf827_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op827_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf820', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf827', get_index_2, add, None)
        return store


op828: SchedulerNode(ComputedBuffer)
op828.writes = [MemoryDep('buf828', c0, {c0: 327680})]
op828.unmet_dependencies = [MemoryDep('buf821', c0, {c0: 327680}), MemoryDep('buf823', c0, {c0: 327680})]
op828.met_dependencies = []
op828.outputs = [
    buf828: ComputedBuffer
    buf828.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf828.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op828.group.device = cuda:0
op828.group.iteration = (327680, 1)
op828.sizes = ([327680], [])
buf821_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf823_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf828_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op828_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf821', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf823', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf828', get_index_2, add, None)
        return store


op829: SchedulerNode(ComputedBuffer)
op829.writes = [MemoryDep('buf829', c0, {c0: 327680})]
op829.unmet_dependencies = [MemoryDep('buf824', c0, {c0: 327680}), MemoryDep('buf826', c0, {c0: 327680})]
op829.met_dependencies = []
op829.outputs = [
    buf829: ComputedBuffer
    buf829.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf829.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op829.group.device = cuda:0
op829.group.iteration = (327680, 1)
op829.sizes = ([327680], [])
buf824_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf826_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf829_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op829_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf824', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf826', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf829', get_index_2, add, None)
        return store


op830: ExternKernelSchedulerNode(FallbackKernel)
op830.writes = [StarDep(name='buf830', mode=None)]
op830.unmet_dependencies = 
    [   StarDep(name='buf827', mode=None),
        StarDep(name='buf828', mode=None),
        StarDep(name='buf829', mode=None)]
op830.met_dependencies = []
op830.outputs = [
    buf830: FallbackKernel
    buf830.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf830.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op831'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op832'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op833'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op834'), can_inplace=False, is_weak=False),
    ]
]
op830.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op831: ExternKernelSchedulerNode(MultiOutput)
op831.writes = [StarDep(name='buf831', mode=None)]
op831.unmet_dependencies = [StarDep(name='buf830', mode=None)]
op831.met_dependencies = []
op831.outputs = [
    buf831: MultiOutput
    buf831.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf831.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op835'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op836'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op831.node.kernel = None


op832: ExternKernelSchedulerNode(MultiOutput)
op832.writes = [StarDep(name='buf832', mode=None)]
op832.unmet_dependencies = [StarDep(name='buf830', mode=None)]
op832.met_dependencies = []
op832.outputs = [
    buf832: MultiOutput
    buf832.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf832.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op832.node.kernel = None


op833: ExternKernelSchedulerNode(MultiOutput)
op833.writes = [StarDep(name='buf833', mode=None)]
op833.unmet_dependencies = [StarDep(name='buf830', mode=None)]
op833.met_dependencies = []
op833.outputs = [
    buf833: MultiOutput
    buf833.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf833.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op833.node.kernel = None


op834: ExternKernelSchedulerNode(MultiOutput)
op834.writes = [StarDep(name='buf834', mode=None)]
op834.unmet_dependencies = [StarDep(name='buf830', mode=None)]
op834.met_dependencies = []
op834.outputs = [
    buf834: MultiOutput
    buf834.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf834.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op834.node.kernel = None


op835: ExternKernelSchedulerNode(ExternKernelOut)
op835.writes = [StarDep(name='buf835', mode=None)]
op835.unmet_dependencies = [StarDep(name='buf831', mode=None)]
op835.met_dependencies = [StarDep(name='primals_549', mode=None)]
op835.outputs = [
    buf835: ExternKernelOut
    buf835.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf835.users = [NodeUser(node=SchedulerNode(name='op838'), can_inplace=True, is_weak=False)]
]
op835.node.kernel = extern_kernels.mm


op836: ExternKernelSchedulerNode(ExternKernelOut)
op836.writes = [StarDep(name='buf836', mode=None)]
op836.unmet_dependencies = [StarDep(name='buf831', mode=None)]
op836.met_dependencies = [StarDep(name='primals_551', mode=None)]
op836.outputs = [
    buf836: ExternKernelOut
    buf836.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf836.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op837'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op836.node.kernel = extern_kernels.mm


op837: ExternKernelSchedulerNode(ExternKernelOut)
op837.writes = [StarDep(name='buf837', mode=None)]
op837.unmet_dependencies = [StarDep(name='buf836', mode=None)]
op837.met_dependencies = [StarDep(name='primals_552', mode=None)]
op837.outputs = [
    buf837: ExternKernelOut
    buf837.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf837.users = [NodeUser(node=SchedulerNode(name='op838'), can_inplace=True, is_weak=False)]
]
op837.node.kernel = extern_kernels.mm


op838: SchedulerNode(ComputedBuffer)
op838.writes = [MemoryDep('buf838', c0, {c0: 327680})]
op838.unmet_dependencies = 
    [   MemoryDep('buf809', c0, {c0: 327680}),
        MemoryDep('buf812', c0, {c0: 327680}),
        MemoryDep('buf835', c0, {c0: 327680}),
        MemoryDep('buf837', c0, {c0: 327680})]
op838.met_dependencies = 
    [   MemoryDep('primals_535', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_550', c1, {c0: 256, c1: 1280})]
op838.outputs = [
    buf838: ComputedBuffer
    buf838.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf838.users = [
        NodeUser(node=SchedulerNode(name='op839'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op840'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op842'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op864'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op867'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False),
    ]
]
op838.group.device = cuda:0
op838.group.iteration = (327680, 1)
op838.sizes = ([256, 1280], [])
buf835_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_550_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf837_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf809_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_535_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf812_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op838_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf835', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_550', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf837', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf809', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_535', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf812', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf838', get_index_6, add_4, None)
        return store


op839: SchedulerNode(ComputedBuffer)
op839.writes = [MemoryDep('buf839', c0, {c0: 256})]
op839.unmet_dependencies = [MemoryDep('buf838', c0, {c0: 327680})]
op839.met_dependencies = []
op839.outputs = [
    buf839: ComputedBuffer
    buf839.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf839.users = [NodeUser(node=SchedulerNode(name='op842'), can_inplace=False, is_weak=False)]
]
op839.group.device = cuda:0
op839.group.iteration = (256, 1280)
op839.sizes = ([256], [1280])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf839_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op839_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf838', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf839', get_index_1, getitem)
        return store_reduction


op840: SchedulerNode(ComputedBuffer)
op840.writes = [MemoryDep('buf840', c0, {c0: 256})]
op840.unmet_dependencies = [MemoryDep('buf838', c0, {c0: 327680})]
op840.met_dependencies = []
op840.outputs = [
    buf840: ComputedBuffer
    buf840.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf840.users = [
        NodeUser(node=SchedulerNode(name='op842'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2094'), can_inplace=True, is_weak=False),
    ]
]
op840.group.device = cuda:0
op840.group.iteration = (256, 1280)
op840.sizes = ([256], [1280])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf840_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op840_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf838', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf840', get_index_1, getitem_1)
        return store_reduction


op842: SchedulerNode(ComputedBuffer)
op842.writes = [MemoryDep('buf842', c0, {c0: 327680})]
op842.unmet_dependencies = 
    [   MemoryDep('buf838', c0, {c0: 327680}),
        MemoryDep('buf839', c0, {c0: 256}),
        MemoryDep('buf840', c0, {c0: 256})]
op842.met_dependencies = []
op842.outputs = [
    buf842: ComputedBuffer
    buf842.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf842.users = [
        NodeUser(node=SchedulerNode(name='op843'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op842.group.device = cuda:0
op842.group.iteration = (327680, 1)
op842.sizes = ([256, 1280], [])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf839_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf840_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf842_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op842_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf838', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf839', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf840', get_index_2)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf842', get_index_3, mul, None)
        return store


op843: SchedulerNode(ComputedBuffer)
op843.writes = [MemoryDep('buf843', c0, {c0: 327680})]
op843.unmet_dependencies = [MemoryDep('buf842', c0, {c0: 327680})]
op843.met_dependencies = 
    [   MemoryDep('primals_553', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_554', c1, {c0: 256, c1: 1280})]
op843.outputs = [
    buf843: ComputedBuffer
    buf843.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf843.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op844'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op845'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op843.group.device = cuda:0
op843.group.iteration = (327680, 1)
op843.sizes = ([256, 1280], [])
buf842_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_553_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_554_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf843_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op843_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf842', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_553', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_554', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf843', get_index_3, add, None)
        return store


op844: ExternKernelSchedulerNode(ExternKernelOut)
op844.writes = [StarDep(name='buf844', mode=None)]
op844.unmet_dependencies = [StarDep(name='buf843', mode=None)]
op844.met_dependencies = [StarDep(name='primals_555', mode=None)]
op844.outputs = [
    buf844: ExternKernelOut
    buf844.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf844.users = [NodeUser(node=SchedulerNode(name='op853'), can_inplace=True, is_weak=False)]
]
op844.node.kernel = extern_kernels.mm


op845: ExternKernelSchedulerNode(ExternKernelOut)
op845.writes = [StarDep(name='buf845', mode=None)]
op845.unmet_dependencies = [StarDep(name='buf843', mode=None)]
op845.met_dependencies = [StarDep(name='primals_556', mode=None)]
op845.outputs = [
    buf845: ExternKernelOut
    buf845.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf845.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op846'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op845.node.kernel = extern_kernels.mm


op846: ExternKernelSchedulerNode(ExternKernelOut)
op846.writes = [StarDep(name='buf846', mode=None)]
op846.unmet_dependencies = [StarDep(name='buf845', mode=None)]
op846.met_dependencies = [StarDep(name='primals_557', mode=None)]
op846.outputs = [
    buf846: ExternKernelOut
    buf846.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf846.users = [NodeUser(node=SchedulerNode(name='op853'), can_inplace=True, is_weak=False)]
]
op846.node.kernel = extern_kernels.mm


op847: ExternKernelSchedulerNode(ExternKernelOut)
op847.writes = [StarDep(name='buf847', mode=None)]
op847.unmet_dependencies = []
op847.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_558', mode=None)]
op847.outputs = [
    buf847: ExternKernelOut
    buf847.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf847.users = [NodeUser(node=SchedulerNode(name='op854'), can_inplace=True, is_weak=False)]
]
op847.node.kernel = extern_kernels.mm


op848: ExternKernelSchedulerNode(ExternKernelOut)
op848.writes = [StarDep(name='buf848', mode=None)]
op848.unmet_dependencies = []
op848.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_559', mode=None)]
op848.outputs = [
    buf848: ExternKernelOut
    buf848.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf848.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op849'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op848.node.kernel = extern_kernels.mm


op849: ExternKernelSchedulerNode(ExternKernelOut)
op849.writes = [StarDep(name='buf849', mode=None)]
op849.unmet_dependencies = [StarDep(name='buf848', mode=None)]
op849.met_dependencies = [StarDep(name='primals_560', mode=None)]
op849.outputs = [
    buf849: ExternKernelOut
    buf849.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf849.users = [NodeUser(node=SchedulerNode(name='op854'), can_inplace=True, is_weak=False)]
]
op849.node.kernel = extern_kernels.mm


op850: ExternKernelSchedulerNode(ExternKernelOut)
op850.writes = [StarDep(name='buf850', mode=None)]
op850.unmet_dependencies = []
op850.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_561', mode=None)]
op850.outputs = [
    buf850: ExternKernelOut
    buf850.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf850.users = [NodeUser(node=SchedulerNode(name='op855'), can_inplace=True, is_weak=False)]
]
op850.node.kernel = extern_kernels.mm


op851: ExternKernelSchedulerNode(ExternKernelOut)
op851.writes = [StarDep(name='buf851', mode=None)]
op851.unmet_dependencies = []
op851.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_562', mode=None)]
op851.outputs = [
    buf851: ExternKernelOut
    buf851.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf851.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op852'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op851.node.kernel = extern_kernels.mm


op852: ExternKernelSchedulerNode(ExternKernelOut)
op852.writes = [StarDep(name='buf852', mode=None)]
op852.unmet_dependencies = [StarDep(name='buf851', mode=None)]
op852.met_dependencies = [StarDep(name='primals_563', mode=None)]
op852.outputs = [
    buf852: ExternKernelOut
    buf852.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf852.users = [NodeUser(node=SchedulerNode(name='op855'), can_inplace=True, is_weak=False)]
]
op852.node.kernel = extern_kernels.mm


op853: SchedulerNode(ComputedBuffer)
op853.writes = [MemoryDep('buf853', c0, {c0: 327680})]
op853.unmet_dependencies = [MemoryDep('buf844', c0, {c0: 327680}), MemoryDep('buf846', c0, {c0: 327680})]
op853.met_dependencies = []
op853.outputs = [
    buf853: ComputedBuffer
    buf853.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf853.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op853.group.device = cuda:0
op853.group.iteration = (327680, 1)
op853.sizes = ([327680], [])
buf844_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf846_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf853_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op853_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf844', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf846', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf853', get_index_2, add, None)
        return store


op854: SchedulerNode(ComputedBuffer)
op854.writes = [MemoryDep('buf854', c0, {c0: 394240})]
op854.unmet_dependencies = [MemoryDep('buf847', c0, {c0: 394240}), MemoryDep('buf849', c0, {c0: 394240})]
op854.met_dependencies = []
op854.outputs = [
    buf854: ComputedBuffer
    buf854.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf854.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op854.group.device = cuda:0
op854.group.iteration = (394240, 1)
op854.sizes = ([394240], [])
buf847_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf849_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf854_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op854_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf847', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf849', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf854', get_index_2, add, None)
        return store


op855: SchedulerNode(ComputedBuffer)
op855.writes = [MemoryDep('buf855', c0, {c0: 394240})]
op855.unmet_dependencies = [MemoryDep('buf850', c0, {c0: 394240}), MemoryDep('buf852', c0, {c0: 394240})]
op855.met_dependencies = []
op855.outputs = [
    buf855: ComputedBuffer
    buf855.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf855.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op855.group.device = cuda:0
op855.group.iteration = (394240, 1)
op855.sizes = ([394240], [])
buf850_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf852_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf855_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op855_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf852', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf855', get_index_2, add, None)
        return store


op856: ExternKernelSchedulerNode(FallbackKernel)
op856.writes = [StarDep(name='buf856', mode=None)]
op856.unmet_dependencies = 
    [   StarDep(name='buf853', mode=None),
        StarDep(name='buf854', mode=None),
        StarDep(name='buf855', mode=None)]
op856.met_dependencies = []
op856.outputs = [
    buf856: FallbackKernel
    buf856.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf856.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op857'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op858'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op860'), can_inplace=False, is_weak=False),
    ]
]
op856.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op857: ExternKernelSchedulerNode(MultiOutput)
op857.writes = [StarDep(name='buf857', mode=None)]
op857.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op857.met_dependencies = []
op857.outputs = [
    buf857: MultiOutput
    buf857.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf857.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op861'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op862'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op857.node.kernel = None


op858: ExternKernelSchedulerNode(MultiOutput)
op858.writes = [StarDep(name='buf858', mode=None)]
op858.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op858.met_dependencies = []
op858.outputs = [
    buf858: MultiOutput
    buf858.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf858.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op858.node.kernel = None


op859: ExternKernelSchedulerNode(MultiOutput)
op859.writes = [StarDep(name='buf859', mode=None)]
op859.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op859.met_dependencies = []
op859.outputs = [
    buf859: MultiOutput
    buf859.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf859.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op859.node.kernel = None


op860: ExternKernelSchedulerNode(MultiOutput)
op860.writes = [StarDep(name='buf860', mode=None)]
op860.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op860.met_dependencies = []
op860.outputs = [
    buf860: MultiOutput
    buf860.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf860.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op860.node.kernel = None


op861: ExternKernelSchedulerNode(ExternKernelOut)
op861.writes = [StarDep(name='buf861', mode=None)]
op861.unmet_dependencies = [StarDep(name='buf857', mode=None)]
op861.met_dependencies = [StarDep(name='primals_564', mode=None)]
op861.outputs = [
    buf861: ExternKernelOut
    buf861.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf861.users = [
        NodeUser(node=SchedulerNode(name='op864'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op867'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False),
    ]
]
op861.node.kernel = extern_kernels.mm


op862: ExternKernelSchedulerNode(ExternKernelOut)
op862.writes = [StarDep(name='buf862', mode=None)]
op862.unmet_dependencies = [StarDep(name='buf857', mode=None)]
op862.met_dependencies = [StarDep(name='primals_566', mode=None)]
op862.outputs = [
    buf862: ExternKernelOut
    buf862.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf862.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op863'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op862.node.kernel = extern_kernels.mm


op863: ExternKernelSchedulerNode(ExternKernelOut)
op863.writes = [StarDep(name='buf863', mode=None)]
op863.unmet_dependencies = [StarDep(name='buf862', mode=None)]
op863.met_dependencies = [StarDep(name='primals_567', mode=None)]
op863.outputs = [
    buf863: ExternKernelOut
    buf863.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf863.users = [
        NodeUser(node=SchedulerNode(name='op864'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op867'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False),
    ]
]
op863.node.kernel = extern_kernels.mm


op864: SchedulerNode(ComputedBuffer)
op864.writes = [MemoryDep('buf864', c0, {c0: 256})]
op864.unmet_dependencies = 
    [   MemoryDep('buf838', c0, {c0: 327680}),
        MemoryDep('buf861', c0, {c0: 327680}),
        MemoryDep('buf863', c0, {c0: 327680})]
op864.met_dependencies = [MemoryDep('primals_565', c1, {c0: 256, c1: 1280})]
op864.outputs = [
    buf864: ComputedBuffer
    buf864.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf864.users = [NodeUser(node=SchedulerNode(name='op867'), can_inplace=False, is_weak=False)]
]
op864.group.device = cuda:0
op864.group.iteration = (256, 1280)
op864.sizes = ([256], [1280])
buf861_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_565_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf863_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf864_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op864_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf861', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_565', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf863', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf838', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf864', get_index_4, getitem)
        return store_reduction


op865: SchedulerNode(ComputedBuffer)
op865.writes = [MemoryDep('buf865', c0, {c0: 256})]
op865.unmet_dependencies = 
    [   MemoryDep('buf838', c0, {c0: 327680}),
        MemoryDep('buf861', c0, {c0: 327680}),
        MemoryDep('buf863', c0, {c0: 327680})]
op865.met_dependencies = [MemoryDep('primals_565', c1, {c0: 256, c1: 1280})]
op865.outputs = [
    buf865: ComputedBuffer
    buf865.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf865.users = [
        NodeUser(node=SchedulerNode(name='op867'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2093'), can_inplace=True, is_weak=False),
    ]
]
op865.group.device = cuda:0
op865.group.iteration = (256, 1280)
op865.sizes = ([256], [1280])
buf861_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_565_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf863_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf865_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op865_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf861', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_565', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf863', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf838', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf865', get_index_4, getitem_1)
        return store_reduction


op867: SchedulerNode(ComputedBuffer)
op867.writes = [MemoryDep('buf867', c0, {c0: 327680})]
op867.unmet_dependencies = 
    [   MemoryDep('buf838', c0, {c0: 327680}),
        MemoryDep('buf861', c0, {c0: 327680}),
        MemoryDep('buf863', c0, {c0: 327680}),
        MemoryDep('buf864', c0, {c0: 256}),
        MemoryDep('buf865', c0, {c0: 256})]
op867.met_dependencies = [MemoryDep('primals_565', c1, {c0: 256, c1: 1280})]
op867.outputs = [
    buf867: ComputedBuffer
    buf867.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf867.users = [
        NodeUser(node=SchedulerNode(name='op868'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op867.group.device = cuda:0
op867.group.iteration = (327680, 1)
op867.sizes = ([256, 1280], [])
buf861_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_565_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf863_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf864_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf865_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf867_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op867_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf861', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_565', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf863', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf838', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf864', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf865', get_index_5)
        constant_2 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf867', get_index_6, mul_2, None)
        return store


op868: SchedulerNode(ComputedBuffer)
op868.writes = [MemoryDep('buf868', c0, {c0: 327680})]
op868.unmet_dependencies = [MemoryDep('buf867', c0, {c0: 327680})]
op868.met_dependencies = 
    [   MemoryDep('primals_568', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_569', c1, {c0: 256, c1: 1280})]
op868.outputs = [
    buf868: ComputedBuffer
    buf868.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf868.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op869'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op868.group.device = cuda:0
op868.group.iteration = (327680, 1)
op868.sizes = ([256, 1280], [])
buf867_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_568_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_569_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf868_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op868_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf867', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_568', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_569', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf868', get_index_3, add, None)
        return store


op869: ExternKernelSchedulerNode(ExternKernelOut)
op869.writes = [StarDep(name='buf869', mode=None)]
op869.unmet_dependencies = [StarDep(name='buf868', mode=None)]
op869.met_dependencies = [StarDep(name='primals_570', mode=None)]
op869.outputs = [
    buf869: ExternKernelOut
    buf869.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf869.users = [NodeUser(node=SchedulerNode(name='op872'), can_inplace=True, is_weak=False)]
]
op869.node.kernel = extern_kernels.mm


op870: ExternKernelSchedulerNode(ExternKernelOut)
op870.writes = [StarDep(name='buf870', mode=None)]
op870.unmet_dependencies = [StarDep(name='buf868', mode=None)]
op870.met_dependencies = [StarDep(name='primals_572', mode=None)]
op870.outputs = [
    buf870: ExternKernelOut
    buf870.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf870.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op871'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op870.node.kernel = extern_kernels.mm


op871: ExternKernelSchedulerNode(ExternKernelOut)
op871.writes = [StarDep(name='buf871', mode=None)]
op871.unmet_dependencies = [StarDep(name='buf870', mode=None)]
op871.met_dependencies = [StarDep(name='primals_573', mode=None)]
op871.outputs = [
    buf871: ExternKernelOut
    buf871.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf871.users = [NodeUser(node=SchedulerNode(name='op872'), can_inplace=True, is_weak=False)]
]
op871.node.kernel = extern_kernels.mm


op872: SchedulerNode(ComputedBuffer)
op872.writes = [MemoryDep('buf872', c0, {c0: 2621440})]
op872.unmet_dependencies = [MemoryDep('buf869', c0, {c0: 2621440}), MemoryDep('buf871', c0, {c0: 2621440})]
op872.met_dependencies = [MemoryDep('primals_571', c1, {c0: 256, c1: 10240})]
op872.outputs = [
    buf872: ComputedBuffer
    buf872.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
    buf872.users = [
        NodeUser(node=SchedulerNode(name='op873'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op872.group.device = cuda:0
op872.group.iteration = (2621440, 1)
op872.sizes = ([256, 10240], [])
buf869_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
primals_571_layout = FixedLayout('cuda:0', torch.float32, size=[10240], stride=[1])
buf871_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
class op872_loop_body:
    var_ranges = {p0: 256, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf869', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_571', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf871', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf872', get_index_3, add_1, None)
        return store


op873: SchedulerNode(ComputedBuffer)
op873.writes = [MemoryDep('buf873', c0, {c0: 1310720})]
op873.unmet_dependencies = 
    [   MemoryDep('buf872', 10240*c0 + c1 + 5120, {c0: 256, c1: 5120}),
        MemoryDep('buf872', 10240*c0 + c1, {c0: 256, c1: 5120})]
op873.met_dependencies = []
op873.outputs = [
    buf873: ComputedBuffer
    buf873.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
    buf873.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op874'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op875'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op873.group.device = cuda:0
op873.group.iteration = (1310720, 1)
op873.sizes = ([256, 5120], [])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf873_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
class op873_loop_body:
    var_ranges = {p0: 256, p1: 5120}
    index0 = 10240*p0 + p1
    index1 = 10240*p0 + p1 + 5120
    index2 = 5120*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf872', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf872', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf873', get_index_3, mul_3, None)
        return store


op874: ExternKernelSchedulerNode(ExternKernelOut)
op874.writes = [StarDep(name='buf874', mode=None)]
op874.unmet_dependencies = [StarDep(name='buf873', mode=None)]
op874.met_dependencies = [StarDep(name='primals_574', mode=None)]
op874.outputs = [
    buf874: ExternKernelOut
    buf874.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf874.users = [NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False)]
]
op874.node.kernel = extern_kernels.mm


op875: ExternKernelSchedulerNode(ExternKernelOut)
op875.writes = [StarDep(name='buf875', mode=None)]
op875.unmet_dependencies = [StarDep(name='buf873', mode=None)]
op875.met_dependencies = [StarDep(name='primals_576', mode=None)]
op875.outputs = [
    buf875: ExternKernelOut
    buf875.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf875.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op876'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op875.node.kernel = extern_kernels.mm


op876: ExternKernelSchedulerNode(ExternKernelOut)
op876.writes = [StarDep(name='buf876', mode=None)]
op876.unmet_dependencies = [StarDep(name='buf875', mode=None)]
op876.met_dependencies = [StarDep(name='primals_577', mode=None)]
op876.outputs = [
    buf876: ExternKernelOut
    buf876.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf876.users = [NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False)]
]
op876.node.kernel = extern_kernels.mm


op877: SchedulerNode(ComputedBuffer)
op877.writes = [MemoryDep('buf877', c0, {c0: 327680})]
op877.unmet_dependencies = 
    [   MemoryDep('buf838', c0, {c0: 327680}),
        MemoryDep('buf861', c0, {c0: 327680}),
        MemoryDep('buf863', c0, {c0: 327680}),
        MemoryDep('buf874', c0, {c0: 327680}),
        MemoryDep('buf876', c0, {c0: 327680})]
op877.met_dependencies = 
    [   MemoryDep('primals_565', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_575', c1, {c0: 256, c1: 1280})]
op877.outputs = [
    buf877: ComputedBuffer
    buf877.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf877.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op878'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op879'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op877.group.device = cuda:0
op877.group.iteration = (327680, 1)
op877.sizes = ([256, 1280], [])
buf874_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_575_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf876_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf861_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_565_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf863_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf838_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf877_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op877_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf874', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_575', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf876', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf861', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_565', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf863', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf838', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf877', get_index_7, add_5, None)
        return store


op878: ExternKernelSchedulerNode(ExternKernelOut)
op878.writes = [StarDep(name='buf878', mode=None)]
op878.unmet_dependencies = [StarDep(name='buf877', mode=None)]
op878.met_dependencies = [StarDep(name='primals_578', mode=None)]
op878.outputs = [
    buf878: ExternKernelOut
    buf878.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf878.users = [NodeUser(node=SchedulerNode(name='op881'), can_inplace=False, is_weak=False)]
]
op878.node.kernel = extern_kernels.mm


op879: ExternKernelSchedulerNode(ExternKernelOut)
op879.writes = [StarDep(name='buf879', mode=None)]
op879.unmet_dependencies = [StarDep(name='buf877', mode=None)]
op879.met_dependencies = [StarDep(name='primals_580', mode=None)]
op879.outputs = [
    buf879: ExternKernelOut
    buf879.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf879.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op880'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op879.node.kernel = extern_kernels.mm


op880: ExternKernelSchedulerNode(ExternKernelOut)
op880.writes = [StarDep(name='buf880', mode=None)]
op880.unmet_dependencies = [StarDep(name='buf879', mode=None)]
op880.met_dependencies = [StarDep(name='primals_581', mode=None)]
op880.outputs = [
    buf880: ExternKernelOut
    buf880.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf880.users = [NodeUser(node=SchedulerNode(name='op881'), can_inplace=False, is_weak=False)]
]
op880.node.kernel = extern_kernels.mm


op881: SchedulerNode(ComputedBuffer)
op881.writes = [MemoryDep('buf881', c0, {c0: 327680})]
op881.unmet_dependencies = 
    [   MemoryDep('buf803', c0, {c0: 327680}),
        MemoryDep('buf878', 81920*c0 + c1 + 1280*c2, {c0: 4, c1: 1280, c2: 64}),
        MemoryDep('buf880', 81920*c0 + c1 + 1280*c2, {c0: 4, c1: 1280, c2: 64})]
op881.met_dependencies = [MemoryDep('primals_579', c1, {c0: 4, c1: 1280})]
op881.outputs = [
    buf881: ComputedBuffer
    buf881.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf881.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op882'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op883'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1124'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op881.group.device = cuda:0
op881.group.iteration = (327680, 1)
op881.sizes = ([4, 1280, 64], [])
buf878_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_579_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf880_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf803_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf881_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op881_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + p1 + 1280*p2
    index1 = p1
    index2 = 81920*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf878', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_579', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf880', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf803', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf881', get_index_4, add_2, None)
        return store


op882: ExternKernelSchedulerNode(ExternKernelAlloc)
op882.writes = [StarDep(name='buf882', mode=None)]
op882.unmet_dependencies = [StarDep(name='buf881', mode=None)]
op882.met_dependencies = [StarDep(name='primals_582', mode=None)]
op882.outputs = [
    buf882: ExternKernelAlloc
    buf882.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf882.users = [NodeUser(node=SchedulerNode(name='op885'), can_inplace=True, is_weak=False)]
]
op882.node.kernel = extern_kernels.convolution


op883: ExternKernelSchedulerNode(ExternKernelAlloc)
op883.writes = [StarDep(name='buf883', mode=None)]
op883.unmet_dependencies = [StarDep(name='buf881', mode=None)]
op883.met_dependencies = [StarDep(name='primals_584', mode=None)]
op883.outputs = [
    buf883: ExternKernelAlloc
    buf883.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf883.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op883.node.kernel = extern_kernels.convolution


op884: ExternKernelSchedulerNode(ExternKernelAlloc)
op884.writes = [StarDep(name='buf884', mode=None)]
op884.unmet_dependencies = [StarDep(name='buf883', mode=None)]
op884.met_dependencies = [StarDep(name='primals_585', mode=None)]
op884.outputs = [
    buf884: ExternKernelAlloc
    buf884.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf884.users = [NodeUser(node=SchedulerNode(name='op885'), can_inplace=True, is_weak=False)]
]
op884.node.kernel = extern_kernels.convolution


op885: SchedulerNode(ComputedBuffer)
op885.writes = [MemoryDep('buf885', c0, {c0: 81920})]
op885.unmet_dependencies = [MemoryDep('buf882', c0, {c0: 81920}), MemoryDep('buf884', c0, {c0: 81920})]
op885.met_dependencies = [MemoryDep('primals_583', c1, {c0: 4, c1: 1280})]
op885.outputs = [
    buf885: ComputedBuffer
    buf885.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf885.users = [
        NodeUser(node=SchedulerNode(name='op886'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op887'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op906'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1095'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op885.group.device = cuda:0
op885.group.iteration = (81920, 1)
op885.sizes = ([4, 1280, 16], [])
buf882_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_583_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf884_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op885_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf882', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_583', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf884', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf885', get_index_3, add_1, None)
        return store


op886: SchedulerNode(ComputedBuffer)
op886.writes = [MemoryDep('buf886', c0, {c0: 128})]
op886.unmet_dependencies = [MemoryDep('buf885', c0, {c0: 81920})]
op886.met_dependencies = []
op886.outputs = [
    buf886: ComputedBuffer
    buf886.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf886.users = [
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op886.group.device = cuda:0
op886.group.iteration = (128, 640)
op886.sizes = ([128], [640])
buf885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf886_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op886_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf885', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf886', get_index_1, getitem)
        return store_reduction


op887: SchedulerNode(ComputedBuffer)
op887.writes = [MemoryDep('buf887', c0, {c0: 128})]
op887.unmet_dependencies = [MemoryDep('buf885', c0, {c0: 81920})]
op887.met_dependencies = []
op887.outputs = [
    buf887: ComputedBuffer
    buf887.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf887.users = [NodeUser(node=SchedulerNode(name='op889'), can_inplace=True, is_weak=False)]
]
op887.group.device = cuda:0
op887.group.iteration = (128, 640)
op887.sizes = ([128], [640])
buf885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf887_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op887_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf885', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf887', get_index_1, getitem_1)
        return store_reduction


op889: SchedulerNode(ComputedBuffer)
op889.writes = [MemoryDep('buf889', c0, {c0: 128})]
op889.unmet_dependencies = [MemoryDep('buf887', c0, {c0: 128})]
op889.met_dependencies = []
op889.outputs = [
    buf889: ComputedBuffer
    buf889.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf889.users = [
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op889.group.device = cuda:0
op889.group.iteration = (128, 1)
op889.sizes = ([128], [])
buf887_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf889_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op889_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf889', get_index_1, rsqrt, None)
        return store


op890: SchedulerNode(ComputedBuffer)
op890.writes = [MemoryDep('buf890', c0, {c0: 81920})]
op890.unmet_dependencies = 
    [   MemoryDep('buf885', c0, {c0: 81920}),
        MemoryDep('buf886', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf889', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op890.met_dependencies = 
    [   MemoryDep('primals_586', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_587', c1, {c0: 4, c1: 1280})]
op890.outputs = [
    buf890: ComputedBuffer
    buf890.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf890.users = [NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False)]
]
op890.group.device = cuda:0
op890.group.iteration = (81920, 1)
op890.sizes = ([4, 1280, 16], [])
buf885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf886_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf889_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_586_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_587_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf890_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op890_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf885', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf886', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf889', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_586', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_587', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf890', get_index_5, add, None)
        return store


op891: SchedulerNode(ComputedBuffer)
op891.writes = [MemoryDep('buf891', c0, {c0: 81920})]
op891.unmet_dependencies = [MemoryDep('buf890', c0, {c0: 81920})]
op891.met_dependencies = []
op891.outputs = [
    buf891: ComputedBuffer
    buf891.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf891.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op892'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op893'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op891.group.device = cuda:0
op891.group.iteration = (81920, 1)
op891.sizes = ([81920], [])
buf890_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf891_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op891_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf890', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf890', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf891', get_index_2, mul, None)
        return store


op892: ExternKernelSchedulerNode(ExternKernelAlloc)
op892.writes = [StarDep(name='buf892', mode=None)]
op892.unmet_dependencies = [StarDep(name='buf891', mode=None)]
op892.met_dependencies = [StarDep(name='primals_588', mode=None)]
op892.outputs = [
    buf892: ExternKernelAlloc
    buf892.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf892.users = [NodeUser(node=SchedulerNode(name='op896'), can_inplace=True, is_weak=False)]
]
op892.node.kernel = extern_kernels.convolution


op893: ExternKernelSchedulerNode(ExternKernelAlloc)
op893.writes = [StarDep(name='buf893', mode=None)]
op893.unmet_dependencies = [StarDep(name='buf891', mode=None)]
op893.met_dependencies = [StarDep(name='primals_590', mode=None)]
op893.outputs = [
    buf893: ExternKernelAlloc
    buf893.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf893.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op894'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op893.node.kernel = extern_kernels.convolution


op894: ExternKernelSchedulerNode(ExternKernelAlloc)
op894.writes = [StarDep(name='buf894', mode=None)]
op894.unmet_dependencies = [StarDep(name='buf893', mode=None)]
op894.met_dependencies = [StarDep(name='primals_591', mode=None)]
op894.outputs = [
    buf894: ExternKernelAlloc
    buf894.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf894.users = [NodeUser(node=SchedulerNode(name='op896'), can_inplace=True, is_weak=False)]
]
op894.node.kernel = extern_kernels.convolution


op895: ExternKernelSchedulerNode(ExternKernelOut)
op895.writes = [StarDep(name='buf895', mode=None)]
op895.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op895.met_dependencies = [StarDep(name='primals_592', mode=None)]
op895.outputs = [
    buf895: ExternKernelOut
    buf895.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf895.users = [NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False)]
]
op895.node.kernel = extern_kernels.mm


op896: SchedulerNode(ComputedBuffer)
op896.writes = [MemoryDep('buf896', c0, {c0: 81920})]
op896.unmet_dependencies = 
    [   MemoryDep('buf892', c0, {c0: 81920}),
        MemoryDep('buf894', c0, {c0: 81920}),
        MemoryDep('buf895', c0, {c0: 5120})]
op896.met_dependencies = 
    [   MemoryDep('primals_589', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_593', c1, {c0: 4, c1: 1280})]
op896.outputs = [
    buf896: ComputedBuffer
    buf896.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf896.users = [
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op898'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op896.group.device = cuda:0
op896.group.iteration = (81920, 1)
op896.sizes = ([4, 1280, 16], [])
buf892_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_589_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf894_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf895_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_593_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf896_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op896_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf892', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_589', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf894', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf895', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_593', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf896', get_index_5, add_3, None)
        return store


op897: SchedulerNode(ComputedBuffer)
op897.writes = [MemoryDep('buf897', c0, {c0: 128})]
op897.unmet_dependencies = [MemoryDep('buf896', c0, {c0: 81920})]
op897.met_dependencies = []
op897.outputs = [
    buf897: ComputedBuffer
    buf897.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf897.users = [
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op897.group.device = cuda:0
op897.group.iteration = (128, 640)
op897.sizes = ([128], [640])
buf896_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf897_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op897_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf896', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf897', get_index_1, getitem)
        return store_reduction


op898: SchedulerNode(ComputedBuffer)
op898.writes = [MemoryDep('buf898', c0, {c0: 128})]
op898.unmet_dependencies = [MemoryDep('buf896', c0, {c0: 81920})]
op898.met_dependencies = []
op898.outputs = [
    buf898: ComputedBuffer
    buf898.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf898.users = [NodeUser(node=SchedulerNode(name='op900'), can_inplace=True, is_weak=False)]
]
op898.group.device = cuda:0
op898.group.iteration = (128, 640)
op898.sizes = ([128], [640])
buf896_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf898_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op898_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf896', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf898', get_index_1, getitem_1)
        return store_reduction


op900: SchedulerNode(ComputedBuffer)
op900.writes = [MemoryDep('buf900', c0, {c0: 128})]
op900.unmet_dependencies = [MemoryDep('buf898', c0, {c0: 128})]
op900.met_dependencies = []
op900.outputs = [
    buf900: ComputedBuffer
    buf900.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf900.users = [
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op900.group.device = cuda:0
op900.group.iteration = (128, 1)
op900.sizes = ([128], [])
buf898_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf900_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op900_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf898', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf900', get_index_1, rsqrt, None)
        return store


op901: SchedulerNode(ComputedBuffer)
op901.writes = [MemoryDep('buf901', c0, {c0: 81920})]
op901.unmet_dependencies = 
    [   MemoryDep('buf896', c0, {c0: 81920}),
        MemoryDep('buf897', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf900', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op901.met_dependencies = 
    [   MemoryDep('primals_594', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_595', c1, {c0: 4, c1: 1280})]
op901.outputs = [
    buf901: ComputedBuffer
    buf901.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf901.users = [NodeUser(node=SchedulerNode(name='op902'), can_inplace=True, is_weak=False)]
]
op901.group.device = cuda:0
op901.group.iteration = (81920, 1)
op901.sizes = ([4, 1280, 16], [])
buf896_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf897_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf900_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_594_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_595_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf901_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op901_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf896', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf897', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf900', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_594', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_595', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf901', get_index_5, add, None)
        return store


op902: SchedulerNode(ComputedBuffer)
op902.writes = [MemoryDep('buf902', c0, {c0: 81920})]
op902.unmet_dependencies = [MemoryDep('buf901', c0, {c0: 81920})]
op902.met_dependencies = []
op902.outputs = [
    buf902: ComputedBuffer
    buf902.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf902.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op903'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op904'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op902.group.device = cuda:0
op902.group.iteration = (81920, 1)
op902.sizes = ([81920], [])
buf901_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf902_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op902_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf901', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf901', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf902', get_index_2, mul, None)
        return store


op903: ExternKernelSchedulerNode(ExternKernelAlloc)
op903.writes = [StarDep(name='buf903', mode=None)]
op903.unmet_dependencies = [StarDep(name='buf902', mode=None)]
op903.met_dependencies = [StarDep(name='primals_596', mode=None)]
op903.outputs = [
    buf903: ExternKernelAlloc
    buf903.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf903.users = [NodeUser(node=SchedulerNode(name='op906'), can_inplace=True, is_weak=False)]
]
op903.node.kernel = extern_kernels.convolution


op904: ExternKernelSchedulerNode(ExternKernelAlloc)
op904.writes = [StarDep(name='buf904', mode=None)]
op904.unmet_dependencies = [StarDep(name='buf902', mode=None)]
op904.met_dependencies = [StarDep(name='primals_598', mode=None)]
op904.outputs = [
    buf904: ExternKernelAlloc
    buf904.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf904.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op905'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op904.node.kernel = extern_kernels.convolution


op905: ExternKernelSchedulerNode(ExternKernelAlloc)
op905.writes = [StarDep(name='buf905', mode=None)]
op905.unmet_dependencies = [StarDep(name='buf904', mode=None)]
op905.met_dependencies = [StarDep(name='primals_599', mode=None)]
op905.outputs = [
    buf905: ExternKernelAlloc
    buf905.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf905.users = [NodeUser(node=SchedulerNode(name='op906'), can_inplace=True, is_weak=False)]
]
op905.node.kernel = extern_kernels.convolution


op906: SchedulerNode(ComputedBuffer)
op906.writes = [MemoryDep('buf906', c0, {c0: 81920})]
op906.unmet_dependencies = 
    [   MemoryDep('buf885', c0, {c0: 81920}),
        MemoryDep('buf903', c0, {c0: 81920}),
        MemoryDep('buf905', c0, {c0: 81920})]
op906.met_dependencies = [MemoryDep('primals_597', c1, {c0: 4, c1: 1280})]
op906.outputs = [
    buf906: ComputedBuffer
    buf906.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf906.users = [
        NodeUser(node=SchedulerNode(name='op907'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op908'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op927'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1071'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op906.group.device = cuda:0
op906.group.iteration = (81920, 1)
op906.sizes = ([4, 1280, 16], [])
buf885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf903_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_597_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf905_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf906_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op906_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf885', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf903', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_597', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf905', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf906', get_index_4, mul_1, None)
        return store


op907: SchedulerNode(ComputedBuffer)
op907.writes = [MemoryDep('buf907', c0, {c0: 128})]
op907.unmet_dependencies = [MemoryDep('buf906', c0, {c0: 81920})]
op907.met_dependencies = []
op907.outputs = [
    buf907: ComputedBuffer
    buf907.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf907.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op907.group.device = cuda:0
op907.group.iteration = (128, 640)
op907.sizes = ([128], [640])
buf906_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op907_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf906', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf907', get_index_1, getitem)
        return store_reduction


op908: SchedulerNode(ComputedBuffer)
op908.writes = [MemoryDep('buf908', c0, {c0: 128})]
op908.unmet_dependencies = [MemoryDep('buf906', c0, {c0: 81920})]
op908.met_dependencies = []
op908.outputs = [
    buf908: ComputedBuffer
    buf908.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf908.users = [NodeUser(node=SchedulerNode(name='op910'), can_inplace=True, is_weak=False)]
]
op908.group.device = cuda:0
op908.group.iteration = (128, 640)
op908.sizes = ([128], [640])
buf906_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf908_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op908_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf906', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf908', get_index_1, getitem_1)
        return store_reduction


op910: SchedulerNode(ComputedBuffer)
op910.writes = [MemoryDep('buf910', c0, {c0: 128})]
op910.unmet_dependencies = [MemoryDep('buf908', c0, {c0: 128})]
op910.met_dependencies = []
op910.outputs = [
    buf910: ComputedBuffer
    buf910.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf910.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op910.group.device = cuda:0
op910.group.iteration = (128, 1)
op910.sizes = ([128], [])
buf908_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf910_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op910_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf908', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf910', get_index_1, rsqrt, None)
        return store


op911: SchedulerNode(ComputedBuffer)
op911.writes = [MemoryDep('buf911', c0, {c0: 81920})]
op911.unmet_dependencies = 
    [   MemoryDep('buf906', c0, {c0: 81920}),
        MemoryDep('buf907', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf910', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op911.met_dependencies = 
    [   MemoryDep('primals_600', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_601', c1, {c0: 4, c1: 1280})]
op911.outputs = [
    buf911: ComputedBuffer
    buf911.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf911.users = [NodeUser(node=SchedulerNode(name='op912'), can_inplace=True, is_weak=False)]
]
op911.group.device = cuda:0
op911.group.iteration = (81920, 1)
op911.sizes = ([4, 1280, 16], [])
buf906_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf910_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_600_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_601_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf911_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op911_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf906', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf907', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf910', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_600', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_601', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf911', get_index_5, add, None)
        return store


op912: SchedulerNode(ComputedBuffer)
op912.writes = [MemoryDep('buf912', c0, {c0: 81920})]
op912.unmet_dependencies = [MemoryDep('buf911', c0, {c0: 81920})]
op912.met_dependencies = []
op912.outputs = [
    buf912: ComputedBuffer
    buf912.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf912.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op913'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op914'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op912.group.device = cuda:0
op912.group.iteration = (81920, 1)
op912.sizes = ([81920], [])
buf911_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf912_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op912_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf911', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf911', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf912', get_index_2, mul, None)
        return store


op913: ExternKernelSchedulerNode(ExternKernelAlloc)
op913.writes = [StarDep(name='buf913', mode=None)]
op913.unmet_dependencies = [StarDep(name='buf912', mode=None)]
op913.met_dependencies = [StarDep(name='primals_602', mode=None)]
op913.outputs = [
    buf913: ExternKernelAlloc
    buf913.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf913.users = [NodeUser(node=SchedulerNode(name='op917'), can_inplace=True, is_weak=False)]
]
op913.node.kernel = extern_kernels.convolution


op914: ExternKernelSchedulerNode(ExternKernelAlloc)
op914.writes = [StarDep(name='buf914', mode=None)]
op914.unmet_dependencies = [StarDep(name='buf912', mode=None)]
op914.met_dependencies = [StarDep(name='primals_604', mode=None)]
op914.outputs = [
    buf914: ExternKernelAlloc
    buf914.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf914.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op915'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op914.node.kernel = extern_kernels.convolution


op915: ExternKernelSchedulerNode(ExternKernelAlloc)
op915.writes = [StarDep(name='buf915', mode=None)]
op915.unmet_dependencies = [StarDep(name='buf914', mode=None)]
op915.met_dependencies = [StarDep(name='primals_605', mode=None)]
op915.outputs = [
    buf915: ExternKernelAlloc
    buf915.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf915.users = [NodeUser(node=SchedulerNode(name='op917'), can_inplace=True, is_weak=False)]
]
op915.node.kernel = extern_kernels.convolution


op916: ExternKernelSchedulerNode(ExternKernelOut)
op916.writes = [StarDep(name='buf916', mode=None)]
op916.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op916.met_dependencies = [StarDep(name='primals_606', mode=None)]
op916.outputs = [
    buf916: ExternKernelOut
    buf916.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf916.users = [NodeUser(node=SchedulerNode(name='op917'), can_inplace=False, is_weak=False)]
]
op916.node.kernel = extern_kernels.mm


op917: SchedulerNode(ComputedBuffer)
op917.writes = [MemoryDep('buf917', c0, {c0: 81920})]
op917.unmet_dependencies = 
    [   MemoryDep('buf913', c0, {c0: 81920}),
        MemoryDep('buf915', c0, {c0: 81920}),
        MemoryDep('buf916', c0, {c0: 5120})]
op917.met_dependencies = 
    [   MemoryDep('primals_603', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_607', c1, {c0: 4, c1: 1280})]
op917.outputs = [
    buf917: ComputedBuffer
    buf917.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf917.users = [
        NodeUser(node=SchedulerNode(name='op918'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op919'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op922'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op917.group.device = cuda:0
op917.group.iteration = (81920, 1)
op917.sizes = ([4, 1280, 16], [])
buf913_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_603_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf915_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf916_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_607_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf917_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op917_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf913', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_603', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf915', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf916', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_607', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf917', get_index_5, add_3, None)
        return store


op918: SchedulerNode(ComputedBuffer)
op918.writes = [MemoryDep('buf918', c0, {c0: 128})]
op918.unmet_dependencies = [MemoryDep('buf917', c0, {c0: 81920})]
op918.met_dependencies = []
op918.outputs = [
    buf918: ComputedBuffer
    buf918.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf918.users = [
        NodeUser(node=SchedulerNode(name='op922'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op918.group.device = cuda:0
op918.group.iteration = (128, 640)
op918.sizes = ([128], [640])
buf917_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf918_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op918_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf917', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf918', get_index_1, getitem)
        return store_reduction


op919: SchedulerNode(ComputedBuffer)
op919.writes = [MemoryDep('buf919', c0, {c0: 128})]
op919.unmet_dependencies = [MemoryDep('buf917', c0, {c0: 81920})]
op919.met_dependencies = []
op919.outputs = [
    buf919: ComputedBuffer
    buf919.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf919.users = [NodeUser(node=SchedulerNode(name='op921'), can_inplace=True, is_weak=False)]
]
op919.group.device = cuda:0
op919.group.iteration = (128, 640)
op919.sizes = ([128], [640])
buf917_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf919_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op919_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf917', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf919', get_index_1, getitem_1)
        return store_reduction


op921: SchedulerNode(ComputedBuffer)
op921.writes = [MemoryDep('buf921', c0, {c0: 128})]
op921.unmet_dependencies = [MemoryDep('buf919', c0, {c0: 128})]
op921.met_dependencies = []
op921.outputs = [
    buf921: ComputedBuffer
    buf921.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf921.users = [
        NodeUser(node=SchedulerNode(name='op922'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op921.group.device = cuda:0
op921.group.iteration = (128, 1)
op921.sizes = ([128], [])
buf919_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf921_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op921_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf919', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf921', get_index_1, rsqrt, None)
        return store


op922: SchedulerNode(ComputedBuffer)
op922.writes = [MemoryDep('buf922', c0, {c0: 81920})]
op922.unmet_dependencies = 
    [   MemoryDep('buf917', c0, {c0: 81920}),
        MemoryDep('buf918', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf921', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op922.met_dependencies = 
    [   MemoryDep('primals_608', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_609', c1, {c0: 4, c1: 1280})]
op922.outputs = [
    buf922: ComputedBuffer
    buf922.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf922.users = [NodeUser(node=SchedulerNode(name='op923'), can_inplace=True, is_weak=False)]
]
op922.group.device = cuda:0
op922.group.iteration = (81920, 1)
op922.sizes = ([4, 1280, 16], [])
buf917_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf918_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf921_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_608_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_609_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf922_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op922_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf917', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf918', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf921', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_608', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_609', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf922', get_index_5, add, None)
        return store


op923: SchedulerNode(ComputedBuffer)
op923.writes = [MemoryDep('buf923', c0, {c0: 81920})]
op923.unmet_dependencies = [MemoryDep('buf922', c0, {c0: 81920})]
op923.met_dependencies = []
op923.outputs = [
    buf923: ComputedBuffer
    buf923.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf923.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op924'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op925'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op923.group.device = cuda:0
op923.group.iteration = (81920, 1)
op923.sizes = ([81920], [])
buf922_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf923_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op923_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf922', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf922', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf923', get_index_2, mul, None)
        return store


op924: ExternKernelSchedulerNode(ExternKernelAlloc)
op924.writes = [StarDep(name='buf924', mode=None)]
op924.unmet_dependencies = [StarDep(name='buf923', mode=None)]
op924.met_dependencies = [StarDep(name='primals_610', mode=None)]
op924.outputs = [
    buf924: ExternKernelAlloc
    buf924.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf924.users = [NodeUser(node=SchedulerNode(name='op927'), can_inplace=True, is_weak=False)]
]
op924.node.kernel = extern_kernels.convolution


op925: ExternKernelSchedulerNode(ExternKernelAlloc)
op925.writes = [StarDep(name='buf925', mode=None)]
op925.unmet_dependencies = [StarDep(name='buf923', mode=None)]
op925.met_dependencies = [StarDep(name='primals_612', mode=None)]
op925.outputs = [
    buf925: ExternKernelAlloc
    buf925.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf925.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op926'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op925.node.kernel = extern_kernels.convolution


op926: ExternKernelSchedulerNode(ExternKernelAlloc)
op926.writes = [StarDep(name='buf926', mode=None)]
op926.unmet_dependencies = [StarDep(name='buf925', mode=None)]
op926.met_dependencies = [StarDep(name='primals_613', mode=None)]
op926.outputs = [
    buf926: ExternKernelAlloc
    buf926.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf926.users = [NodeUser(node=SchedulerNode(name='op927'), can_inplace=True, is_weak=False)]
]
op926.node.kernel = extern_kernels.convolution


op927: SchedulerNode(ComputedBuffer)
op927.writes = [MemoryDep('buf927', c0, {c0: 81920})]
op927.unmet_dependencies = 
    [   MemoryDep('buf906', c0, {c0: 81920}),
        MemoryDep('buf924', c0, {c0: 81920}),
        MemoryDep('buf926', c0, {c0: 81920})]
op927.met_dependencies = [MemoryDep('primals_611', c1, {c0: 4, c1: 1280})]
op927.outputs = [
    buf927: ComputedBuffer
    buf927.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf927.users = [
        NodeUser(node=SchedulerNode(name='op928'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op929'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op932'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op948'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1047'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op927.group.device = cuda:0
op927.group.iteration = (81920, 1)
op927.sizes = ([4, 1280, 16], [])
buf906_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf924_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_611_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf926_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf927_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op927_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf906', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf924', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_611', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf926', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf927', get_index_4, mul_1, None)
        return store


op928: SchedulerNode(ComputedBuffer)
op928.writes = [MemoryDep('buf928', c0, {c0: 128})]
op928.unmet_dependencies = [MemoryDep('buf927', c0, {c0: 81920})]
op928.met_dependencies = []
op928.outputs = [
    buf928: ComputedBuffer
    buf928.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf928.users = [
        NodeUser(node=SchedulerNode(name='op932'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op928.group.device = cuda:0
op928.group.iteration = (128, 640)
op928.sizes = ([128], [640])
buf927_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf928_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op928_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf927', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf928', get_index_1, getitem)
        return store_reduction


op929: SchedulerNode(ComputedBuffer)
op929.writes = [MemoryDep('buf929', c0, {c0: 128})]
op929.unmet_dependencies = [MemoryDep('buf927', c0, {c0: 81920})]
op929.met_dependencies = []
op929.outputs = [
    buf929: ComputedBuffer
    buf929.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf929.users = [NodeUser(node=SchedulerNode(name='op931'), can_inplace=True, is_weak=False)]
]
op929.group.device = cuda:0
op929.group.iteration = (128, 640)
op929.sizes = ([128], [640])
buf927_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf929_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op929_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf927', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf929', get_index_1, getitem_1)
        return store_reduction


op931: SchedulerNode(ComputedBuffer)
op931.writes = [MemoryDep('buf931', c0, {c0: 128})]
op931.unmet_dependencies = [MemoryDep('buf929', c0, {c0: 128})]
op931.met_dependencies = []
op931.outputs = [
    buf931: ComputedBuffer
    buf931.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf931.users = [
        NodeUser(node=SchedulerNode(name='op932'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op931.group.device = cuda:0
op931.group.iteration = (128, 1)
op931.sizes = ([128], [])
buf929_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf931_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op931_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf929', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf931', get_index_1, rsqrt, None)
        return store


op932: SchedulerNode(ComputedBuffer)
op932.writes = [MemoryDep('buf932', c0, {c0: 81920})]
op932.unmet_dependencies = 
    [   MemoryDep('buf927', c0, {c0: 81920}),
        MemoryDep('buf928', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf931', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op932.met_dependencies = 
    [   MemoryDep('primals_614', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_615', c1, {c0: 4, c1: 1280})]
op932.outputs = [
    buf932: ComputedBuffer
    buf932.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf932.users = [NodeUser(node=SchedulerNode(name='op933'), can_inplace=True, is_weak=False)]
]
op932.group.device = cuda:0
op932.group.iteration = (81920, 1)
op932.sizes = ([4, 1280, 16], [])
buf927_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf928_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf931_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_614_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_615_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf932_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op932_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf927', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf928', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf931', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_614', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_615', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf932', get_index_5, add, None)
        return store


op933: SchedulerNode(ComputedBuffer)
op933.writes = [MemoryDep('buf933', c0, {c0: 81920})]
op933.unmet_dependencies = [MemoryDep('buf932', c0, {c0: 81920})]
op933.met_dependencies = []
op933.outputs = [
    buf933: ComputedBuffer
    buf933.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf933.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op934'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op935'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op933.group.device = cuda:0
op933.group.iteration = (81920, 1)
op933.sizes = ([81920], [])
buf932_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf933_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op933_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf932', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf932', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf933', get_index_2, mul, None)
        return store


op934: ExternKernelSchedulerNode(ExternKernelAlloc)
op934.writes = [StarDep(name='buf934', mode=None)]
op934.unmet_dependencies = [StarDep(name='buf933', mode=None)]
op934.met_dependencies = [StarDep(name='primals_616', mode=None)]
op934.outputs = [
    buf934: ExternKernelAlloc
    buf934.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf934.users = [NodeUser(node=SchedulerNode(name='op938'), can_inplace=True, is_weak=False)]
]
op934.node.kernel = extern_kernels.convolution


op935: ExternKernelSchedulerNode(ExternKernelAlloc)
op935.writes = [StarDep(name='buf935', mode=None)]
op935.unmet_dependencies = [StarDep(name='buf933', mode=None)]
op935.met_dependencies = [StarDep(name='primals_618', mode=None)]
op935.outputs = [
    buf935: ExternKernelAlloc
    buf935.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf935.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op936'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op935.node.kernel = extern_kernels.convolution


op936: ExternKernelSchedulerNode(ExternKernelAlloc)
op936.writes = [StarDep(name='buf936', mode=None)]
op936.unmet_dependencies = [StarDep(name='buf935', mode=None)]
op936.met_dependencies = [StarDep(name='primals_619', mode=None)]
op936.outputs = [
    buf936: ExternKernelAlloc
    buf936.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf936.users = [NodeUser(node=SchedulerNode(name='op938'), can_inplace=True, is_weak=False)]
]
op936.node.kernel = extern_kernels.convolution


op937: ExternKernelSchedulerNode(ExternKernelOut)
op937.writes = [StarDep(name='buf937', mode=None)]
op937.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op937.met_dependencies = [StarDep(name='primals_620', mode=None)]
op937.outputs = [
    buf937: ExternKernelOut
    buf937.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf937.users = [NodeUser(node=SchedulerNode(name='op938'), can_inplace=False, is_weak=False)]
]
op937.node.kernel = extern_kernels.mm


op938: SchedulerNode(ComputedBuffer)
op938.writes = [MemoryDep('buf938', c0, {c0: 81920})]
op938.unmet_dependencies = 
    [   MemoryDep('buf934', c0, {c0: 81920}),
        MemoryDep('buf936', c0, {c0: 81920}),
        MemoryDep('buf937', c0, {c0: 5120})]
op938.met_dependencies = 
    [   MemoryDep('primals_617', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_621', c1, {c0: 4, c1: 1280})]
op938.outputs = [
    buf938: ComputedBuffer
    buf938.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf938.users = [
        NodeUser(node=SchedulerNode(name='op939'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op940'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op943'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op938.group.device = cuda:0
op938.group.iteration = (81920, 1)
op938.sizes = ([4, 1280, 16], [])
buf934_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_617_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf936_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf937_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_621_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf938_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op938_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf934', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_617', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf936', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf937', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_621', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf938', get_index_5, add_3, None)
        return store


op939: SchedulerNode(ComputedBuffer)
op939.writes = [MemoryDep('buf939', c0, {c0: 128})]
op939.unmet_dependencies = [MemoryDep('buf938', c0, {c0: 81920})]
op939.met_dependencies = []
op939.outputs = [
    buf939: ComputedBuffer
    buf939.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf939.users = [
        NodeUser(node=SchedulerNode(name='op943'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op939.group.device = cuda:0
op939.group.iteration = (128, 640)
op939.sizes = ([128], [640])
buf938_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf939_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op939_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf938', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf939', get_index_1, getitem)
        return store_reduction


op940: SchedulerNode(ComputedBuffer)
op940.writes = [MemoryDep('buf940', c0, {c0: 128})]
op940.unmet_dependencies = [MemoryDep('buf938', c0, {c0: 81920})]
op940.met_dependencies = []
op940.outputs = [
    buf940: ComputedBuffer
    buf940.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf940.users = [NodeUser(node=SchedulerNode(name='op942'), can_inplace=True, is_weak=False)]
]
op940.group.device = cuda:0
op940.group.iteration = (128, 640)
op940.sizes = ([128], [640])
buf938_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf940_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op940_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf938', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf940', get_index_1, getitem_1)
        return store_reduction


op942: SchedulerNode(ComputedBuffer)
op942.writes = [MemoryDep('buf942', c0, {c0: 128})]
op942.unmet_dependencies = [MemoryDep('buf940', c0, {c0: 128})]
op942.met_dependencies = []
op942.outputs = [
    buf942: ComputedBuffer
    buf942.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf942.users = [
        NodeUser(node=SchedulerNode(name='op943'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op942.group.device = cuda:0
op942.group.iteration = (128, 1)
op942.sizes = ([128], [])
buf940_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf942_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op942_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf940', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf942', get_index_1, rsqrt, None)
        return store


op943: SchedulerNode(ComputedBuffer)
op943.writes = [MemoryDep('buf943', c0, {c0: 81920})]
op943.unmet_dependencies = 
    [   MemoryDep('buf938', c0, {c0: 81920}),
        MemoryDep('buf939', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf942', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op943.met_dependencies = 
    [   MemoryDep('primals_622', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_623', c1, {c0: 4, c1: 1280})]
op943.outputs = [
    buf943: ComputedBuffer
    buf943.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf943.users = [NodeUser(node=SchedulerNode(name='op944'), can_inplace=True, is_weak=False)]
]
op943.group.device = cuda:0
op943.group.iteration = (81920, 1)
op943.sizes = ([4, 1280, 16], [])
buf938_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf939_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf942_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_622_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_623_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf943_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op943_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf938', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf939', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf942', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_622', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_623', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf943', get_index_5, add, None)
        return store


op944: SchedulerNode(ComputedBuffer)
op944.writes = [MemoryDep('buf944', c0, {c0: 81920})]
op944.unmet_dependencies = [MemoryDep('buf943', c0, {c0: 81920})]
op944.met_dependencies = []
op944.outputs = [
    buf944: ComputedBuffer
    buf944.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf944.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op945'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op946'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op944.group.device = cuda:0
op944.group.iteration = (81920, 1)
op944.sizes = ([81920], [])
buf943_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf944_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op944_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf943', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf943', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf944', get_index_2, mul, None)
        return store


op945: ExternKernelSchedulerNode(ExternKernelAlloc)
op945.writes = [StarDep(name='buf945', mode=None)]
op945.unmet_dependencies = [StarDep(name='buf944', mode=None)]
op945.met_dependencies = [StarDep(name='primals_624', mode=None)]
op945.outputs = [
    buf945: ExternKernelAlloc
    buf945.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf945.users = [NodeUser(node=SchedulerNode(name='op948'), can_inplace=True, is_weak=False)]
]
op945.node.kernel = extern_kernels.convolution


op946: ExternKernelSchedulerNode(ExternKernelAlloc)
op946.writes = [StarDep(name='buf946', mode=None)]
op946.unmet_dependencies = [StarDep(name='buf944', mode=None)]
op946.met_dependencies = [StarDep(name='primals_626', mode=None)]
op946.outputs = [
    buf946: ExternKernelAlloc
    buf946.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf946.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op947'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op946.node.kernel = extern_kernels.convolution


op947: ExternKernelSchedulerNode(ExternKernelAlloc)
op947.writes = [StarDep(name='buf947', mode=None)]
op947.unmet_dependencies = [StarDep(name='buf946', mode=None)]
op947.met_dependencies = [StarDep(name='primals_627', mode=None)]
op947.outputs = [
    buf947: ExternKernelAlloc
    buf947.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf947.users = [NodeUser(node=SchedulerNode(name='op948'), can_inplace=True, is_weak=False)]
]
op947.node.kernel = extern_kernels.convolution


op948: SchedulerNode(ComputedBuffer)
op948.writes = [MemoryDep('buf948', c0, {c0: 81920})]
op948.unmet_dependencies = 
    [   MemoryDep('buf927', c0, {c0: 81920}),
        MemoryDep('buf945', c0, {c0: 81920}),
        MemoryDep('buf947', c0, {c0: 81920})]
op948.met_dependencies = [MemoryDep('primals_625', c1, {c0: 4, c1: 1280})]
op948.outputs = [
    buf948: ComputedBuffer
    buf948.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf948.users = [
        NodeUser(node=SchedulerNode(name='op949'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op950'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op953'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1026'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op948.group.device = cuda:0
op948.group.iteration = (81920, 1)
op948.sizes = ([4, 1280, 16], [])
buf927_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf945_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_625_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf947_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf948_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op948_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf927', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf945', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_625', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf947', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf948', get_index_4, mul_1, None)
        return store


op949: SchedulerNode(ComputedBuffer)
op949.writes = [MemoryDep('buf949', c0, {c0: 128})]
op949.unmet_dependencies = [MemoryDep('buf948', c0, {c0: 81920})]
op949.met_dependencies = []
op949.outputs = [
    buf949: ComputedBuffer
    buf949.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf949.users = [
        NodeUser(node=SchedulerNode(name='op953'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op949.group.device = cuda:0
op949.group.iteration = (128, 640)
op949.sizes = ([128], [640])
buf948_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf949_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op949_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf948', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf949', get_index_1, getitem)
        return store_reduction


op950: SchedulerNode(ComputedBuffer)
op950.writes = [MemoryDep('buf950', c0, {c0: 128})]
op950.unmet_dependencies = [MemoryDep('buf948', c0, {c0: 81920})]
op950.met_dependencies = []
op950.outputs = [
    buf950: ComputedBuffer
    buf950.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf950.users = [
        NodeUser(node=SchedulerNode(name='op952'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op953'), can_inplace=False, is_weak=False),
    ]
]
op950.group.device = cuda:0
op950.group.iteration = (128, 640)
op950.sizes = ([128], [640])
buf948_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op950_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf948', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf950', get_index_1, getitem_1)
        return store_reduction


op952: SchedulerNode(ComputedBuffer)
op952.writes = [MemoryDep('buf952', c0, {c0: 128})]
op952.unmet_dependencies = [MemoryDep('buf950', c0, {c0: 128})]
op952.met_dependencies = []
op952.outputs = [
    buf952: ComputedBuffer
    buf952.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf952.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op952.group.device = cuda:0
op952.group.iteration = (128, 1)
op952.sizes = ([128], [])
buf950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf952_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op952_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf950', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf952', get_index_1, rsqrt, None)
        return store


op953: SchedulerNode(ComputedBuffer)
op953.writes = [MemoryDep('buf953', c0, {c0: 81920})]
op953.unmet_dependencies = 
    [   MemoryDep('buf948', c0, {c0: 81920}),
        MemoryDep('buf949', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf950', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op953.met_dependencies = 
    [   MemoryDep('primals_628', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_629', c1, {c0: 4, c1: 1280})]
op953.outputs = [
    buf953: ComputedBuffer
    buf953.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf953.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op954'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op955'), can_inplace=False, is_weak=False),
    ]
]
op953.group.device = cuda:0
op953.group.iteration = (81920, 1)
op953.sizes = ([4, 1280, 16], [])
buf948_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf949_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_628_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_629_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf953_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op953_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf948', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf949', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf950', get_index_2)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_628', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_629', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf953', get_index_5, add_1, None)
        return store


op954: ExternKernelSchedulerNode(ExternKernelOut)
op954.writes = [StarDep(name='buf954', mode=None)]
op954.unmet_dependencies = [StarDep(name='buf953', mode=None)]
op954.met_dependencies = [StarDep(name='primals_630', mode=None)]
op954.outputs = [
    buf954: ExternKernelOut
    buf954.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf954.users = [
        NodeUser(node=SchedulerNode(name='op958'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op959'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op961'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op983'), can_inplace=True, is_weak=False),
    ]
]
op954.node.kernel = extern_kernels.bmm


op955: SchedulerNode(ComputedBuffer)
op955.writes = [MemoryDep('buf955', c0, {c0: 81920})]
op955.unmet_dependencies = [MemoryDep('buf953', 20480*c0 + c1 + 16*c2, {c0: 4, c1: 16, c2: 1280})]
op955.met_dependencies = []
op955.outputs = [
    buf955: ComputedBuffer
    buf955.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf955.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op956'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op955.group.device = cuda:0
op955.group.iteration = (81920, 1)
op955.sizes = ([4, 16, 1280], [])
buf953_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf955_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op955_loop_body:
    var_ranges = {p0: 4, p1: 16, p2: 1280}
    index0 = 20480*p0 + p1 + 16*p2
    index1 = 20480*p0 + 1280*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf953', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf955', get_index_1, load, None)
        return store


op956: ExternKernelSchedulerNode(ExternKernelOut)
op956.writes = [StarDep(name='buf956', mode=None)]
op956.unmet_dependencies = [StarDep(name='buf955', mode=None)]
op956.met_dependencies = [StarDep(name='primals_632', mode=None)]
op956.outputs = [
    buf956: ExternKernelOut
    buf956.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf956.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op957'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op956.node.kernel = extern_kernels.mm


op957: ExternKernelSchedulerNode(ExternKernelOut)
op957.writes = [StarDep(name='buf957', mode=None)]
op957.unmet_dependencies = [StarDep(name='buf956', mode=None)]
op957.met_dependencies = [StarDep(name='primals_633', mode=None)]
op957.outputs = [
    buf957: ExternKernelOut
    buf957.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf957.users = [
        NodeUser(node=SchedulerNode(name='op958'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op959'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op961'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op983'), can_inplace=True, is_weak=False),
    ]
]
op957.node.kernel = extern_kernels.mm


op958: SchedulerNode(ComputedBuffer)
op958.writes = [MemoryDep('buf958', c0, {c0: 64})]
op958.unmet_dependencies = [MemoryDep('buf954', c0, {c0: 81920}), MemoryDep('buf957', c0, {c0: 81920})]
op958.met_dependencies = [MemoryDep('primals_631', c1, {c0: 64, c1: 1280})]
op958.outputs = [
    buf958: ComputedBuffer
    buf958.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
    buf958.users = [NodeUser(node=SchedulerNode(name='op961'), can_inplace=False, is_weak=False)]
]
op958.group.device = cuda:0
op958.group.iteration = (64, 1280)
op958.sizes = ([64], [1280])
buf954_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_631_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf957_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf958_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
class op958_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf954', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_631', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf957', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf958', get_index_3, getitem)
        return store_reduction


op959: SchedulerNode(ComputedBuffer)
op959.writes = [MemoryDep('buf959', c0, {c0: 64})]
op959.unmet_dependencies = [MemoryDep('buf954', c0, {c0: 81920}), MemoryDep('buf957', c0, {c0: 81920})]
op959.met_dependencies = [MemoryDep('primals_631', c1, {c0: 64, c1: 1280})]
op959.outputs = [
    buf959: ComputedBuffer
    buf959.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
    buf959.users = [
        NodeUser(node=SchedulerNode(name='op961'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2092'), can_inplace=True, is_weak=False),
    ]
]
op959.group.device = cuda:0
op959.group.iteration = (64, 1280)
op959.sizes = ([64], [1280])
buf954_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_631_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf957_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf959_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
class op959_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf954', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_631', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf957', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf959', get_index_3, getitem_1)
        return store_reduction


op961: SchedulerNode(ComputedBuffer)
op961.writes = [MemoryDep('buf961', c0, {c0: 81920})]
op961.unmet_dependencies = 
    [   MemoryDep('buf954', c0, {c0: 81920}),
        MemoryDep('buf957', c0, {c0: 81920}),
        MemoryDep('buf958', c0, {c0: 64}),
        MemoryDep('buf959', c0, {c0: 64})]
op961.met_dependencies = [MemoryDep('primals_631', c1, {c0: 64, c1: 1280})]
op961.outputs = [
    buf961: ComputedBuffer
    buf961.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf961.users = [
        NodeUser(node=SchedulerNode(name='op962'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op961.group.device = cuda:0
op961.group.iteration = (81920, 1)
op961.sizes = ([64, 1280], [])
buf954_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_631_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf957_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf958_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf959_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf961_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op961_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf954', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_631', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf957', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf958', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf959', get_index_4)
        constant_1 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf961', get_index_5, mul_1, None)
        return store


op962: SchedulerNode(ComputedBuffer)
op962.writes = [MemoryDep('buf962', c0, {c0: 81920})]
op962.unmet_dependencies = [MemoryDep('buf961', c0, {c0: 81920})]
op962.met_dependencies = 
    [   MemoryDep('primals_634', c1, {c0: 64, c1: 1280}),
        MemoryDep('primals_635', c1, {c0: 64, c1: 1280})]
op962.outputs = [
    buf962: ComputedBuffer
    buf962.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf962.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op963'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op964'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op966'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op967'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op969'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op970'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op962.group.device = cuda:0
op962.group.iteration = (81920, 1)
op962.sizes = ([64, 1280], [])
buf961_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_634_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_635_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf962_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op962_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf961', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_634', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_635', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf962', get_index_3, add, None)
        return store


op963: ExternKernelSchedulerNode(ExternKernelOut)
op963.writes = [StarDep(name='buf963', mode=None)]
op963.unmet_dependencies = [StarDep(name='buf962', mode=None)]
op963.met_dependencies = [StarDep(name='primals_636', mode=None)]
op963.outputs = [
    buf963: ExternKernelOut
    buf963.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf963.users = [NodeUser(node=SchedulerNode(name='op972'), can_inplace=True, is_weak=False)]
]
op963.node.kernel = extern_kernels.mm


op964: ExternKernelSchedulerNode(ExternKernelOut)
op964.writes = [StarDep(name='buf964', mode=None)]
op964.unmet_dependencies = [StarDep(name='buf962', mode=None)]
op964.met_dependencies = [StarDep(name='primals_637', mode=None)]
op964.outputs = [
    buf964: ExternKernelOut
    buf964.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf964.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op965'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op964.node.kernel = extern_kernels.mm


op965: ExternKernelSchedulerNode(ExternKernelOut)
op965.writes = [StarDep(name='buf965', mode=None)]
op965.unmet_dependencies = [StarDep(name='buf964', mode=None)]
op965.met_dependencies = [StarDep(name='primals_638', mode=None)]
op965.outputs = [
    buf965: ExternKernelOut
    buf965.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf965.users = [NodeUser(node=SchedulerNode(name='op972'), can_inplace=True, is_weak=False)]
]
op965.node.kernel = extern_kernels.mm


op966: ExternKernelSchedulerNode(ExternKernelOut)
op966.writes = [StarDep(name='buf966', mode=None)]
op966.unmet_dependencies = [StarDep(name='buf962', mode=None)]
op966.met_dependencies = [StarDep(name='primals_639', mode=None)]
op966.outputs = [
    buf966: ExternKernelOut
    buf966.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf966.users = [NodeUser(node=SchedulerNode(name='op973'), can_inplace=True, is_weak=False)]
]
op966.node.kernel = extern_kernels.mm


op967: ExternKernelSchedulerNode(ExternKernelOut)
op967.writes = [StarDep(name='buf967', mode=None)]
op967.unmet_dependencies = [StarDep(name='buf962', mode=None)]
op967.met_dependencies = [StarDep(name='primals_640', mode=None)]
op967.outputs = [
    buf967: ExternKernelOut
    buf967.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf967.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op968'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op967.node.kernel = extern_kernels.mm


op968: ExternKernelSchedulerNode(ExternKernelOut)
op968.writes = [StarDep(name='buf968', mode=None)]
op968.unmet_dependencies = [StarDep(name='buf967', mode=None)]
op968.met_dependencies = [StarDep(name='primals_641', mode=None)]
op968.outputs = [
    buf968: ExternKernelOut
    buf968.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf968.users = [NodeUser(node=SchedulerNode(name='op973'), can_inplace=True, is_weak=False)]
]
op968.node.kernel = extern_kernels.mm


op969: ExternKernelSchedulerNode(ExternKernelOut)
op969.writes = [StarDep(name='buf969', mode=None)]
op969.unmet_dependencies = [StarDep(name='buf962', mode=None)]
op969.met_dependencies = [StarDep(name='primals_642', mode=None)]
op969.outputs = [
    buf969: ExternKernelOut
    buf969.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf969.users = [NodeUser(node=SchedulerNode(name='op974'), can_inplace=True, is_weak=False)]
]
op969.node.kernel = extern_kernels.mm


op970: ExternKernelSchedulerNode(ExternKernelOut)
op970.writes = [StarDep(name='buf970', mode=None)]
op970.unmet_dependencies = [StarDep(name='buf962', mode=None)]
op970.met_dependencies = [StarDep(name='primals_643', mode=None)]
op970.outputs = [
    buf970: ExternKernelOut
    buf970.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf970.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op971'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op970.node.kernel = extern_kernels.mm


op971: ExternKernelSchedulerNode(ExternKernelOut)
op971.writes = [StarDep(name='buf971', mode=None)]
op971.unmet_dependencies = [StarDep(name='buf970', mode=None)]
op971.met_dependencies = [StarDep(name='primals_644', mode=None)]
op971.outputs = [
    buf971: ExternKernelOut
    buf971.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf971.users = [NodeUser(node=SchedulerNode(name='op974'), can_inplace=True, is_weak=False)]
]
op971.node.kernel = extern_kernels.mm


op972: SchedulerNode(ComputedBuffer)
op972.writes = [MemoryDep('buf972', c0, {c0: 81920})]
op972.unmet_dependencies = [MemoryDep('buf963', c0, {c0: 81920}), MemoryDep('buf965', c0, {c0: 81920})]
op972.met_dependencies = []
op972.outputs = [
    buf972: ComputedBuffer
    buf972.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf972.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op975'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op972.group.device = cuda:0
op972.group.iteration = (81920, 1)
op972.sizes = ([81920], [])
buf963_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf965_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf972_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op972_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf963', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf965', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf972', get_index_2, add, None)
        return store


op973: SchedulerNode(ComputedBuffer)
op973.writes = [MemoryDep('buf973', c0, {c0: 81920})]
op973.unmet_dependencies = [MemoryDep('buf966', c0, {c0: 81920}), MemoryDep('buf968', c0, {c0: 81920})]
op973.met_dependencies = []
op973.outputs = [
    buf973: ComputedBuffer
    buf973.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf973.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op975'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op973.group.device = cuda:0
op973.group.iteration = (81920, 1)
op973.sizes = ([81920], [])
buf966_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf968_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf973_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op973_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf966', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf968', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf973', get_index_2, add, None)
        return store


op974: SchedulerNode(ComputedBuffer)
op974.writes = [MemoryDep('buf974', c0, {c0: 81920})]
op974.unmet_dependencies = [MemoryDep('buf969', c0, {c0: 81920}), MemoryDep('buf971', c0, {c0: 81920})]
op974.met_dependencies = []
op974.outputs = [
    buf974: ComputedBuffer
    buf974.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf974.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op975'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op974.group.device = cuda:0
op974.group.iteration = (81920, 1)
op974.sizes = ([81920], [])
buf969_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf971_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf974_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op974_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf969', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf971', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf974', get_index_2, add, None)
        return store


op975: ExternKernelSchedulerNode(FallbackKernel)
op975.writes = [StarDep(name='buf975', mode=None)]
op975.unmet_dependencies = 
    [   StarDep(name='buf972', mode=None),
        StarDep(name='buf973', mode=None),
        StarDep(name='buf974', mode=None)]
op975.met_dependencies = []
op975.outputs = [
    buf975: FallbackKernel
    buf975.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf975.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op976'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op977'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op978'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op979'), can_inplace=False, is_weak=False),
    ]
]
op975.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op976: ExternKernelSchedulerNode(MultiOutput)
op976.writes = [StarDep(name='buf976', mode=None)]
op976.unmet_dependencies = [StarDep(name='buf975', mode=None)]
op976.met_dependencies = []
op976.outputs = [
    buf976: MultiOutput
    buf976.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 16, 64], stride=[20480, 64, 1280, 1])
    buf976.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op980'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op981'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op976.node.kernel = None


op977: ExternKernelSchedulerNode(MultiOutput)
op977.writes = [StarDep(name='buf977', mode=None)]
op977.unmet_dependencies = [StarDep(name='buf975', mode=None)]
op977.met_dependencies = []
op977.outputs = [
    buf977: MultiOutput
    buf977.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 32], stride=[640, 32, 1])
    buf977.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op977.node.kernel = None


op978: ExternKernelSchedulerNode(MultiOutput)
op978.writes = [StarDep(name='buf978', mode=None)]
op978.unmet_dependencies = [StarDep(name='buf975', mode=None)]
op978.met_dependencies = []
op978.outputs = [
    buf978: MultiOutput
    buf978.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf978.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op978.node.kernel = None


op979: ExternKernelSchedulerNode(MultiOutput)
op979.writes = [StarDep(name='buf979', mode=None)]
op979.unmet_dependencies = [StarDep(name='buf975', mode=None)]
op979.met_dependencies = []
op979.outputs = [
    buf979: MultiOutput
    buf979.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf979.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op979.node.kernel = None


op980: ExternKernelSchedulerNode(ExternKernelOut)
op980.writes = [StarDep(name='buf980', mode=None)]
op980.unmet_dependencies = [StarDep(name='buf976', mode=None)]
op980.met_dependencies = [StarDep(name='primals_645', mode=None)]
op980.outputs = [
    buf980: ExternKernelOut
    buf980.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf980.users = [NodeUser(node=SchedulerNode(name='op983'), can_inplace=True, is_weak=False)]
]
op980.node.kernel = extern_kernels.mm


op981: ExternKernelSchedulerNode(ExternKernelOut)
op981.writes = [StarDep(name='buf981', mode=None)]
op981.unmet_dependencies = [StarDep(name='buf976', mode=None)]
op981.met_dependencies = [StarDep(name='primals_647', mode=None)]
op981.outputs = [
    buf981: ExternKernelOut
    buf981.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf981.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op982'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op981.node.kernel = extern_kernels.mm


op982: ExternKernelSchedulerNode(ExternKernelOut)
op982.writes = [StarDep(name='buf982', mode=None)]
op982.unmet_dependencies = [StarDep(name='buf981', mode=None)]
op982.met_dependencies = [StarDep(name='primals_648', mode=None)]
op982.outputs = [
    buf982: ExternKernelOut
    buf982.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf982.users = [NodeUser(node=SchedulerNode(name='op983'), can_inplace=True, is_weak=False)]
]
op982.node.kernel = extern_kernels.mm


op983: SchedulerNode(ComputedBuffer)
op983.writes = [MemoryDep('buf983', c0, {c0: 81920})]
op983.unmet_dependencies = 
    [   MemoryDep('buf954', c0, {c0: 81920}),
        MemoryDep('buf957', c0, {c0: 81920}),
        MemoryDep('buf980', c0, {c0: 81920}),
        MemoryDep('buf982', c0, {c0: 81920})]
op983.met_dependencies = 
    [   MemoryDep('primals_631', c1, {c0: 64, c1: 1280}),
        MemoryDep('primals_646', c1, {c0: 64, c1: 1280})]
op983.outputs = [
    buf983: ComputedBuffer
    buf983.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf983.users = [
        NodeUser(node=SchedulerNode(name='op984'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op985'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op987'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1009'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1010'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1012'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1022'), can_inplace=True, is_weak=False),
    ]
]
op983.group.device = cuda:0
op983.group.iteration = (81920, 1)
op983.sizes = ([64, 1280], [])
buf980_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_646_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf982_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf954_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_631_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf957_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op983_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf980', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_646', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf982', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf954', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_631', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf957', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf983', get_index_6, add_4, None)
        return store


op984: SchedulerNode(ComputedBuffer)
op984.writes = [MemoryDep('buf984', c0, {c0: 64})]
op984.unmet_dependencies = [MemoryDep('buf983', c0, {c0: 81920})]
op984.met_dependencies = []
op984.outputs = [
    buf984: ComputedBuffer
    buf984.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
    buf984.users = [NodeUser(node=SchedulerNode(name='op987'), can_inplace=False, is_weak=False)]
]
op984.group.device = cuda:0
op984.group.iteration = (64, 1280)
op984.sizes = ([64], [1280])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf984_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
class op984_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf983', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf984', get_index_1, getitem)
        return store_reduction


op985: SchedulerNode(ComputedBuffer)
op985.writes = [MemoryDep('buf985', c0, {c0: 64})]
op985.unmet_dependencies = [MemoryDep('buf983', c0, {c0: 81920})]
op985.met_dependencies = []
op985.outputs = [
    buf985: ComputedBuffer
    buf985.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
    buf985.users = [
        NodeUser(node=SchedulerNode(name='op987'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2091'), can_inplace=True, is_weak=False),
    ]
]
op985.group.device = cuda:0
op985.group.iteration = (64, 1280)
op985.sizes = ([64], [1280])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf985_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
class op985_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf983', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf985', get_index_1, getitem_1)
        return store_reduction


op987: SchedulerNode(ComputedBuffer)
op987.writes = [MemoryDep('buf987', c0, {c0: 81920})]
op987.unmet_dependencies = 
    [   MemoryDep('buf983', c0, {c0: 81920}),
        MemoryDep('buf984', c0, {c0: 64}),
        MemoryDep('buf985', c0, {c0: 64})]
op987.met_dependencies = []
op987.outputs = [
    buf987: ComputedBuffer
    buf987.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf987.users = [
        NodeUser(node=SchedulerNode(name='op988'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op987.group.device = cuda:0
op987.group.iteration = (81920, 1)
op987.sizes = ([64, 1280], [])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf984_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf985_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf987_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op987_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf983', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf984', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf985', get_index_2)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf987', get_index_3, mul, None)
        return store


op988: SchedulerNode(ComputedBuffer)
op988.writes = [MemoryDep('buf988', c0, {c0: 81920})]
op988.unmet_dependencies = [MemoryDep('buf987', c0, {c0: 81920})]
op988.met_dependencies = 
    [   MemoryDep('primals_649', c1, {c0: 64, c1: 1280}),
        MemoryDep('primals_650', c1, {c0: 64, c1: 1280})]
op988.outputs = [
    buf988: ComputedBuffer
    buf988.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf988.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op989'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op990'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op988.group.device = cuda:0
op988.group.iteration = (81920, 1)
op988.sizes = ([64, 1280], [])
buf987_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_649_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_650_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf988_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op988_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf987', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_649', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_650', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf988', get_index_3, add, None)
        return store


op989: ExternKernelSchedulerNode(ExternKernelOut)
op989.writes = [StarDep(name='buf989', mode=None)]
op989.unmet_dependencies = [StarDep(name='buf988', mode=None)]
op989.met_dependencies = [StarDep(name='primals_651', mode=None)]
op989.outputs = [
    buf989: ExternKernelOut
    buf989.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf989.users = [NodeUser(node=SchedulerNode(name='op998'), can_inplace=True, is_weak=False)]
]
op989.node.kernel = extern_kernels.mm


op990: ExternKernelSchedulerNode(ExternKernelOut)
op990.writes = [StarDep(name='buf990', mode=None)]
op990.unmet_dependencies = [StarDep(name='buf988', mode=None)]
op990.met_dependencies = [StarDep(name='primals_652', mode=None)]
op990.outputs = [
    buf990: ExternKernelOut
    buf990.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf990.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op991'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op990.node.kernel = extern_kernels.mm


op991: ExternKernelSchedulerNode(ExternKernelOut)
op991.writes = [StarDep(name='buf991', mode=None)]
op991.unmet_dependencies = [StarDep(name='buf990', mode=None)]
op991.met_dependencies = [StarDep(name='primals_653', mode=None)]
op991.outputs = [
    buf991: ExternKernelOut
    buf991.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf991.users = [NodeUser(node=SchedulerNode(name='op998'), can_inplace=True, is_weak=False)]
]
op991.node.kernel = extern_kernels.mm


op992: ExternKernelSchedulerNode(ExternKernelOut)
op992.writes = [StarDep(name='buf992', mode=None)]
op992.unmet_dependencies = []
op992.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_654', mode=None)]
op992.outputs = [
    buf992: ExternKernelOut
    buf992.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf992.users = [NodeUser(node=SchedulerNode(name='op999'), can_inplace=True, is_weak=False)]
]
op992.node.kernel = extern_kernels.mm


op993: ExternKernelSchedulerNode(ExternKernelOut)
op993.writes = [StarDep(name='buf993', mode=None)]
op993.unmet_dependencies = []
op993.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_655', mode=None)]
op993.outputs = [
    buf993: ExternKernelOut
    buf993.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf993.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op994'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op993.node.kernel = extern_kernels.mm


op994: ExternKernelSchedulerNode(ExternKernelOut)
op994.writes = [StarDep(name='buf994', mode=None)]
op994.unmet_dependencies = [StarDep(name='buf993', mode=None)]
op994.met_dependencies = [StarDep(name='primals_656', mode=None)]
op994.outputs = [
    buf994: ExternKernelOut
    buf994.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf994.users = [NodeUser(node=SchedulerNode(name='op999'), can_inplace=True, is_weak=False)]
]
op994.node.kernel = extern_kernels.mm


op995: ExternKernelSchedulerNode(ExternKernelOut)
op995.writes = [StarDep(name='buf995', mode=None)]
op995.unmet_dependencies = []
op995.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_657', mode=None)]
op995.outputs = [
    buf995: ExternKernelOut
    buf995.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf995.users = [NodeUser(node=SchedulerNode(name='op1000'), can_inplace=True, is_weak=False)]
]
op995.node.kernel = extern_kernels.mm


op996: ExternKernelSchedulerNode(ExternKernelOut)
op996.writes = [StarDep(name='buf996', mode=None)]
op996.unmet_dependencies = []
op996.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_658', mode=None)]
op996.outputs = [
    buf996: ExternKernelOut
    buf996.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf996.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op997'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op996.node.kernel = extern_kernels.mm


op997: ExternKernelSchedulerNode(ExternKernelOut)
op997.writes = [StarDep(name='buf997', mode=None)]
op997.unmet_dependencies = [StarDep(name='buf996', mode=None)]
op997.met_dependencies = [StarDep(name='primals_659', mode=None)]
op997.outputs = [
    buf997: ExternKernelOut
    buf997.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf997.users = [NodeUser(node=SchedulerNode(name='op1000'), can_inplace=True, is_weak=False)]
]
op997.node.kernel = extern_kernels.mm


op998: SchedulerNode(ComputedBuffer)
op998.writes = [MemoryDep('buf998', c0, {c0: 81920})]
op998.unmet_dependencies = [MemoryDep('buf989', c0, {c0: 81920}), MemoryDep('buf991', c0, {c0: 81920})]
op998.met_dependencies = []
op998.outputs = [
    buf998: ComputedBuffer
    buf998.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf998.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1001'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op998.group.device = cuda:0
op998.group.iteration = (81920, 1)
op998.sizes = ([81920], [])
buf989_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf991_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf998_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op998_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf989', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf991', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf998', get_index_2, add, None)
        return store


op999: SchedulerNode(ComputedBuffer)
op999.writes = [MemoryDep('buf999', c0, {c0: 394240})]
op999.unmet_dependencies = [MemoryDep('buf992', c0, {c0: 394240}), MemoryDep('buf994', c0, {c0: 394240})]
op999.met_dependencies = []
op999.outputs = [
    buf999: ComputedBuffer
    buf999.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf999.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1001'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op999.group.device = cuda:0
op999.group.iteration = (394240, 1)
op999.sizes = ([394240], [])
buf992_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf994_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf999_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op999_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf992', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf994', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf999', get_index_2, add, None)
        return store


op1000: SchedulerNode(ComputedBuffer)
op1000.writes = [MemoryDep('buf1000', c0, {c0: 394240})]
op1000.unmet_dependencies = [MemoryDep('buf995', c0, {c0: 394240}), MemoryDep('buf997', c0, {c0: 394240})]
op1000.met_dependencies = []
op1000.outputs = [
    buf1000: ComputedBuffer
    buf1000.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1000.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1001'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1000.group.device = cuda:0
op1000.group.iteration = (394240, 1)
op1000.sizes = ([394240], [])
buf995_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf997_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1000_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1000_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf995', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf997', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1000', get_index_2, add, None)
        return store


op1001: ExternKernelSchedulerNode(FallbackKernel)
op1001.writes = [StarDep(name='buf1001', mode=None)]
op1001.unmet_dependencies = 
    [   StarDep(name='buf1000', mode=None),
        StarDep(name='buf998', mode=None),
        StarDep(name='buf999', mode=None)]
op1001.met_dependencies = []
op1001.outputs = [
    buf1001: FallbackKernel
    buf1001.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1001.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1002'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1003'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1004'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1005'), can_inplace=False, is_weak=False),
    ]
]
op1001.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1002: ExternKernelSchedulerNode(MultiOutput)
op1002.writes = [StarDep(name='buf1002', mode=None)]
op1002.unmet_dependencies = [StarDep(name='buf1001', mode=None)]
op1002.met_dependencies = []
op1002.outputs = [
    buf1002: MultiOutput
    buf1002.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 16, 64], stride=[20480, 64, 1280, 1])
    buf1002.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1006'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1007'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1002.node.kernel = None


op1003: ExternKernelSchedulerNode(MultiOutput)
op1003.writes = [StarDep(name='buf1003', mode=None)]
op1003.unmet_dependencies = [StarDep(name='buf1001', mode=None)]
op1003.met_dependencies = []
op1003.outputs = [
    buf1003: MultiOutput
    buf1003.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 32], stride=[640, 32, 1])
    buf1003.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1003.node.kernel = None


op1004: ExternKernelSchedulerNode(MultiOutput)
op1004.writes = [StarDep(name='buf1004', mode=None)]
op1004.unmet_dependencies = [StarDep(name='buf1001', mode=None)]
op1004.met_dependencies = []
op1004.outputs = [
    buf1004: MultiOutput
    buf1004.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1004.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1004.node.kernel = None


op1005: ExternKernelSchedulerNode(MultiOutput)
op1005.writes = [StarDep(name='buf1005', mode=None)]
op1005.unmet_dependencies = [StarDep(name='buf1001', mode=None)]
op1005.met_dependencies = []
op1005.outputs = [
    buf1005: MultiOutput
    buf1005.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1005.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1005.node.kernel = None


op1006: ExternKernelSchedulerNode(ExternKernelOut)
op1006.writes = [StarDep(name='buf1006', mode=None)]
op1006.unmet_dependencies = [StarDep(name='buf1002', mode=None)]
op1006.met_dependencies = [StarDep(name='primals_660', mode=None)]
op1006.outputs = [
    buf1006: ExternKernelOut
    buf1006.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf1006.users = [
        NodeUser(node=SchedulerNode(name='op1009'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1010'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1012'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1022'), can_inplace=True, is_weak=False),
    ]
]
op1006.node.kernel = extern_kernels.mm


op1007: ExternKernelSchedulerNode(ExternKernelOut)
op1007.writes = [StarDep(name='buf1007', mode=None)]
op1007.unmet_dependencies = [StarDep(name='buf1002', mode=None)]
op1007.met_dependencies = [StarDep(name='primals_662', mode=None)]
op1007.outputs = [
    buf1007: ExternKernelOut
    buf1007.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf1007.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1008'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1007.node.kernel = extern_kernels.mm


op1008: ExternKernelSchedulerNode(ExternKernelOut)
op1008.writes = [StarDep(name='buf1008', mode=None)]
op1008.unmet_dependencies = [StarDep(name='buf1007', mode=None)]
op1008.met_dependencies = [StarDep(name='primals_663', mode=None)]
op1008.outputs = [
    buf1008: ExternKernelOut
    buf1008.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf1008.users = [
        NodeUser(node=SchedulerNode(name='op1009'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1010'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1012'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1022'), can_inplace=True, is_weak=False),
    ]
]
op1008.node.kernel = extern_kernels.mm


op1009: SchedulerNode(ComputedBuffer)
op1009.writes = [MemoryDep('buf1009', c0, {c0: 64})]
op1009.unmet_dependencies = 
    [   MemoryDep('buf1006', c0, {c0: 81920}),
        MemoryDep('buf1008', c0, {c0: 81920}),
        MemoryDep('buf983', c0, {c0: 81920})]
op1009.met_dependencies = [MemoryDep('primals_661', c1, {c0: 64, c1: 1280})]
op1009.outputs = [
    buf1009: ComputedBuffer
    buf1009.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
    buf1009.users = [NodeUser(node=SchedulerNode(name='op1012'), can_inplace=False, is_weak=False)]
]
op1009.group.device = cuda:0
op1009.group.iteration = (64, 1280)
op1009.sizes = ([64], [1280])
buf1006_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_661_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1008_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf1009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
class op1009_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1006', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_661', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1008', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf983', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1009', get_index_4, getitem)
        return store_reduction


op1010: SchedulerNode(ComputedBuffer)
op1010.writes = [MemoryDep('buf1010', c0, {c0: 64})]
op1010.unmet_dependencies = 
    [   MemoryDep('buf1006', c0, {c0: 81920}),
        MemoryDep('buf1008', c0, {c0: 81920}),
        MemoryDep('buf983', c0, {c0: 81920})]
op1010.met_dependencies = [MemoryDep('primals_661', c1, {c0: 64, c1: 1280})]
op1010.outputs = [
    buf1010: ComputedBuffer
    buf1010.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
    buf1010.users = [
        NodeUser(node=SchedulerNode(name='op1012'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2090'), can_inplace=True, is_weak=False),
    ]
]
op1010.group.device = cuda:0
op1010.group.iteration = (64, 1280)
op1010.sizes = ([64], [1280])
buf1006_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_661_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1008_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf1010_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
class op1010_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1006', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_661', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1008', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf983', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1010', get_index_4, getitem_1)
        return store_reduction


op1012: SchedulerNode(ComputedBuffer)
op1012.writes = [MemoryDep('buf1012', c0, {c0: 81920})]
op1012.unmet_dependencies = 
    [   MemoryDep('buf1006', c0, {c0: 81920}),
        MemoryDep('buf1008', c0, {c0: 81920}),
        MemoryDep('buf1009', c0, {c0: 64}),
        MemoryDep('buf1010', c0, {c0: 64}),
        MemoryDep('buf983', c0, {c0: 81920})]
op1012.met_dependencies = [MemoryDep('primals_661', c1, {c0: 64, c1: 1280})]
op1012.outputs = [
    buf1012: ComputedBuffer
    buf1012.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf1012.users = [
        NodeUser(node=SchedulerNode(name='op1013'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1012.group.device = cuda:0
op1012.group.iteration = (81920, 1)
op1012.sizes = ([64, 1280], [])
buf1006_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_661_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1008_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf1009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf1010_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf1012_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op1012_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1006', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_661', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1008', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf983', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1009', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1010', get_index_5)
        constant_2 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1012', get_index_6, mul_2, None)
        return store


op1013: SchedulerNode(ComputedBuffer)
op1013.writes = [MemoryDep('buf1013', c0, {c0: 81920})]
op1013.unmet_dependencies = [MemoryDep('buf1012', c0, {c0: 81920})]
op1013.met_dependencies = 
    [   MemoryDep('primals_664', c1, {c0: 64, c1: 1280}),
        MemoryDep('primals_665', c1, {c0: 64, c1: 1280})]
op1013.outputs = [
    buf1013: ComputedBuffer
    buf1013.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf1013.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1014'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1015'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1013.group.device = cuda:0
op1013.group.iteration = (81920, 1)
op1013.sizes = ([64, 1280], [])
buf1012_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
primals_664_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_665_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1013_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op1013_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1012', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_664', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_665', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1013', get_index_3, add, None)
        return store


op1014: ExternKernelSchedulerNode(ExternKernelOut)
op1014.writes = [StarDep(name='buf1014', mode=None)]
op1014.unmet_dependencies = [StarDep(name='buf1013', mode=None)]
op1014.met_dependencies = [StarDep(name='primals_666', mode=None)]
op1014.outputs = [
    buf1014: ExternKernelOut
    buf1014.layout = FixedLayout('cuda:0', torch.float32, size=[64, 10240], stride=[10240, 1])
    buf1014.users = [NodeUser(node=SchedulerNode(name='op1017'), can_inplace=True, is_weak=False)]
]
op1014.node.kernel = extern_kernels.mm


op1015: ExternKernelSchedulerNode(ExternKernelOut)
op1015.writes = [StarDep(name='buf1015', mode=None)]
op1015.unmet_dependencies = [StarDep(name='buf1013', mode=None)]
op1015.met_dependencies = [StarDep(name='primals_668', mode=None)]
op1015.outputs = [
    buf1015: ExternKernelOut
    buf1015.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf1015.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1016'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1015.node.kernel = extern_kernels.mm


op1016: ExternKernelSchedulerNode(ExternKernelOut)
op1016.writes = [StarDep(name='buf1016', mode=None)]
op1016.unmet_dependencies = [StarDep(name='buf1015', mode=None)]
op1016.met_dependencies = [StarDep(name='primals_669', mode=None)]
op1016.outputs = [
    buf1016: ExternKernelOut
    buf1016.layout = FixedLayout('cuda:0', torch.float32, size=[64, 10240], stride=[10240, 1])
    buf1016.users = [NodeUser(node=SchedulerNode(name='op1017'), can_inplace=True, is_weak=False)]
]
op1016.node.kernel = extern_kernels.mm


op1017: SchedulerNode(ComputedBuffer)
op1017.writes = [MemoryDep('buf1017', c0, {c0: 655360})]
op1017.unmet_dependencies = [MemoryDep('buf1014', c0, {c0: 655360}), MemoryDep('buf1016', c0, {c0: 655360})]
op1017.met_dependencies = [MemoryDep('primals_667', c1, {c0: 64, c1: 10240})]
op1017.outputs = [
    buf1017: ComputedBuffer
    buf1017.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 10240], stride=[163840, 10240, 1])
    buf1017.users = [
        NodeUser(node=SchedulerNode(name='op1018'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1017.group.device = cuda:0
op1017.group.iteration = (655360, 1)
op1017.sizes = ([64, 10240], [])
buf1014_layout = FixedLayout('cuda:0', torch.float32, size=[64, 10240], stride=[10240, 1])
primals_667_layout = FixedLayout('cuda:0', torch.float32, size=[10240], stride=[1])
buf1016_layout = FixedLayout('cuda:0', torch.float32, size=[64, 10240], stride=[10240, 1])
buf1017_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 10240], stride=[163840, 10240, 1])
class op1017_loop_body:
    var_ranges = {p0: 64, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1014', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_667', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1016', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1017', get_index_3, add_1, None)
        return store


op1018: SchedulerNode(ComputedBuffer)
op1018.writes = [MemoryDep('buf1018', c0, {c0: 327680})]
op1018.unmet_dependencies = 
    [   MemoryDep('buf1017', 10240*c0 + c1 + 5120, {c0: 64, c1: 5120}),
        MemoryDep('buf1017', 10240*c0 + c1, {c0: 64, c1: 5120})]
op1018.met_dependencies = []
op1018.outputs = [
    buf1018: ComputedBuffer
    buf1018.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 5120], stride=[81920, 5120, 1])
    buf1018.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1019'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1020'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1018.group.device = cuda:0
op1018.group.iteration = (327680, 1)
op1018.sizes = ([64, 5120], [])
buf1017_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 10240], stride=[163840, 10240, 1])
buf1017_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 10240], stride=[163840, 10240, 1])
buf1018_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 5120], stride=[81920, 5120, 1])
class op1018_loop_body:
    var_ranges = {p0: 64, p1: 5120}
    index0 = 10240*p0 + p1
    index1 = 10240*p0 + p1 + 5120
    index2 = 5120*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1017', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1017', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1017', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1018', get_index_3, mul_3, None)
        return store


op1019: ExternKernelSchedulerNode(ExternKernelOut)
op1019.writes = [StarDep(name='buf1019', mode=None)]
op1019.unmet_dependencies = [StarDep(name='buf1018', mode=None)]
op1019.met_dependencies = [StarDep(name='primals_670', mode=None)]
op1019.outputs = [
    buf1019: ExternKernelOut
    buf1019.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf1019.users = [NodeUser(node=SchedulerNode(name='op1022'), can_inplace=True, is_weak=False)]
]
op1019.node.kernel = extern_kernels.mm


op1020: ExternKernelSchedulerNode(ExternKernelOut)
op1020.writes = [StarDep(name='buf1020', mode=None)]
op1020.unmet_dependencies = [StarDep(name='buf1018', mode=None)]
op1020.met_dependencies = [StarDep(name='primals_672', mode=None)]
op1020.outputs = [
    buf1020: ExternKernelOut
    buf1020.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf1020.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1021'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1020.node.kernel = extern_kernels.mm


op1021: ExternKernelSchedulerNode(ExternKernelOut)
op1021.writes = [StarDep(name='buf1021', mode=None)]
op1021.unmet_dependencies = [StarDep(name='buf1020', mode=None)]
op1021.met_dependencies = [StarDep(name='primals_673', mode=None)]
op1021.outputs = [
    buf1021: ExternKernelOut
    buf1021.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf1021.users = [NodeUser(node=SchedulerNode(name='op1022'), can_inplace=True, is_weak=False)]
]
op1021.node.kernel = extern_kernels.mm


op1022: SchedulerNode(ComputedBuffer)
op1022.writes = [MemoryDep('buf1022', c0, {c0: 81920})]
op1022.unmet_dependencies = 
    [   MemoryDep('buf1006', c0, {c0: 81920}),
        MemoryDep('buf1008', c0, {c0: 81920}),
        MemoryDep('buf1019', c0, {c0: 81920}),
        MemoryDep('buf1021', c0, {c0: 81920}),
        MemoryDep('buf983', c0, {c0: 81920})]
op1022.met_dependencies = 
    [   MemoryDep('primals_661', c1, {c0: 64, c1: 1280}),
        MemoryDep('primals_671', c1, {c0: 64, c1: 1280})]
op1022.outputs = [
    buf1022: ComputedBuffer
    buf1022.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
    buf1022.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1023'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1024'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1022.group.device = cuda:0
op1022.group.iteration = (81920, 1)
op1022.sizes = ([64, 1280], [])
buf1019_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_671_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1021_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf1006_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_661_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1008_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf983_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
buf1022_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1280], stride=[20480, 1280, 1])
class op1022_loop_body:
    var_ranges = {p0: 64, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1019', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_671', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1021', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1006', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_661', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1008', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf983', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1022', get_index_7, add_5, None)
        return store


op1023: ExternKernelSchedulerNode(ExternKernelOut)
op1023.writes = [StarDep(name='buf1023', mode=None)]
op1023.unmet_dependencies = [StarDep(name='buf1022', mode=None)]
op1023.met_dependencies = [StarDep(name='primals_674', mode=None)]
op1023.outputs = [
    buf1023: ExternKernelOut
    buf1023.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf1023.users = [NodeUser(node=SchedulerNode(name='op1026'), can_inplace=False, is_weak=False)]
]
op1023.node.kernel = extern_kernels.mm


op1024: ExternKernelSchedulerNode(ExternKernelOut)
op1024.writes = [StarDep(name='buf1024', mode=None)]
op1024.unmet_dependencies = [StarDep(name='buf1022', mode=None)]
op1024.met_dependencies = [StarDep(name='primals_676', mode=None)]
op1024.outputs = [
    buf1024: ExternKernelOut
    buf1024.layout = FixedLayout('cuda:0', torch.float32, size=[64, 80], stride=[80, 1])
    buf1024.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1025'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1024.node.kernel = extern_kernels.mm


op1025: ExternKernelSchedulerNode(ExternKernelOut)
op1025.writes = [StarDep(name='buf1025', mode=None)]
op1025.unmet_dependencies = [StarDep(name='buf1024', mode=None)]
op1025.met_dependencies = [StarDep(name='primals_677', mode=None)]
op1025.outputs = [
    buf1025: ExternKernelOut
    buf1025.layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
    buf1025.users = [NodeUser(node=SchedulerNode(name='op1026'), can_inplace=False, is_weak=False)]
]
op1025.node.kernel = extern_kernels.mm


op1026: SchedulerNode(ComputedBuffer)
op1026.writes = [MemoryDep('buf1026', c0, {c0: 81920})]
op1026.unmet_dependencies = 
    [   MemoryDep('buf1023', 20480*c0 + c1 + 1280*c2, {c0: 4, c1: 1280, c2: 16}),
        MemoryDep('buf1025', 20480*c0 + c1 + 1280*c2, {c0: 4, c1: 1280, c2: 16}),
        MemoryDep('buf948', c0, {c0: 81920})]
op1026.met_dependencies = [MemoryDep('primals_675', c1, {c0: 4, c1: 1280})]
op1026.outputs = [
    buf1026: ComputedBuffer
    buf1026.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1026.users = [
        NodeUser(node=SchedulerNode(name='op1027'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1028'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1031'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1047'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1026.group.device = cuda:0
op1026.group.iteration = (81920, 1)
op1026.sizes = ([4, 1280, 16], [])
buf1023_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
primals_675_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1025_layout = FixedLayout('cuda:0', torch.float32, size=[64, 1280], stride=[1280, 1])
buf948_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1026_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1026_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + p1 + 1280*p2
    index1 = p1
    index2 = 20480*p0 + 16*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1023', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_675', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1025', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf948', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf1026', get_index_4, add_2, None)
        return store


op1027: SchedulerNode(ComputedBuffer)
op1027.writes = [MemoryDep('buf1027', c0, {c0: 128})]
op1027.unmet_dependencies = [MemoryDep('buf1026', c0, {c0: 81920})]
op1027.met_dependencies = []
op1027.outputs = [
    buf1027: ComputedBuffer
    buf1027.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1027.users = [
        NodeUser(node=SchedulerNode(name='op1031'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1027.group.device = cuda:0
op1027.group.iteration = (128, 640)
op1027.sizes = ([128], [640])
buf1026_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1027_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1027_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1026', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1027', get_index_1, getitem)
        return store_reduction


op1028: SchedulerNode(ComputedBuffer)
op1028.writes = [MemoryDep('buf1028', c0, {c0: 128})]
op1028.unmet_dependencies = [MemoryDep('buf1026', c0, {c0: 81920})]
op1028.met_dependencies = []
op1028.outputs = [
    buf1028: ComputedBuffer
    buf1028.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1028.users = [NodeUser(node=SchedulerNode(name='op1030'), can_inplace=True, is_weak=False)]
]
op1028.group.device = cuda:0
op1028.group.iteration = (128, 640)
op1028.sizes = ([128], [640])
buf1026_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1028_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1028_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1026', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1028', get_index_1, getitem_1)
        return store_reduction


op1030: SchedulerNode(ComputedBuffer)
op1030.writes = [MemoryDep('buf1030', c0, {c0: 128})]
op1030.unmet_dependencies = [MemoryDep('buf1028', c0, {c0: 128})]
op1030.met_dependencies = []
op1030.outputs = [
    buf1030: ComputedBuffer
    buf1030.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1030.users = [
        NodeUser(node=SchedulerNode(name='op1031'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1030.group.device = cuda:0
op1030.group.iteration = (128, 1)
op1030.sizes = ([128], [])
buf1028_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1030_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1030_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1028', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1030', get_index_1, rsqrt, None)
        return store


op1031: SchedulerNode(ComputedBuffer)
op1031.writes = [MemoryDep('buf1031', c0, {c0: 81920})]
op1031.unmet_dependencies = 
    [   MemoryDep('buf1026', c0, {c0: 81920}),
        MemoryDep('buf1027', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1030', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1031.met_dependencies = 
    [   MemoryDep('primals_678', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_679', c1, {c0: 4, c1: 1280})]
op1031.outputs = [
    buf1031: ComputedBuffer
    buf1031.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1031.users = [NodeUser(node=SchedulerNode(name='op1032'), can_inplace=True, is_weak=False)]
]
op1031.group.device = cuda:0
op1031.group.iteration = (81920, 1)
op1031.sizes = ([4, 1280, 16], [])
buf1026_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1027_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1030_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_678_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_679_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1031_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1031_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1026', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1027', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1030', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_678', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_679', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1031', get_index_5, add, None)
        return store


op1032: SchedulerNode(ComputedBuffer)
op1032.writes = [MemoryDep('buf1032', c0, {c0: 81920})]
op1032.unmet_dependencies = [MemoryDep('buf1031', c0, {c0: 81920})]
op1032.met_dependencies = []
op1032.outputs = [
    buf1032: ComputedBuffer
    buf1032.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1032.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1033'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1034'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1032.group.device = cuda:0
op1032.group.iteration = (81920, 1)
op1032.sizes = ([81920], [])
buf1031_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1032_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1032_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1031', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1031', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1032', get_index_2, mul, None)
        return store


op1033: ExternKernelSchedulerNode(ExternKernelAlloc)
op1033.writes = [StarDep(name='buf1033', mode=None)]
op1033.unmet_dependencies = [StarDep(name='buf1032', mode=None)]
op1033.met_dependencies = [StarDep(name='primals_680', mode=None)]
op1033.outputs = [
    buf1033: ExternKernelAlloc
    buf1033.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1033.users = [NodeUser(node=SchedulerNode(name='op1037'), can_inplace=True, is_weak=False)]
]
op1033.node.kernel = extern_kernels.convolution


op1034: ExternKernelSchedulerNode(ExternKernelAlloc)
op1034.writes = [StarDep(name='buf1034', mode=None)]
op1034.unmet_dependencies = [StarDep(name='buf1032', mode=None)]
op1034.met_dependencies = [StarDep(name='primals_682', mode=None)]
op1034.outputs = [
    buf1034: ExternKernelAlloc
    buf1034.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1034.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1035'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1034.node.kernel = extern_kernels.convolution


op1035: ExternKernelSchedulerNode(ExternKernelAlloc)
op1035.writes = [StarDep(name='buf1035', mode=None)]
op1035.unmet_dependencies = [StarDep(name='buf1034', mode=None)]
op1035.met_dependencies = [StarDep(name='primals_683', mode=None)]
op1035.outputs = [
    buf1035: ExternKernelAlloc
    buf1035.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1035.users = [NodeUser(node=SchedulerNode(name='op1037'), can_inplace=True, is_weak=False)]
]
op1035.node.kernel = extern_kernels.convolution


op1036: ExternKernelSchedulerNode(ExternKernelOut)
op1036.writes = [StarDep(name='buf1036', mode=None)]
op1036.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1036.met_dependencies = [StarDep(name='primals_684', mode=None)]
op1036.outputs = [
    buf1036: ExternKernelOut
    buf1036.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1036.users = [NodeUser(node=SchedulerNode(name='op1037'), can_inplace=False, is_weak=False)]
]
op1036.node.kernel = extern_kernels.mm


op1037: SchedulerNode(ComputedBuffer)
op1037.writes = [MemoryDep('buf1037', c0, {c0: 81920})]
op1037.unmet_dependencies = 
    [   MemoryDep('buf1033', c0, {c0: 81920}),
        MemoryDep('buf1035', c0, {c0: 81920}),
        MemoryDep('buf1036', c0, {c0: 5120})]
op1037.met_dependencies = 
    [   MemoryDep('primals_681', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_685', c1, {c0: 4, c1: 1280})]
op1037.outputs = [
    buf1037: ComputedBuffer
    buf1037.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1037.users = [
        NodeUser(node=SchedulerNode(name='op1038'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1039'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1042'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1037.group.device = cuda:0
op1037.group.iteration = (81920, 1)
op1037.sizes = ([4, 1280, 16], [])
buf1033_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_681_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1035_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1036_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_685_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1037_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1037_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1033', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_681', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1035', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1036', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_685', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1037', get_index_5, add_3, None)
        return store


op1038: SchedulerNode(ComputedBuffer)
op1038.writes = [MemoryDep('buf1038', c0, {c0: 128})]
op1038.unmet_dependencies = [MemoryDep('buf1037', c0, {c0: 81920})]
op1038.met_dependencies = []
op1038.outputs = [
    buf1038: ComputedBuffer
    buf1038.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1038.users = [
        NodeUser(node=SchedulerNode(name='op1042'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1038.group.device = cuda:0
op1038.group.iteration = (128, 640)
op1038.sizes = ([128], [640])
buf1037_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1038_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1038_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1037', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1038', get_index_1, getitem)
        return store_reduction


op1039: SchedulerNode(ComputedBuffer)
op1039.writes = [MemoryDep('buf1039', c0, {c0: 128})]
op1039.unmet_dependencies = [MemoryDep('buf1037', c0, {c0: 81920})]
op1039.met_dependencies = []
op1039.outputs = [
    buf1039: ComputedBuffer
    buf1039.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1039.users = [NodeUser(node=SchedulerNode(name='op1041'), can_inplace=True, is_weak=False)]
]
op1039.group.device = cuda:0
op1039.group.iteration = (128, 640)
op1039.sizes = ([128], [640])
buf1037_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1039_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1039_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1037', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1039', get_index_1, getitem_1)
        return store_reduction


op1041: SchedulerNode(ComputedBuffer)
op1041.writes = [MemoryDep('buf1041', c0, {c0: 128})]
op1041.unmet_dependencies = [MemoryDep('buf1039', c0, {c0: 128})]
op1041.met_dependencies = []
op1041.outputs = [
    buf1041: ComputedBuffer
    buf1041.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1041.users = [
        NodeUser(node=SchedulerNode(name='op1042'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1041.group.device = cuda:0
op1041.group.iteration = (128, 1)
op1041.sizes = ([128], [])
buf1039_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1041_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1041_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1039', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1041', get_index_1, rsqrt, None)
        return store


op1042: SchedulerNode(ComputedBuffer)
op1042.writes = [MemoryDep('buf1042', c0, {c0: 81920})]
op1042.unmet_dependencies = 
    [   MemoryDep('buf1037', c0, {c0: 81920}),
        MemoryDep('buf1038', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1041', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1042.met_dependencies = 
    [   MemoryDep('primals_686', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_687', c1, {c0: 4, c1: 1280})]
op1042.outputs = [
    buf1042: ComputedBuffer
    buf1042.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1042.users = [NodeUser(node=SchedulerNode(name='op1043'), can_inplace=True, is_weak=False)]
]
op1042.group.device = cuda:0
op1042.group.iteration = (81920, 1)
op1042.sizes = ([4, 1280, 16], [])
buf1037_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1038_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1041_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_686_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_687_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1042_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1042_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1037', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1038', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1041', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_686', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_687', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1042', get_index_5, add, None)
        return store


op1043: SchedulerNode(ComputedBuffer)
op1043.writes = [MemoryDep('buf1043', c0, {c0: 81920})]
op1043.unmet_dependencies = [MemoryDep('buf1042', c0, {c0: 81920})]
op1043.met_dependencies = []
op1043.outputs = [
    buf1043: ComputedBuffer
    buf1043.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1043.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1044'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1045'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1043.group.device = cuda:0
op1043.group.iteration = (81920, 1)
op1043.sizes = ([81920], [])
buf1042_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1043_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1043_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1042', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1042', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1043', get_index_2, mul, None)
        return store


op1044: ExternKernelSchedulerNode(ExternKernelAlloc)
op1044.writes = [StarDep(name='buf1044', mode=None)]
op1044.unmet_dependencies = [StarDep(name='buf1043', mode=None)]
op1044.met_dependencies = [StarDep(name='primals_688', mode=None)]
op1044.outputs = [
    buf1044: ExternKernelAlloc
    buf1044.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1044.users = [NodeUser(node=SchedulerNode(name='op1047'), can_inplace=False, is_weak=False)]
]
op1044.node.kernel = extern_kernels.convolution


op1045: ExternKernelSchedulerNode(ExternKernelAlloc)
op1045.writes = [StarDep(name='buf1045', mode=None)]
op1045.unmet_dependencies = [StarDep(name='buf1043', mode=None)]
op1045.met_dependencies = [StarDep(name='primals_690', mode=None)]
op1045.outputs = [
    buf1045: ExternKernelAlloc
    buf1045.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1045.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1046'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1045.node.kernel = extern_kernels.convolution


op1046: ExternKernelSchedulerNode(ExternKernelAlloc)
op1046.writes = [StarDep(name='buf1046', mode=None)]
op1046.unmet_dependencies = [StarDep(name='buf1045', mode=None)]
op1046.met_dependencies = [StarDep(name='primals_691', mode=None)]
op1046.outputs = [
    buf1046: ExternKernelAlloc
    buf1046.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1046.users = [NodeUser(node=SchedulerNode(name='op1047'), can_inplace=False, is_weak=False)]
]
op1046.node.kernel = extern_kernels.convolution


op1047: SchedulerNode(ComputedBuffer)
op1047.writes = [MemoryDep('buf1047', c0, {c0: 163840})]
op1047.unmet_dependencies = 
    [   MemoryDep('buf1026', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1044', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1046', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf927', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16})]
op1047.met_dependencies = [MemoryDep('primals_689', I, {c0: 4, c1: 2560})]
op1047.outputs = [
    buf1047: ComputedBuffer
    buf1047.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1047.users = [
        NodeUser(node=SchedulerNode(name='op1048'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1049'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1052'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1068'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1069'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1047.group.device = cuda:0
op1047.group.iteration = (163840, 1)
op1047.sizes = ([4, 2560, 16], [])
buf1026_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1044_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_689_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1046_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf927_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1047_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1047_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 16}
    index0 = p1
    index1 = 20480*p0 + p2 + 16*(I)
    index2 = I
    index3 = 20480*p0 + p2 + 16*(I)
    index4 = 40960*p0 + 16*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2560, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1047', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1026', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1044', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_689', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1046', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_3, constant)
        add_1 = ops.add(add, mul)
        add_2 = ops.add(load, add_1)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_2, constant_1)
        return mul_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf927', get_index)
        return load


op1048: SchedulerNode(ComputedBuffer)
op1048.writes = [MemoryDep('buf1048', c0, {c0: 128})]
op1048.unmet_dependencies = [MemoryDep('buf1047', c0, {c0: 163840})]
op1048.met_dependencies = []
op1048.outputs = [
    buf1048: ComputedBuffer
    buf1048.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1048.users = [
        NodeUser(node=SchedulerNode(name='op1052'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1048.group.device = cuda:0
op1048.group.iteration = (128, 1280)
op1048.sizes = ([128], [1280])
buf1047_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1048_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1048_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1047', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1048', get_index_1, getitem)
        return store_reduction


op1049: SchedulerNode(ComputedBuffer)
op1049.writes = [MemoryDep('buf1049', c0, {c0: 128})]
op1049.unmet_dependencies = [MemoryDep('buf1047', c0, {c0: 163840})]
op1049.met_dependencies = []
op1049.outputs = [
    buf1049: ComputedBuffer
    buf1049.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1049.users = [NodeUser(node=SchedulerNode(name='op1051'), can_inplace=True, is_weak=False)]
]
op1049.group.device = cuda:0
op1049.group.iteration = (128, 1280)
op1049.sizes = ([128], [1280])
buf1047_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1049_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1049_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1047', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1049', get_index_1, getitem_1)
        return store_reduction


op1051: SchedulerNode(ComputedBuffer)
op1051.writes = [MemoryDep('buf1051', c0, {c0: 128})]
op1051.unmet_dependencies = [MemoryDep('buf1049', c0, {c0: 128})]
op1051.met_dependencies = []
op1051.outputs = [
    buf1051: ComputedBuffer
    buf1051.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1051.users = [
        NodeUser(node=SchedulerNode(name='op1052'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1051.group.device = cuda:0
op1051.group.iteration = (128, 1)
op1051.sizes = ([128], [])
buf1049_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1051_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1051_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1049', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1051', get_index_1, rsqrt, None)
        return store


op1052: SchedulerNode(ComputedBuffer)
op1052.writes = [MemoryDep('buf1052', c0, {c0: 163840})]
op1052.unmet_dependencies = 
    [   MemoryDep('buf1047', c0, {c0: 163840}),
        MemoryDep('buf1048', 32*c0 + ((c1//80)), {c0: 4, c1: 2560}),
        MemoryDep('buf1051', 32*c0 + ((c1//80)), {c0: 4, c1: 2560})]
op1052.met_dependencies = 
    [   MemoryDep('primals_692', c1, {c0: 4, c1: 2560}),
        MemoryDep('primals_693', c1, {c0: 4, c1: 2560})]
op1052.outputs = [
    buf1052: ComputedBuffer
    buf1052.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1052.users = [NodeUser(node=SchedulerNode(name='op1053'), can_inplace=True, is_weak=False)]
]
op1052.group.device = cuda:0
op1052.group.iteration = (163840, 1)
op1052.sizes = ([4, 2560, 16], [])
buf1047_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1048_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1051_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_692_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
primals_693_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1052_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1052_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 16}
    index0 = 40960*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//80))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1047', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1048', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1051', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_692', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_693', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1052', get_index_5, add, None)
        return store


op1053: SchedulerNode(ComputedBuffer)
op1053.writes = [MemoryDep('buf1053', c0, {c0: 163840})]
op1053.unmet_dependencies = [MemoryDep('buf1052', c0, {c0: 163840})]
op1053.met_dependencies = []
op1053.outputs = [
    buf1053: ComputedBuffer
    buf1053.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1053.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1054'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1055'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1053.group.device = cuda:0
op1053.group.iteration = (163840, 1)
op1053.sizes = ([163840], [])
buf1052_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1053_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1053_loop_body:
    var_ranges = {p0: 163840}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1052', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1052', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1053', get_index_2, mul, None)
        return store


op1054: ExternKernelSchedulerNode(ExternKernelAlloc)
op1054.writes = [StarDep(name='buf1054', mode=None)]
op1054.unmet_dependencies = [StarDep(name='buf1053', mode=None)]
op1054.met_dependencies = [StarDep(name='primals_694', mode=None)]
op1054.outputs = [
    buf1054: ExternKernelAlloc
    buf1054.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1054.users = [NodeUser(node=SchedulerNode(name='op1058'), can_inplace=True, is_weak=False)]
]
op1054.node.kernel = extern_kernels.convolution


op1055: ExternKernelSchedulerNode(ExternKernelAlloc)
op1055.writes = [StarDep(name='buf1055', mode=None)]
op1055.unmet_dependencies = [StarDep(name='buf1053', mode=None)]
op1055.met_dependencies = [StarDep(name='primals_696', mode=None)]
op1055.outputs = [
    buf1055: ExternKernelAlloc
    buf1055.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1055.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1056'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1055.node.kernel = extern_kernels.convolution


op1056: ExternKernelSchedulerNode(ExternKernelAlloc)
op1056.writes = [StarDep(name='buf1056', mode=None)]
op1056.unmet_dependencies = [StarDep(name='buf1055', mode=None)]
op1056.met_dependencies = [StarDep(name='primals_697', mode=None)]
op1056.outputs = [
    buf1056: ExternKernelAlloc
    buf1056.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1056.users = [NodeUser(node=SchedulerNode(name='op1058'), can_inplace=True, is_weak=False)]
]
op1056.node.kernel = extern_kernels.convolution


op1057: ExternKernelSchedulerNode(ExternKernelOut)
op1057.writes = [StarDep(name='buf1057', mode=None)]
op1057.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1057.met_dependencies = [StarDep(name='primals_698', mode=None)]
op1057.outputs = [
    buf1057: ExternKernelOut
    buf1057.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1057.users = [NodeUser(node=SchedulerNode(name='op1058'), can_inplace=False, is_weak=False)]
]
op1057.node.kernel = extern_kernels.mm


op1058: SchedulerNode(ComputedBuffer)
op1058.writes = [MemoryDep('buf1058', c0, {c0: 81920})]
op1058.unmet_dependencies = 
    [   MemoryDep('buf1054', c0, {c0: 81920}),
        MemoryDep('buf1056', c0, {c0: 81920}),
        MemoryDep('buf1057', c0, {c0: 5120})]
op1058.met_dependencies = 
    [   MemoryDep('primals_695', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_699', c1, {c0: 4, c1: 1280})]
op1058.outputs = [
    buf1058: ComputedBuffer
    buf1058.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1058.users = [
        NodeUser(node=SchedulerNode(name='op1059'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1060'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1063'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1058.group.device = cuda:0
op1058.group.iteration = (81920, 1)
op1058.sizes = ([4, 1280, 16], [])
buf1054_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_695_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1056_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1057_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_699_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1058_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1058_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1054', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_695', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1056', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1057', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_699', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1058', get_index_5, add_3, None)
        return store


op1059: SchedulerNode(ComputedBuffer)
op1059.writes = [MemoryDep('buf1059', c0, {c0: 128})]
op1059.unmet_dependencies = [MemoryDep('buf1058', c0, {c0: 81920})]
op1059.met_dependencies = []
op1059.outputs = [
    buf1059: ComputedBuffer
    buf1059.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1059.users = [
        NodeUser(node=SchedulerNode(name='op1063'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1059.group.device = cuda:0
op1059.group.iteration = (128, 640)
op1059.sizes = ([128], [640])
buf1058_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1059_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1059_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1058', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1059', get_index_1, getitem)
        return store_reduction


op1060: SchedulerNode(ComputedBuffer)
op1060.writes = [MemoryDep('buf1060', c0, {c0: 128})]
op1060.unmet_dependencies = [MemoryDep('buf1058', c0, {c0: 81920})]
op1060.met_dependencies = []
op1060.outputs = [
    buf1060: ComputedBuffer
    buf1060.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1060.users = [NodeUser(node=SchedulerNode(name='op1062'), can_inplace=True, is_weak=False)]
]
op1060.group.device = cuda:0
op1060.group.iteration = (128, 640)
op1060.sizes = ([128], [640])
buf1058_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1060_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1060_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1058', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1060', get_index_1, getitem_1)
        return store_reduction


op1062: SchedulerNode(ComputedBuffer)
op1062.writes = [MemoryDep('buf1062', c0, {c0: 128})]
op1062.unmet_dependencies = [MemoryDep('buf1060', c0, {c0: 128})]
op1062.met_dependencies = []
op1062.outputs = [
    buf1062: ComputedBuffer
    buf1062.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1062.users = [
        NodeUser(node=SchedulerNode(name='op1063'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1062.group.device = cuda:0
op1062.group.iteration = (128, 1)
op1062.sizes = ([128], [])
buf1060_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1062_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1062_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1060', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1062', get_index_1, rsqrt, None)
        return store


op1063: SchedulerNode(ComputedBuffer)
op1063.writes = [MemoryDep('buf1063', c0, {c0: 81920})]
op1063.unmet_dependencies = 
    [   MemoryDep('buf1058', c0, {c0: 81920}),
        MemoryDep('buf1059', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1062', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1063.met_dependencies = 
    [   MemoryDep('primals_700', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_701', c1, {c0: 4, c1: 1280})]
op1063.outputs = [
    buf1063: ComputedBuffer
    buf1063.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1063.users = [NodeUser(node=SchedulerNode(name='op1064'), can_inplace=True, is_weak=False)]
]
op1063.group.device = cuda:0
op1063.group.iteration = (81920, 1)
op1063.sizes = ([4, 1280, 16], [])
buf1058_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1059_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1062_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_700_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_701_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1063_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1063_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1058', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1059', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1062', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_700', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_701', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1063', get_index_5, add, None)
        return store


op1064: SchedulerNode(ComputedBuffer)
op1064.writes = [MemoryDep('buf1064', c0, {c0: 81920})]
op1064.unmet_dependencies = [MemoryDep('buf1063', c0, {c0: 81920})]
op1064.met_dependencies = []
op1064.outputs = [
    buf1064: ComputedBuffer
    buf1064.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1064.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1065'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1066'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1064.group.device = cuda:0
op1064.group.iteration = (81920, 1)
op1064.sizes = ([81920], [])
buf1063_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1064_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1064_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1063', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1063', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1064', get_index_2, mul, None)
        return store


op1065: ExternKernelSchedulerNode(ExternKernelAlloc)
op1065.writes = [StarDep(name='buf1065', mode=None)]
op1065.unmet_dependencies = [StarDep(name='buf1064', mode=None)]
op1065.met_dependencies = [StarDep(name='primals_702', mode=None)]
op1065.outputs = [
    buf1065: ExternKernelAlloc
    buf1065.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1065.users = [NodeUser(node=SchedulerNode(name='op1071'), can_inplace=False, is_weak=False)]
]
op1065.node.kernel = extern_kernels.convolution


op1066: ExternKernelSchedulerNode(ExternKernelAlloc)
op1066.writes = [StarDep(name='buf1066', mode=None)]
op1066.unmet_dependencies = [StarDep(name='buf1064', mode=None)]
op1066.met_dependencies = [StarDep(name='primals_704', mode=None)]
op1066.outputs = [
    buf1066: ExternKernelAlloc
    buf1066.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1066.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1067'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1066.node.kernel = extern_kernels.convolution


op1067: ExternKernelSchedulerNode(ExternKernelAlloc)
op1067.writes = [StarDep(name='buf1067', mode=None)]
op1067.unmet_dependencies = [StarDep(name='buf1066', mode=None)]
op1067.met_dependencies = [StarDep(name='primals_705', mode=None)]
op1067.outputs = [
    buf1067: ExternKernelAlloc
    buf1067.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1067.users = [NodeUser(node=SchedulerNode(name='op1071'), can_inplace=False, is_weak=False)]
]
op1067.node.kernel = extern_kernels.convolution


op1068: ExternKernelSchedulerNode(ExternKernelAlloc)
op1068.writes = [StarDep(name='buf1068', mode=None)]
op1068.unmet_dependencies = [StarDep(name='buf1047', mode=None)]
op1068.met_dependencies = [StarDep(name='primals_706', mode=None)]
op1068.outputs = [
    buf1068: ExternKernelAlloc
    buf1068.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1068.users = [NodeUser(node=SchedulerNode(name='op1071'), can_inplace=False, is_weak=False)]
]
op1068.node.kernel = extern_kernels.convolution


op1069: ExternKernelSchedulerNode(ExternKernelAlloc)
op1069.writes = [StarDep(name='buf1069', mode=None)]
op1069.unmet_dependencies = [StarDep(name='buf1047', mode=None)]
op1069.met_dependencies = [StarDep(name='primals_708', mode=None)]
op1069.outputs = [
    buf1069: ExternKernelAlloc
    buf1069.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1069.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1070'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1069.node.kernel = extern_kernels.convolution


op1070: ExternKernelSchedulerNode(ExternKernelAlloc)
op1070.writes = [StarDep(name='buf1070', mode=None)]
op1070.unmet_dependencies = [StarDep(name='buf1069', mode=None)]
op1070.met_dependencies = [StarDep(name='primals_709', mode=None)]
op1070.outputs = [
    buf1070: ExternKernelAlloc
    buf1070.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1070.users = [NodeUser(node=SchedulerNode(name='op1071'), can_inplace=False, is_weak=False)]
]
op1070.node.kernel = extern_kernels.convolution


op1071: SchedulerNode(ComputedBuffer)
op1071.writes = [MemoryDep('buf1071', c0, {c0: 163840})]
op1071.unmet_dependencies = 
    [   MemoryDep('buf1065', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1067', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1068', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1070', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf906', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16})]
op1071.met_dependencies = 
    [   MemoryDep('primals_703', I, {c0: 4, c1: 2560}),
        MemoryDep('primals_707', I, {c0: 4, c1: 2560})]
op1071.outputs = [
    buf1071: ComputedBuffer
    buf1071.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1071.users = [
        NodeUser(node=SchedulerNode(name='op1072'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1073'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1076'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1092'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1093'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1071.group.device = cuda:0
op1071.group.iteration = (163840, 1)
op1071.sizes = ([4, 2560, 16], [])
buf1068_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_707_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1070_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1065_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_703_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1067_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf906_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1071_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1071_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 16}
    index0 = p1
    index1 = 20480*p0 + p2 + 16*(I)
    index2 = I
    index3 = 20480*p0 + p2 + 16*(I)
    index4 = 40960*p0 + 16*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2560, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1071', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1068', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_707', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1070', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1065', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_703', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1067', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        return mul_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf906', get_index)
        return load


op1072: SchedulerNode(ComputedBuffer)
op1072.writes = [MemoryDep('buf1072', c0, {c0: 128})]
op1072.unmet_dependencies = [MemoryDep('buf1071', c0, {c0: 163840})]
op1072.met_dependencies = []
op1072.outputs = [
    buf1072: ComputedBuffer
    buf1072.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1072.users = [
        NodeUser(node=SchedulerNode(name='op1076'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1072.group.device = cuda:0
op1072.group.iteration = (128, 1280)
op1072.sizes = ([128], [1280])
buf1071_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1072_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1072_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1071', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1072', get_index_1, getitem)
        return store_reduction


op1073: SchedulerNode(ComputedBuffer)
op1073.writes = [MemoryDep('buf1073', c0, {c0: 128})]
op1073.unmet_dependencies = [MemoryDep('buf1071', c0, {c0: 163840})]
op1073.met_dependencies = []
op1073.outputs = [
    buf1073: ComputedBuffer
    buf1073.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1073.users = [NodeUser(node=SchedulerNode(name='op1075'), can_inplace=True, is_weak=False)]
]
op1073.group.device = cuda:0
op1073.group.iteration = (128, 1280)
op1073.sizes = ([128], [1280])
buf1071_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1073_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1073_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1071', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1073', get_index_1, getitem_1)
        return store_reduction


op1075: SchedulerNode(ComputedBuffer)
op1075.writes = [MemoryDep('buf1075', c0, {c0: 128})]
op1075.unmet_dependencies = [MemoryDep('buf1073', c0, {c0: 128})]
op1075.met_dependencies = []
op1075.outputs = [
    buf1075: ComputedBuffer
    buf1075.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1075.users = [
        NodeUser(node=SchedulerNode(name='op1076'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1075.group.device = cuda:0
op1075.group.iteration = (128, 1)
op1075.sizes = ([128], [])
buf1073_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1075_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1075_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1073', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1075', get_index_1, rsqrt, None)
        return store


op1076: SchedulerNode(ComputedBuffer)
op1076.writes = [MemoryDep('buf1076', c0, {c0: 163840})]
op1076.unmet_dependencies = 
    [   MemoryDep('buf1071', c0, {c0: 163840}),
        MemoryDep('buf1072', 32*c0 + ((c1//80)), {c0: 4, c1: 2560}),
        MemoryDep('buf1075', 32*c0 + ((c1//80)), {c0: 4, c1: 2560})]
op1076.met_dependencies = 
    [   MemoryDep('primals_710', c1, {c0: 4, c1: 2560}),
        MemoryDep('primals_711', c1, {c0: 4, c1: 2560})]
op1076.outputs = [
    buf1076: ComputedBuffer
    buf1076.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1076.users = [NodeUser(node=SchedulerNode(name='op1077'), can_inplace=True, is_weak=False)]
]
op1076.group.device = cuda:0
op1076.group.iteration = (163840, 1)
op1076.sizes = ([4, 2560, 16], [])
buf1071_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1072_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1075_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_710_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
primals_711_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1076_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1076_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 16}
    index0 = 40960*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//80))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1071', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1072', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1075', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_710', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_711', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1076', get_index_5, add, None)
        return store


op1077: SchedulerNode(ComputedBuffer)
op1077.writes = [MemoryDep('buf1077', c0, {c0: 163840})]
op1077.unmet_dependencies = [MemoryDep('buf1076', c0, {c0: 163840})]
op1077.met_dependencies = []
op1077.outputs = [
    buf1077: ComputedBuffer
    buf1077.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1077.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1078'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1079'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1077.group.device = cuda:0
op1077.group.iteration = (163840, 1)
op1077.sizes = ([163840], [])
buf1076_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1077_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1077_loop_body:
    var_ranges = {p0: 163840}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1076', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1076', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1077', get_index_2, mul, None)
        return store


op1078: ExternKernelSchedulerNode(ExternKernelAlloc)
op1078.writes = [StarDep(name='buf1078', mode=None)]
op1078.unmet_dependencies = [StarDep(name='buf1077', mode=None)]
op1078.met_dependencies = [StarDep(name='primals_712', mode=None)]
op1078.outputs = [
    buf1078: ExternKernelAlloc
    buf1078.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1078.users = [NodeUser(node=SchedulerNode(name='op1082'), can_inplace=True, is_weak=False)]
]
op1078.node.kernel = extern_kernels.convolution


op1079: ExternKernelSchedulerNode(ExternKernelAlloc)
op1079.writes = [StarDep(name='buf1079', mode=None)]
op1079.unmet_dependencies = [StarDep(name='buf1077', mode=None)]
op1079.met_dependencies = [StarDep(name='primals_714', mode=None)]
op1079.outputs = [
    buf1079: ExternKernelAlloc
    buf1079.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1079.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1080'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1079.node.kernel = extern_kernels.convolution


op1080: ExternKernelSchedulerNode(ExternKernelAlloc)
op1080.writes = [StarDep(name='buf1080', mode=None)]
op1080.unmet_dependencies = [StarDep(name='buf1079', mode=None)]
op1080.met_dependencies = [StarDep(name='primals_715', mode=None)]
op1080.outputs = [
    buf1080: ExternKernelAlloc
    buf1080.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1080.users = [NodeUser(node=SchedulerNode(name='op1082'), can_inplace=True, is_weak=False)]
]
op1080.node.kernel = extern_kernels.convolution


op1081: ExternKernelSchedulerNode(ExternKernelOut)
op1081.writes = [StarDep(name='buf1081', mode=None)]
op1081.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1081.met_dependencies = [StarDep(name='primals_716', mode=None)]
op1081.outputs = [
    buf1081: ExternKernelOut
    buf1081.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1081.users = [NodeUser(node=SchedulerNode(name='op1082'), can_inplace=False, is_weak=False)]
]
op1081.node.kernel = extern_kernels.mm


op1082: SchedulerNode(ComputedBuffer)
op1082.writes = [MemoryDep('buf1082', c0, {c0: 81920})]
op1082.unmet_dependencies = 
    [   MemoryDep('buf1078', c0, {c0: 81920}),
        MemoryDep('buf1080', c0, {c0: 81920}),
        MemoryDep('buf1081', c0, {c0: 5120})]
op1082.met_dependencies = 
    [   MemoryDep('primals_713', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_717', c1, {c0: 4, c1: 1280})]
op1082.outputs = [
    buf1082: ComputedBuffer
    buf1082.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1082.users = [
        NodeUser(node=SchedulerNode(name='op1083'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1084'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1087'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1082.group.device = cuda:0
op1082.group.iteration = (81920, 1)
op1082.sizes = ([4, 1280, 16], [])
buf1078_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_713_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1080_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1081_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_717_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1082_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1082_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1078', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_713', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1080', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1081', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_717', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1082', get_index_5, add_3, None)
        return store


op1083: SchedulerNode(ComputedBuffer)
op1083.writes = [MemoryDep('buf1083', c0, {c0: 128})]
op1083.unmet_dependencies = [MemoryDep('buf1082', c0, {c0: 81920})]
op1083.met_dependencies = []
op1083.outputs = [
    buf1083: ComputedBuffer
    buf1083.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1083.users = [
        NodeUser(node=SchedulerNode(name='op1087'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1083.group.device = cuda:0
op1083.group.iteration = (128, 640)
op1083.sizes = ([128], [640])
buf1082_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1083_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1083_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1082', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1083', get_index_1, getitem)
        return store_reduction


op1084: SchedulerNode(ComputedBuffer)
op1084.writes = [MemoryDep('buf1084', c0, {c0: 128})]
op1084.unmet_dependencies = [MemoryDep('buf1082', c0, {c0: 81920})]
op1084.met_dependencies = []
op1084.outputs = [
    buf1084: ComputedBuffer
    buf1084.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1084.users = [NodeUser(node=SchedulerNode(name='op1086'), can_inplace=True, is_weak=False)]
]
op1084.group.device = cuda:0
op1084.group.iteration = (128, 640)
op1084.sizes = ([128], [640])
buf1082_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1084_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1084_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1082', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1084', get_index_1, getitem_1)
        return store_reduction


op1086: SchedulerNode(ComputedBuffer)
op1086.writes = [MemoryDep('buf1086', c0, {c0: 128})]
op1086.unmet_dependencies = [MemoryDep('buf1084', c0, {c0: 128})]
op1086.met_dependencies = []
op1086.outputs = [
    buf1086: ComputedBuffer
    buf1086.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1086.users = [
        NodeUser(node=SchedulerNode(name='op1087'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1086.group.device = cuda:0
op1086.group.iteration = (128, 1)
op1086.sizes = ([128], [])
buf1084_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1086_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1086_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1084', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1086', get_index_1, rsqrt, None)
        return store


op1087: SchedulerNode(ComputedBuffer)
op1087.writes = [MemoryDep('buf1087', c0, {c0: 81920})]
op1087.unmet_dependencies = 
    [   MemoryDep('buf1082', c0, {c0: 81920}),
        MemoryDep('buf1083', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1086', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1087.met_dependencies = 
    [   MemoryDep('primals_718', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_719', c1, {c0: 4, c1: 1280})]
op1087.outputs = [
    buf1087: ComputedBuffer
    buf1087.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1087.users = [NodeUser(node=SchedulerNode(name='op1088'), can_inplace=True, is_weak=False)]
]
op1087.group.device = cuda:0
op1087.group.iteration = (81920, 1)
op1087.sizes = ([4, 1280, 16], [])
buf1082_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1083_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1086_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_718_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_719_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1087_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1087_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1082', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1083', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1086', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_718', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_719', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1087', get_index_5, add, None)
        return store


op1088: SchedulerNode(ComputedBuffer)
op1088.writes = [MemoryDep('buf1088', c0, {c0: 81920})]
op1088.unmet_dependencies = [MemoryDep('buf1087', c0, {c0: 81920})]
op1088.met_dependencies = []
op1088.outputs = [
    buf1088: ComputedBuffer
    buf1088.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1088.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1089'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1090'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1088.group.device = cuda:0
op1088.group.iteration = (81920, 1)
op1088.sizes = ([81920], [])
buf1087_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1088_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1088_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1087', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1087', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1088', get_index_2, mul, None)
        return store


op1089: ExternKernelSchedulerNode(ExternKernelAlloc)
op1089.writes = [StarDep(name='buf1089', mode=None)]
op1089.unmet_dependencies = [StarDep(name='buf1088', mode=None)]
op1089.met_dependencies = [StarDep(name='primals_720', mode=None)]
op1089.outputs = [
    buf1089: ExternKernelAlloc
    buf1089.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1089.users = [NodeUser(node=SchedulerNode(name='op1095'), can_inplace=False, is_weak=False)]
]
op1089.node.kernel = extern_kernels.convolution


op1090: ExternKernelSchedulerNode(ExternKernelAlloc)
op1090.writes = [StarDep(name='buf1090', mode=None)]
op1090.unmet_dependencies = [StarDep(name='buf1088', mode=None)]
op1090.met_dependencies = [StarDep(name='primals_722', mode=None)]
op1090.outputs = [
    buf1090: ExternKernelAlloc
    buf1090.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1090.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1091'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1090.node.kernel = extern_kernels.convolution


op1091: ExternKernelSchedulerNode(ExternKernelAlloc)
op1091.writes = [StarDep(name='buf1091', mode=None)]
op1091.unmet_dependencies = [StarDep(name='buf1090', mode=None)]
op1091.met_dependencies = [StarDep(name='primals_723', mode=None)]
op1091.outputs = [
    buf1091: ExternKernelAlloc
    buf1091.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1091.users = [NodeUser(node=SchedulerNode(name='op1095'), can_inplace=False, is_weak=False)]
]
op1091.node.kernel = extern_kernels.convolution


op1092: ExternKernelSchedulerNode(ExternKernelAlloc)
op1092.writes = [StarDep(name='buf1092', mode=None)]
op1092.unmet_dependencies = [StarDep(name='buf1071', mode=None)]
op1092.met_dependencies = [StarDep(name='primals_724', mode=None)]
op1092.outputs = [
    buf1092: ExternKernelAlloc
    buf1092.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1092.users = [NodeUser(node=SchedulerNode(name='op1095'), can_inplace=False, is_weak=False)]
]
op1092.node.kernel = extern_kernels.convolution


op1093: ExternKernelSchedulerNode(ExternKernelAlloc)
op1093.writes = [StarDep(name='buf1093', mode=None)]
op1093.unmet_dependencies = [StarDep(name='buf1071', mode=None)]
op1093.met_dependencies = [StarDep(name='primals_726', mode=None)]
op1093.outputs = [
    buf1093: ExternKernelAlloc
    buf1093.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1093.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1094'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1093.node.kernel = extern_kernels.convolution


op1094: ExternKernelSchedulerNode(ExternKernelAlloc)
op1094.writes = [StarDep(name='buf1094', mode=None)]
op1094.unmet_dependencies = [StarDep(name='buf1093', mode=None)]
op1094.met_dependencies = [StarDep(name='primals_727', mode=None)]
op1094.outputs = [
    buf1094: ExternKernelAlloc
    buf1094.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1094.users = [NodeUser(node=SchedulerNode(name='op1095'), can_inplace=False, is_weak=False)]
]
op1094.node.kernel = extern_kernels.convolution


op1095: SchedulerNode(ComputedBuffer)
op1095.writes = [MemoryDep('buf1095', c0, {c0: 163840})]
op1095.unmet_dependencies = 
    [   MemoryDep('buf1089', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1091', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1092', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf1094', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16}),
        MemoryDep('buf885', 20480*c0 + c2 + 16*(I), {c0: 4, c1: 2560, c2: 16})]
op1095.met_dependencies = 
    [   MemoryDep('primals_721', I, {c0: 4, c1: 2560}),
        MemoryDep('primals_725', I, {c0: 4, c1: 2560})]
op1095.outputs = [
    buf1095: ComputedBuffer
    buf1095.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1095.users = [
        NodeUser(node=SchedulerNode(name='op1096'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1097'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1100'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1116'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1117'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1095.group.device = cuda:0
op1095.group.iteration = (163840, 1)
op1095.sizes = ([4, 2560, 16], [])
buf1092_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_725_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1094_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1089_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_721_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1091_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1095_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1095_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 16}
    index0 = p1
    index1 = 20480*p0 + p2 + 16*(I)
    index2 = I
    index3 = 20480*p0 + p2 + 16*(I)
    index4 = 40960*p0 + 16*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2560, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1095', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1092', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_725', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1094', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1089', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_721', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1091', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        return mul_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf885', get_index)
        return load


op1096: SchedulerNode(ComputedBuffer)
op1096.writes = [MemoryDep('buf1096', c0, {c0: 128})]
op1096.unmet_dependencies = [MemoryDep('buf1095', c0, {c0: 163840})]
op1096.met_dependencies = []
op1096.outputs = [
    buf1096: ComputedBuffer
    buf1096.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1096.users = [
        NodeUser(node=SchedulerNode(name='op1100'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1096.group.device = cuda:0
op1096.group.iteration = (128, 1280)
op1096.sizes = ([128], [1280])
buf1095_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1096_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1096_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1095', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1096', get_index_1, getitem)
        return store_reduction


op1097: SchedulerNode(ComputedBuffer)
op1097.writes = [MemoryDep('buf1097', c0, {c0: 128})]
op1097.unmet_dependencies = [MemoryDep('buf1095', c0, {c0: 163840})]
op1097.met_dependencies = []
op1097.outputs = [
    buf1097: ComputedBuffer
    buf1097.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1097.users = [NodeUser(node=SchedulerNode(name='op1099'), can_inplace=True, is_weak=False)]
]
op1097.group.device = cuda:0
op1097.group.iteration = (128, 1280)
op1097.sizes = ([128], [1280])
buf1095_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1097_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1097_loop_body:
    var_ranges = {p0: 128, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1095', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1097', get_index_1, getitem_1)
        return store_reduction


op1099: SchedulerNode(ComputedBuffer)
op1099.writes = [MemoryDep('buf1099', c0, {c0: 128})]
op1099.unmet_dependencies = [MemoryDep('buf1097', c0, {c0: 128})]
op1099.met_dependencies = []
op1099.outputs = [
    buf1099: ComputedBuffer
    buf1099.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1099.users = [
        NodeUser(node=SchedulerNode(name='op1100'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1099.group.device = cuda:0
op1099.group.iteration = (128, 1)
op1099.sizes = ([128], [])
buf1097_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1099_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1099_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1097', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1099', get_index_1, rsqrt, None)
        return store


op1100: SchedulerNode(ComputedBuffer)
op1100.writes = [MemoryDep('buf1100', c0, {c0: 163840})]
op1100.unmet_dependencies = 
    [   MemoryDep('buf1095', c0, {c0: 163840}),
        MemoryDep('buf1096', 32*c0 + ((c1//80)), {c0: 4, c1: 2560}),
        MemoryDep('buf1099', 32*c0 + ((c1//80)), {c0: 4, c1: 2560})]
op1100.met_dependencies = 
    [   MemoryDep('primals_728', c1, {c0: 4, c1: 2560}),
        MemoryDep('primals_729', c1, {c0: 4, c1: 2560})]
op1100.outputs = [
    buf1100: ComputedBuffer
    buf1100.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1100.users = [NodeUser(node=SchedulerNode(name='op1101'), can_inplace=True, is_weak=False)]
]
op1100.group.device = cuda:0
op1100.group.iteration = (163840, 1)
op1100.sizes = ([4, 2560, 16], [])
buf1095_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1096_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1099_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_728_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
primals_729_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1100_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 16}
    index0 = 40960*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//80))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1095', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1096', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1099', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_728', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_729', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1100', get_index_5, add, None)
        return store


op1101: SchedulerNode(ComputedBuffer)
op1101.writes = [MemoryDep('buf1101', c0, {c0: 163840})]
op1101.unmet_dependencies = [MemoryDep('buf1100', c0, {c0: 163840})]
op1101.met_dependencies = []
op1101.outputs = [
    buf1101: ComputedBuffer
    buf1101.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
    buf1101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1103'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1101.group.device = cuda:0
op1101.group.iteration = (163840, 1)
op1101.sizes = ([163840], [])
buf1100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
buf1101_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 4, 4], stride=[40960, 16, 4, 1])
class op1101_loop_body:
    var_ranges = {p0: 163840}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1100', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1100', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1101', get_index_2, mul, None)
        return store


op1102: ExternKernelSchedulerNode(ExternKernelAlloc)
op1102.writes = [StarDep(name='buf1102', mode=None)]
op1102.unmet_dependencies = [StarDep(name='buf1101', mode=None)]
op1102.met_dependencies = [StarDep(name='primals_730', mode=None)]
op1102.outputs = [
    buf1102: ExternKernelAlloc
    buf1102.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1102.users = [NodeUser(node=SchedulerNode(name='op1106'), can_inplace=True, is_weak=False)]
]
op1102.node.kernel = extern_kernels.convolution


op1103: ExternKernelSchedulerNode(ExternKernelAlloc)
op1103.writes = [StarDep(name='buf1103', mode=None)]
op1103.unmet_dependencies = [StarDep(name='buf1101', mode=None)]
op1103.met_dependencies = [StarDep(name='primals_732', mode=None)]
op1103.outputs = [
    buf1103: ExternKernelAlloc
    buf1103.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1104'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1103.node.kernel = extern_kernels.convolution


op1104: ExternKernelSchedulerNode(ExternKernelAlloc)
op1104.writes = [StarDep(name='buf1104', mode=None)]
op1104.unmet_dependencies = [StarDep(name='buf1103', mode=None)]
op1104.met_dependencies = [StarDep(name='primals_733', mode=None)]
op1104.outputs = [
    buf1104: ExternKernelAlloc
    buf1104.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1104.users = [NodeUser(node=SchedulerNode(name='op1106'), can_inplace=True, is_weak=False)]
]
op1104.node.kernel = extern_kernels.convolution


op1105: ExternKernelSchedulerNode(ExternKernelOut)
op1105.writes = [StarDep(name='buf1105', mode=None)]
op1105.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1105.met_dependencies = [StarDep(name='primals_734', mode=None)]
op1105.outputs = [
    buf1105: ExternKernelOut
    buf1105.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1105.users = [NodeUser(node=SchedulerNode(name='op1106'), can_inplace=False, is_weak=False)]
]
op1105.node.kernel = extern_kernels.mm


op1106: SchedulerNode(ComputedBuffer)
op1106.writes = [MemoryDep('buf1106', c0, {c0: 81920})]
op1106.unmet_dependencies = 
    [   MemoryDep('buf1102', c0, {c0: 81920}),
        MemoryDep('buf1104', c0, {c0: 81920}),
        MemoryDep('buf1105', c0, {c0: 5120})]
op1106.met_dependencies = 
    [   MemoryDep('primals_731', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_735', c1, {c0: 4, c1: 1280})]
op1106.outputs = [
    buf1106: ComputedBuffer
    buf1106.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1106.users = [
        NodeUser(node=SchedulerNode(name='op1107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1111'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1106.group.device = cuda:0
op1106.group.iteration = (81920, 1)
op1106.sizes = ([4, 1280, 16], [])
buf1102_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_731_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_735_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1106_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_731', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1104', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1105', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_735', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1106', get_index_5, add_3, None)
        return store


op1107: SchedulerNode(ComputedBuffer)
op1107.writes = [MemoryDep('buf1107', c0, {c0: 128})]
op1107.unmet_dependencies = [MemoryDep('buf1106', c0, {c0: 81920})]
op1107.met_dependencies = []
op1107.outputs = [
    buf1107: ComputedBuffer
    buf1107.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1107.users = [
        NodeUser(node=SchedulerNode(name='op1111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1107.group.device = cuda:0
op1107.group.iteration = (128, 640)
op1107.sizes = ([128], [640])
buf1106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1107_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1106', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1107', get_index_1, getitem)
        return store_reduction


op1108: SchedulerNode(ComputedBuffer)
op1108.writes = [MemoryDep('buf1108', c0, {c0: 128})]
op1108.unmet_dependencies = [MemoryDep('buf1106', c0, {c0: 81920})]
op1108.met_dependencies = []
op1108.outputs = [
    buf1108: ComputedBuffer
    buf1108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1108.users = [NodeUser(node=SchedulerNode(name='op1110'), can_inplace=True, is_weak=False)]
]
op1108.group.device = cuda:0
op1108.group.iteration = (128, 640)
op1108.sizes = ([128], [640])
buf1106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1108_loop_body:
    var_ranges = {p0: 128, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1106', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1108', get_index_1, getitem_1)
        return store_reduction


op1110: SchedulerNode(ComputedBuffer)
op1110.writes = [MemoryDep('buf1110', c0, {c0: 128})]
op1110.unmet_dependencies = [MemoryDep('buf1108', c0, {c0: 128})]
op1110.met_dependencies = []
op1110.outputs = [
    buf1110: ComputedBuffer
    buf1110.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1110.users = [
        NodeUser(node=SchedulerNode(name='op1111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1110.group.device = cuda:0
op1110.group.iteration = (128, 1)
op1110.sizes = ([128], [])
buf1108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1110_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1108', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1110', get_index_1, rsqrt, None)
        return store


op1111: SchedulerNode(ComputedBuffer)
op1111.writes = [MemoryDep('buf1111', c0, {c0: 81920})]
op1111.unmet_dependencies = 
    [   MemoryDep('buf1106', c0, {c0: 81920}),
        MemoryDep('buf1107', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1110', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1111.met_dependencies = 
    [   MemoryDep('primals_736', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_737', c1, {c0: 4, c1: 1280})]
op1111.outputs = [
    buf1111: ComputedBuffer
    buf1111.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1111.users = [NodeUser(node=SchedulerNode(name='op1112'), can_inplace=True, is_weak=False)]
]
op1111.group.device = cuda:0
op1111.group.iteration = (81920, 1)
op1111.sizes = ([4, 1280, 16], [])
buf1106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_736_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_737_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1111_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16}
    index0 = 20480*p0 + 16*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1107', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1110', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_736', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_737', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1111', get_index_5, add, None)
        return store


op1112: SchedulerNode(ComputedBuffer)
op1112.writes = [MemoryDep('buf1112', c0, {c0: 81920})]
op1112.unmet_dependencies = [MemoryDep('buf1111', c0, {c0: 81920})]
op1112.met_dependencies = []
op1112.outputs = [
    buf1112: ComputedBuffer
    buf1112.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1114'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1112.group.device = cuda:0
op1112.group.iteration = (81920, 1)
op1112.sizes = ([81920], [])
buf1111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1112_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
class op1112_loop_body:
    var_ranges = {p0: 81920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1111', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1112', get_index_2, mul, None)
        return store


op1113: ExternKernelSchedulerNode(ExternKernelAlloc)
op1113.writes = [StarDep(name='buf1113', mode=None)]
op1113.unmet_dependencies = [StarDep(name='buf1112', mode=None)]
op1113.met_dependencies = [StarDep(name='primals_738', mode=None)]
op1113.outputs = [
    buf1113: ExternKernelAlloc
    buf1113.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1113.users = [NodeUser(node=SchedulerNode(name='op1120'), can_inplace=False, is_weak=False)]
]
op1113.node.kernel = extern_kernels.convolution


op1114: ExternKernelSchedulerNode(ExternKernelAlloc)
op1114.writes = [StarDep(name='buf1114', mode=None)]
op1114.unmet_dependencies = [StarDep(name='buf1112', mode=None)]
op1114.met_dependencies = [StarDep(name='primals_740', mode=None)]
op1114.outputs = [
    buf1114: ExternKernelAlloc
    buf1114.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1114.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1115'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1114.node.kernel = extern_kernels.convolution


op1115: ExternKernelSchedulerNode(ExternKernelAlloc)
op1115.writes = [StarDep(name='buf1115', mode=None)]
op1115.unmet_dependencies = [StarDep(name='buf1114', mode=None)]
op1115.met_dependencies = [StarDep(name='primals_741', mode=None)]
op1115.outputs = [
    buf1115: ExternKernelAlloc
    buf1115.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1115.users = [NodeUser(node=SchedulerNode(name='op1120'), can_inplace=False, is_weak=False)]
]
op1115.node.kernel = extern_kernels.convolution


op1116: ExternKernelSchedulerNode(ExternKernelAlloc)
op1116.writes = [StarDep(name='buf1116', mode=None)]
op1116.unmet_dependencies = [StarDep(name='buf1095', mode=None)]
op1116.met_dependencies = [StarDep(name='primals_742', mode=None)]
op1116.outputs = [
    buf1116: ExternKernelAlloc
    buf1116.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1116.users = [NodeUser(node=SchedulerNode(name='op1120'), can_inplace=False, is_weak=False)]
]
op1116.node.kernel = extern_kernels.convolution


op1117: ExternKernelSchedulerNode(ExternKernelAlloc)
op1117.writes = [StarDep(name='buf1117', mode=None)]
op1117.unmet_dependencies = [StarDep(name='buf1095', mode=None)]
op1117.met_dependencies = [StarDep(name='primals_744', mode=None)]
op1117.outputs = [
    buf1117: ExternKernelAlloc
    buf1117.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 4, 4], stride=[1280, 16, 4, 1])
    buf1117.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1118'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1117.node.kernel = extern_kernels.convolution


op1118: ExternKernelSchedulerNode(ExternKernelAlloc)
op1118.writes = [StarDep(name='buf1118', mode=None)]
op1118.unmet_dependencies = [StarDep(name='buf1117', mode=None)]
op1118.met_dependencies = [StarDep(name='primals_745', mode=None)]
op1118.outputs = [
    buf1118: ExternKernelAlloc
    buf1118.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
    buf1118.users = [NodeUser(node=SchedulerNode(name='op1120'), can_inplace=False, is_weak=False)]
]
op1118.node.kernel = extern_kernels.convolution


op1119: SchedulerNode(ComputedBuffer)
op1119.writes = [MemoryDep('buf1119', c0, {c0: 8})]
op1119.unmet_dependencies = []
op1119.met_dependencies = []
op1119.outputs = [
    buf1119: ComputedBuffer
    buf1119.layout = FixedLayout('cuda:0', torch.int64, size=[8], stride=[1])
    buf1119.users = [
        NodeUser(node=SchedulerNode(name='op1120'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1119.group.device = cuda:0
op1119.group.iteration = (8, 1)
op1119.sizes = ([8], [])
buf1119_layout = FixedLayout('cuda:0', torch.int64, size=[8], stride=[1])
class op1119_loop_body:
    var_ranges = {p0: 8}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1119', get_index_1, to_dtype, None)
        return store


op1120: SchedulerNode(ComputedBuffer)
op1120.writes = [MemoryDep('buf1120', c0, {c0: 327680})]
op1120.unmet_dependencies = 
    [   MemoryDep('buf1113', 16*c0 + 4*tmp0 + tmp1, {c0: 5120}),
        MemoryDep('buf1115', 16*c0 + 4*tmp0 + tmp1, {c0: 5120}),
        MemoryDep('buf1116', 16*c0 + 4*tmp0 + tmp1, {c0: 5120}),
        MemoryDep('buf1118', 16*c0 + 4*tmp0 + tmp1, {c0: 5120}),
        MemoryDep('buf1119', c1, {c0: 40960, c1: 8}),
        MemoryDep('buf1119', c1, {c0: 5120, c1: 8})]
op1120.met_dependencies = 
    [   MemoryDep('primals_739', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_743', c1, {c0: 4, c1: 1280})]
op1120.outputs = [
    buf1120: ComputedBuffer
    buf1120.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1121'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1122'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1120.group.device = cuda:0
op1120.group.iteration = (327680, 1)
op1120.sizes = ([4, 1280, 8, 8], [])
buf1119_layout = FixedLayout('cuda:0', torch.int64, size=[8], stride=[1])
buf1119_layout = FixedLayout('cuda:0', torch.int64, size=[8], stride=[1])
buf1116_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_743_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1113_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
primals_739_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1115_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 4, 4], stride=[20480, 16, 4, 1])
buf1120_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1120_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 8, p3: 8}
    index0 = p2
    index1 = p3
    index2 = 4*indirect0 + indirect1 + 20480*p0 + 16*p1
    index3 = p1
    index4 = 81920*p0 + 64*p1 + 8*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1119', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1119', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1116', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_743', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1118', get_index_4)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_4, constant)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1113', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('primals_739', get_index_6)
        add_2 = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf1115', get_index_7)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_7, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf1120', get_index_8, mul_2, None)
        return store


op1121: ExternKernelSchedulerNode(ExternKernelAlloc)
op1121.writes = [StarDep(name='buf1121', mode=None)]
op1121.unmet_dependencies = [StarDep(name='buf1120', mode=None)]
op1121.met_dependencies = [StarDep(name='primals_746', mode=None)]
op1121.outputs = [
    buf1121: ExternKernelAlloc
    buf1121.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1121.users = [NodeUser(node=SchedulerNode(name='op1124'), can_inplace=False, is_weak=False)]
]
op1121.node.kernel = extern_kernels.convolution


op1122: ExternKernelSchedulerNode(ExternKernelAlloc)
op1122.writes = [StarDep(name='buf1122', mode=None)]
op1122.unmet_dependencies = [StarDep(name='buf1120', mode=None)]
op1122.met_dependencies = [StarDep(name='primals_748', mode=None)]
op1122.outputs = [
    buf1122: ExternKernelAlloc
    buf1122.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1123'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1122.node.kernel = extern_kernels.convolution


op1123: ExternKernelSchedulerNode(ExternKernelAlloc)
op1123.writes = [StarDep(name='buf1123', mode=None)]
op1123.unmet_dependencies = [StarDep(name='buf1122', mode=None)]
op1123.met_dependencies = [StarDep(name='primals_749', mode=None)]
op1123.outputs = [
    buf1123: ExternKernelAlloc
    buf1123.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1123.users = [NodeUser(node=SchedulerNode(name='op1124'), can_inplace=False, is_weak=False)]
]
op1123.node.kernel = extern_kernels.convolution


op1124: SchedulerNode(ComputedBuffer)
op1124.writes = [MemoryDep('buf1124', c0, {c0: 655360})]
op1124.unmet_dependencies = 
    [   MemoryDep('buf1121', 81920*c0 + c2 + 64*(I), {c0: 4, c1: 2560, c2: 64}),
        MemoryDep('buf1123', 81920*c0 + c2 + 64*(I), {c0: 4, c1: 2560, c2: 64}),
        MemoryDep('buf881', 81920*c0 + c2 + 64*(I), {c0: 4, c1: 2560, c2: 64})]
op1124.met_dependencies = [MemoryDep('primals_747', I, {c0: 4, c1: 2560})]
op1124.outputs = [
    buf1124: ComputedBuffer
    buf1124.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
    buf1124.users = [
        NodeUser(node=SchedulerNode(name='op1125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1129'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1145'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1146'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1124.group.device = cuda:0
op1124.group.iteration = (655360, 1)
op1124.sizes = ([4, 2560, 64], [])
buf1121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_747_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1123_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf881_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
class op1124_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 64}
    index0 = p1
    index1 = 81920*p0 + p2 + 64*(I)
    index2 = I
    index3 = 81920*p0 + p2 + 64*(I)
    index4 = 163840*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2560, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1124', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1121', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_747', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1123', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf881', get_index)
        return load


op1125: SchedulerNode(ComputedBuffer)
op1125.writes = [MemoryDep('buf1125', c0, {c0: 128})]
op1125.unmet_dependencies = [MemoryDep('buf1124', c0, {c0: 655360})]
op1125.met_dependencies = []
op1125.outputs = [
    buf1125: ComputedBuffer
    buf1125.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1125.users = [
        NodeUser(node=SchedulerNode(name='op1129'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1125.group.device = cuda:0
op1125.group.iteration = (128, 5120)
op1125.sizes = ([128], [5120])
buf1124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1125_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1125_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1124', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1125', get_index_1, getitem)
        return store_reduction


op1126: SchedulerNode(ComputedBuffer)
op1126.writes = [MemoryDep('buf1126', c0, {c0: 128})]
op1126.unmet_dependencies = [MemoryDep('buf1124', c0, {c0: 655360})]
op1126.met_dependencies = []
op1126.outputs = [
    buf1126: ComputedBuffer
    buf1126.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1126.users = [NodeUser(node=SchedulerNode(name='op1128'), can_inplace=True, is_weak=False)]
]
op1126.group.device = cuda:0
op1126.group.iteration = (128, 5120)
op1126.sizes = ([128], [5120])
buf1124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1126_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1126_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1124', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1126', get_index_1, getitem_1)
        return store_reduction


op1128: SchedulerNode(ComputedBuffer)
op1128.writes = [MemoryDep('buf1128', c0, {c0: 128})]
op1128.unmet_dependencies = [MemoryDep('buf1126', c0, {c0: 128})]
op1128.met_dependencies = []
op1128.outputs = [
    buf1128: ComputedBuffer
    buf1128.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1128.users = [
        NodeUser(node=SchedulerNode(name='op1129'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1128.group.device = cuda:0
op1128.group.iteration = (128, 1)
op1128.sizes = ([128], [])
buf1126_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1128_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1126', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1128', get_index_1, rsqrt, None)
        return store


op1129: SchedulerNode(ComputedBuffer)
op1129.writes = [MemoryDep('buf1129', c0, {c0: 655360})]
op1129.unmet_dependencies = 
    [   MemoryDep('buf1124', c0, {c0: 655360}),
        MemoryDep('buf1125', 32*c0 + ((c1//80)), {c0: 4, c1: 2560}),
        MemoryDep('buf1128', 32*c0 + ((c1//80)), {c0: 4, c1: 2560})]
op1129.met_dependencies = 
    [   MemoryDep('primals_750', c1, {c0: 4, c1: 2560}),
        MemoryDep('primals_751', c1, {c0: 4, c1: 2560})]
op1129.outputs = [
    buf1129: ComputedBuffer
    buf1129.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
    buf1129.users = [NodeUser(node=SchedulerNode(name='op1130'), can_inplace=True, is_weak=False)]
]
op1129.group.device = cuda:0
op1129.group.iteration = (655360, 1)
op1129.sizes = ([4, 2560, 64], [])
buf1124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1125_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_750_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
primals_751_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
class op1129_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 64}
    index0 = 163840*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//80))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1125', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1128', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_750', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_751', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1129', get_index_5, add, None)
        return store


op1130: SchedulerNode(ComputedBuffer)
op1130.writes = [MemoryDep('buf1130', c0, {c0: 655360})]
op1130.unmet_dependencies = [MemoryDep('buf1129', c0, {c0: 655360})]
op1130.met_dependencies = []
op1130.outputs = [
    buf1130: ComputedBuffer
    buf1130.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
    buf1130.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1130.group.device = cuda:0
op1130.group.iteration = (655360, 1)
op1130.sizes = ([655360], [])
buf1129_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1130_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
class op1130_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1129', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1129', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1130', get_index_2, mul, None)
        return store


op1131: ExternKernelSchedulerNode(ExternKernelAlloc)
op1131.writes = [StarDep(name='buf1131', mode=None)]
op1131.unmet_dependencies = [StarDep(name='buf1130', mode=None)]
op1131.met_dependencies = [StarDep(name='primals_752', mode=None)]
op1131.outputs = [
    buf1131: ExternKernelAlloc
    buf1131.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1131.users = [NodeUser(node=SchedulerNode(name='op1135'), can_inplace=True, is_weak=False)]
]
op1131.node.kernel = extern_kernels.convolution


op1132: ExternKernelSchedulerNode(ExternKernelAlloc)
op1132.writes = [StarDep(name='buf1132', mode=None)]
op1132.unmet_dependencies = [StarDep(name='buf1130', mode=None)]
op1132.met_dependencies = [StarDep(name='primals_754', mode=None)]
op1132.outputs = [
    buf1132: ExternKernelAlloc
    buf1132.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1133'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1132.node.kernel = extern_kernels.convolution


op1133: ExternKernelSchedulerNode(ExternKernelAlloc)
op1133.writes = [StarDep(name='buf1133', mode=None)]
op1133.unmet_dependencies = [StarDep(name='buf1132', mode=None)]
op1133.met_dependencies = [StarDep(name='primals_755', mode=None)]
op1133.outputs = [
    buf1133: ExternKernelAlloc
    buf1133.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1133.users = [NodeUser(node=SchedulerNode(name='op1135'), can_inplace=True, is_weak=False)]
]
op1133.node.kernel = extern_kernels.convolution


op1134: ExternKernelSchedulerNode(ExternKernelOut)
op1134.writes = [StarDep(name='buf1134', mode=None)]
op1134.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1134.met_dependencies = [StarDep(name='primals_756', mode=None)]
op1134.outputs = [
    buf1134: ExternKernelOut
    buf1134.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1134.users = [NodeUser(node=SchedulerNode(name='op1135'), can_inplace=False, is_weak=False)]
]
op1134.node.kernel = extern_kernels.mm


op1135: SchedulerNode(ComputedBuffer)
op1135.writes = [MemoryDep('buf1135', c0, {c0: 327680})]
op1135.unmet_dependencies = 
    [   MemoryDep('buf1131', c0, {c0: 327680}),
        MemoryDep('buf1133', c0, {c0: 327680}),
        MemoryDep('buf1134', c0, {c0: 5120})]
op1135.met_dependencies = 
    [   MemoryDep('primals_753', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_757', c1, {c0: 4, c1: 1280})]
op1135.outputs = [
    buf1135: ComputedBuffer
    buf1135.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1135.users = [
        NodeUser(node=SchedulerNode(name='op1136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1140'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1135.group.device = cuda:0
op1135.group.iteration = (327680, 1)
op1135.sizes = ([4, 1280, 64], [])
buf1131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_753_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1134_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_757_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1135_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1135_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_753', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1133', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1134', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_757', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1135', get_index_5, add_3, None)
        return store


op1136: SchedulerNode(ComputedBuffer)
op1136.writes = [MemoryDep('buf1136', c0, {c0: 128})]
op1136.unmet_dependencies = [MemoryDep('buf1135', c0, {c0: 327680})]
op1136.met_dependencies = []
op1136.outputs = [
    buf1136: ComputedBuffer
    buf1136.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1136.users = [
        NodeUser(node=SchedulerNode(name='op1140'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1136.group.device = cuda:0
op1136.group.iteration = (128, 2560)
op1136.sizes = ([128], [2560])
buf1135_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1136_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1136_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1135', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1136', get_index_1, getitem)
        return store_reduction


op1137: SchedulerNode(ComputedBuffer)
op1137.writes = [MemoryDep('buf1137', c0, {c0: 128})]
op1137.unmet_dependencies = [MemoryDep('buf1135', c0, {c0: 327680})]
op1137.met_dependencies = []
op1137.outputs = [
    buf1137: ComputedBuffer
    buf1137.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1137.users = [NodeUser(node=SchedulerNode(name='op1139'), can_inplace=True, is_weak=False)]
]
op1137.group.device = cuda:0
op1137.group.iteration = (128, 2560)
op1137.sizes = ([128], [2560])
buf1135_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1137_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1137_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1135', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1137', get_index_1, getitem_1)
        return store_reduction


op1139: SchedulerNode(ComputedBuffer)
op1139.writes = [MemoryDep('buf1139', c0, {c0: 128})]
op1139.unmet_dependencies = [MemoryDep('buf1137', c0, {c0: 128})]
op1139.met_dependencies = []
op1139.outputs = [
    buf1139: ComputedBuffer
    buf1139.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1139.users = [
        NodeUser(node=SchedulerNode(name='op1140'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1139.group.device = cuda:0
op1139.group.iteration = (128, 1)
op1139.sizes = ([128], [])
buf1137_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1139_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1139_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1137', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1139', get_index_1, rsqrt, None)
        return store


op1140: SchedulerNode(ComputedBuffer)
op1140.writes = [MemoryDep('buf1140', c0, {c0: 327680})]
op1140.unmet_dependencies = 
    [   MemoryDep('buf1135', c0, {c0: 327680}),
        MemoryDep('buf1136', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1139', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1140.met_dependencies = 
    [   MemoryDep('primals_758', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_759', c1, {c0: 4, c1: 1280})]
op1140.outputs = [
    buf1140: ComputedBuffer
    buf1140.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1140.users = [NodeUser(node=SchedulerNode(name='op1141'), can_inplace=True, is_weak=False)]
]
op1140.group.device = cuda:0
op1140.group.iteration = (327680, 1)
op1140.sizes = ([4, 1280, 64], [])
buf1135_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1136_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1139_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_758_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_759_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1140_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1140_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1136', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1139', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_758', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_759', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1140', get_index_5, add, None)
        return store


op1141: SchedulerNode(ComputedBuffer)
op1141.writes = [MemoryDep('buf1141', c0, {c0: 327680})]
op1141.unmet_dependencies = [MemoryDep('buf1140', c0, {c0: 327680})]
op1141.met_dependencies = []
op1141.outputs = [
    buf1141: ComputedBuffer
    buf1141.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1141.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1142'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1143'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1141.group.device = cuda:0
op1141.group.iteration = (327680, 1)
op1141.sizes = ([327680], [])
buf1140_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1141_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1140', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1140', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1141', get_index_2, mul, None)
        return store


op1142: ExternKernelSchedulerNode(ExternKernelAlloc)
op1142.writes = [StarDep(name='buf1142', mode=None)]
op1142.unmet_dependencies = [StarDep(name='buf1141', mode=None)]
op1142.met_dependencies = [StarDep(name='primals_760', mode=None)]
op1142.outputs = [
    buf1142: ExternKernelAlloc
    buf1142.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1142.users = [NodeUser(node=SchedulerNode(name='op1148'), can_inplace=True, is_weak=False)]
]
op1142.node.kernel = extern_kernels.convolution


op1143: ExternKernelSchedulerNode(ExternKernelAlloc)
op1143.writes = [StarDep(name='buf1143', mode=None)]
op1143.unmet_dependencies = [StarDep(name='buf1141', mode=None)]
op1143.met_dependencies = [StarDep(name='primals_762', mode=None)]
op1143.outputs = [
    buf1143: ExternKernelAlloc
    buf1143.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1144'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1143.node.kernel = extern_kernels.convolution


op1144: ExternKernelSchedulerNode(ExternKernelAlloc)
op1144.writes = [StarDep(name='buf1144', mode=None)]
op1144.unmet_dependencies = [StarDep(name='buf1143', mode=None)]
op1144.met_dependencies = [StarDep(name='primals_763', mode=None)]
op1144.outputs = [
    buf1144: ExternKernelAlloc
    buf1144.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1144.users = [NodeUser(node=SchedulerNode(name='op1148'), can_inplace=True, is_weak=False)]
]
op1144.node.kernel = extern_kernels.convolution


op1145: ExternKernelSchedulerNode(ExternKernelAlloc)
op1145.writes = [StarDep(name='buf1145', mode=None)]
op1145.unmet_dependencies = [StarDep(name='buf1124', mode=None)]
op1145.met_dependencies = [StarDep(name='primals_764', mode=None)]
op1145.outputs = [
    buf1145: ExternKernelAlloc
    buf1145.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1145.users = [NodeUser(node=SchedulerNode(name='op1148'), can_inplace=True, is_weak=False)]
]
op1145.node.kernel = extern_kernels.convolution


op1146: ExternKernelSchedulerNode(ExternKernelAlloc)
op1146.writes = [StarDep(name='buf1146', mode=None)]
op1146.unmet_dependencies = [StarDep(name='buf1124', mode=None)]
op1146.met_dependencies = [StarDep(name='primals_766', mode=None)]
op1146.outputs = [
    buf1146: ExternKernelAlloc
    buf1146.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1147'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1146.node.kernel = extern_kernels.convolution


op1147: ExternKernelSchedulerNode(ExternKernelAlloc)
op1147.writes = [StarDep(name='buf1147', mode=None)]
op1147.unmet_dependencies = [StarDep(name='buf1146', mode=None)]
op1147.met_dependencies = [StarDep(name='primals_767', mode=None)]
op1147.outputs = [
    buf1147: ExternKernelAlloc
    buf1147.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1147.users = [NodeUser(node=SchedulerNode(name='op1148'), can_inplace=True, is_weak=False)]
]
op1147.node.kernel = extern_kernels.convolution


op1148: SchedulerNode(ComputedBuffer)
op1148.writes = [MemoryDep('buf1148', c0, {c0: 327680})]
op1148.unmet_dependencies = 
    [   MemoryDep('buf1142', c0, {c0: 327680}),
        MemoryDep('buf1144', c0, {c0: 327680}),
        MemoryDep('buf1145', c0, {c0: 327680}),
        MemoryDep('buf1147', c0, {c0: 327680})]
op1148.met_dependencies = 
    [   MemoryDep('primals_761', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_765', c1, {c0: 4, c1: 1280})]
op1148.outputs = [
    buf1148: ComputedBuffer
    buf1148.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1148.users = [
        NodeUser(node=SchedulerNode(name='op1149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1226'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1148.group.device = cuda:0
op1148.group.iteration = (327680, 1)
op1148.sizes = ([4, 1280, 64], [])
buf1145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_765_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1147_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1142_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_761_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1144_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1148_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1148_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_765', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1147', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1142', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_761', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1144', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1148', get_index_6, mul_2, None)
        return store


op1149: SchedulerNode(ComputedBuffer)
op1149.writes = [MemoryDep('buf1149', c0, {c0: 128})]
op1149.unmet_dependencies = [MemoryDep('buf1148', c0, {c0: 327680})]
op1149.met_dependencies = []
op1149.outputs = [
    buf1149: ComputedBuffer
    buf1149.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1149.users = [
        NodeUser(node=SchedulerNode(name='op1153'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1149.group.device = cuda:0
op1149.group.iteration = (128, 2560)
op1149.sizes = ([128], [2560])
buf1148_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1149_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1149_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1148', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1149', get_index_1, getitem)
        return store_reduction


op1150: SchedulerNode(ComputedBuffer)
op1150.writes = [MemoryDep('buf1150', c0, {c0: 128})]
op1150.unmet_dependencies = [MemoryDep('buf1148', c0, {c0: 327680})]
op1150.met_dependencies = []
op1150.outputs = [
    buf1150: ComputedBuffer
    buf1150.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1150.users = [
        NodeUser(node=SchedulerNode(name='op1152'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1153'), can_inplace=False, is_weak=False),
    ]
]
op1150.group.device = cuda:0
op1150.group.iteration = (128, 2560)
op1150.sizes = ([128], [2560])
buf1148_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1150_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1148', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1150', get_index_1, getitem_1)
        return store_reduction


op1152: SchedulerNode(ComputedBuffer)
op1152.writes = [MemoryDep('buf1152', c0, {c0: 128})]
op1152.unmet_dependencies = [MemoryDep('buf1150', c0, {c0: 128})]
op1152.met_dependencies = []
op1152.outputs = [
    buf1152: ComputedBuffer
    buf1152.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1152.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1152.group.device = cuda:0
op1152.group.iteration = (128, 1)
op1152.sizes = ([128], [])
buf1150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1152_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1152_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1150', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1152', get_index_1, rsqrt, None)
        return store


op1153: SchedulerNode(ComputedBuffer)
op1153.writes = [MemoryDep('buf1153', c0, {c0: 327680})]
op1153.unmet_dependencies = 
    [   MemoryDep('buf1148', c0, {c0: 327680}),
        MemoryDep('buf1149', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1150', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1153.met_dependencies = 
    [   MemoryDep('primals_768', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_769', c1, {c0: 4, c1: 1280})]
op1153.outputs = [
    buf1153: ComputedBuffer
    buf1153.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1155'), can_inplace=False, is_weak=False),
    ]
]
op1153.group.device = cuda:0
op1153.group.iteration = (327680, 1)
op1153.sizes = ([4, 1280, 64], [])
buf1148_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1149_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1150_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_768_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_769_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1153_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1153_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1149', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1150', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_768', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_769', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1153', get_index_5, add_1, None)
        return store


op1154: ExternKernelSchedulerNode(ExternKernelOut)
op1154.writes = [StarDep(name='buf1154', mode=None)]
op1154.unmet_dependencies = [StarDep(name='buf1153', mode=None)]
op1154.met_dependencies = [StarDep(name='primals_770', mode=None)]
op1154.outputs = [
    buf1154: ExternKernelOut
    buf1154.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1154.users = [
        NodeUser(node=SchedulerNode(name='op1158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1161'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1183'), can_inplace=True, is_weak=False),
    ]
]
op1154.node.kernel = extern_kernels.bmm


op1155: SchedulerNode(ComputedBuffer)
op1155.writes = [MemoryDep('buf1155', c0, {c0: 327680})]
op1155.unmet_dependencies = [MemoryDep('buf1153', 81920*c0 + c1 + 64*c2, {c0: 4, c1: 64, c2: 1280})]
op1155.met_dependencies = []
op1155.outputs = [
    buf1155: ComputedBuffer
    buf1155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1155.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1156'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1155.group.device = cuda:0
op1155.group.iteration = (327680, 1)
op1155.sizes = ([4, 64, 1280], [])
buf1153_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1155_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 1280}
    index0 = 81920*p0 + p1 + 64*p2
    index1 = 81920*p0 + 1280*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1153', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1155', get_index_1, load, None)
        return store


op1156: ExternKernelSchedulerNode(ExternKernelOut)
op1156.writes = [StarDep(name='buf1156', mode=None)]
op1156.unmet_dependencies = [StarDep(name='buf1155', mode=None)]
op1156.met_dependencies = [StarDep(name='primals_772', mode=None)]
op1156.outputs = [
    buf1156: ExternKernelOut
    buf1156.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1157'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1156.node.kernel = extern_kernels.mm


op1157: ExternKernelSchedulerNode(ExternKernelOut)
op1157.writes = [StarDep(name='buf1157', mode=None)]
op1157.unmet_dependencies = [StarDep(name='buf1156', mode=None)]
op1157.met_dependencies = [StarDep(name='primals_773', mode=None)]
op1157.outputs = [
    buf1157: ExternKernelOut
    buf1157.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1157.users = [
        NodeUser(node=SchedulerNode(name='op1158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1161'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1183'), can_inplace=True, is_weak=False),
    ]
]
op1157.node.kernel = extern_kernels.mm


op1158: SchedulerNode(ComputedBuffer)
op1158.writes = [MemoryDep('buf1158', c0, {c0: 256})]
op1158.unmet_dependencies = [MemoryDep('buf1154', c0, {c0: 327680}), MemoryDep('buf1157', c0, {c0: 327680})]
op1158.met_dependencies = [MemoryDep('primals_771', c1, {c0: 256, c1: 1280})]
op1158.outputs = [
    buf1158: ComputedBuffer
    buf1158.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1158.users = [NodeUser(node=SchedulerNode(name='op1161'), can_inplace=False, is_weak=False)]
]
op1158.group.device = cuda:0
op1158.group.iteration = (256, 1280)
op1158.sizes = ([256], [1280])
buf1154_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_771_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1157_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1158_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_771', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1157', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1158', get_index_3, getitem)
        return store_reduction


op1159: SchedulerNode(ComputedBuffer)
op1159.writes = [MemoryDep('buf1159', c0, {c0: 256})]
op1159.unmet_dependencies = [MemoryDep('buf1154', c0, {c0: 327680}), MemoryDep('buf1157', c0, {c0: 327680})]
op1159.met_dependencies = [MemoryDep('primals_771', c1, {c0: 256, c1: 1280})]
op1159.outputs = [
    buf1159: ComputedBuffer
    buf1159.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1159.users = [
        NodeUser(node=SchedulerNode(name='op1161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2089'), can_inplace=True, is_weak=False),
    ]
]
op1159.group.device = cuda:0
op1159.group.iteration = (256, 1280)
op1159.sizes = ([256], [1280])
buf1154_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_771_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1157_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1159_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1159_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_771', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1157', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1159', get_index_3, getitem_1)
        return store_reduction


op1161: SchedulerNode(ComputedBuffer)
op1161.writes = [MemoryDep('buf1161', c0, {c0: 327680})]
op1161.unmet_dependencies = 
    [   MemoryDep('buf1154', c0, {c0: 327680}),
        MemoryDep('buf1157', c0, {c0: 327680}),
        MemoryDep('buf1158', c0, {c0: 256}),
        MemoryDep('buf1159', c0, {c0: 256})]
op1161.met_dependencies = [MemoryDep('primals_771', c1, {c0: 256, c1: 1280})]
op1161.outputs = [
    buf1161: ComputedBuffer
    buf1161.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1161.users = [
        NodeUser(node=SchedulerNode(name='op1162'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1161.group.device = cuda:0
op1161.group.iteration = (327680, 1)
op1161.sizes = ([256, 1280], [])
buf1154_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_771_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1157_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1159_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1161_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_771', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1157', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1158', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1159', get_index_4)
        constant_1 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1161', get_index_5, mul_1, None)
        return store


op1162: SchedulerNode(ComputedBuffer)
op1162.writes = [MemoryDep('buf1162', c0, {c0: 327680})]
op1162.unmet_dependencies = [MemoryDep('buf1161', c0, {c0: 327680})]
op1162.met_dependencies = 
    [   MemoryDep('primals_774', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_775', c1, {c0: 256, c1: 1280})]
op1162.outputs = [
    buf1162: ComputedBuffer
    buf1162.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1163'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1164'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1167'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1169'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1170'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1162.group.device = cuda:0
op1162.group.iteration = (327680, 1)
op1162.sizes = ([256, 1280], [])
buf1161_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_774_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_775_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1162_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1162_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_774', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_775', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1162', get_index_3, add, None)
        return store


op1163: ExternKernelSchedulerNode(ExternKernelOut)
op1163.writes = [StarDep(name='buf1163', mode=None)]
op1163.unmet_dependencies = [StarDep(name='buf1162', mode=None)]
op1163.met_dependencies = [StarDep(name='primals_776', mode=None)]
op1163.outputs = [
    buf1163: ExternKernelOut
    buf1163.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1163.users = [NodeUser(node=SchedulerNode(name='op1172'), can_inplace=True, is_weak=False)]
]
op1163.node.kernel = extern_kernels.mm


op1164: ExternKernelSchedulerNode(ExternKernelOut)
op1164.writes = [StarDep(name='buf1164', mode=None)]
op1164.unmet_dependencies = [StarDep(name='buf1162', mode=None)]
op1164.met_dependencies = [StarDep(name='primals_777', mode=None)]
op1164.outputs = [
    buf1164: ExternKernelOut
    buf1164.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1165'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1164.node.kernel = extern_kernels.mm


op1165: ExternKernelSchedulerNode(ExternKernelOut)
op1165.writes = [StarDep(name='buf1165', mode=None)]
op1165.unmet_dependencies = [StarDep(name='buf1164', mode=None)]
op1165.met_dependencies = [StarDep(name='primals_778', mode=None)]
op1165.outputs = [
    buf1165: ExternKernelOut
    buf1165.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1165.users = [NodeUser(node=SchedulerNode(name='op1172'), can_inplace=True, is_weak=False)]
]
op1165.node.kernel = extern_kernels.mm


op1166: ExternKernelSchedulerNode(ExternKernelOut)
op1166.writes = [StarDep(name='buf1166', mode=None)]
op1166.unmet_dependencies = [StarDep(name='buf1162', mode=None)]
op1166.met_dependencies = [StarDep(name='primals_779', mode=None)]
op1166.outputs = [
    buf1166: ExternKernelOut
    buf1166.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1166.users = [NodeUser(node=SchedulerNode(name='op1173'), can_inplace=True, is_weak=False)]
]
op1166.node.kernel = extern_kernels.mm


op1167: ExternKernelSchedulerNode(ExternKernelOut)
op1167.writes = [StarDep(name='buf1167', mode=None)]
op1167.unmet_dependencies = [StarDep(name='buf1162', mode=None)]
op1167.met_dependencies = [StarDep(name='primals_780', mode=None)]
op1167.outputs = [
    buf1167: ExternKernelOut
    buf1167.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1168'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1167.node.kernel = extern_kernels.mm


op1168: ExternKernelSchedulerNode(ExternKernelOut)
op1168.writes = [StarDep(name='buf1168', mode=None)]
op1168.unmet_dependencies = [StarDep(name='buf1167', mode=None)]
op1168.met_dependencies = [StarDep(name='primals_781', mode=None)]
op1168.outputs = [
    buf1168: ExternKernelOut
    buf1168.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1168.users = [NodeUser(node=SchedulerNode(name='op1173'), can_inplace=True, is_weak=False)]
]
op1168.node.kernel = extern_kernels.mm


op1169: ExternKernelSchedulerNode(ExternKernelOut)
op1169.writes = [StarDep(name='buf1169', mode=None)]
op1169.unmet_dependencies = [StarDep(name='buf1162', mode=None)]
op1169.met_dependencies = [StarDep(name='primals_782', mode=None)]
op1169.outputs = [
    buf1169: ExternKernelOut
    buf1169.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1169.users = [NodeUser(node=SchedulerNode(name='op1174'), can_inplace=True, is_weak=False)]
]
op1169.node.kernel = extern_kernels.mm


op1170: ExternKernelSchedulerNode(ExternKernelOut)
op1170.writes = [StarDep(name='buf1170', mode=None)]
op1170.unmet_dependencies = [StarDep(name='buf1162', mode=None)]
op1170.met_dependencies = [StarDep(name='primals_783', mode=None)]
op1170.outputs = [
    buf1170: ExternKernelOut
    buf1170.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1171'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1170.node.kernel = extern_kernels.mm


op1171: ExternKernelSchedulerNode(ExternKernelOut)
op1171.writes = [StarDep(name='buf1171', mode=None)]
op1171.unmet_dependencies = [StarDep(name='buf1170', mode=None)]
op1171.met_dependencies = [StarDep(name='primals_784', mode=None)]
op1171.outputs = [
    buf1171: ExternKernelOut
    buf1171.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1171.users = [NodeUser(node=SchedulerNode(name='op1174'), can_inplace=True, is_weak=False)]
]
op1171.node.kernel = extern_kernels.mm


op1172: SchedulerNode(ComputedBuffer)
op1172.writes = [MemoryDep('buf1172', c0, {c0: 327680})]
op1172.unmet_dependencies = [MemoryDep('buf1163', c0, {c0: 327680}), MemoryDep('buf1165', c0, {c0: 327680})]
op1172.met_dependencies = []
op1172.outputs = [
    buf1172: ComputedBuffer
    buf1172.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1172.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1175'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1172.group.device = cuda:0
op1172.group.iteration = (327680, 1)
op1172.sizes = ([327680], [])
buf1163_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1165_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1172_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1165', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1172', get_index_2, add, None)
        return store


op1173: SchedulerNode(ComputedBuffer)
op1173.writes = [MemoryDep('buf1173', c0, {c0: 327680})]
op1173.unmet_dependencies = [MemoryDep('buf1166', c0, {c0: 327680}), MemoryDep('buf1168', c0, {c0: 327680})]
op1173.met_dependencies = []
op1173.outputs = [
    buf1173: ComputedBuffer
    buf1173.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1175'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1173.group.device = cuda:0
op1173.group.iteration = (327680, 1)
op1173.sizes = ([327680], [])
buf1166_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1168_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1173_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1173_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1166', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1168', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1173', get_index_2, add, None)
        return store


op1174: SchedulerNode(ComputedBuffer)
op1174.writes = [MemoryDep('buf1174', c0, {c0: 327680})]
op1174.unmet_dependencies = [MemoryDep('buf1169', c0, {c0: 327680}), MemoryDep('buf1171', c0, {c0: 327680})]
op1174.met_dependencies = []
op1174.outputs = [
    buf1174: ComputedBuffer
    buf1174.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1174.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1175'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1174.group.device = cuda:0
op1174.group.iteration = (327680, 1)
op1174.sizes = ([327680], [])
buf1169_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1174_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1174_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1171', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1174', get_index_2, add, None)
        return store


op1175: ExternKernelSchedulerNode(FallbackKernel)
op1175.writes = [StarDep(name='buf1175', mode=None)]
op1175.unmet_dependencies = 
    [   StarDep(name='buf1172', mode=None),
        StarDep(name='buf1173', mode=None),
        StarDep(name='buf1174', mode=None)]
op1175.met_dependencies = []
op1175.outputs = [
    buf1175: FallbackKernel
    buf1175.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1176'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1179'), can_inplace=False, is_weak=False),
    ]
]
op1175.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1176: ExternKernelSchedulerNode(MultiOutput)
op1176.writes = [StarDep(name='buf1176', mode=None)]
op1176.unmet_dependencies = [StarDep(name='buf1175', mode=None)]
op1176.met_dependencies = []
op1176.outputs = [
    buf1176: MultiOutput
    buf1176.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf1176.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1181'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1176.node.kernel = None


op1177: ExternKernelSchedulerNode(MultiOutput)
op1177.writes = [StarDep(name='buf1177', mode=None)]
op1177.unmet_dependencies = [StarDep(name='buf1175', mode=None)]
op1177.met_dependencies = []
op1177.outputs = [
    buf1177: MultiOutput
    buf1177.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf1177.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1177.node.kernel = None


op1178: ExternKernelSchedulerNode(MultiOutput)
op1178.writes = [StarDep(name='buf1178', mode=None)]
op1178.unmet_dependencies = [StarDep(name='buf1175', mode=None)]
op1178.met_dependencies = []
op1178.outputs = [
    buf1178: MultiOutput
    buf1178.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1178.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1178.node.kernel = None


op1179: ExternKernelSchedulerNode(MultiOutput)
op1179.writes = [StarDep(name='buf1179', mode=None)]
op1179.unmet_dependencies = [StarDep(name='buf1175', mode=None)]
op1179.met_dependencies = []
op1179.outputs = [
    buf1179: MultiOutput
    buf1179.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1179.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1179.node.kernel = None


op1180: ExternKernelSchedulerNode(ExternKernelOut)
op1180.writes = [StarDep(name='buf1180', mode=None)]
op1180.unmet_dependencies = [StarDep(name='buf1176', mode=None)]
op1180.met_dependencies = [StarDep(name='primals_785', mode=None)]
op1180.outputs = [
    buf1180: ExternKernelOut
    buf1180.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1180.users = [NodeUser(node=SchedulerNode(name='op1183'), can_inplace=True, is_weak=False)]
]
op1180.node.kernel = extern_kernels.mm


op1181: ExternKernelSchedulerNode(ExternKernelOut)
op1181.writes = [StarDep(name='buf1181', mode=None)]
op1181.unmet_dependencies = [StarDep(name='buf1176', mode=None)]
op1181.met_dependencies = [StarDep(name='primals_787', mode=None)]
op1181.outputs = [
    buf1181: ExternKernelOut
    buf1181.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1182'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1181.node.kernel = extern_kernels.mm


op1182: ExternKernelSchedulerNode(ExternKernelOut)
op1182.writes = [StarDep(name='buf1182', mode=None)]
op1182.unmet_dependencies = [StarDep(name='buf1181', mode=None)]
op1182.met_dependencies = [StarDep(name='primals_788', mode=None)]
op1182.outputs = [
    buf1182: ExternKernelOut
    buf1182.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1182.users = [NodeUser(node=SchedulerNode(name='op1183'), can_inplace=True, is_weak=False)]
]
op1182.node.kernel = extern_kernels.mm


op1183: SchedulerNode(ComputedBuffer)
op1183.writes = [MemoryDep('buf1183', c0, {c0: 327680})]
op1183.unmet_dependencies = 
    [   MemoryDep('buf1154', c0, {c0: 327680}),
        MemoryDep('buf1157', c0, {c0: 327680}),
        MemoryDep('buf1180', c0, {c0: 327680}),
        MemoryDep('buf1182', c0, {c0: 327680})]
op1183.met_dependencies = 
    [   MemoryDep('primals_771', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_786', c1, {c0: 256, c1: 1280})]
op1183.outputs = [
    buf1183: ComputedBuffer
    buf1183.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1183.users = [
        NodeUser(node=SchedulerNode(name='op1184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1187'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1212'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1222'), can_inplace=True, is_weak=False),
    ]
]
op1183.group.device = cuda:0
op1183.group.iteration = (327680, 1)
op1183.sizes = ([256, 1280], [])
buf1180_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_786_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1182_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1154_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_771_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1157_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1183_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_786', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1182', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1154', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_771', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1157', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1183', get_index_6, add_4, None)
        return store


op1184: SchedulerNode(ComputedBuffer)
op1184.writes = [MemoryDep('buf1184', c0, {c0: 256})]
op1184.unmet_dependencies = [MemoryDep('buf1183', c0, {c0: 327680})]
op1184.met_dependencies = []
op1184.outputs = [
    buf1184: ComputedBuffer
    buf1184.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1184.users = [NodeUser(node=SchedulerNode(name='op1187'), can_inplace=False, is_weak=False)]
]
op1184.group.device = cuda:0
op1184.group.iteration = (256, 1280)
op1184.sizes = ([256], [1280])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1184_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1184_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1184', get_index_1, getitem)
        return store_reduction


op1185: SchedulerNode(ComputedBuffer)
op1185.writes = [MemoryDep('buf1185', c0, {c0: 256})]
op1185.unmet_dependencies = [MemoryDep('buf1183', c0, {c0: 327680})]
op1185.met_dependencies = []
op1185.outputs = [
    buf1185: ComputedBuffer
    buf1185.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1185.users = [
        NodeUser(node=SchedulerNode(name='op1187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2088'), can_inplace=True, is_weak=False),
    ]
]
op1185.group.device = cuda:0
op1185.group.iteration = (256, 1280)
op1185.sizes = ([256], [1280])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1185_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1185', get_index_1, getitem_1)
        return store_reduction


op1187: SchedulerNode(ComputedBuffer)
op1187.writes = [MemoryDep('buf1187', c0, {c0: 327680})]
op1187.unmet_dependencies = 
    [   MemoryDep('buf1183', c0, {c0: 327680}),
        MemoryDep('buf1184', c0, {c0: 256}),
        MemoryDep('buf1185', c0, {c0: 256})]
op1187.met_dependencies = []
op1187.outputs = [
    buf1187: ComputedBuffer
    buf1187.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1187.users = [
        NodeUser(node=SchedulerNode(name='op1188'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1187.group.device = cuda:0
op1187.group.iteration = (327680, 1)
op1187.sizes = ([256, 1280], [])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1184_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1187_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1187_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1184', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1185', get_index_2)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1187', get_index_3, mul, None)
        return store


op1188: SchedulerNode(ComputedBuffer)
op1188.writes = [MemoryDep('buf1188', c0, {c0: 327680})]
op1188.unmet_dependencies = [MemoryDep('buf1187', c0, {c0: 327680})]
op1188.met_dependencies = 
    [   MemoryDep('primals_789', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_790', c1, {c0: 256, c1: 1280})]
op1188.outputs = [
    buf1188: ComputedBuffer
    buf1188.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1189'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1190'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1188.group.device = cuda:0
op1188.group.iteration = (327680, 1)
op1188.sizes = ([256, 1280], [])
buf1187_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_789_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_790_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1188_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_789', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_790', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1188', get_index_3, add, None)
        return store


op1189: ExternKernelSchedulerNode(ExternKernelOut)
op1189.writes = [StarDep(name='buf1189', mode=None)]
op1189.unmet_dependencies = [StarDep(name='buf1188', mode=None)]
op1189.met_dependencies = [StarDep(name='primals_791', mode=None)]
op1189.outputs = [
    buf1189: ExternKernelOut
    buf1189.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1189.users = [NodeUser(node=SchedulerNode(name='op1198'), can_inplace=True, is_weak=False)]
]
op1189.node.kernel = extern_kernels.mm


op1190: ExternKernelSchedulerNode(ExternKernelOut)
op1190.writes = [StarDep(name='buf1190', mode=None)]
op1190.unmet_dependencies = [StarDep(name='buf1188', mode=None)]
op1190.met_dependencies = [StarDep(name='primals_792', mode=None)]
op1190.outputs = [
    buf1190: ExternKernelOut
    buf1190.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1191'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1190.node.kernel = extern_kernels.mm


op1191: ExternKernelSchedulerNode(ExternKernelOut)
op1191.writes = [StarDep(name='buf1191', mode=None)]
op1191.unmet_dependencies = [StarDep(name='buf1190', mode=None)]
op1191.met_dependencies = [StarDep(name='primals_793', mode=None)]
op1191.outputs = [
    buf1191: ExternKernelOut
    buf1191.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1191.users = [NodeUser(node=SchedulerNode(name='op1198'), can_inplace=True, is_weak=False)]
]
op1191.node.kernel = extern_kernels.mm


op1192: ExternKernelSchedulerNode(ExternKernelOut)
op1192.writes = [StarDep(name='buf1192', mode=None)]
op1192.unmet_dependencies = []
op1192.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_794', mode=None)]
op1192.outputs = [
    buf1192: ExternKernelOut
    buf1192.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1192.users = [NodeUser(node=SchedulerNode(name='op1199'), can_inplace=True, is_weak=False)]
]
op1192.node.kernel = extern_kernels.mm


op1193: ExternKernelSchedulerNode(ExternKernelOut)
op1193.writes = [StarDep(name='buf1193', mode=None)]
op1193.unmet_dependencies = []
op1193.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_795', mode=None)]
op1193.outputs = [
    buf1193: ExternKernelOut
    buf1193.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1193.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1194'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1193.node.kernel = extern_kernels.mm


op1194: ExternKernelSchedulerNode(ExternKernelOut)
op1194.writes = [StarDep(name='buf1194', mode=None)]
op1194.unmet_dependencies = [StarDep(name='buf1193', mode=None)]
op1194.met_dependencies = [StarDep(name='primals_796', mode=None)]
op1194.outputs = [
    buf1194: ExternKernelOut
    buf1194.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1194.users = [NodeUser(node=SchedulerNode(name='op1199'), can_inplace=True, is_weak=False)]
]
op1194.node.kernel = extern_kernels.mm


op1195: ExternKernelSchedulerNode(ExternKernelOut)
op1195.writes = [StarDep(name='buf1195', mode=None)]
op1195.unmet_dependencies = []
op1195.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_797', mode=None)]
op1195.outputs = [
    buf1195: ExternKernelOut
    buf1195.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1195.users = [NodeUser(node=SchedulerNode(name='op1200'), can_inplace=True, is_weak=False)]
]
op1195.node.kernel = extern_kernels.mm


op1196: ExternKernelSchedulerNode(ExternKernelOut)
op1196.writes = [StarDep(name='buf1196', mode=None)]
op1196.unmet_dependencies = []
op1196.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_798', mode=None)]
op1196.outputs = [
    buf1196: ExternKernelOut
    buf1196.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1196.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1197'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1196.node.kernel = extern_kernels.mm


op1197: ExternKernelSchedulerNode(ExternKernelOut)
op1197.writes = [StarDep(name='buf1197', mode=None)]
op1197.unmet_dependencies = [StarDep(name='buf1196', mode=None)]
op1197.met_dependencies = [StarDep(name='primals_799', mode=None)]
op1197.outputs = [
    buf1197: ExternKernelOut
    buf1197.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1197.users = [NodeUser(node=SchedulerNode(name='op1200'), can_inplace=True, is_weak=False)]
]
op1197.node.kernel = extern_kernels.mm


op1198: SchedulerNode(ComputedBuffer)
op1198.writes = [MemoryDep('buf1198', c0, {c0: 327680})]
op1198.unmet_dependencies = [MemoryDep('buf1189', c0, {c0: 327680}), MemoryDep('buf1191', c0, {c0: 327680})]
op1198.met_dependencies = []
op1198.outputs = [
    buf1198: ComputedBuffer
    buf1198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1201'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1198.group.device = cuda:0
op1198.group.iteration = (327680, 1)
op1198.sizes = ([327680], [])
buf1189_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1191_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1198_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1191', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1198', get_index_2, add, None)
        return store


op1199: SchedulerNode(ComputedBuffer)
op1199.writes = [MemoryDep('buf1199', c0, {c0: 394240})]
op1199.unmet_dependencies = [MemoryDep('buf1192', c0, {c0: 394240}), MemoryDep('buf1194', c0, {c0: 394240})]
op1199.met_dependencies = []
op1199.outputs = [
    buf1199: ComputedBuffer
    buf1199.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1199.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1201'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1199.group.device = cuda:0
op1199.group.iteration = (394240, 1)
op1199.sizes = ([394240], [])
buf1192_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1194_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1199_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1199_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1194', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1199', get_index_2, add, None)
        return store


op1200: SchedulerNode(ComputedBuffer)
op1200.writes = [MemoryDep('buf1200', c0, {c0: 394240})]
op1200.unmet_dependencies = [MemoryDep('buf1195', c0, {c0: 394240}), MemoryDep('buf1197', c0, {c0: 394240})]
op1200.met_dependencies = []
op1200.outputs = [
    buf1200: ComputedBuffer
    buf1200.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1201'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1200.group.device = cuda:0
op1200.group.iteration = (394240, 1)
op1200.sizes = ([394240], [])
buf1195_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1197_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1200_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1200_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1197', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1200', get_index_2, add, None)
        return store


op1201: ExternKernelSchedulerNode(FallbackKernel)
op1201.writes = [StarDep(name='buf1201', mode=None)]
op1201.unmet_dependencies = 
    [   StarDep(name='buf1198', mode=None),
        StarDep(name='buf1199', mode=None),
        StarDep(name='buf1200', mode=None)]
op1201.met_dependencies = []
op1201.outputs = [
    buf1201: FallbackKernel
    buf1201.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1201.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1202'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1205'), can_inplace=False, is_weak=False),
    ]
]
op1201.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1202: ExternKernelSchedulerNode(MultiOutput)
op1202.writes = [StarDep(name='buf1202', mode=None)]
op1202.unmet_dependencies = [StarDep(name='buf1201', mode=None)]
op1202.met_dependencies = []
op1202.outputs = [
    buf1202: MultiOutput
    buf1202.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf1202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1202.node.kernel = None


op1203: ExternKernelSchedulerNode(MultiOutput)
op1203.writes = [StarDep(name='buf1203', mode=None)]
op1203.unmet_dependencies = [StarDep(name='buf1201', mode=None)]
op1203.met_dependencies = []
op1203.outputs = [
    buf1203: MultiOutput
    buf1203.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf1203.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1203.node.kernel = None


op1204: ExternKernelSchedulerNode(MultiOutput)
op1204.writes = [StarDep(name='buf1204', mode=None)]
op1204.unmet_dependencies = [StarDep(name='buf1201', mode=None)]
op1204.met_dependencies = []
op1204.outputs = [
    buf1204: MultiOutput
    buf1204.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1204.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1204.node.kernel = None


op1205: ExternKernelSchedulerNode(MultiOutput)
op1205.writes = [StarDep(name='buf1205', mode=None)]
op1205.unmet_dependencies = [StarDep(name='buf1201', mode=None)]
op1205.met_dependencies = []
op1205.outputs = [
    buf1205: MultiOutput
    buf1205.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1205.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1205.node.kernel = None


op1206: ExternKernelSchedulerNode(ExternKernelOut)
op1206.writes = [StarDep(name='buf1206', mode=None)]
op1206.unmet_dependencies = [StarDep(name='buf1202', mode=None)]
op1206.met_dependencies = [StarDep(name='primals_800', mode=None)]
op1206.outputs = [
    buf1206: ExternKernelOut
    buf1206.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1206.users = [
        NodeUser(node=SchedulerNode(name='op1209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1212'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1222'), can_inplace=True, is_weak=False),
    ]
]
op1206.node.kernel = extern_kernels.mm


op1207: ExternKernelSchedulerNode(ExternKernelOut)
op1207.writes = [StarDep(name='buf1207', mode=None)]
op1207.unmet_dependencies = [StarDep(name='buf1202', mode=None)]
op1207.met_dependencies = [StarDep(name='primals_802', mode=None)]
op1207.outputs = [
    buf1207: ExternKernelOut
    buf1207.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1207.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1208'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1207.node.kernel = extern_kernels.mm


op1208: ExternKernelSchedulerNode(ExternKernelOut)
op1208.writes = [StarDep(name='buf1208', mode=None)]
op1208.unmet_dependencies = [StarDep(name='buf1207', mode=None)]
op1208.met_dependencies = [StarDep(name='primals_803', mode=None)]
op1208.outputs = [
    buf1208: ExternKernelOut
    buf1208.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1208.users = [
        NodeUser(node=SchedulerNode(name='op1209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1212'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1222'), can_inplace=True, is_weak=False),
    ]
]
op1208.node.kernel = extern_kernels.mm


op1209: SchedulerNode(ComputedBuffer)
op1209.writes = [MemoryDep('buf1209', c0, {c0: 256})]
op1209.unmet_dependencies = 
    [   MemoryDep('buf1183', c0, {c0: 327680}),
        MemoryDep('buf1206', c0, {c0: 327680}),
        MemoryDep('buf1208', c0, {c0: 327680})]
op1209.met_dependencies = [MemoryDep('primals_801', c1, {c0: 256, c1: 1280})]
op1209.outputs = [
    buf1209: ComputedBuffer
    buf1209.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1209.users = [NodeUser(node=SchedulerNode(name='op1212'), can_inplace=False, is_weak=False)]
]
op1209.group.device = cuda:0
op1209.group.iteration = (256, 1280)
op1209.sizes = ([256], [1280])
buf1206_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_801_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1208_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1209_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1209_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_801', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1208', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1183', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1209', get_index_4, getitem)
        return store_reduction


op1210: SchedulerNode(ComputedBuffer)
op1210.writes = [MemoryDep('buf1210', c0, {c0: 256})]
op1210.unmet_dependencies = 
    [   MemoryDep('buf1183', c0, {c0: 327680}),
        MemoryDep('buf1206', c0, {c0: 327680}),
        MemoryDep('buf1208', c0, {c0: 327680})]
op1210.met_dependencies = [MemoryDep('primals_801', c1, {c0: 256, c1: 1280})]
op1210.outputs = [
    buf1210: ComputedBuffer
    buf1210.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1210.users = [
        NodeUser(node=SchedulerNode(name='op1212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2087'), can_inplace=True, is_weak=False),
    ]
]
op1210.group.device = cuda:0
op1210.group.iteration = (256, 1280)
op1210.sizes = ([256], [1280])
buf1206_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_801_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1208_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1210_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1210_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_801', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1208', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1183', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1210', get_index_4, getitem_1)
        return store_reduction


op1212: SchedulerNode(ComputedBuffer)
op1212.writes = [MemoryDep('buf1212', c0, {c0: 327680})]
op1212.unmet_dependencies = 
    [   MemoryDep('buf1183', c0, {c0: 327680}),
        MemoryDep('buf1206', c0, {c0: 327680}),
        MemoryDep('buf1208', c0, {c0: 327680}),
        MemoryDep('buf1209', c0, {c0: 256}),
        MemoryDep('buf1210', c0, {c0: 256})]
op1212.met_dependencies = [MemoryDep('primals_801', c1, {c0: 256, c1: 1280})]
op1212.outputs = [
    buf1212: ComputedBuffer
    buf1212.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1212.users = [
        NodeUser(node=SchedulerNode(name='op1213'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1212.group.device = cuda:0
op1212.group.iteration = (327680, 1)
op1212.sizes = ([256, 1280], [])
buf1206_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_801_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1208_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1209_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1210_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1212_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1212_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_801', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1208', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1183', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1209', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1210', get_index_5)
        constant_2 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1212', get_index_6, mul_2, None)
        return store


op1213: SchedulerNode(ComputedBuffer)
op1213.writes = [MemoryDep('buf1213', c0, {c0: 327680})]
op1213.unmet_dependencies = [MemoryDep('buf1212', c0, {c0: 327680})]
op1213.met_dependencies = 
    [   MemoryDep('primals_804', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_805', c1, {c0: 256, c1: 1280})]
op1213.outputs = [
    buf1213: ComputedBuffer
    buf1213.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1214'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1215'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1213.group.device = cuda:0
op1213.group.iteration = (327680, 1)
op1213.sizes = ([256, 1280], [])
buf1212_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_804_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_805_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1213_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1213_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_804', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_805', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1213', get_index_3, add, None)
        return store


op1214: ExternKernelSchedulerNode(ExternKernelOut)
op1214.writes = [StarDep(name='buf1214', mode=None)]
op1214.unmet_dependencies = [StarDep(name='buf1213', mode=None)]
op1214.met_dependencies = [StarDep(name='primals_806', mode=None)]
op1214.outputs = [
    buf1214: ExternKernelOut
    buf1214.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf1214.users = [NodeUser(node=SchedulerNode(name='op1217'), can_inplace=True, is_weak=False)]
]
op1214.node.kernel = extern_kernels.mm


op1215: ExternKernelSchedulerNode(ExternKernelOut)
op1215.writes = [StarDep(name='buf1215', mode=None)]
op1215.unmet_dependencies = [StarDep(name='buf1213', mode=None)]
op1215.met_dependencies = [StarDep(name='primals_808', mode=None)]
op1215.outputs = [
    buf1215: ExternKernelOut
    buf1215.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1215.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1216'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1215.node.kernel = extern_kernels.mm


op1216: ExternKernelSchedulerNode(ExternKernelOut)
op1216.writes = [StarDep(name='buf1216', mode=None)]
op1216.unmet_dependencies = [StarDep(name='buf1215', mode=None)]
op1216.met_dependencies = [StarDep(name='primals_809', mode=None)]
op1216.outputs = [
    buf1216: ExternKernelOut
    buf1216.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf1216.users = [NodeUser(node=SchedulerNode(name='op1217'), can_inplace=True, is_weak=False)]
]
op1216.node.kernel = extern_kernels.mm


op1217: SchedulerNode(ComputedBuffer)
op1217.writes = [MemoryDep('buf1217', c0, {c0: 2621440})]
op1217.unmet_dependencies = 
    [   MemoryDep('buf1214', c0, {c0: 2621440}),
        MemoryDep('buf1216', c0, {c0: 2621440})]
op1217.met_dependencies = [MemoryDep('primals_807', c1, {c0: 256, c1: 10240})]
op1217.outputs = [
    buf1217: ComputedBuffer
    buf1217.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
    buf1217.users = [
        NodeUser(node=SchedulerNode(name='op1218'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1217.group.device = cuda:0
op1217.group.iteration = (2621440, 1)
op1217.sizes = ([256, 10240], [])
buf1214_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
primals_807_layout = FixedLayout('cuda:0', torch.float32, size=[10240], stride=[1])
buf1216_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
buf1217_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
class op1217_loop_body:
    var_ranges = {p0: 256, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_807', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1216', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1217', get_index_3, add_1, None)
        return store


op1218: SchedulerNode(ComputedBuffer)
op1218.writes = [MemoryDep('buf1218', c0, {c0: 1310720})]
op1218.unmet_dependencies = 
    [   MemoryDep('buf1217', 10240*c0 + c1 + 5120, {c0: 256, c1: 5120}),
        MemoryDep('buf1217', 10240*c0 + c1, {c0: 256, c1: 5120})]
op1218.met_dependencies = []
op1218.outputs = [
    buf1218: ComputedBuffer
    buf1218.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
    buf1218.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1220'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1218.group.device = cuda:0
op1218.group.iteration = (1310720, 1)
op1218.sizes = ([256, 5120], [])
buf1217_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf1217_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf1218_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
class op1218_loop_body:
    var_ranges = {p0: 256, p1: 5120}
    index0 = 10240*p0 + p1
    index1 = 10240*p0 + p1 + 5120
    index2 = 5120*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1217', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1217', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1218', get_index_3, mul_3, None)
        return store


op1219: ExternKernelSchedulerNode(ExternKernelOut)
op1219.writes = [StarDep(name='buf1219', mode=None)]
op1219.unmet_dependencies = [StarDep(name='buf1218', mode=None)]
op1219.met_dependencies = [StarDep(name='primals_810', mode=None)]
op1219.outputs = [
    buf1219: ExternKernelOut
    buf1219.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1219.users = [NodeUser(node=SchedulerNode(name='op1222'), can_inplace=True, is_weak=False)]
]
op1219.node.kernel = extern_kernels.mm


op1220: ExternKernelSchedulerNode(ExternKernelOut)
op1220.writes = [StarDep(name='buf1220', mode=None)]
op1220.unmet_dependencies = [StarDep(name='buf1218', mode=None)]
op1220.met_dependencies = [StarDep(name='primals_812', mode=None)]
op1220.outputs = [
    buf1220: ExternKernelOut
    buf1220.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1220.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1221'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1220.node.kernel = extern_kernels.mm


op1221: ExternKernelSchedulerNode(ExternKernelOut)
op1221.writes = [StarDep(name='buf1221', mode=None)]
op1221.unmet_dependencies = [StarDep(name='buf1220', mode=None)]
op1221.met_dependencies = [StarDep(name='primals_813', mode=None)]
op1221.outputs = [
    buf1221: ExternKernelOut
    buf1221.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1221.users = [NodeUser(node=SchedulerNode(name='op1222'), can_inplace=True, is_weak=False)]
]
op1221.node.kernel = extern_kernels.mm


op1222: SchedulerNode(ComputedBuffer)
op1222.writes = [MemoryDep('buf1222', c0, {c0: 327680})]
op1222.unmet_dependencies = 
    [   MemoryDep('buf1183', c0, {c0: 327680}),
        MemoryDep('buf1206', c0, {c0: 327680}),
        MemoryDep('buf1208', c0, {c0: 327680}),
        MemoryDep('buf1219', c0, {c0: 327680}),
        MemoryDep('buf1221', c0, {c0: 327680})]
op1222.met_dependencies = 
    [   MemoryDep('primals_801', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_811', c1, {c0: 256, c1: 1280})]
op1222.outputs = [
    buf1222: ComputedBuffer
    buf1222.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1222.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1224'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1222.group.device = cuda:0
op1222.group.iteration = (327680, 1)
op1222.sizes = ([256, 1280], [])
buf1219_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_811_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1221_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1206_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_801_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1208_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1183_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1222_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1222_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_811', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1221', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1206', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_801', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1208', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1183', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1222', get_index_7, add_5, None)
        return store


op1223: ExternKernelSchedulerNode(ExternKernelOut)
op1223.writes = [StarDep(name='buf1223', mode=None)]
op1223.unmet_dependencies = [StarDep(name='buf1222', mode=None)]
op1223.met_dependencies = [StarDep(name='primals_814', mode=None)]
op1223.outputs = [
    buf1223: ExternKernelOut
    buf1223.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1223.users = [NodeUser(node=SchedulerNode(name='op1226'), can_inplace=False, is_weak=False)]
]
op1223.node.kernel = extern_kernels.mm


op1224: ExternKernelSchedulerNode(ExternKernelOut)
op1224.writes = [StarDep(name='buf1224', mode=None)]
op1224.unmet_dependencies = [StarDep(name='buf1222', mode=None)]
op1224.met_dependencies = [StarDep(name='primals_816', mode=None)]
op1224.outputs = [
    buf1224: ExternKernelOut
    buf1224.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1224.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1225'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1224.node.kernel = extern_kernels.mm


op1225: ExternKernelSchedulerNode(ExternKernelOut)
op1225.writes = [StarDep(name='buf1225', mode=None)]
op1225.unmet_dependencies = [StarDep(name='buf1224', mode=None)]
op1225.met_dependencies = [StarDep(name='primals_817', mode=None)]
op1225.outputs = [
    buf1225: ExternKernelOut
    buf1225.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1225.users = [NodeUser(node=SchedulerNode(name='op1226'), can_inplace=False, is_weak=False)]
]
op1225.node.kernel = extern_kernels.mm


op1226: SchedulerNode(ComputedBuffer)
op1226.writes = [MemoryDep('buf1226', c0, {c0: 655360})]
op1226.unmet_dependencies = 
    [   MemoryDep('buf1148', 81920*c0 + c2 + 64*(I), {c0: 4, c1: 2560, c2: 64}),
        MemoryDep('buf1223', 81920*c0 + 1280*c2 + (I), {c0: 4, c1: 2560, c2: 64}),
        MemoryDep('buf1225', 81920*c0 + 1280*c2 + (I), {c0: 4, c1: 2560, c2: 64}),
        MemoryDep('buf782', 81920*c0 + c2 + 64*(I), {c0: 4, c1: 2560, c2: 64})]
op1226.met_dependencies = [MemoryDep('primals_815', I, {c0: 4, c1: 2560})]
op1226.outputs = [
    buf1226: ComputedBuffer
    buf1226.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
    buf1226.users = [
        NodeUser(node=SchedulerNode(name='op1227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1231'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1248'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1226.group.device = cuda:0
op1226.group.iteration = (655360, 1)
op1226.sizes = ([4, 2560, 64], [])
buf1223_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_815_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1225_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1148_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf782_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1226_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
class op1226_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 64}
    index0 = p1
    index1 = 81920*p0 + 1280*p2 + (I)
    index2 = I
    index3 = 81920*p0 + p2 + 64*(I)
    index4 = 81920*p0 + p2 + 64*(I)
    index5 = 163840*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2560, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1226', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1223', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_815', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1225', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1148', get_index_3)
        add_2 = ops.add(add_1, load_3)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf782', get_index)
        return load


op1227: SchedulerNode(ComputedBuffer)
op1227.writes = [MemoryDep('buf1227', c0, {c0: 128})]
op1227.unmet_dependencies = [MemoryDep('buf1226', c0, {c0: 655360})]
op1227.met_dependencies = []
op1227.outputs = [
    buf1227: ComputedBuffer
    buf1227.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1227.users = [
        NodeUser(node=SchedulerNode(name='op1231'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1227.group.device = cuda:0
op1227.group.iteration = (128, 5120)
op1227.sizes = ([128], [5120])
buf1226_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1227_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1226', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1227', get_index_1, getitem)
        return store_reduction


op1228: SchedulerNode(ComputedBuffer)
op1228.writes = [MemoryDep('buf1228', c0, {c0: 128})]
op1228.unmet_dependencies = [MemoryDep('buf1226', c0, {c0: 655360})]
op1228.met_dependencies = []
op1228.outputs = [
    buf1228: ComputedBuffer
    buf1228.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1228.users = [NodeUser(node=SchedulerNode(name='op1230'), can_inplace=True, is_weak=False)]
]
op1228.group.device = cuda:0
op1228.group.iteration = (128, 5120)
op1228.sizes = ([128], [5120])
buf1226_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1228_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1226', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1228', get_index_1, getitem_1)
        return store_reduction


op1230: SchedulerNode(ComputedBuffer)
op1230.writes = [MemoryDep('buf1230', c0, {c0: 128})]
op1230.unmet_dependencies = [MemoryDep('buf1228', c0, {c0: 128})]
op1230.met_dependencies = []
op1230.outputs = [
    buf1230: ComputedBuffer
    buf1230.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1230.users = [
        NodeUser(node=SchedulerNode(name='op1231'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1230.group.device = cuda:0
op1230.group.iteration = (128, 1)
op1230.sizes = ([128], [])
buf1228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1230_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1230_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1228', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1230', get_index_1, rsqrt, None)
        return store


op1231: SchedulerNode(ComputedBuffer)
op1231.writes = [MemoryDep('buf1231', c0, {c0: 655360})]
op1231.unmet_dependencies = 
    [   MemoryDep('buf1226', c0, {c0: 655360}),
        MemoryDep('buf1227', 32*c0 + ((c1//80)), {c0: 4, c1: 2560}),
        MemoryDep('buf1230', 32*c0 + ((c1//80)), {c0: 4, c1: 2560})]
op1231.met_dependencies = 
    [   MemoryDep('primals_818', c1, {c0: 4, c1: 2560}),
        MemoryDep('primals_819', c1, {c0: 4, c1: 2560})]
op1231.outputs = [
    buf1231: ComputedBuffer
    buf1231.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
    buf1231.users = [NodeUser(node=SchedulerNode(name='op1232'), can_inplace=True, is_weak=False)]
]
op1231.group.device = cuda:0
op1231.group.iteration = (655360, 1)
op1231.sizes = ([4, 2560, 64], [])
buf1226_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1230_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_818_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
primals_819_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1231_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
class op1231_loop_body:
    var_ranges = {p0: 4, p1: 2560, p2: 64}
    index0 = 163840*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//80))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1227', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1230', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_818', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_819', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1231', get_index_5, add, None)
        return store


op1232: SchedulerNode(ComputedBuffer)
op1232.writes = [MemoryDep('buf1232', c0, {c0: 655360})]
op1232.unmet_dependencies = [MemoryDep('buf1231', c0, {c0: 655360})]
op1232.met_dependencies = []
op1232.outputs = [
    buf1232: ComputedBuffer
    buf1232.layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
    buf1232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1234'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1232.group.device = cuda:0
op1232.group.iteration = (655360, 1)
op1232.sizes = ([655360], [])
buf1231_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
buf1232_layout = FixedLayout('cuda:0', torch.float32, size=[4, 2560, 8, 8], stride=[163840, 64, 8, 1])
class op1232_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1231', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1232', get_index_2, mul, None)
        return store


op1233: ExternKernelSchedulerNode(ExternKernelAlloc)
op1233.writes = [StarDep(name='buf1233', mode=None)]
op1233.unmet_dependencies = [StarDep(name='buf1232', mode=None)]
op1233.met_dependencies = [StarDep(name='primals_820', mode=None)]
op1233.outputs = [
    buf1233: ExternKernelAlloc
    buf1233.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1233.users = [NodeUser(node=SchedulerNode(name='op1237'), can_inplace=True, is_weak=False)]
]
op1233.node.kernel = extern_kernels.convolution


op1234: ExternKernelSchedulerNode(ExternKernelAlloc)
op1234.writes = [StarDep(name='buf1234', mode=None)]
op1234.unmet_dependencies = [StarDep(name='buf1232', mode=None)]
op1234.met_dependencies = [StarDep(name='primals_822', mode=None)]
op1234.outputs = [
    buf1234: ExternKernelAlloc
    buf1234.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1234.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1235'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1234.node.kernel = extern_kernels.convolution


op1235: ExternKernelSchedulerNode(ExternKernelAlloc)
op1235.writes = [StarDep(name='buf1235', mode=None)]
op1235.unmet_dependencies = [StarDep(name='buf1234', mode=None)]
op1235.met_dependencies = [StarDep(name='primals_823', mode=None)]
op1235.outputs = [
    buf1235: ExternKernelAlloc
    buf1235.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1235.users = [NodeUser(node=SchedulerNode(name='op1237'), can_inplace=True, is_weak=False)]
]
op1235.node.kernel = extern_kernels.convolution


op1236: ExternKernelSchedulerNode(ExternKernelOut)
op1236.writes = [StarDep(name='buf1236', mode=None)]
op1236.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1236.met_dependencies = [StarDep(name='primals_824', mode=None)]
op1236.outputs = [
    buf1236: ExternKernelOut
    buf1236.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1236.users = [NodeUser(node=SchedulerNode(name='op1237'), can_inplace=False, is_weak=False)]
]
op1236.node.kernel = extern_kernels.mm


op1237: SchedulerNode(ComputedBuffer)
op1237.writes = [MemoryDep('buf1237', c0, {c0: 327680})]
op1237.unmet_dependencies = 
    [   MemoryDep('buf1233', c0, {c0: 327680}),
        MemoryDep('buf1235', c0, {c0: 327680}),
        MemoryDep('buf1236', c0, {c0: 5120})]
op1237.met_dependencies = 
    [   MemoryDep('primals_821', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_825', c1, {c0: 4, c1: 1280})]
op1237.outputs = [
    buf1237: ComputedBuffer
    buf1237.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1237.users = [
        NodeUser(node=SchedulerNode(name='op1238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1242'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1237.group.device = cuda:0
op1237.group.iteration = (327680, 1)
op1237.sizes = ([4, 1280, 64], [])
buf1233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_821_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1236_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_825_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1237_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_821', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1235', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1236', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_825', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1237', get_index_5, add_3, None)
        return store


op1238: SchedulerNode(ComputedBuffer)
op1238.writes = [MemoryDep('buf1238', c0, {c0: 128})]
op1238.unmet_dependencies = [MemoryDep('buf1237', c0, {c0: 327680})]
op1238.met_dependencies = []
op1238.outputs = [
    buf1238: ComputedBuffer
    buf1238.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1238.users = [
        NodeUser(node=SchedulerNode(name='op1242'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1238.group.device = cuda:0
op1238.group.iteration = (128, 2560)
op1238.sizes = ([128], [2560])
buf1237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1238_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1237', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1238', get_index_1, getitem)
        return store_reduction


op1239: SchedulerNode(ComputedBuffer)
op1239.writes = [MemoryDep('buf1239', c0, {c0: 128})]
op1239.unmet_dependencies = [MemoryDep('buf1237', c0, {c0: 327680})]
op1239.met_dependencies = []
op1239.outputs = [
    buf1239: ComputedBuffer
    buf1239.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1239.users = [NodeUser(node=SchedulerNode(name='op1241'), can_inplace=True, is_weak=False)]
]
op1239.group.device = cuda:0
op1239.group.iteration = (128, 2560)
op1239.sizes = ([128], [2560])
buf1237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1239_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1239_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1237', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1239', get_index_1, getitem_1)
        return store_reduction


op1241: SchedulerNode(ComputedBuffer)
op1241.writes = [MemoryDep('buf1241', c0, {c0: 128})]
op1241.unmet_dependencies = [MemoryDep('buf1239', c0, {c0: 128})]
op1241.met_dependencies = []
op1241.outputs = [
    buf1241: ComputedBuffer
    buf1241.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1241.users = [
        NodeUser(node=SchedulerNode(name='op1242'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1241.group.device = cuda:0
op1241.group.iteration = (128, 1)
op1241.sizes = ([128], [])
buf1239_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1241_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1241_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1239', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1241', get_index_1, rsqrt, None)
        return store


op1242: SchedulerNode(ComputedBuffer)
op1242.writes = [MemoryDep('buf1242', c0, {c0: 327680})]
op1242.unmet_dependencies = 
    [   MemoryDep('buf1237', c0, {c0: 327680}),
        MemoryDep('buf1238', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1241', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1242.met_dependencies = 
    [   MemoryDep('primals_826', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_827', c1, {c0: 4, c1: 1280})]
op1242.outputs = [
    buf1242: ComputedBuffer
    buf1242.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1242.users = [NodeUser(node=SchedulerNode(name='op1243'), can_inplace=True, is_weak=False)]
]
op1242.group.device = cuda:0
op1242.group.iteration = (327680, 1)
op1242.sizes = ([4, 1280, 64], [])
buf1237_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1238_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1241_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_826_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_827_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1242_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1242_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1238', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1241', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_826', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_827', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1242', get_index_5, add, None)
        return store


op1243: SchedulerNode(ComputedBuffer)
op1243.writes = [MemoryDep('buf1243', c0, {c0: 327680})]
op1243.unmet_dependencies = [MemoryDep('buf1242', c0, {c0: 327680})]
op1243.met_dependencies = []
op1243.outputs = [
    buf1243: ComputedBuffer
    buf1243.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1243.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1245'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1243.group.device = cuda:0
op1243.group.iteration = (327680, 1)
op1243.sizes = ([327680], [])
buf1242_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1243_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1243_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1242', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1243', get_index_2, mul, None)
        return store


op1244: ExternKernelSchedulerNode(ExternKernelAlloc)
op1244.writes = [StarDep(name='buf1244', mode=None)]
op1244.unmet_dependencies = [StarDep(name='buf1243', mode=None)]
op1244.met_dependencies = [StarDep(name='primals_828', mode=None)]
op1244.outputs = [
    buf1244: ExternKernelAlloc
    buf1244.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1244.users = [NodeUser(node=SchedulerNode(name='op1250'), can_inplace=True, is_weak=False)]
]
op1244.node.kernel = extern_kernels.convolution


op1245: ExternKernelSchedulerNode(ExternKernelAlloc)
op1245.writes = [StarDep(name='buf1245', mode=None)]
op1245.unmet_dependencies = [StarDep(name='buf1243', mode=None)]
op1245.met_dependencies = [StarDep(name='primals_830', mode=None)]
op1245.outputs = [
    buf1245: ExternKernelAlloc
    buf1245.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1246'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1245.node.kernel = extern_kernels.convolution


op1246: ExternKernelSchedulerNode(ExternKernelAlloc)
op1246.writes = [StarDep(name='buf1246', mode=None)]
op1246.unmet_dependencies = [StarDep(name='buf1245', mode=None)]
op1246.met_dependencies = [StarDep(name='primals_831', mode=None)]
op1246.outputs = [
    buf1246: ExternKernelAlloc
    buf1246.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1246.users = [NodeUser(node=SchedulerNode(name='op1250'), can_inplace=True, is_weak=False)]
]
op1246.node.kernel = extern_kernels.convolution


op1247: ExternKernelSchedulerNode(ExternKernelAlloc)
op1247.writes = [StarDep(name='buf1247', mode=None)]
op1247.unmet_dependencies = [StarDep(name='buf1226', mode=None)]
op1247.met_dependencies = [StarDep(name='primals_832', mode=None)]
op1247.outputs = [
    buf1247: ExternKernelAlloc
    buf1247.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1247.users = [NodeUser(node=SchedulerNode(name='op1250'), can_inplace=True, is_weak=False)]
]
op1247.node.kernel = extern_kernels.convolution


op1248: ExternKernelSchedulerNode(ExternKernelAlloc)
op1248.writes = [StarDep(name='buf1248', mode=None)]
op1248.unmet_dependencies = [StarDep(name='buf1226', mode=None)]
op1248.met_dependencies = [StarDep(name='primals_834', mode=None)]
op1248.outputs = [
    buf1248: ExternKernelAlloc
    buf1248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1248.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1249'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1248.node.kernel = extern_kernels.convolution


op1249: ExternKernelSchedulerNode(ExternKernelAlloc)
op1249.writes = [StarDep(name='buf1249', mode=None)]
op1249.unmet_dependencies = [StarDep(name='buf1248', mode=None)]
op1249.met_dependencies = [StarDep(name='primals_835', mode=None)]
op1249.outputs = [
    buf1249: ExternKernelAlloc
    buf1249.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1249.users = [NodeUser(node=SchedulerNode(name='op1250'), can_inplace=True, is_weak=False)]
]
op1249.node.kernel = extern_kernels.convolution


op1250: SchedulerNode(ComputedBuffer)
op1250.writes = [MemoryDep('buf1250', c0, {c0: 327680})]
op1250.unmet_dependencies = 
    [   MemoryDep('buf1244', c0, {c0: 327680}),
        MemoryDep('buf1246', c0, {c0: 327680}),
        MemoryDep('buf1247', c0, {c0: 327680}),
        MemoryDep('buf1249', c0, {c0: 327680})]
op1250.met_dependencies = 
    [   MemoryDep('primals_829', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_833', c1, {c0: 4, c1: 1280})]
op1250.outputs = [
    buf1250: ComputedBuffer
    buf1250.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1250.users = [
        NodeUser(node=SchedulerNode(name='op1251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1255'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1250.group.device = cuda:0
op1250.group.iteration = (327680, 1)
op1250.sizes = ([4, 1280, 64], [])
buf1247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_833_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1244_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_829_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1246_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1250_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_833', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1249', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1244', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_829', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1246', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1250', get_index_6, mul_2, None)
        return store


op1251: SchedulerNode(ComputedBuffer)
op1251.writes = [MemoryDep('buf1251', c0, {c0: 128})]
op1251.unmet_dependencies = [MemoryDep('buf1250', c0, {c0: 327680})]
op1251.met_dependencies = []
op1251.outputs = [
    buf1251: ComputedBuffer
    buf1251.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1251.users = [
        NodeUser(node=SchedulerNode(name='op1255'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1251.group.device = cuda:0
op1251.group.iteration = (128, 2560)
op1251.sizes = ([128], [2560])
buf1250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1251_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1251_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1250', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1251', get_index_1, getitem)
        return store_reduction


op1252: SchedulerNode(ComputedBuffer)
op1252.writes = [MemoryDep('buf1252', c0, {c0: 128})]
op1252.unmet_dependencies = [MemoryDep('buf1250', c0, {c0: 327680})]
op1252.met_dependencies = []
op1252.outputs = [
    buf1252: ComputedBuffer
    buf1252.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1252.users = [
        NodeUser(node=SchedulerNode(name='op1254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1255'), can_inplace=False, is_weak=False),
    ]
]
op1252.group.device = cuda:0
op1252.group.iteration = (128, 2560)
op1252.sizes = ([128], [2560])
buf1250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1252_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1250', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1252', get_index_1, getitem_1)
        return store_reduction


op1254: SchedulerNode(ComputedBuffer)
op1254.writes = [MemoryDep('buf1254', c0, {c0: 128})]
op1254.unmet_dependencies = [MemoryDep('buf1252', c0, {c0: 128})]
op1254.met_dependencies = []
op1254.outputs = [
    buf1254: ComputedBuffer
    buf1254.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1254.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1254.group.device = cuda:0
op1254.group.iteration = (128, 1)
op1254.sizes = ([128], [])
buf1252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1254_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1254_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1252', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1254', get_index_1, rsqrt, None)
        return store


op1255: SchedulerNode(ComputedBuffer)
op1255.writes = [MemoryDep('buf1255', c0, {c0: 327680})]
op1255.unmet_dependencies = 
    [   MemoryDep('buf1250', c0, {c0: 327680}),
        MemoryDep('buf1251', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1252', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1255.met_dependencies = 
    [   MemoryDep('primals_836', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_837', c1, {c0: 4, c1: 1280})]
op1255.outputs = [
    buf1255: ComputedBuffer
    buf1255.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1255.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1257'), can_inplace=False, is_weak=False),
    ]
]
op1255.group.device = cuda:0
op1255.group.iteration = (327680, 1)
op1255.sizes = ([4, 1280, 64], [])
buf1250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1251_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1252_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_836_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_837_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1255_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1255_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1251', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1252', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_836', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_837', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1255', get_index_5, add_1, None)
        return store


op1256: ExternKernelSchedulerNode(ExternKernelOut)
op1256.writes = [StarDep(name='buf1256', mode=None)]
op1256.unmet_dependencies = [StarDep(name='buf1255', mode=None)]
op1256.met_dependencies = [StarDep(name='primals_838', mode=None)]
op1256.outputs = [
    buf1256: ExternKernelOut
    buf1256.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1256.users = [
        NodeUser(node=SchedulerNode(name='op1260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1285'), can_inplace=True, is_weak=False),
    ]
]
op1256.node.kernel = extern_kernels.bmm


op1257: SchedulerNode(ComputedBuffer)
op1257.writes = [MemoryDep('buf1257', c0, {c0: 327680})]
op1257.unmet_dependencies = [MemoryDep('buf1255', 81920*c0 + c1 + 64*c2, {c0: 4, c1: 64, c2: 1280})]
op1257.met_dependencies = []
op1257.outputs = [
    buf1257: ComputedBuffer
    buf1257.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1257.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1258'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1257.group.device = cuda:0
op1257.group.iteration = (327680, 1)
op1257.sizes = ([4, 64, 1280], [])
buf1255_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1257_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 1280}
    index0 = 81920*p0 + p1 + 64*p2
    index1 = 81920*p0 + 1280*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1255', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1257', get_index_1, load, None)
        return store


op1258: ExternKernelSchedulerNode(ExternKernelOut)
op1258.writes = [StarDep(name='buf1258', mode=None)]
op1258.unmet_dependencies = [StarDep(name='buf1257', mode=None)]
op1258.met_dependencies = [StarDep(name='primals_840', mode=None)]
op1258.outputs = [
    buf1258: ExternKernelOut
    buf1258.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1259'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1258.node.kernel = extern_kernels.mm


op1259: ExternKernelSchedulerNode(ExternKernelOut)
op1259.writes = [StarDep(name='buf1259', mode=None)]
op1259.unmet_dependencies = [StarDep(name='buf1258', mode=None)]
op1259.met_dependencies = [StarDep(name='primals_841', mode=None)]
op1259.outputs = [
    buf1259: ExternKernelOut
    buf1259.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1259.users = [
        NodeUser(node=SchedulerNode(name='op1260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1285'), can_inplace=True, is_weak=False),
    ]
]
op1259.node.kernel = extern_kernels.mm


op1260: SchedulerNode(ComputedBuffer)
op1260.writes = [MemoryDep('buf1260', c0, {c0: 256})]
op1260.unmet_dependencies = [MemoryDep('buf1256', c0, {c0: 327680}), MemoryDep('buf1259', c0, {c0: 327680})]
op1260.met_dependencies = [MemoryDep('primals_839', c1, {c0: 256, c1: 1280})]
op1260.outputs = [
    buf1260: ComputedBuffer
    buf1260.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1260.users = [NodeUser(node=SchedulerNode(name='op1263'), can_inplace=False, is_weak=False)]
]
op1260.group.device = cuda:0
op1260.group.iteration = (256, 1280)
op1260.sizes = ([256], [1280])
buf1256_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_839_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1260_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_839', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1259', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1260', get_index_3, getitem)
        return store_reduction


op1261: SchedulerNode(ComputedBuffer)
op1261.writes = [MemoryDep('buf1261', c0, {c0: 256})]
op1261.unmet_dependencies = [MemoryDep('buf1256', c0, {c0: 327680}), MemoryDep('buf1259', c0, {c0: 327680})]
op1261.met_dependencies = [MemoryDep('primals_839', c1, {c0: 256, c1: 1280})]
op1261.outputs = [
    buf1261: ComputedBuffer
    buf1261.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1261.users = [
        NodeUser(node=SchedulerNode(name='op1263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2086'), can_inplace=True, is_weak=False),
    ]
]
op1261.group.device = cuda:0
op1261.group.iteration = (256, 1280)
op1261.sizes = ([256], [1280])
buf1256_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_839_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1261_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_839', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1259', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1261', get_index_3, getitem_1)
        return store_reduction


op1263: SchedulerNode(ComputedBuffer)
op1263.writes = [MemoryDep('buf1263', c0, {c0: 327680})]
op1263.unmet_dependencies = 
    [   MemoryDep('buf1256', c0, {c0: 327680}),
        MemoryDep('buf1259', c0, {c0: 327680}),
        MemoryDep('buf1260', c0, {c0: 256}),
        MemoryDep('buf1261', c0, {c0: 256})]
op1263.met_dependencies = [MemoryDep('primals_839', c1, {c0: 256, c1: 1280})]
op1263.outputs = [
    buf1263: ComputedBuffer
    buf1263.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1263.users = [
        NodeUser(node=SchedulerNode(name='op1264'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1263.group.device = cuda:0
op1263.group.iteration = (327680, 1)
op1263.sizes = ([256, 1280], [])
buf1256_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_839_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1263_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1263_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_839', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1259', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1261', get_index_4)
        constant_1 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1263', get_index_5, mul_1, None)
        return store


op1264: SchedulerNode(ComputedBuffer)
op1264.writes = [MemoryDep('buf1264', c0, {c0: 327680})]
op1264.unmet_dependencies = [MemoryDep('buf1263', c0, {c0: 327680})]
op1264.met_dependencies = 
    [   MemoryDep('primals_842', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_843', c1, {c0: 256, c1: 1280})]
op1264.outputs = [
    buf1264: ComputedBuffer
    buf1264.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1264.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1265'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1264.group.device = cuda:0
op1264.group.iteration = (327680, 1)
op1264.sizes = ([256, 1280], [])
buf1263_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_842_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_843_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1264_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1264_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_842', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_843', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1264', get_index_3, add, None)
        return store


op1265: ExternKernelSchedulerNode(ExternKernelOut)
op1265.writes = [StarDep(name='buf1265', mode=None)]
op1265.unmet_dependencies = [StarDep(name='buf1264', mode=None)]
op1265.met_dependencies = [StarDep(name='primals_844', mode=None)]
op1265.outputs = [
    buf1265: ExternKernelOut
    buf1265.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1265.users = [NodeUser(node=SchedulerNode(name='op1274'), can_inplace=True, is_weak=False)]
]
op1265.node.kernel = extern_kernels.mm


op1266: ExternKernelSchedulerNode(ExternKernelOut)
op1266.writes = [StarDep(name='buf1266', mode=None)]
op1266.unmet_dependencies = [StarDep(name='buf1264', mode=None)]
op1266.met_dependencies = [StarDep(name='primals_845', mode=None)]
op1266.outputs = [
    buf1266: ExternKernelOut
    buf1266.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1267'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1266.node.kernel = extern_kernels.mm


op1267: ExternKernelSchedulerNode(ExternKernelOut)
op1267.writes = [StarDep(name='buf1267', mode=None)]
op1267.unmet_dependencies = [StarDep(name='buf1266', mode=None)]
op1267.met_dependencies = [StarDep(name='primals_846', mode=None)]
op1267.outputs = [
    buf1267: ExternKernelOut
    buf1267.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1267.users = [NodeUser(node=SchedulerNode(name='op1274'), can_inplace=True, is_weak=False)]
]
op1267.node.kernel = extern_kernels.mm


op1268: ExternKernelSchedulerNode(ExternKernelOut)
op1268.writes = [StarDep(name='buf1268', mode=None)]
op1268.unmet_dependencies = [StarDep(name='buf1264', mode=None)]
op1268.met_dependencies = [StarDep(name='primals_847', mode=None)]
op1268.outputs = [
    buf1268: ExternKernelOut
    buf1268.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1268.users = [NodeUser(node=SchedulerNode(name='op1275'), can_inplace=True, is_weak=False)]
]
op1268.node.kernel = extern_kernels.mm


op1269: ExternKernelSchedulerNode(ExternKernelOut)
op1269.writes = [StarDep(name='buf1269', mode=None)]
op1269.unmet_dependencies = [StarDep(name='buf1264', mode=None)]
op1269.met_dependencies = [StarDep(name='primals_848', mode=None)]
op1269.outputs = [
    buf1269: ExternKernelOut
    buf1269.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1269.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1270'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1269.node.kernel = extern_kernels.mm


op1270: ExternKernelSchedulerNode(ExternKernelOut)
op1270.writes = [StarDep(name='buf1270', mode=None)]
op1270.unmet_dependencies = [StarDep(name='buf1269', mode=None)]
op1270.met_dependencies = [StarDep(name='primals_849', mode=None)]
op1270.outputs = [
    buf1270: ExternKernelOut
    buf1270.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1270.users = [NodeUser(node=SchedulerNode(name='op1275'), can_inplace=True, is_weak=False)]
]
op1270.node.kernel = extern_kernels.mm


op1271: ExternKernelSchedulerNode(ExternKernelOut)
op1271.writes = [StarDep(name='buf1271', mode=None)]
op1271.unmet_dependencies = [StarDep(name='buf1264', mode=None)]
op1271.met_dependencies = [StarDep(name='primals_850', mode=None)]
op1271.outputs = [
    buf1271: ExternKernelOut
    buf1271.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1271.users = [NodeUser(node=SchedulerNode(name='op1276'), can_inplace=True, is_weak=False)]
]
op1271.node.kernel = extern_kernels.mm


op1272: ExternKernelSchedulerNode(ExternKernelOut)
op1272.writes = [StarDep(name='buf1272', mode=None)]
op1272.unmet_dependencies = [StarDep(name='buf1264', mode=None)]
op1272.met_dependencies = [StarDep(name='primals_851', mode=None)]
op1272.outputs = [
    buf1272: ExternKernelOut
    buf1272.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1272.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1273'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1272.node.kernel = extern_kernels.mm


op1273: ExternKernelSchedulerNode(ExternKernelOut)
op1273.writes = [StarDep(name='buf1273', mode=None)]
op1273.unmet_dependencies = [StarDep(name='buf1272', mode=None)]
op1273.met_dependencies = [StarDep(name='primals_852', mode=None)]
op1273.outputs = [
    buf1273: ExternKernelOut
    buf1273.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1273.users = [NodeUser(node=SchedulerNode(name='op1276'), can_inplace=True, is_weak=False)]
]
op1273.node.kernel = extern_kernels.mm


op1274: SchedulerNode(ComputedBuffer)
op1274.writes = [MemoryDep('buf1274', c0, {c0: 327680})]
op1274.unmet_dependencies = [MemoryDep('buf1265', c0, {c0: 327680}), MemoryDep('buf1267', c0, {c0: 327680})]
op1274.met_dependencies = []
op1274.outputs = [
    buf1274: ComputedBuffer
    buf1274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1274.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1277'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1274.group.device = cuda:0
op1274.group.iteration = (327680, 1)
op1274.sizes = ([327680], [])
buf1265_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1267_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1274_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1265', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1267', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1274', get_index_2, add, None)
        return store


op1275: SchedulerNode(ComputedBuffer)
op1275.writes = [MemoryDep('buf1275', c0, {c0: 327680})]
op1275.unmet_dependencies = [MemoryDep('buf1268', c0, {c0: 327680}), MemoryDep('buf1270', c0, {c0: 327680})]
op1275.met_dependencies = []
op1275.outputs = [
    buf1275: ComputedBuffer
    buf1275.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1275.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1277'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1275.group.device = cuda:0
op1275.group.iteration = (327680, 1)
op1275.sizes = ([327680], [])
buf1268_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1270_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1275_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1275_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1270', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1275', get_index_2, add, None)
        return store


op1276: SchedulerNode(ComputedBuffer)
op1276.writes = [MemoryDep('buf1276', c0, {c0: 327680})]
op1276.unmet_dependencies = [MemoryDep('buf1271', c0, {c0: 327680}), MemoryDep('buf1273', c0, {c0: 327680})]
op1276.met_dependencies = []
op1276.outputs = [
    buf1276: ComputedBuffer
    buf1276.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1276.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1277'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1276.group.device = cuda:0
op1276.group.iteration = (327680, 1)
op1276.sizes = ([327680], [])
buf1271_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1273_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1276_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1276_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1271', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1273', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1276', get_index_2, add, None)
        return store


op1277: ExternKernelSchedulerNode(FallbackKernel)
op1277.writes = [StarDep(name='buf1277', mode=None)]
op1277.unmet_dependencies = 
    [   StarDep(name='buf1274', mode=None),
        StarDep(name='buf1275', mode=None),
        StarDep(name='buf1276', mode=None)]
op1277.met_dependencies = []
op1277.outputs = [
    buf1277: FallbackKernel
    buf1277.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1277.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1278'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1281'), can_inplace=False, is_weak=False),
    ]
]
op1277.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1278: ExternKernelSchedulerNode(MultiOutput)
op1278.writes = [StarDep(name='buf1278', mode=None)]
op1278.unmet_dependencies = [StarDep(name='buf1277', mode=None)]
op1278.met_dependencies = []
op1278.outputs = [
    buf1278: MultiOutput
    buf1278.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf1278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1282'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1283'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1278.node.kernel = None


op1279: ExternKernelSchedulerNode(MultiOutput)
op1279.writes = [StarDep(name='buf1279', mode=None)]
op1279.unmet_dependencies = [StarDep(name='buf1277', mode=None)]
op1279.met_dependencies = []
op1279.outputs = [
    buf1279: MultiOutput
    buf1279.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf1279.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1279.node.kernel = None


op1280: ExternKernelSchedulerNode(MultiOutput)
op1280.writes = [StarDep(name='buf1280', mode=None)]
op1280.unmet_dependencies = [StarDep(name='buf1277', mode=None)]
op1280.met_dependencies = []
op1280.outputs = [
    buf1280: MultiOutput
    buf1280.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1280.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1280.node.kernel = None


op1281: ExternKernelSchedulerNode(MultiOutput)
op1281.writes = [StarDep(name='buf1281', mode=None)]
op1281.unmet_dependencies = [StarDep(name='buf1277', mode=None)]
op1281.met_dependencies = []
op1281.outputs = [
    buf1281: MultiOutput
    buf1281.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1281.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1281.node.kernel = None


op1282: ExternKernelSchedulerNode(ExternKernelOut)
op1282.writes = [StarDep(name='buf1282', mode=None)]
op1282.unmet_dependencies = [StarDep(name='buf1278', mode=None)]
op1282.met_dependencies = [StarDep(name='primals_853', mode=None)]
op1282.outputs = [
    buf1282: ExternKernelOut
    buf1282.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1282.users = [NodeUser(node=SchedulerNode(name='op1285'), can_inplace=True, is_weak=False)]
]
op1282.node.kernel = extern_kernels.mm


op1283: ExternKernelSchedulerNode(ExternKernelOut)
op1283.writes = [StarDep(name='buf1283', mode=None)]
op1283.unmet_dependencies = [StarDep(name='buf1278', mode=None)]
op1283.met_dependencies = [StarDep(name='primals_855', mode=None)]
op1283.outputs = [
    buf1283: ExternKernelOut
    buf1283.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1284'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1283.node.kernel = extern_kernels.mm


op1284: ExternKernelSchedulerNode(ExternKernelOut)
op1284.writes = [StarDep(name='buf1284', mode=None)]
op1284.unmet_dependencies = [StarDep(name='buf1283', mode=None)]
op1284.met_dependencies = [StarDep(name='primals_856', mode=None)]
op1284.outputs = [
    buf1284: ExternKernelOut
    buf1284.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1284.users = [NodeUser(node=SchedulerNode(name='op1285'), can_inplace=True, is_weak=False)]
]
op1284.node.kernel = extern_kernels.mm


op1285: SchedulerNode(ComputedBuffer)
op1285.writes = [MemoryDep('buf1285', c0, {c0: 327680})]
op1285.unmet_dependencies = 
    [   MemoryDep('buf1256', c0, {c0: 327680}),
        MemoryDep('buf1259', c0, {c0: 327680}),
        MemoryDep('buf1282', c0, {c0: 327680}),
        MemoryDep('buf1284', c0, {c0: 327680})]
op1285.met_dependencies = 
    [   MemoryDep('primals_839', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_854', c1, {c0: 256, c1: 1280})]
op1285.outputs = [
    buf1285: ComputedBuffer
    buf1285.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1285.users = [
        NodeUser(node=SchedulerNode(name='op1286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1289'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1314'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1324'), can_inplace=True, is_weak=False),
    ]
]
op1285.group.device = cuda:0
op1285.group.iteration = (327680, 1)
op1285.sizes = ([256, 1280], [])
buf1282_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_854_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1284_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1256_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_839_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1285_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_854', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1284', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1256', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_839', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1259', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1285', get_index_6, add_4, None)
        return store


op1286: SchedulerNode(ComputedBuffer)
op1286.writes = [MemoryDep('buf1286', c0, {c0: 256})]
op1286.unmet_dependencies = [MemoryDep('buf1285', c0, {c0: 327680})]
op1286.met_dependencies = []
op1286.outputs = [
    buf1286: ComputedBuffer
    buf1286.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1286.users = [NodeUser(node=SchedulerNode(name='op1289'), can_inplace=False, is_weak=False)]
]
op1286.group.device = cuda:0
op1286.group.iteration = (256, 1280)
op1286.sizes = ([256], [1280])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1286_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1285', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1286', get_index_1, getitem)
        return store_reduction


op1287: SchedulerNode(ComputedBuffer)
op1287.writes = [MemoryDep('buf1287', c0, {c0: 256})]
op1287.unmet_dependencies = [MemoryDep('buf1285', c0, {c0: 327680})]
op1287.met_dependencies = []
op1287.outputs = [
    buf1287: ComputedBuffer
    buf1287.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1287.users = [
        NodeUser(node=SchedulerNode(name='op1289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2085'), can_inplace=True, is_weak=False),
    ]
]
op1287.group.device = cuda:0
op1287.group.iteration = (256, 1280)
op1287.sizes = ([256], [1280])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1287_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1287_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1285', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1287', get_index_1, getitem_1)
        return store_reduction


op1289: SchedulerNode(ComputedBuffer)
op1289.writes = [MemoryDep('buf1289', c0, {c0: 327680})]
op1289.unmet_dependencies = 
    [   MemoryDep('buf1285', c0, {c0: 327680}),
        MemoryDep('buf1286', c0, {c0: 256}),
        MemoryDep('buf1287', c0, {c0: 256})]
op1289.met_dependencies = []
op1289.outputs = [
    buf1289: ComputedBuffer
    buf1289.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1289.users = [
        NodeUser(node=SchedulerNode(name='op1290'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1289.group.device = cuda:0
op1289.group.iteration = (327680, 1)
op1289.sizes = ([256, 1280], [])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1287_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1289_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1289_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1286', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1287', get_index_2)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1289', get_index_3, mul, None)
        return store


op1290: SchedulerNode(ComputedBuffer)
op1290.writes = [MemoryDep('buf1290', c0, {c0: 327680})]
op1290.unmet_dependencies = [MemoryDep('buf1289', c0, {c0: 327680})]
op1290.met_dependencies = 
    [   MemoryDep('primals_857', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_858', c1, {c0: 256, c1: 1280})]
op1290.outputs = [
    buf1290: ComputedBuffer
    buf1290.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1290.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1292'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1290.group.device = cuda:0
op1290.group.iteration = (327680, 1)
op1290.sizes = ([256, 1280], [])
buf1289_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_857_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_858_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1290_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1290_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_857', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_858', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1290', get_index_3, add, None)
        return store


op1291: ExternKernelSchedulerNode(ExternKernelOut)
op1291.writes = [StarDep(name='buf1291', mode=None)]
op1291.unmet_dependencies = [StarDep(name='buf1290', mode=None)]
op1291.met_dependencies = [StarDep(name='primals_859', mode=None)]
op1291.outputs = [
    buf1291: ExternKernelOut
    buf1291.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1291.users = [NodeUser(node=SchedulerNode(name='op1300'), can_inplace=True, is_weak=False)]
]
op1291.node.kernel = extern_kernels.mm


op1292: ExternKernelSchedulerNode(ExternKernelOut)
op1292.writes = [StarDep(name='buf1292', mode=None)]
op1292.unmet_dependencies = [StarDep(name='buf1290', mode=None)]
op1292.met_dependencies = [StarDep(name='primals_860', mode=None)]
op1292.outputs = [
    buf1292: ExternKernelOut
    buf1292.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1293'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1292.node.kernel = extern_kernels.mm


op1293: ExternKernelSchedulerNode(ExternKernelOut)
op1293.writes = [StarDep(name='buf1293', mode=None)]
op1293.unmet_dependencies = [StarDep(name='buf1292', mode=None)]
op1293.met_dependencies = [StarDep(name='primals_861', mode=None)]
op1293.outputs = [
    buf1293: ExternKernelOut
    buf1293.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1293.users = [NodeUser(node=SchedulerNode(name='op1300'), can_inplace=True, is_weak=False)]
]
op1293.node.kernel = extern_kernels.mm


op1294: ExternKernelSchedulerNode(ExternKernelOut)
op1294.writes = [StarDep(name='buf1294', mode=None)]
op1294.unmet_dependencies = []
op1294.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_862', mode=None)]
op1294.outputs = [
    buf1294: ExternKernelOut
    buf1294.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1294.users = [NodeUser(node=SchedulerNode(name='op1301'), can_inplace=True, is_weak=False)]
]
op1294.node.kernel = extern_kernels.mm


op1295: ExternKernelSchedulerNode(ExternKernelOut)
op1295.writes = [StarDep(name='buf1295', mode=None)]
op1295.unmet_dependencies = []
op1295.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_863', mode=None)]
op1295.outputs = [
    buf1295: ExternKernelOut
    buf1295.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1295.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1296'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1295.node.kernel = extern_kernels.mm


op1296: ExternKernelSchedulerNode(ExternKernelOut)
op1296.writes = [StarDep(name='buf1296', mode=None)]
op1296.unmet_dependencies = [StarDep(name='buf1295', mode=None)]
op1296.met_dependencies = [StarDep(name='primals_864', mode=None)]
op1296.outputs = [
    buf1296: ExternKernelOut
    buf1296.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1296.users = [NodeUser(node=SchedulerNode(name='op1301'), can_inplace=True, is_weak=False)]
]
op1296.node.kernel = extern_kernels.mm


op1297: ExternKernelSchedulerNode(ExternKernelOut)
op1297.writes = [StarDep(name='buf1297', mode=None)]
op1297.unmet_dependencies = []
op1297.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_865', mode=None)]
op1297.outputs = [
    buf1297: ExternKernelOut
    buf1297.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1297.users = [NodeUser(node=SchedulerNode(name='op1302'), can_inplace=True, is_weak=False)]
]
op1297.node.kernel = extern_kernels.mm


op1298: ExternKernelSchedulerNode(ExternKernelOut)
op1298.writes = [StarDep(name='buf1298', mode=None)]
op1298.unmet_dependencies = []
op1298.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_866', mode=None)]
op1298.outputs = [
    buf1298: ExternKernelOut
    buf1298.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1298.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1299'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1298.node.kernel = extern_kernels.mm


op1299: ExternKernelSchedulerNode(ExternKernelOut)
op1299.writes = [StarDep(name='buf1299', mode=None)]
op1299.unmet_dependencies = [StarDep(name='buf1298', mode=None)]
op1299.met_dependencies = [StarDep(name='primals_867', mode=None)]
op1299.outputs = [
    buf1299: ExternKernelOut
    buf1299.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1299.users = [NodeUser(node=SchedulerNode(name='op1302'), can_inplace=True, is_weak=False)]
]
op1299.node.kernel = extern_kernels.mm


op1300: SchedulerNode(ComputedBuffer)
op1300.writes = [MemoryDep('buf1300', c0, {c0: 327680})]
op1300.unmet_dependencies = [MemoryDep('buf1291', c0, {c0: 327680}), MemoryDep('buf1293', c0, {c0: 327680})]
op1300.met_dependencies = []
op1300.outputs = [
    buf1300: ComputedBuffer
    buf1300.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1300.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1303'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1300.group.device = cuda:0
op1300.group.iteration = (327680, 1)
op1300.sizes = ([327680], [])
buf1291_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1293_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1300_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1291', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1293', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1300', get_index_2, add, None)
        return store


op1301: SchedulerNode(ComputedBuffer)
op1301.writes = [MemoryDep('buf1301', c0, {c0: 394240})]
op1301.unmet_dependencies = [MemoryDep('buf1294', c0, {c0: 394240}), MemoryDep('buf1296', c0, {c0: 394240})]
op1301.met_dependencies = []
op1301.outputs = [
    buf1301: ComputedBuffer
    buf1301.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1301.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1303'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1301.group.device = cuda:0
op1301.group.iteration = (394240, 1)
op1301.sizes = ([394240], [])
buf1294_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1296_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1301_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1301_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1296', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1301', get_index_2, add, None)
        return store


op1302: SchedulerNode(ComputedBuffer)
op1302.writes = [MemoryDep('buf1302', c0, {c0: 394240})]
op1302.unmet_dependencies = [MemoryDep('buf1297', c0, {c0: 394240}), MemoryDep('buf1299', c0, {c0: 394240})]
op1302.met_dependencies = []
op1302.outputs = [
    buf1302: ComputedBuffer
    buf1302.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1302.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1303'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1302.group.device = cuda:0
op1302.group.iteration = (394240, 1)
op1302.sizes = ([394240], [])
buf1297_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1299_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1302_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1302_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1297', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1299', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1302', get_index_2, add, None)
        return store


op1303: ExternKernelSchedulerNode(FallbackKernel)
op1303.writes = [StarDep(name='buf1303', mode=None)]
op1303.unmet_dependencies = 
    [   StarDep(name='buf1300', mode=None),
        StarDep(name='buf1301', mode=None),
        StarDep(name='buf1302', mode=None)]
op1303.met_dependencies = []
op1303.outputs = [
    buf1303: FallbackKernel
    buf1303.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1303.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1304'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1305'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1306'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1307'), can_inplace=False, is_weak=False),
    ]
]
op1303.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1304: ExternKernelSchedulerNode(MultiOutput)
op1304.writes = [StarDep(name='buf1304', mode=None)]
op1304.unmet_dependencies = [StarDep(name='buf1303', mode=None)]
op1304.met_dependencies = []
op1304.outputs = [
    buf1304: MultiOutput
    buf1304.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf1304.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1308'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1309'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1304.node.kernel = None


op1305: ExternKernelSchedulerNode(MultiOutput)
op1305.writes = [StarDep(name='buf1305', mode=None)]
op1305.unmet_dependencies = [StarDep(name='buf1303', mode=None)]
op1305.met_dependencies = []
op1305.outputs = [
    buf1305: MultiOutput
    buf1305.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf1305.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1305.node.kernel = None


op1306: ExternKernelSchedulerNode(MultiOutput)
op1306.writes = [StarDep(name='buf1306', mode=None)]
op1306.unmet_dependencies = [StarDep(name='buf1303', mode=None)]
op1306.met_dependencies = []
op1306.outputs = [
    buf1306: MultiOutput
    buf1306.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1306.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1306.node.kernel = None


op1307: ExternKernelSchedulerNode(MultiOutput)
op1307.writes = [StarDep(name='buf1307', mode=None)]
op1307.unmet_dependencies = [StarDep(name='buf1303', mode=None)]
op1307.met_dependencies = []
op1307.outputs = [
    buf1307: MultiOutput
    buf1307.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1307.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1307.node.kernel = None


op1308: ExternKernelSchedulerNode(ExternKernelOut)
op1308.writes = [StarDep(name='buf1308', mode=None)]
op1308.unmet_dependencies = [StarDep(name='buf1304', mode=None)]
op1308.met_dependencies = [StarDep(name='primals_868', mode=None)]
op1308.outputs = [
    buf1308: ExternKernelOut
    buf1308.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1308.users = [
        NodeUser(node=SchedulerNode(name='op1311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1314'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1324'), can_inplace=True, is_weak=False),
    ]
]
op1308.node.kernel = extern_kernels.mm


op1309: ExternKernelSchedulerNode(ExternKernelOut)
op1309.writes = [StarDep(name='buf1309', mode=None)]
op1309.unmet_dependencies = [StarDep(name='buf1304', mode=None)]
op1309.met_dependencies = [StarDep(name='primals_870', mode=None)]
op1309.outputs = [
    buf1309: ExternKernelOut
    buf1309.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1309.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1310'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1309.node.kernel = extern_kernels.mm


op1310: ExternKernelSchedulerNode(ExternKernelOut)
op1310.writes = [StarDep(name='buf1310', mode=None)]
op1310.unmet_dependencies = [StarDep(name='buf1309', mode=None)]
op1310.met_dependencies = [StarDep(name='primals_871', mode=None)]
op1310.outputs = [
    buf1310: ExternKernelOut
    buf1310.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1310.users = [
        NodeUser(node=SchedulerNode(name='op1311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1314'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1324'), can_inplace=True, is_weak=False),
    ]
]
op1310.node.kernel = extern_kernels.mm


op1311: SchedulerNode(ComputedBuffer)
op1311.writes = [MemoryDep('buf1311', c0, {c0: 256})]
op1311.unmet_dependencies = 
    [   MemoryDep('buf1285', c0, {c0: 327680}),
        MemoryDep('buf1308', c0, {c0: 327680}),
        MemoryDep('buf1310', c0, {c0: 327680})]
op1311.met_dependencies = [MemoryDep('primals_869', c1, {c0: 256, c1: 1280})]
op1311.outputs = [
    buf1311: ComputedBuffer
    buf1311.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1311.users = [NodeUser(node=SchedulerNode(name='op1314'), can_inplace=False, is_weak=False)]
]
op1311.group.device = cuda:0
op1311.group.iteration = (256, 1280)
op1311.sizes = ([256], [1280])
buf1308_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_869_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1310_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1311_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1311_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_869', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1310', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1285', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1311', get_index_4, getitem)
        return store_reduction


op1312: SchedulerNode(ComputedBuffer)
op1312.writes = [MemoryDep('buf1312', c0, {c0: 256})]
op1312.unmet_dependencies = 
    [   MemoryDep('buf1285', c0, {c0: 327680}),
        MemoryDep('buf1308', c0, {c0: 327680}),
        MemoryDep('buf1310', c0, {c0: 327680})]
op1312.met_dependencies = [MemoryDep('primals_869', c1, {c0: 256, c1: 1280})]
op1312.outputs = [
    buf1312: ComputedBuffer
    buf1312.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1312.users = [
        NodeUser(node=SchedulerNode(name='op1314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2084'), can_inplace=True, is_weak=False),
    ]
]
op1312.group.device = cuda:0
op1312.group.iteration = (256, 1280)
op1312.sizes = ([256], [1280])
buf1308_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_869_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1310_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1312_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1312_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_869', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1310', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1285', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1312', get_index_4, getitem_1)
        return store_reduction


op1314: SchedulerNode(ComputedBuffer)
op1314.writes = [MemoryDep('buf1314', c0, {c0: 327680})]
op1314.unmet_dependencies = 
    [   MemoryDep('buf1285', c0, {c0: 327680}),
        MemoryDep('buf1308', c0, {c0: 327680}),
        MemoryDep('buf1310', c0, {c0: 327680}),
        MemoryDep('buf1311', c0, {c0: 256}),
        MemoryDep('buf1312', c0, {c0: 256})]
op1314.met_dependencies = [MemoryDep('primals_869', c1, {c0: 256, c1: 1280})]
op1314.outputs = [
    buf1314: ComputedBuffer
    buf1314.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1314.users = [
        NodeUser(node=SchedulerNode(name='op1315'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1314.group.device = cuda:0
op1314.group.iteration = (327680, 1)
op1314.sizes = ([256, 1280], [])
buf1308_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_869_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1310_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1311_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1312_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1314_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1314_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_869', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1310', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1285', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1311', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1312', get_index_5)
        constant_2 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1314', get_index_6, mul_2, None)
        return store


op1315: SchedulerNode(ComputedBuffer)
op1315.writes = [MemoryDep('buf1315', c0, {c0: 327680})]
op1315.unmet_dependencies = [MemoryDep('buf1314', c0, {c0: 327680})]
op1315.met_dependencies = 
    [   MemoryDep('primals_872', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_873', c1, {c0: 256, c1: 1280})]
op1315.outputs = [
    buf1315: ComputedBuffer
    buf1315.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1316'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1315.group.device = cuda:0
op1315.group.iteration = (327680, 1)
op1315.sizes = ([256, 1280], [])
buf1314_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_872_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_873_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1315_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1315_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_872', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_873', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1315', get_index_3, add, None)
        return store


op1316: ExternKernelSchedulerNode(ExternKernelOut)
op1316.writes = [StarDep(name='buf1316', mode=None)]
op1316.unmet_dependencies = [StarDep(name='buf1315', mode=None)]
op1316.met_dependencies = [StarDep(name='primals_874', mode=None)]
op1316.outputs = [
    buf1316: ExternKernelOut
    buf1316.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf1316.users = [NodeUser(node=SchedulerNode(name='op1319'), can_inplace=True, is_weak=False)]
]
op1316.node.kernel = extern_kernels.mm


op1317: ExternKernelSchedulerNode(ExternKernelOut)
op1317.writes = [StarDep(name='buf1317', mode=None)]
op1317.unmet_dependencies = [StarDep(name='buf1315', mode=None)]
op1317.met_dependencies = [StarDep(name='primals_876', mode=None)]
op1317.outputs = [
    buf1317: ExternKernelOut
    buf1317.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1318'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1317.node.kernel = extern_kernels.mm


op1318: ExternKernelSchedulerNode(ExternKernelOut)
op1318.writes = [StarDep(name='buf1318', mode=None)]
op1318.unmet_dependencies = [StarDep(name='buf1317', mode=None)]
op1318.met_dependencies = [StarDep(name='primals_877', mode=None)]
op1318.outputs = [
    buf1318: ExternKernelOut
    buf1318.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf1318.users = [NodeUser(node=SchedulerNode(name='op1319'), can_inplace=True, is_weak=False)]
]
op1318.node.kernel = extern_kernels.mm


op1319: SchedulerNode(ComputedBuffer)
op1319.writes = [MemoryDep('buf1319', c0, {c0: 2621440})]
op1319.unmet_dependencies = 
    [   MemoryDep('buf1316', c0, {c0: 2621440}),
        MemoryDep('buf1318', c0, {c0: 2621440})]
op1319.met_dependencies = [MemoryDep('primals_875', c1, {c0: 256, c1: 10240})]
op1319.outputs = [
    buf1319: ComputedBuffer
    buf1319.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
    buf1319.users = [
        NodeUser(node=SchedulerNode(name='op1320'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1319.group.device = cuda:0
op1319.group.iteration = (2621440, 1)
op1319.sizes = ([256, 10240], [])
buf1316_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
primals_875_layout = FixedLayout('cuda:0', torch.float32, size=[10240], stride=[1])
buf1318_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
buf1319_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
class op1319_loop_body:
    var_ranges = {p0: 256, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_875', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1318', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1319', get_index_3, add_1, None)
        return store


op1320: SchedulerNode(ComputedBuffer)
op1320.writes = [MemoryDep('buf1320', c0, {c0: 1310720})]
op1320.unmet_dependencies = 
    [   MemoryDep('buf1319', 10240*c0 + c1 + 5120, {c0: 256, c1: 5120}),
        MemoryDep('buf1319', 10240*c0 + c1, {c0: 256, c1: 5120})]
op1320.met_dependencies = []
op1320.outputs = [
    buf1320: ComputedBuffer
    buf1320.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
    buf1320.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1321'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1322'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1320.group.device = cuda:0
op1320.group.iteration = (1310720, 1)
op1320.sizes = ([256, 5120], [])
buf1319_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf1319_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf1320_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
class op1320_loop_body:
    var_ranges = {p0: 256, p1: 5120}
    index0 = 10240*p0 + p1
    index1 = 10240*p0 + p1 + 5120
    index2 = 5120*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1319', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1319', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1320', get_index_3, mul_3, None)
        return store


op1321: ExternKernelSchedulerNode(ExternKernelOut)
op1321.writes = [StarDep(name='buf1321', mode=None)]
op1321.unmet_dependencies = [StarDep(name='buf1320', mode=None)]
op1321.met_dependencies = [StarDep(name='primals_878', mode=None)]
op1321.outputs = [
    buf1321: ExternKernelOut
    buf1321.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1321.users = [NodeUser(node=SchedulerNode(name='op1324'), can_inplace=True, is_weak=False)]
]
op1321.node.kernel = extern_kernels.mm


op1322: ExternKernelSchedulerNode(ExternKernelOut)
op1322.writes = [StarDep(name='buf1322', mode=None)]
op1322.unmet_dependencies = [StarDep(name='buf1320', mode=None)]
op1322.met_dependencies = [StarDep(name='primals_880', mode=None)]
op1322.outputs = [
    buf1322: ExternKernelOut
    buf1322.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1322.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1323'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1322.node.kernel = extern_kernels.mm


op1323: ExternKernelSchedulerNode(ExternKernelOut)
op1323.writes = [StarDep(name='buf1323', mode=None)]
op1323.unmet_dependencies = [StarDep(name='buf1322', mode=None)]
op1323.met_dependencies = [StarDep(name='primals_881', mode=None)]
op1323.outputs = [
    buf1323: ExternKernelOut
    buf1323.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1323.users = [NodeUser(node=SchedulerNode(name='op1324'), can_inplace=True, is_weak=False)]
]
op1323.node.kernel = extern_kernels.mm


op1324: SchedulerNode(ComputedBuffer)
op1324.writes = [MemoryDep('buf1324', c0, {c0: 327680})]
op1324.unmet_dependencies = 
    [   MemoryDep('buf1285', c0, {c0: 327680}),
        MemoryDep('buf1308', c0, {c0: 327680}),
        MemoryDep('buf1310', c0, {c0: 327680}),
        MemoryDep('buf1321', c0, {c0: 327680}),
        MemoryDep('buf1323', c0, {c0: 327680})]
op1324.met_dependencies = 
    [   MemoryDep('primals_869', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_879', c1, {c0: 256, c1: 1280})]
op1324.outputs = [
    buf1324: ComputedBuffer
    buf1324.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1324.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1325'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1326'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1324.group.device = cuda:0
op1324.group.iteration = (327680, 1)
op1324.sizes = ([256, 1280], [])
buf1321_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_879_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1323_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1308_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_869_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1310_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1285_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1324_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1324_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1321', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_879', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1323', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1308', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_869', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1310', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1285', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1324', get_index_7, add_5, None)
        return store


op1325: ExternKernelSchedulerNode(ExternKernelOut)
op1325.writes = [StarDep(name='buf1325', mode=None)]
op1325.unmet_dependencies = [StarDep(name='buf1324', mode=None)]
op1325.met_dependencies = [StarDep(name='primals_882', mode=None)]
op1325.outputs = [
    buf1325: ExternKernelOut
    buf1325.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1325.users = [NodeUser(node=SchedulerNode(name='op1328'), can_inplace=False, is_weak=False)]
]
op1325.node.kernel = extern_kernels.mm


op1326: ExternKernelSchedulerNode(ExternKernelOut)
op1326.writes = [StarDep(name='buf1326', mode=None)]
op1326.unmet_dependencies = [StarDep(name='buf1324', mode=None)]
op1326.met_dependencies = [StarDep(name='primals_884', mode=None)]
op1326.outputs = [
    buf1326: ExternKernelOut
    buf1326.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1326.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1327'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1326.node.kernel = extern_kernels.mm


op1327: ExternKernelSchedulerNode(ExternKernelOut)
op1327.writes = [StarDep(name='buf1327', mode=None)]
op1327.unmet_dependencies = [StarDep(name='buf1326', mode=None)]
op1327.met_dependencies = [StarDep(name='primals_885', mode=None)]
op1327.outputs = [
    buf1327: ExternKernelOut
    buf1327.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1327.users = [NodeUser(node=SchedulerNode(name='op1328'), can_inplace=False, is_weak=False)]
]
op1327.node.kernel = extern_kernels.mm


op1328: SchedulerNode(ComputedBuffer)
op1328.writes = [MemoryDep('buf1328', c0, {c0: 491520})]
op1328.unmet_dependencies = 
    [   MemoryDep('buf1250', 81920*c0 + c2 + 64*(I), {c0: 4, c1: 1920, c2: 64}),
        MemoryDep('buf1325', 81920*c0 + 1280*c2 + (I), {c0: 4, c1: 1920, c2: 64}),
        MemoryDep('buf1327', 81920*c0 + 1280*c2 + (I), {c0: 4, c1: 1920, c2: 64}),
        MemoryDep('buf680', 40960*c0 + c2 + 64*(I), {c0: 4, c1: 1920, c2: 64})]
op1328.met_dependencies = [MemoryDep('primals_883', I, {c0: 4, c1: 1920})]
op1328.outputs = [
    buf1328: ComputedBuffer
    buf1328.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
    buf1328.users = [
        NodeUser(node=SchedulerNode(name='op1329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1333'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1349'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1350'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1328.group.device = cuda:0
op1328.group.iteration = (491520, 1)
op1328.sizes = ([4, 1920, 64], [])
buf1325_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_883_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1327_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 8, 8], stride=[40960, 64, 8, 1])
buf1328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
class op1328_loop_body:
    var_ranges = {p0: 4, p1: 1920, p2: 64}
    index0 = p1
    index1 = 81920*p0 + 1280*p2 + (I)
    index2 = I
    index3 = 81920*p0 + p2 + 64*(I)
    index4 = 40960*p0 + p2 + 64*(I)
    index5 = 122880*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1920, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1328', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1325', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_883', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1327', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1250', get_index_3)
        add_2 = ops.add(add_1, load_3)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf680', get_index)
        return load


op1329: SchedulerNode(ComputedBuffer)
op1329.writes = [MemoryDep('buf1329', c0, {c0: 128})]
op1329.unmet_dependencies = [MemoryDep('buf1328', c0, {c0: 491520})]
op1329.met_dependencies = []
op1329.outputs = [
    buf1329: ComputedBuffer
    buf1329.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1329.users = [
        NodeUser(node=SchedulerNode(name='op1333'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1329.group.device = cuda:0
op1329.group.iteration = (128, 3840)
op1329.sizes = ([128], [3840])
buf1328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
buf1329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1329_loop_body:
    var_ranges = {p0: 128, p1: 3840}
    index0 = 3840*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1328', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1329', get_index_1, getitem)
        return store_reduction


op1330: SchedulerNode(ComputedBuffer)
op1330.writes = [MemoryDep('buf1330', c0, {c0: 128})]
op1330.unmet_dependencies = [MemoryDep('buf1328', c0, {c0: 491520})]
op1330.met_dependencies = []
op1330.outputs = [
    buf1330: ComputedBuffer
    buf1330.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1330.users = [NodeUser(node=SchedulerNode(name='op1332'), can_inplace=True, is_weak=False)]
]
op1330.group.device = cuda:0
op1330.group.iteration = (128, 3840)
op1330.sizes = ([128], [3840])
buf1328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
buf1330_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1330_loop_body:
    var_ranges = {p0: 128, p1: 3840}
    index0 = 3840*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1328', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1330', get_index_1, getitem_1)
        return store_reduction


op1332: SchedulerNode(ComputedBuffer)
op1332.writes = [MemoryDep('buf1332', c0, {c0: 128})]
op1332.unmet_dependencies = [MemoryDep('buf1330', c0, {c0: 128})]
op1332.met_dependencies = []
op1332.outputs = [
    buf1332: ComputedBuffer
    buf1332.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1332.users = [
        NodeUser(node=SchedulerNode(name='op1333'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1332.group.device = cuda:0
op1332.group.iteration = (128, 1)
op1332.sizes = ([128], [])
buf1330_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1332_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1332_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1330', get_index)
        constant = ops.constant(3840.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1332', get_index_1, rsqrt, None)
        return store


op1333: SchedulerNode(ComputedBuffer)
op1333.writes = [MemoryDep('buf1333', c0, {c0: 491520})]
op1333.unmet_dependencies = 
    [   MemoryDep('buf1328', c0, {c0: 491520}),
        MemoryDep('buf1329', 32*c0 + ((c1//60)), {c0: 4, c1: 1920}),
        MemoryDep('buf1332', 32*c0 + ((c1//60)), {c0: 4, c1: 1920})]
op1333.met_dependencies = 
    [   MemoryDep('primals_886', c1, {c0: 4, c1: 1920}),
        MemoryDep('primals_887', c1, {c0: 4, c1: 1920})]
op1333.outputs = [
    buf1333: ComputedBuffer
    buf1333.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
    buf1333.users = [NodeUser(node=SchedulerNode(name='op1334'), can_inplace=True, is_weak=False)]
]
op1333.group.device = cuda:0
op1333.group.iteration = (491520, 1)
op1333.sizes = ([4, 1920, 64], [])
buf1328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
buf1329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1332_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_886_layout = FixedLayout('cuda:0', torch.float32, size=[1920], stride=[1])
primals_887_layout = FixedLayout('cuda:0', torch.float32, size=[1920], stride=[1])
buf1333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
class op1333_loop_body:
    var_ranges = {p0: 4, p1: 1920, p2: 64}
    index0 = 122880*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//60))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1329', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1332', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_886', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_887', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1333', get_index_5, add, None)
        return store


op1334: SchedulerNode(ComputedBuffer)
op1334.writes = [MemoryDep('buf1334', c0, {c0: 491520})]
op1334.unmet_dependencies = [MemoryDep('buf1333', c0, {c0: 491520})]
op1334.met_dependencies = []
op1334.outputs = [
    buf1334: ComputedBuffer
    buf1334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
    buf1334.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1335'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1336'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1334.group.device = cuda:0
op1334.group.iteration = (491520, 1)
op1334.sizes = ([491520], [])
buf1333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
buf1334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 8, 8], stride=[122880, 64, 8, 1])
class op1334_loop_body:
    var_ranges = {p0: 491520}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1333', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1333', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1334', get_index_2, mul, None)
        return store


op1335: ExternKernelSchedulerNode(ExternKernelAlloc)
op1335.writes = [StarDep(name='buf1335', mode=None)]
op1335.unmet_dependencies = [StarDep(name='buf1334', mode=None)]
op1335.met_dependencies = [StarDep(name='primals_888', mode=None)]
op1335.outputs = [
    buf1335: ExternKernelAlloc
    buf1335.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1335.users = [NodeUser(node=SchedulerNode(name='op1339'), can_inplace=True, is_weak=False)]
]
op1335.node.kernel = extern_kernels.convolution


op1336: ExternKernelSchedulerNode(ExternKernelAlloc)
op1336.writes = [StarDep(name='buf1336', mode=None)]
op1336.unmet_dependencies = [StarDep(name='buf1334', mode=None)]
op1336.met_dependencies = [StarDep(name='primals_890', mode=None)]
op1336.outputs = [
    buf1336: ExternKernelAlloc
    buf1336.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1336.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1336.node.kernel = extern_kernels.convolution


op1337: ExternKernelSchedulerNode(ExternKernelAlloc)
op1337.writes = [StarDep(name='buf1337', mode=None)]
op1337.unmet_dependencies = [StarDep(name='buf1336', mode=None)]
op1337.met_dependencies = [StarDep(name='primals_891', mode=None)]
op1337.outputs = [
    buf1337: ExternKernelAlloc
    buf1337.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1337.users = [NodeUser(node=SchedulerNode(name='op1339'), can_inplace=True, is_weak=False)]
]
op1337.node.kernel = extern_kernels.convolution


op1338: ExternKernelSchedulerNode(ExternKernelOut)
op1338.writes = [StarDep(name='buf1338', mode=None)]
op1338.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1338.met_dependencies = [StarDep(name='primals_892', mode=None)]
op1338.outputs = [
    buf1338: ExternKernelOut
    buf1338.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
    buf1338.users = [NodeUser(node=SchedulerNode(name='op1339'), can_inplace=False, is_weak=False)]
]
op1338.node.kernel = extern_kernels.mm


op1339: SchedulerNode(ComputedBuffer)
op1339.writes = [MemoryDep('buf1339', c0, {c0: 327680})]
op1339.unmet_dependencies = 
    [   MemoryDep('buf1335', c0, {c0: 327680}),
        MemoryDep('buf1337', c0, {c0: 327680}),
        MemoryDep('buf1338', c0, {c0: 5120})]
op1339.met_dependencies = 
    [   MemoryDep('primals_889', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_893', c1, {c0: 4, c1: 1280})]
op1339.outputs = [
    buf1339: ComputedBuffer
    buf1339.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1339.users = [
        NodeUser(node=SchedulerNode(name='op1340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1344'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1339.group.device = cuda:0
op1339.group.iteration = (327680, 1)
op1339.sizes = ([4, 1280, 64], [])
buf1335_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_889_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1337_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280], stride=[1280, 1])
primals_893_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1339_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1339_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1335', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_889', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1337', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1338', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_893', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1339', get_index_5, add_3, None)
        return store


op1340: SchedulerNode(ComputedBuffer)
op1340.writes = [MemoryDep('buf1340', c0, {c0: 128})]
op1340.unmet_dependencies = [MemoryDep('buf1339', c0, {c0: 327680})]
op1340.met_dependencies = []
op1340.outputs = [
    buf1340: ComputedBuffer
    buf1340.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1340.users = [
        NodeUser(node=SchedulerNode(name='op1344'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1340.group.device = cuda:0
op1340.group.iteration = (128, 2560)
op1340.sizes = ([128], [2560])
buf1339_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1340_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1340_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1339', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1340', get_index_1, getitem)
        return store_reduction


op1341: SchedulerNode(ComputedBuffer)
op1341.writes = [MemoryDep('buf1341', c0, {c0: 128})]
op1341.unmet_dependencies = [MemoryDep('buf1339', c0, {c0: 327680})]
op1341.met_dependencies = []
op1341.outputs = [
    buf1341: ComputedBuffer
    buf1341.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1341.users = [NodeUser(node=SchedulerNode(name='op1343'), can_inplace=True, is_weak=False)]
]
op1341.group.device = cuda:0
op1341.group.iteration = (128, 2560)
op1341.sizes = ([128], [2560])
buf1339_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1341_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1341_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1339', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1341', get_index_1, getitem_1)
        return store_reduction


op1343: SchedulerNode(ComputedBuffer)
op1343.writes = [MemoryDep('buf1343', c0, {c0: 128})]
op1343.unmet_dependencies = [MemoryDep('buf1341', c0, {c0: 128})]
op1343.met_dependencies = []
op1343.outputs = [
    buf1343: ComputedBuffer
    buf1343.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1343.users = [
        NodeUser(node=SchedulerNode(name='op1344'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1343.group.device = cuda:0
op1343.group.iteration = (128, 1)
op1343.sizes = ([128], [])
buf1341_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1343_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1341', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1343', get_index_1, rsqrt, None)
        return store


op1344: SchedulerNode(ComputedBuffer)
op1344.writes = [MemoryDep('buf1344', c0, {c0: 327680})]
op1344.unmet_dependencies = 
    [   MemoryDep('buf1339', c0, {c0: 327680}),
        MemoryDep('buf1340', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1343', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1344.met_dependencies = 
    [   MemoryDep('primals_894', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_895', c1, {c0: 4, c1: 1280})]
op1344.outputs = [
    buf1344: ComputedBuffer
    buf1344.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1344.users = [NodeUser(node=SchedulerNode(name='op1345'), can_inplace=True, is_weak=False)]
]
op1344.group.device = cuda:0
op1344.group.iteration = (327680, 1)
op1344.sizes = ([4, 1280, 64], [])
buf1339_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1340_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_894_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_895_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1344_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1344_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1340', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1343', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_894', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_895', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1344', get_index_5, add, None)
        return store


op1345: SchedulerNode(ComputedBuffer)
op1345.writes = [MemoryDep('buf1345', c0, {c0: 327680})]
op1345.unmet_dependencies = [MemoryDep('buf1344', c0, {c0: 327680})]
op1345.met_dependencies = []
op1345.outputs = [
    buf1345: ComputedBuffer
    buf1345.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1345.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1346'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1347'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1345.group.device = cuda:0
op1345.group.iteration = (327680, 1)
op1345.sizes = ([327680], [])
buf1344_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1345_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1345_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1344', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1344', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1345', get_index_2, mul, None)
        return store


op1346: ExternKernelSchedulerNode(ExternKernelAlloc)
op1346.writes = [StarDep(name='buf1346', mode=None)]
op1346.unmet_dependencies = [StarDep(name='buf1345', mode=None)]
op1346.met_dependencies = [StarDep(name='primals_896', mode=None)]
op1346.outputs = [
    buf1346: ExternKernelAlloc
    buf1346.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1346.users = [NodeUser(node=SchedulerNode(name='op1352'), can_inplace=True, is_weak=False)]
]
op1346.node.kernel = extern_kernels.convolution


op1347: ExternKernelSchedulerNode(ExternKernelAlloc)
op1347.writes = [StarDep(name='buf1347', mode=None)]
op1347.unmet_dependencies = [StarDep(name='buf1345', mode=None)]
op1347.met_dependencies = [StarDep(name='primals_898', mode=None)]
op1347.outputs = [
    buf1347: ExternKernelAlloc
    buf1347.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1347.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1347.node.kernel = extern_kernels.convolution


op1348: ExternKernelSchedulerNode(ExternKernelAlloc)
op1348.writes = [StarDep(name='buf1348', mode=None)]
op1348.unmet_dependencies = [StarDep(name='buf1347', mode=None)]
op1348.met_dependencies = [StarDep(name='primals_899', mode=None)]
op1348.outputs = [
    buf1348: ExternKernelAlloc
    buf1348.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1348.users = [NodeUser(node=SchedulerNode(name='op1352'), can_inplace=True, is_weak=False)]
]
op1348.node.kernel = extern_kernels.convolution


op1349: ExternKernelSchedulerNode(ExternKernelAlloc)
op1349.writes = [StarDep(name='buf1349', mode=None)]
op1349.unmet_dependencies = [StarDep(name='buf1328', mode=None)]
op1349.met_dependencies = [StarDep(name='primals_900', mode=None)]
op1349.outputs = [
    buf1349: ExternKernelAlloc
    buf1349.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1349.users = [NodeUser(node=SchedulerNode(name='op1352'), can_inplace=True, is_weak=False)]
]
op1349.node.kernel = extern_kernels.convolution


op1350: ExternKernelSchedulerNode(ExternKernelAlloc)
op1350.writes = [StarDep(name='buf1350', mode=None)]
op1350.unmet_dependencies = [StarDep(name='buf1328', mode=None)]
op1350.met_dependencies = [StarDep(name='primals_902', mode=None)]
op1350.outputs = [
    buf1350: ExternKernelAlloc
    buf1350.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 8, 8], stride=[5120, 64, 8, 1])
    buf1350.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1351'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1350.node.kernel = extern_kernels.convolution


op1351: ExternKernelSchedulerNode(ExternKernelAlloc)
op1351.writes = [StarDep(name='buf1351', mode=None)]
op1351.unmet_dependencies = [StarDep(name='buf1350', mode=None)]
op1351.met_dependencies = [StarDep(name='primals_903', mode=None)]
op1351.outputs = [
    buf1351: ExternKernelAlloc
    buf1351.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1351.users = [NodeUser(node=SchedulerNode(name='op1352'), can_inplace=True, is_weak=False)]
]
op1351.node.kernel = extern_kernels.convolution


op1352: SchedulerNode(ComputedBuffer)
op1352.writes = [MemoryDep('buf1352', c0, {c0: 327680})]
op1352.unmet_dependencies = 
    [   MemoryDep('buf1346', c0, {c0: 327680}),
        MemoryDep('buf1348', c0, {c0: 327680}),
        MemoryDep('buf1349', c0, {c0: 327680}),
        MemoryDep('buf1351', c0, {c0: 327680})]
op1352.met_dependencies = 
    [   MemoryDep('primals_897', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_901', c1, {c0: 4, c1: 1280})]
op1352.outputs = [
    buf1352: ComputedBuffer
    buf1352.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1352.users = [
        NodeUser(node=SchedulerNode(name='op1353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1357'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1431'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1352.group.device = cuda:0
op1352.group.iteration = (327680, 1)
op1352.sizes = ([4, 1280, 64], [])
buf1349_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_901_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1351_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1346_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
primals_897_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1348_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1352_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1352_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1349', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_901', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1351', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1346', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_897', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1348', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1352', get_index_6, mul_2, None)
        return store


op1353: SchedulerNode(ComputedBuffer)
op1353.writes = [MemoryDep('buf1353', c0, {c0: 128})]
op1353.unmet_dependencies = [MemoryDep('buf1352', c0, {c0: 327680})]
op1353.met_dependencies = []
op1353.outputs = [
    buf1353: ComputedBuffer
    buf1353.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1353.users = [
        NodeUser(node=SchedulerNode(name='op1357'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1353.group.device = cuda:0
op1353.group.iteration = (128, 2560)
op1353.sizes = ([128], [2560])
buf1352_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1353_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1353_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1352', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1353', get_index_1, getitem)
        return store_reduction


op1354: SchedulerNode(ComputedBuffer)
op1354.writes = [MemoryDep('buf1354', c0, {c0: 128})]
op1354.unmet_dependencies = [MemoryDep('buf1352', c0, {c0: 327680})]
op1354.met_dependencies = []
op1354.outputs = [
    buf1354: ComputedBuffer
    buf1354.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1354.users = [
        NodeUser(node=SchedulerNode(name='op1356'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1357'), can_inplace=False, is_weak=False),
    ]
]
op1354.group.device = cuda:0
op1354.group.iteration = (128, 2560)
op1354.sizes = ([128], [2560])
buf1352_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1354_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1354_loop_body:
    var_ranges = {p0: 128, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1352', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1354', get_index_1, getitem_1)
        return store_reduction


op1356: SchedulerNode(ComputedBuffer)
op1356.writes = [MemoryDep('buf1356', c0, {c0: 128})]
op1356.unmet_dependencies = [MemoryDep('buf1354', c0, {c0: 128})]
op1356.met_dependencies = []
op1356.outputs = [
    buf1356: ComputedBuffer
    buf1356.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1356.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1356.group.device = cuda:0
op1356.group.iteration = (128, 1)
op1356.sizes = ([128], [])
buf1354_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1356_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1356_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1354', get_index)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1356', get_index_1, rsqrt, None)
        return store


op1357: SchedulerNode(ComputedBuffer)
op1357.writes = [MemoryDep('buf1357', c0, {c0: 327680})]
op1357.unmet_dependencies = 
    [   MemoryDep('buf1352', c0, {c0: 327680}),
        MemoryDep('buf1353', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1354', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1357.met_dependencies = 
    [   MemoryDep('primals_904', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_905', c1, {c0: 4, c1: 1280})]
op1357.outputs = [
    buf1357: ComputedBuffer
    buf1357.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
    buf1357.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1359'), can_inplace=False, is_weak=False),
    ]
]
op1357.group.device = cuda:0
op1357.group.iteration = (327680, 1)
op1357.sizes = ([4, 1280, 64], [])
buf1352_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1353_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1354_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_904_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_905_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1357_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
class op1357_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 64}
    index0 = 81920*p0 + 64*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1353', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1354', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_904', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_905', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1357', get_index_5, add_1, None)
        return store


op1358: ExternKernelSchedulerNode(ExternKernelOut)
op1358.writes = [StarDep(name='buf1358', mode=None)]
op1358.unmet_dependencies = [StarDep(name='buf1357', mode=None)]
op1358.met_dependencies = [StarDep(name='primals_906', mode=None)]
op1358.outputs = [
    buf1358: ExternKernelOut
    buf1358.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1358.users = [
        NodeUser(node=SchedulerNode(name='op1362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1387'), can_inplace=True, is_weak=False),
    ]
]
op1358.node.kernel = extern_kernels.bmm


op1359: SchedulerNode(ComputedBuffer)
op1359.writes = [MemoryDep('buf1359', c0, {c0: 327680})]
op1359.unmet_dependencies = [MemoryDep('buf1357', 81920*c0 + c1 + 64*c2, {c0: 4, c1: 64, c2: 1280})]
op1359.met_dependencies = []
op1359.outputs = [
    buf1359: ComputedBuffer
    buf1359.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1359.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1360'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1359.group.device = cuda:0
op1359.group.iteration = (327680, 1)
op1359.sizes = ([4, 64, 1280], [])
buf1357_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1359_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1359_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 1280}
    index0 = 81920*p0 + p1 + 64*p2
    index1 = 81920*p0 + 1280*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1357', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1359', get_index_1, load, None)
        return store


op1360: ExternKernelSchedulerNode(ExternKernelOut)
op1360.writes = [StarDep(name='buf1360', mode=None)]
op1360.unmet_dependencies = [StarDep(name='buf1359', mode=None)]
op1360.met_dependencies = [StarDep(name='primals_908', mode=None)]
op1360.outputs = [
    buf1360: ExternKernelOut
    buf1360.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1360.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1361'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1360.node.kernel = extern_kernels.mm


op1361: ExternKernelSchedulerNode(ExternKernelOut)
op1361.writes = [StarDep(name='buf1361', mode=None)]
op1361.unmet_dependencies = [StarDep(name='buf1360', mode=None)]
op1361.met_dependencies = [StarDep(name='primals_909', mode=None)]
op1361.outputs = [
    buf1361: ExternKernelOut
    buf1361.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1361.users = [
        NodeUser(node=SchedulerNode(name='op1362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1387'), can_inplace=True, is_weak=False),
    ]
]
op1361.node.kernel = extern_kernels.mm


op1362: SchedulerNode(ComputedBuffer)
op1362.writes = [MemoryDep('buf1362', c0, {c0: 256})]
op1362.unmet_dependencies = [MemoryDep('buf1358', c0, {c0: 327680}), MemoryDep('buf1361', c0, {c0: 327680})]
op1362.met_dependencies = [MemoryDep('primals_907', c1, {c0: 256, c1: 1280})]
op1362.outputs = [
    buf1362: ComputedBuffer
    buf1362.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1362.users = [NodeUser(node=SchedulerNode(name='op1365'), can_inplace=False, is_weak=False)]
]
op1362.group.device = cuda:0
op1362.group.iteration = (256, 1280)
op1362.sizes = ([256], [1280])
buf1358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_907_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1361_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1362_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1362_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_907', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1361', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1362', get_index_3, getitem)
        return store_reduction


op1363: SchedulerNode(ComputedBuffer)
op1363.writes = [MemoryDep('buf1363', c0, {c0: 256})]
op1363.unmet_dependencies = [MemoryDep('buf1358', c0, {c0: 327680}), MemoryDep('buf1361', c0, {c0: 327680})]
op1363.met_dependencies = [MemoryDep('primals_907', c1, {c0: 256, c1: 1280})]
op1363.outputs = [
    buf1363: ComputedBuffer
    buf1363.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1363.users = [
        NodeUser(node=SchedulerNode(name='op1365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2083'), can_inplace=True, is_weak=False),
    ]
]
op1363.group.device = cuda:0
op1363.group.iteration = (256, 1280)
op1363.sizes = ([256], [1280])
buf1358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_907_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1361_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1363_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_907', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1361', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1363', get_index_3, getitem_1)
        return store_reduction


op1365: SchedulerNode(ComputedBuffer)
op1365.writes = [MemoryDep('buf1365', c0, {c0: 327680})]
op1365.unmet_dependencies = 
    [   MemoryDep('buf1358', c0, {c0: 327680}),
        MemoryDep('buf1361', c0, {c0: 327680}),
        MemoryDep('buf1362', c0, {c0: 256}),
        MemoryDep('buf1363', c0, {c0: 256})]
op1365.met_dependencies = [MemoryDep('primals_907', c1, {c0: 256, c1: 1280})]
op1365.outputs = [
    buf1365: ComputedBuffer
    buf1365.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1365.users = [
        NodeUser(node=SchedulerNode(name='op1366'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1365.group.device = cuda:0
op1365.group.iteration = (327680, 1)
op1365.sizes = ([256, 1280], [])
buf1358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_907_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1361_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1362_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1365_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1365_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_907', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1361', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1362', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1363', get_index_4)
        constant_1 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1365', get_index_5, mul_1, None)
        return store


op1366: SchedulerNode(ComputedBuffer)
op1366.writes = [MemoryDep('buf1366', c0, {c0: 327680})]
op1366.unmet_dependencies = [MemoryDep('buf1365', c0, {c0: 327680})]
op1366.met_dependencies = 
    [   MemoryDep('primals_910', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_911', c1, {c0: 256, c1: 1280})]
op1366.outputs = [
    buf1366: ComputedBuffer
    buf1366.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1366.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1368'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1370'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1371'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1373'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1374'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1366.group.device = cuda:0
op1366.group.iteration = (327680, 1)
op1366.sizes = ([256, 1280], [])
buf1365_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_910_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_911_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1366_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1366_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_910', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_911', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1366', get_index_3, add, None)
        return store


op1367: ExternKernelSchedulerNode(ExternKernelOut)
op1367.writes = [StarDep(name='buf1367', mode=None)]
op1367.unmet_dependencies = [StarDep(name='buf1366', mode=None)]
op1367.met_dependencies = [StarDep(name='primals_912', mode=None)]
op1367.outputs = [
    buf1367: ExternKernelOut
    buf1367.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1367.users = [NodeUser(node=SchedulerNode(name='op1376'), can_inplace=True, is_weak=False)]
]
op1367.node.kernel = extern_kernels.mm


op1368: ExternKernelSchedulerNode(ExternKernelOut)
op1368.writes = [StarDep(name='buf1368', mode=None)]
op1368.unmet_dependencies = [StarDep(name='buf1366', mode=None)]
op1368.met_dependencies = [StarDep(name='primals_913', mode=None)]
op1368.outputs = [
    buf1368: ExternKernelOut
    buf1368.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1368.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1369'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1368.node.kernel = extern_kernels.mm


op1369: ExternKernelSchedulerNode(ExternKernelOut)
op1369.writes = [StarDep(name='buf1369', mode=None)]
op1369.unmet_dependencies = [StarDep(name='buf1368', mode=None)]
op1369.met_dependencies = [StarDep(name='primals_914', mode=None)]
op1369.outputs = [
    buf1369: ExternKernelOut
    buf1369.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1369.users = [NodeUser(node=SchedulerNode(name='op1376'), can_inplace=True, is_weak=False)]
]
op1369.node.kernel = extern_kernels.mm


op1370: ExternKernelSchedulerNode(ExternKernelOut)
op1370.writes = [StarDep(name='buf1370', mode=None)]
op1370.unmet_dependencies = [StarDep(name='buf1366', mode=None)]
op1370.met_dependencies = [StarDep(name='primals_915', mode=None)]
op1370.outputs = [
    buf1370: ExternKernelOut
    buf1370.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1370.users = [NodeUser(node=SchedulerNode(name='op1377'), can_inplace=True, is_weak=False)]
]
op1370.node.kernel = extern_kernels.mm


op1371: ExternKernelSchedulerNode(ExternKernelOut)
op1371.writes = [StarDep(name='buf1371', mode=None)]
op1371.unmet_dependencies = [StarDep(name='buf1366', mode=None)]
op1371.met_dependencies = [StarDep(name='primals_916', mode=None)]
op1371.outputs = [
    buf1371: ExternKernelOut
    buf1371.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1371.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1372'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1371.node.kernel = extern_kernels.mm


op1372: ExternKernelSchedulerNode(ExternKernelOut)
op1372.writes = [StarDep(name='buf1372', mode=None)]
op1372.unmet_dependencies = [StarDep(name='buf1371', mode=None)]
op1372.met_dependencies = [StarDep(name='primals_917', mode=None)]
op1372.outputs = [
    buf1372: ExternKernelOut
    buf1372.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1372.users = [NodeUser(node=SchedulerNode(name='op1377'), can_inplace=True, is_weak=False)]
]
op1372.node.kernel = extern_kernels.mm


op1373: ExternKernelSchedulerNode(ExternKernelOut)
op1373.writes = [StarDep(name='buf1373', mode=None)]
op1373.unmet_dependencies = [StarDep(name='buf1366', mode=None)]
op1373.met_dependencies = [StarDep(name='primals_918', mode=None)]
op1373.outputs = [
    buf1373: ExternKernelOut
    buf1373.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1373.users = [NodeUser(node=SchedulerNode(name='op1378'), can_inplace=True, is_weak=False)]
]
op1373.node.kernel = extern_kernels.mm


op1374: ExternKernelSchedulerNode(ExternKernelOut)
op1374.writes = [StarDep(name='buf1374', mode=None)]
op1374.unmet_dependencies = [StarDep(name='buf1366', mode=None)]
op1374.met_dependencies = [StarDep(name='primals_919', mode=None)]
op1374.outputs = [
    buf1374: ExternKernelOut
    buf1374.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1374.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1375'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1374.node.kernel = extern_kernels.mm


op1375: ExternKernelSchedulerNode(ExternKernelOut)
op1375.writes = [StarDep(name='buf1375', mode=None)]
op1375.unmet_dependencies = [StarDep(name='buf1374', mode=None)]
op1375.met_dependencies = [StarDep(name='primals_920', mode=None)]
op1375.outputs = [
    buf1375: ExternKernelOut
    buf1375.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1375.users = [NodeUser(node=SchedulerNode(name='op1378'), can_inplace=True, is_weak=False)]
]
op1375.node.kernel = extern_kernels.mm


op1376: SchedulerNode(ComputedBuffer)
op1376.writes = [MemoryDep('buf1376', c0, {c0: 327680})]
op1376.unmet_dependencies = [MemoryDep('buf1367', c0, {c0: 327680}), MemoryDep('buf1369', c0, {c0: 327680})]
op1376.met_dependencies = []
op1376.outputs = [
    buf1376: ComputedBuffer
    buf1376.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1376.group.device = cuda:0
op1376.group.iteration = (327680, 1)
op1376.sizes = ([327680], [])
buf1367_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1369_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1376_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1376_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1369', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1376', get_index_2, add, None)
        return store


op1377: SchedulerNode(ComputedBuffer)
op1377.writes = [MemoryDep('buf1377', c0, {c0: 327680})]
op1377.unmet_dependencies = [MemoryDep('buf1370', c0, {c0: 327680}), MemoryDep('buf1372', c0, {c0: 327680})]
op1377.met_dependencies = []
op1377.outputs = [
    buf1377: ComputedBuffer
    buf1377.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1377.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1377.group.device = cuda:0
op1377.group.iteration = (327680, 1)
op1377.sizes = ([327680], [])
buf1370_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1372_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1377_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1377_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1372', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1377', get_index_2, add, None)
        return store


op1378: SchedulerNode(ComputedBuffer)
op1378.writes = [MemoryDep('buf1378', c0, {c0: 327680})]
op1378.unmet_dependencies = [MemoryDep('buf1373', c0, {c0: 327680}), MemoryDep('buf1375', c0, {c0: 327680})]
op1378.met_dependencies = []
op1378.outputs = [
    buf1378: ComputedBuffer
    buf1378.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1378.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1378.group.device = cuda:0
op1378.group.iteration = (327680, 1)
op1378.sizes = ([327680], [])
buf1373_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1375_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1378_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1378_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1373', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1375', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1378', get_index_2, add, None)
        return store


op1379: ExternKernelSchedulerNode(FallbackKernel)
op1379.writes = [StarDep(name='buf1379', mode=None)]
op1379.unmet_dependencies = 
    [   StarDep(name='buf1376', mode=None),
        StarDep(name='buf1377', mode=None),
        StarDep(name='buf1378', mode=None)]
op1379.met_dependencies = []
op1379.outputs = [
    buf1379: FallbackKernel
    buf1379.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1379.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1380'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1381'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1382'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1383'), can_inplace=False, is_weak=False),
    ]
]
op1379.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1380: ExternKernelSchedulerNode(MultiOutput)
op1380.writes = [StarDep(name='buf1380', mode=None)]
op1380.unmet_dependencies = [StarDep(name='buf1379', mode=None)]
op1380.met_dependencies = []
op1380.outputs = [
    buf1380: MultiOutput
    buf1380.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf1380.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1385'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1380.node.kernel = None


op1381: ExternKernelSchedulerNode(MultiOutput)
op1381.writes = [StarDep(name='buf1381', mode=None)]
op1381.unmet_dependencies = [StarDep(name='buf1379', mode=None)]
op1381.met_dependencies = []
op1381.outputs = [
    buf1381: MultiOutput
    buf1381.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf1381.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1381.node.kernel = None


op1382: ExternKernelSchedulerNode(MultiOutput)
op1382.writes = [StarDep(name='buf1382', mode=None)]
op1382.unmet_dependencies = [StarDep(name='buf1379', mode=None)]
op1382.met_dependencies = []
op1382.outputs = [
    buf1382: MultiOutput
    buf1382.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1382.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1382.node.kernel = None


op1383: ExternKernelSchedulerNode(MultiOutput)
op1383.writes = [StarDep(name='buf1383', mode=None)]
op1383.unmet_dependencies = [StarDep(name='buf1379', mode=None)]
op1383.met_dependencies = []
op1383.outputs = [
    buf1383: MultiOutput
    buf1383.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1383.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1383.node.kernel = None


op1384: ExternKernelSchedulerNode(ExternKernelOut)
op1384.writes = [StarDep(name='buf1384', mode=None)]
op1384.unmet_dependencies = [StarDep(name='buf1380', mode=None)]
op1384.met_dependencies = [StarDep(name='primals_921', mode=None)]
op1384.outputs = [
    buf1384: ExternKernelOut
    buf1384.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1384.users = [NodeUser(node=SchedulerNode(name='op1387'), can_inplace=True, is_weak=False)]
]
op1384.node.kernel = extern_kernels.mm


op1385: ExternKernelSchedulerNode(ExternKernelOut)
op1385.writes = [StarDep(name='buf1385', mode=None)]
op1385.unmet_dependencies = [StarDep(name='buf1380', mode=None)]
op1385.met_dependencies = [StarDep(name='primals_923', mode=None)]
op1385.outputs = [
    buf1385: ExternKernelOut
    buf1385.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1385.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1386'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1385.node.kernel = extern_kernels.mm


op1386: ExternKernelSchedulerNode(ExternKernelOut)
op1386.writes = [StarDep(name='buf1386', mode=None)]
op1386.unmet_dependencies = [StarDep(name='buf1385', mode=None)]
op1386.met_dependencies = [StarDep(name='primals_924', mode=None)]
op1386.outputs = [
    buf1386: ExternKernelOut
    buf1386.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1386.users = [NodeUser(node=SchedulerNode(name='op1387'), can_inplace=True, is_weak=False)]
]
op1386.node.kernel = extern_kernels.mm


op1387: SchedulerNode(ComputedBuffer)
op1387.writes = [MemoryDep('buf1387', c0, {c0: 327680})]
op1387.unmet_dependencies = 
    [   MemoryDep('buf1358', c0, {c0: 327680}),
        MemoryDep('buf1361', c0, {c0: 327680}),
        MemoryDep('buf1384', c0, {c0: 327680}),
        MemoryDep('buf1386', c0, {c0: 327680})]
op1387.met_dependencies = 
    [   MemoryDep('primals_907', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_922', c1, {c0: 256, c1: 1280})]
op1387.outputs = [
    buf1387: ComputedBuffer
    buf1387.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1387.users = [
        NodeUser(node=SchedulerNode(name='op1388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1391'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1416'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1426'), can_inplace=True, is_weak=False),
    ]
]
op1387.group.device = cuda:0
op1387.group.iteration = (327680, 1)
op1387.sizes = ([256, 1280], [])
buf1384_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_922_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1386_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1358_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_907_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1361_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1387_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_922', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1386', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1358', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_907', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1361', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1387', get_index_6, add_4, None)
        return store


op1388: SchedulerNode(ComputedBuffer)
op1388.writes = [MemoryDep('buf1388', c0, {c0: 256})]
op1388.unmet_dependencies = [MemoryDep('buf1387', c0, {c0: 327680})]
op1388.met_dependencies = []
op1388.outputs = [
    buf1388: ComputedBuffer
    buf1388.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1388.users = [NodeUser(node=SchedulerNode(name='op1391'), can_inplace=False, is_weak=False)]
]
op1388.group.device = cuda:0
op1388.group.iteration = (256, 1280)
op1388.sizes = ([256], [1280])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1388_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1388_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1387', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1388', get_index_1, getitem)
        return store_reduction


op1389: SchedulerNode(ComputedBuffer)
op1389.writes = [MemoryDep('buf1389', c0, {c0: 256})]
op1389.unmet_dependencies = [MemoryDep('buf1387', c0, {c0: 327680})]
op1389.met_dependencies = []
op1389.outputs = [
    buf1389: ComputedBuffer
    buf1389.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1389.users = [
        NodeUser(node=SchedulerNode(name='op1391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2082'), can_inplace=True, is_weak=False),
    ]
]
op1389.group.device = cuda:0
op1389.group.iteration = (256, 1280)
op1389.sizes = ([256], [1280])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1389_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1389_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1387', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1389', get_index_1, getitem_1)
        return store_reduction


op1391: SchedulerNode(ComputedBuffer)
op1391.writes = [MemoryDep('buf1391', c0, {c0: 327680})]
op1391.unmet_dependencies = 
    [   MemoryDep('buf1387', c0, {c0: 327680}),
        MemoryDep('buf1388', c0, {c0: 256}),
        MemoryDep('buf1389', c0, {c0: 256})]
op1391.met_dependencies = []
op1391.outputs = [
    buf1391: ComputedBuffer
    buf1391.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1391.users = [
        NodeUser(node=SchedulerNode(name='op1392'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1391.group.device = cuda:0
op1391.group.iteration = (327680, 1)
op1391.sizes = ([256, 1280], [])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1388_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1389_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1391_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1391_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1387', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1388', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1389', get_index_2)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1391', get_index_3, mul, None)
        return store


op1392: SchedulerNode(ComputedBuffer)
op1392.writes = [MemoryDep('buf1392', c0, {c0: 327680})]
op1392.unmet_dependencies = [MemoryDep('buf1391', c0, {c0: 327680})]
op1392.met_dependencies = 
    [   MemoryDep('primals_925', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_926', c1, {c0: 256, c1: 1280})]
op1392.outputs = [
    buf1392: ComputedBuffer
    buf1392.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1392.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1393'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1394'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1392.group.device = cuda:0
op1392.group.iteration = (327680, 1)
op1392.sizes = ([256, 1280], [])
buf1391_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_925_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_926_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1392_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1392_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_925', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_926', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1392', get_index_3, add, None)
        return store


op1393: ExternKernelSchedulerNode(ExternKernelOut)
op1393.writes = [StarDep(name='buf1393', mode=None)]
op1393.unmet_dependencies = [StarDep(name='buf1392', mode=None)]
op1393.met_dependencies = [StarDep(name='primals_927', mode=None)]
op1393.outputs = [
    buf1393: ExternKernelOut
    buf1393.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1393.users = [NodeUser(node=SchedulerNode(name='op1402'), can_inplace=True, is_weak=False)]
]
op1393.node.kernel = extern_kernels.mm


op1394: ExternKernelSchedulerNode(ExternKernelOut)
op1394.writes = [StarDep(name='buf1394', mode=None)]
op1394.unmet_dependencies = [StarDep(name='buf1392', mode=None)]
op1394.met_dependencies = [StarDep(name='primals_928', mode=None)]
op1394.outputs = [
    buf1394: ExternKernelOut
    buf1394.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1394.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1395'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1394.node.kernel = extern_kernels.mm


op1395: ExternKernelSchedulerNode(ExternKernelOut)
op1395.writes = [StarDep(name='buf1395', mode=None)]
op1395.unmet_dependencies = [StarDep(name='buf1394', mode=None)]
op1395.met_dependencies = [StarDep(name='primals_929', mode=None)]
op1395.outputs = [
    buf1395: ExternKernelOut
    buf1395.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1395.users = [NodeUser(node=SchedulerNode(name='op1402'), can_inplace=True, is_weak=False)]
]
op1395.node.kernel = extern_kernels.mm


op1396: ExternKernelSchedulerNode(ExternKernelOut)
op1396.writes = [StarDep(name='buf1396', mode=None)]
op1396.unmet_dependencies = []
op1396.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_930', mode=None)]
op1396.outputs = [
    buf1396: ExternKernelOut
    buf1396.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1396.users = [NodeUser(node=SchedulerNode(name='op1403'), can_inplace=True, is_weak=False)]
]
op1396.node.kernel = extern_kernels.mm


op1397: ExternKernelSchedulerNode(ExternKernelOut)
op1397.writes = [StarDep(name='buf1397', mode=None)]
op1397.unmet_dependencies = []
op1397.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_931', mode=None)]
op1397.outputs = [
    buf1397: ExternKernelOut
    buf1397.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1397.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1397.node.kernel = extern_kernels.mm


op1398: ExternKernelSchedulerNode(ExternKernelOut)
op1398.writes = [StarDep(name='buf1398', mode=None)]
op1398.unmet_dependencies = [StarDep(name='buf1397', mode=None)]
op1398.met_dependencies = [StarDep(name='primals_932', mode=None)]
op1398.outputs = [
    buf1398: ExternKernelOut
    buf1398.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1398.users = [NodeUser(node=SchedulerNode(name='op1403'), can_inplace=True, is_weak=False)]
]
op1398.node.kernel = extern_kernels.mm


op1399: ExternKernelSchedulerNode(ExternKernelOut)
op1399.writes = [StarDep(name='buf1399', mode=None)]
op1399.unmet_dependencies = []
op1399.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_933', mode=None)]
op1399.outputs = [
    buf1399: ExternKernelOut
    buf1399.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1399.users = [NodeUser(node=SchedulerNode(name='op1404'), can_inplace=True, is_weak=False)]
]
op1399.node.kernel = extern_kernels.mm


op1400: ExternKernelSchedulerNode(ExternKernelOut)
op1400.writes = [StarDep(name='buf1400', mode=None)]
op1400.unmet_dependencies = []
op1400.met_dependencies = [StarDep(name='primals_177', mode=None), StarDep(name='primals_934', mode=None)]
op1400.outputs = [
    buf1400: ExternKernelOut
    buf1400.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1400.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1401'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1400.node.kernel = extern_kernels.mm


op1401: ExternKernelSchedulerNode(ExternKernelOut)
op1401.writes = [StarDep(name='buf1401', mode=None)]
op1401.unmet_dependencies = [StarDep(name='buf1400', mode=None)]
op1401.met_dependencies = [StarDep(name='primals_935', mode=None)]
op1401.outputs = [
    buf1401: ExternKernelOut
    buf1401.layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
    buf1401.users = [NodeUser(node=SchedulerNode(name='op1404'), can_inplace=True, is_weak=False)]
]
op1401.node.kernel = extern_kernels.mm


op1402: SchedulerNode(ComputedBuffer)
op1402.writes = [MemoryDep('buf1402', c0, {c0: 327680})]
op1402.unmet_dependencies = [MemoryDep('buf1393', c0, {c0: 327680}), MemoryDep('buf1395', c0, {c0: 327680})]
op1402.met_dependencies = []
op1402.outputs = [
    buf1402: ComputedBuffer
    buf1402.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1402.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1405'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1402.group.device = cuda:0
op1402.group.iteration = (327680, 1)
op1402.sizes = ([327680], [])
buf1393_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1395_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1402_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1402_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1393', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1395', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1402', get_index_2, add, None)
        return store


op1403: SchedulerNode(ComputedBuffer)
op1403.writes = [MemoryDep('buf1403', c0, {c0: 394240})]
op1403.unmet_dependencies = [MemoryDep('buf1396', c0, {c0: 394240}), MemoryDep('buf1398', c0, {c0: 394240})]
op1403.met_dependencies = []
op1403.outputs = [
    buf1403: ComputedBuffer
    buf1403.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1403.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1405'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1403.group.device = cuda:0
op1403.group.iteration = (394240, 1)
op1403.sizes = ([394240], [])
buf1396_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1398_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1403_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1403_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1396', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1398', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1403', get_index_2, add, None)
        return store


op1404: SchedulerNode(ComputedBuffer)
op1404.writes = [MemoryDep('buf1404', c0, {c0: 394240})]
op1404.unmet_dependencies = [MemoryDep('buf1399', c0, {c0: 394240}), MemoryDep('buf1401', c0, {c0: 394240})]
op1404.met_dependencies = []
op1404.outputs = [
    buf1404: ComputedBuffer
    buf1404.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
    buf1404.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1405'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1404.group.device = cuda:0
op1404.group.iteration = (394240, 1)
op1404.sizes = ([394240], [])
buf1399_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1401_layout = FixedLayout('cuda:0', torch.float32, size=[308, 1280], stride=[1280, 1])
buf1404_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 1280], stride=[98560, 1280, 1])
class op1404_loop_body:
    var_ranges = {p0: 394240}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1401', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1404', get_index_2, add, None)
        return store


op1405: ExternKernelSchedulerNode(FallbackKernel)
op1405.writes = [StarDep(name='buf1405', mode=None)]
op1405.unmet_dependencies = 
    [   StarDep(name='buf1402', mode=None),
        StarDep(name='buf1403', mode=None),
        StarDep(name='buf1404', mode=None)]
op1405.met_dependencies = []
op1405.outputs = [
    buf1405: FallbackKernel
    buf1405.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1405.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1406'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1407'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1408'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1409'), can_inplace=False, is_weak=False),
    ]
]
op1405.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1406: ExternKernelSchedulerNode(MultiOutput)
op1406.writes = [StarDep(name='buf1406', mode=None)]
op1406.unmet_dependencies = [StarDep(name='buf1405', mode=None)]
op1406.met_dependencies = []
op1406.outputs = [
    buf1406: MultiOutput
    buf1406.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64, 64], stride=[81920, 64, 1280, 1])
    buf1406.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1410'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1411'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1406.node.kernel = None


op1407: ExternKernelSchedulerNode(MultiOutput)
op1407.writes = [StarDep(name='buf1407', mode=None)]
op1407.unmet_dependencies = [StarDep(name='buf1405', mode=None)]
op1407.met_dependencies = []
op1407.outputs = [
    buf1407: MultiOutput
    buf1407.layout = FixedLayout('cuda:0', torch.float32, size=[4, 20, 64], stride=[1280, 64, 1])
    buf1407.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1407.node.kernel = None


op1408: ExternKernelSchedulerNode(MultiOutput)
op1408.writes = [StarDep(name='buf1408', mode=None)]
op1408.unmet_dependencies = [StarDep(name='buf1405', mode=None)]
op1408.met_dependencies = []
op1408.outputs = [
    buf1408: MultiOutput
    buf1408.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1408.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1408.node.kernel = None


op1409: ExternKernelSchedulerNode(MultiOutput)
op1409.writes = [StarDep(name='buf1409', mode=None)]
op1409.unmet_dependencies = [StarDep(name='buf1405', mode=None)]
op1409.met_dependencies = []
op1409.outputs = [
    buf1409: MultiOutput
    buf1409.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1409.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1409.node.kernel = None


op1410: ExternKernelSchedulerNode(ExternKernelOut)
op1410.writes = [StarDep(name='buf1410', mode=None)]
op1410.unmet_dependencies = [StarDep(name='buf1406', mode=None)]
op1410.met_dependencies = [StarDep(name='primals_936', mode=None)]
op1410.outputs = [
    buf1410: ExternKernelOut
    buf1410.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1410.users = [
        NodeUser(node=SchedulerNode(name='op1413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1416'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1426'), can_inplace=True, is_weak=False),
    ]
]
op1410.node.kernel = extern_kernels.mm


op1411: ExternKernelSchedulerNode(ExternKernelOut)
op1411.writes = [StarDep(name='buf1411', mode=None)]
op1411.unmet_dependencies = [StarDep(name='buf1406', mode=None)]
op1411.met_dependencies = [StarDep(name='primals_938', mode=None)]
op1411.outputs = [
    buf1411: ExternKernelOut
    buf1411.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1411.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1412'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1411.node.kernel = extern_kernels.mm


op1412: ExternKernelSchedulerNode(ExternKernelOut)
op1412.writes = [StarDep(name='buf1412', mode=None)]
op1412.unmet_dependencies = [StarDep(name='buf1411', mode=None)]
op1412.met_dependencies = [StarDep(name='primals_939', mode=None)]
op1412.outputs = [
    buf1412: ExternKernelOut
    buf1412.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1412.users = [
        NodeUser(node=SchedulerNode(name='op1413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1416'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1426'), can_inplace=True, is_weak=False),
    ]
]
op1412.node.kernel = extern_kernels.mm


op1413: SchedulerNode(ComputedBuffer)
op1413.writes = [MemoryDep('buf1413', c0, {c0: 256})]
op1413.unmet_dependencies = 
    [   MemoryDep('buf1387', c0, {c0: 327680}),
        MemoryDep('buf1410', c0, {c0: 327680}),
        MemoryDep('buf1412', c0, {c0: 327680})]
op1413.met_dependencies = [MemoryDep('primals_937', c1, {c0: 256, c1: 1280})]
op1413.outputs = [
    buf1413: ComputedBuffer
    buf1413.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1413.users = [NodeUser(node=SchedulerNode(name='op1416'), can_inplace=False, is_weak=False)]
]
op1413.group.device = cuda:0
op1413.group.iteration = (256, 1280)
op1413.sizes = ([256], [1280])
buf1410_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_937_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1412_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1413_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1413_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_937', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1412', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1387', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1413', get_index_4, getitem)
        return store_reduction


op1414: SchedulerNode(ComputedBuffer)
op1414.writes = [MemoryDep('buf1414', c0, {c0: 256})]
op1414.unmet_dependencies = 
    [   MemoryDep('buf1387', c0, {c0: 327680}),
        MemoryDep('buf1410', c0, {c0: 327680}),
        MemoryDep('buf1412', c0, {c0: 327680})]
op1414.met_dependencies = [MemoryDep('primals_937', c1, {c0: 256, c1: 1280})]
op1414.outputs = [
    buf1414: ComputedBuffer
    buf1414.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1414.users = [
        NodeUser(node=SchedulerNode(name='op1416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2081'), can_inplace=True, is_weak=False),
    ]
]
op1414.group.device = cuda:0
op1414.group.iteration = (256, 1280)
op1414.sizes = ([256], [1280])
buf1410_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_937_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1412_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1414_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1414_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_937', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1412', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1387', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1414', get_index_4, getitem_1)
        return store_reduction


op1416: SchedulerNode(ComputedBuffer)
op1416.writes = [MemoryDep('buf1416', c0, {c0: 327680})]
op1416.unmet_dependencies = 
    [   MemoryDep('buf1387', c0, {c0: 327680}),
        MemoryDep('buf1410', c0, {c0: 327680}),
        MemoryDep('buf1412', c0, {c0: 327680}),
        MemoryDep('buf1413', c0, {c0: 256}),
        MemoryDep('buf1414', c0, {c0: 256})]
op1416.met_dependencies = [MemoryDep('primals_937', c1, {c0: 256, c1: 1280})]
op1416.outputs = [
    buf1416: ComputedBuffer
    buf1416.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1416.users = [
        NodeUser(node=SchedulerNode(name='op1417'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1416.group.device = cuda:0
op1416.group.iteration = (327680, 1)
op1416.sizes = ([256, 1280], [])
buf1410_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_937_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1412_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1413_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1414_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1416_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1416_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_937', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1412', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1387', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1413', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1414', get_index_5)
        constant_2 = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1416', get_index_6, mul_2, None)
        return store


op1417: SchedulerNode(ComputedBuffer)
op1417.writes = [MemoryDep('buf1417', c0, {c0: 327680})]
op1417.unmet_dependencies = [MemoryDep('buf1416', c0, {c0: 327680})]
op1417.met_dependencies = 
    [   MemoryDep('primals_940', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_941', c1, {c0: 256, c1: 1280})]
op1417.outputs = [
    buf1417: ComputedBuffer
    buf1417.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1418'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1419'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1417.group.device = cuda:0
op1417.group.iteration = (327680, 1)
op1417.sizes = ([256, 1280], [])
buf1416_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
primals_940_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_941_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1417_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1417_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_940', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_941', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1417', get_index_3, add, None)
        return store


op1418: ExternKernelSchedulerNode(ExternKernelOut)
op1418.writes = [StarDep(name='buf1418', mode=None)]
op1418.unmet_dependencies = [StarDep(name='buf1417', mode=None)]
op1418.met_dependencies = [StarDep(name='primals_942', mode=None)]
op1418.outputs = [
    buf1418: ExternKernelOut
    buf1418.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf1418.users = [NodeUser(node=SchedulerNode(name='op1421'), can_inplace=True, is_weak=False)]
]
op1418.node.kernel = extern_kernels.mm


op1419: ExternKernelSchedulerNode(ExternKernelOut)
op1419.writes = [StarDep(name='buf1419', mode=None)]
op1419.unmet_dependencies = [StarDep(name='buf1417', mode=None)]
op1419.met_dependencies = [StarDep(name='primals_944', mode=None)]
op1419.outputs = [
    buf1419: ExternKernelOut
    buf1419.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1419.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1420'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1419.node.kernel = extern_kernels.mm


op1420: ExternKernelSchedulerNode(ExternKernelOut)
op1420.writes = [StarDep(name='buf1420', mode=None)]
op1420.unmet_dependencies = [StarDep(name='buf1419', mode=None)]
op1420.met_dependencies = [StarDep(name='primals_945', mode=None)]
op1420.outputs = [
    buf1420: ExternKernelOut
    buf1420.layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
    buf1420.users = [NodeUser(node=SchedulerNode(name='op1421'), can_inplace=True, is_weak=False)]
]
op1420.node.kernel = extern_kernels.mm


op1421: SchedulerNode(ComputedBuffer)
op1421.writes = [MemoryDep('buf1421', c0, {c0: 2621440})]
op1421.unmet_dependencies = 
    [   MemoryDep('buf1418', c0, {c0: 2621440}),
        MemoryDep('buf1420', c0, {c0: 2621440})]
op1421.met_dependencies = [MemoryDep('primals_943', c1, {c0: 256, c1: 10240})]
op1421.outputs = [
    buf1421: ComputedBuffer
    buf1421.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
    buf1421.users = [
        NodeUser(node=SchedulerNode(name='op1422'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1421.group.device = cuda:0
op1421.group.iteration = (2621440, 1)
op1421.sizes = ([256, 10240], [])
buf1418_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
primals_943_layout = FixedLayout('cuda:0', torch.float32, size=[10240], stride=[1])
buf1420_layout = FixedLayout('cuda:0', torch.float32, size=[256, 10240], stride=[10240, 1])
buf1421_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
class op1421_loop_body:
    var_ranges = {p0: 256, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_943', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1420', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1421', get_index_3, add_1, None)
        return store


op1422: SchedulerNode(ComputedBuffer)
op1422.writes = [MemoryDep('buf1422', c0, {c0: 1310720})]
op1422.unmet_dependencies = 
    [   MemoryDep('buf1421', 10240*c0 + c1 + 5120, {c0: 256, c1: 5120}),
        MemoryDep('buf1421', 10240*c0 + c1, {c0: 256, c1: 5120})]
op1422.met_dependencies = []
op1422.outputs = [
    buf1422: ComputedBuffer
    buf1422.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
    buf1422.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1423'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1424'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1422.group.device = cuda:0
op1422.group.iteration = (1310720, 1)
op1422.sizes = ([256, 5120], [])
buf1421_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf1421_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 10240], stride=[655360, 10240, 1])
buf1422_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 5120], stride=[327680, 5120, 1])
class op1422_loop_body:
    var_ranges = {p0: 256, p1: 5120}
    index0 = 10240*p0 + p1
    index1 = 10240*p0 + p1 + 5120
    index2 = 5120*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1421', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1421', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1422', get_index_3, mul_3, None)
        return store


op1423: ExternKernelSchedulerNode(ExternKernelOut)
op1423.writes = [StarDep(name='buf1423', mode=None)]
op1423.unmet_dependencies = [StarDep(name='buf1422', mode=None)]
op1423.met_dependencies = [StarDep(name='primals_946', mode=None)]
op1423.outputs = [
    buf1423: ExternKernelOut
    buf1423.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1423.users = [NodeUser(node=SchedulerNode(name='op1426'), can_inplace=True, is_weak=False)]
]
op1423.node.kernel = extern_kernels.mm


op1424: ExternKernelSchedulerNode(ExternKernelOut)
op1424.writes = [StarDep(name='buf1424', mode=None)]
op1424.unmet_dependencies = [StarDep(name='buf1422', mode=None)]
op1424.met_dependencies = [StarDep(name='primals_948', mode=None)]
op1424.outputs = [
    buf1424: ExternKernelOut
    buf1424.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1424.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1425'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1424.node.kernel = extern_kernels.mm


op1425: ExternKernelSchedulerNode(ExternKernelOut)
op1425.writes = [StarDep(name='buf1425', mode=None)]
op1425.unmet_dependencies = [StarDep(name='buf1424', mode=None)]
op1425.met_dependencies = [StarDep(name='primals_949', mode=None)]
op1425.outputs = [
    buf1425: ExternKernelOut
    buf1425.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1425.users = [NodeUser(node=SchedulerNode(name='op1426'), can_inplace=True, is_weak=False)]
]
op1425.node.kernel = extern_kernels.mm


op1426: SchedulerNode(ComputedBuffer)
op1426.writes = [MemoryDep('buf1426', c0, {c0: 327680})]
op1426.unmet_dependencies = 
    [   MemoryDep('buf1387', c0, {c0: 327680}),
        MemoryDep('buf1410', c0, {c0: 327680}),
        MemoryDep('buf1412', c0, {c0: 327680}),
        MemoryDep('buf1423', c0, {c0: 327680}),
        MemoryDep('buf1425', c0, {c0: 327680})]
op1426.met_dependencies = 
    [   MemoryDep('primals_937', c1, {c0: 256, c1: 1280}),
        MemoryDep('primals_947', c1, {c0: 256, c1: 1280})]
op1426.outputs = [
    buf1426: ComputedBuffer
    buf1426.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
    buf1426.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1427'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1428'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1426.group.device = cuda:0
op1426.group.iteration = (327680, 1)
op1426.sizes = ([256, 1280], [])
buf1423_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_947_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1425_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1410_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_937_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1412_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1387_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
buf1426_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1280], stride=[81920, 1280, 1])
class op1426_loop_body:
    var_ranges = {p0: 256, p1: 1280}
    index0 = 1280*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1423', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_947', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1425', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1410', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_937', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1412', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1387', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1426', get_index_7, add_5, None)
        return store


op1427: ExternKernelSchedulerNode(ExternKernelOut)
op1427.writes = [StarDep(name='buf1427', mode=None)]
op1427.unmet_dependencies = [StarDep(name='buf1426', mode=None)]
op1427.met_dependencies = [StarDep(name='primals_950', mode=None)]
op1427.outputs = [
    buf1427: ExternKernelOut
    buf1427.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1427.users = [NodeUser(node=SchedulerNode(name='op1431'), can_inplace=False, is_weak=False)]
]
op1427.node.kernel = extern_kernels.mm


op1428: ExternKernelSchedulerNode(ExternKernelOut)
op1428.writes = [StarDep(name='buf1428', mode=None)]
op1428.unmet_dependencies = [StarDep(name='buf1426', mode=None)]
op1428.met_dependencies = [StarDep(name='primals_952', mode=None)]
op1428.outputs = [
    buf1428: ExternKernelOut
    buf1428.layout = FixedLayout('cuda:0', torch.float32, size=[256, 80], stride=[80, 1])
    buf1428.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1429'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1428.node.kernel = extern_kernels.mm


op1429: ExternKernelSchedulerNode(ExternKernelOut)
op1429.writes = [StarDep(name='buf1429', mode=None)]
op1429.unmet_dependencies = [StarDep(name='buf1428', mode=None)]
op1429.met_dependencies = [StarDep(name='primals_953', mode=None)]
op1429.outputs = [
    buf1429: ExternKernelOut
    buf1429.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
    buf1429.users = [NodeUser(node=SchedulerNode(name='op1431'), can_inplace=False, is_weak=False)]
]
op1429.node.kernel = extern_kernels.mm


op1430: SchedulerNode(ComputedBuffer)
op1430.writes = [MemoryDep('buf1430', c0, {c0: 16})]
op1430.unmet_dependencies = []
op1430.met_dependencies = []
op1430.outputs = [
    buf1430: ComputedBuffer
    buf1430.layout = FixedLayout('cuda:0', torch.int64, size=[16], stride=[1])
    buf1430.users = [
        NodeUser(node=SchedulerNode(name='op1431'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1430.group.device = cuda:0
op1430.group.iteration = (16, 1)
op1430.sizes = ([16], [])
buf1430_layout = FixedLayout('cuda:0', torch.int64, size=[16], stride=[1])
class op1430_loop_body:
    var_ranges = {p0: 16}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1430', get_index_1, to_dtype, None)
        return store


op1431: SchedulerNode(ComputedBuffer)
op1431.writes = [MemoryDep('buf1431', c0, {c0: 1310720})]
op1431.unmet_dependencies = 
    [   MemoryDep('buf1352', 64*c0 + 8*tmp0 + tmp1, {c0: 5120}),
        MemoryDep('buf1427', 81920*c0 + c1 + 10240*tmp0 + 1280*tmp1, {c0: 4, c1: 1280}),
        MemoryDep('buf1429', 81920*c0 + c1 + 10240*tmp0 + 1280*tmp1, {c0: 4, c1: 1280}),
        MemoryDep('buf1430', c1, {c0: 5120, c1: 16}),
        MemoryDep('buf1430', c1, {c0: 81920, c1: 16})]
op1431.met_dependencies = [MemoryDep('primals_951', c1, {c0: 4, c1: 1280})]
op1431.outputs = [
    buf1431: ComputedBuffer
    buf1431.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
    buf1431.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1432'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1433'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1431.group.device = cuda:0
op1431.group.iteration = (1310720, 1)
op1431.sizes = ([4, 1280, 16, 16], [])
buf1430_layout = FixedLayout('cuda:0', torch.int64, size=[16], stride=[1])
buf1430_layout = FixedLayout('cuda:0', torch.int64, size=[16], stride=[1])
buf1427_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
primals_951_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1429_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1280], stride=[1280, 1])
buf1352_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 8, 8], stride=[81920, 64, 8, 1])
buf1431_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
class op1431_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 16, p3: 16}
    index0 = p2
    index1 = p3
    index2 = 10240*indirect0 + 1280*indirect1 + 81920*p0 + p1
    index3 = p1
    index4 = 8*indirect0 + indirect1 + 81920*p0 + 64*p1
    index5 = 327680*p0 + 256*p1 + 16*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1430', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1430', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1427', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_951', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1429', get_index_4)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_4, constant)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf1352', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf1431', get_index_6, add_2, None)
        return store


op1432: ExternKernelSchedulerNode(ExternKernelAlloc)
op1432.writes = [StarDep(name='buf1432', mode=None)]
op1432.unmet_dependencies = [StarDep(name='buf1431', mode=None)]
op1432.met_dependencies = [StarDep(name='primals_954', mode=None)]
op1432.outputs = [
    buf1432: ExternKernelAlloc
    buf1432.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
    buf1432.users = [NodeUser(node=SchedulerNode(name='op1435'), can_inplace=False, is_weak=False)]
]
op1432.node.kernel = extern_kernels.convolution


op1433: ExternKernelSchedulerNode(ExternKernelAlloc)
op1433.writes = [StarDep(name='buf1433', mode=None)]
op1433.unmet_dependencies = [StarDep(name='buf1431', mode=None)]
op1433.met_dependencies = [StarDep(name='primals_956', mode=None)]
op1433.outputs = [
    buf1433: ExternKernelAlloc
    buf1433.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1433.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1434'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1433.node.kernel = extern_kernels.convolution


op1434: ExternKernelSchedulerNode(ExternKernelAlloc)
op1434.writes = [StarDep(name='buf1434', mode=None)]
op1434.unmet_dependencies = [StarDep(name='buf1433', mode=None)]
op1434.met_dependencies = [StarDep(name='primals_957', mode=None)]
op1434.outputs = [
    buf1434: ExternKernelAlloc
    buf1434.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
    buf1434.users = [NodeUser(node=SchedulerNode(name='op1435'), can_inplace=False, is_weak=False)]
]
op1434.node.kernel = extern_kernels.convolution


op1435: SchedulerNode(ComputedBuffer)
op1435.writes = [MemoryDep('buf1435', c0, {c0: 1966080})]
op1435.unmet_dependencies = 
    [   MemoryDep('buf1432', 327680*c0 + c2 + 256*(I), {c0: 4, c1: 1920, c2: 256}),
        MemoryDep('buf1434', 327680*c0 + c2 + 256*(I), {c0: 4, c1: 1920, c2: 256}),
        MemoryDep('buf676', 163840*c0 + c2 + 256*(I), {c0: 4, c1: 1920, c2: 256})]
op1435.met_dependencies = [MemoryDep('primals_955', I, {c0: 4, c1: 1920})]
op1435.outputs = [
    buf1435: ComputedBuffer
    buf1435.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
    buf1435.users = [
        NodeUser(node=SchedulerNode(name='op1436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1440'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1456'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1457'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1435.group.device = cuda:0
op1435.group.iteration = (1966080, 1)
op1435.sizes = ([4, 1920, 256], [])
buf1432_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
primals_955_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1434_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
buf676_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1435_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
class op1435_loop_body:
    var_ranges = {p0: 4, p1: 1920, p2: 256}
    index0 = p1
    index1 = 327680*p0 + p2 + 256*(I)
    index2 = I
    index3 = 163840*p0 + p2 + 256*(I)
    index4 = 491520*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1280, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1280, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1920, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1435', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1432', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_955', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1434', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf676', get_index)
        return load


op1436: SchedulerNode(ComputedBuffer)
op1436.writes = [MemoryDep('buf1436', c0, {c0: 128})]
op1436.unmet_dependencies = [MemoryDep('buf1435', c0, {c0: 1966080})]
op1436.met_dependencies = []
op1436.outputs = [
    buf1436: ComputedBuffer
    buf1436.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1436.users = [
        NodeUser(node=SchedulerNode(name='op1440'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1436.group.device = cuda:0
op1436.group.iteration = (128, 15360)
op1436.sizes = ([128], [15360])
buf1435_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
buf1436_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1436_loop_body:
    var_ranges = {p0: 128, p1: 15360}
    index0 = 15360*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1435', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1436', get_index_1, getitem)
        return store_reduction


op1437: SchedulerNode(ComputedBuffer)
op1437.writes = [MemoryDep('buf1437', c0, {c0: 128})]
op1437.unmet_dependencies = [MemoryDep('buf1435', c0, {c0: 1966080})]
op1437.met_dependencies = []
op1437.outputs = [
    buf1437: ComputedBuffer
    buf1437.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1437.users = [NodeUser(node=SchedulerNode(name='op1439'), can_inplace=True, is_weak=False)]
]
op1437.group.device = cuda:0
op1437.group.iteration = (128, 15360)
op1437.sizes = ([128], [15360])
buf1435_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
buf1437_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1437_loop_body:
    var_ranges = {p0: 128, p1: 15360}
    index0 = 15360*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1435', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1437', get_index_1, getitem_1)
        return store_reduction


op1439: SchedulerNode(ComputedBuffer)
op1439.writes = [MemoryDep('buf1439', c0, {c0: 128})]
op1439.unmet_dependencies = [MemoryDep('buf1437', c0, {c0: 128})]
op1439.met_dependencies = []
op1439.outputs = [
    buf1439: ComputedBuffer
    buf1439.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1439.users = [
        NodeUser(node=SchedulerNode(name='op1440'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1439.group.device = cuda:0
op1439.group.iteration = (128, 1)
op1439.sizes = ([128], [])
buf1437_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1439_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1439_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1437', get_index)
        constant = ops.constant(15360.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1439', get_index_1, rsqrt, None)
        return store


op1440: SchedulerNode(ComputedBuffer)
op1440.writes = [MemoryDep('buf1440', c0, {c0: 1966080})]
op1440.unmet_dependencies = 
    [   MemoryDep('buf1435', c0, {c0: 1966080}),
        MemoryDep('buf1436', 32*c0 + ((c1//60)), {c0: 4, c1: 1920}),
        MemoryDep('buf1439', 32*c0 + ((c1//60)), {c0: 4, c1: 1920})]
op1440.met_dependencies = 
    [   MemoryDep('primals_958', c1, {c0: 4, c1: 1920}),
        MemoryDep('primals_959', c1, {c0: 4, c1: 1920})]
op1440.outputs = [
    buf1440: ComputedBuffer
    buf1440.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
    buf1440.users = [NodeUser(node=SchedulerNode(name='op1441'), can_inplace=True, is_weak=False)]
]
op1440.group.device = cuda:0
op1440.group.iteration = (1966080, 1)
op1440.sizes = ([4, 1920, 256], [])
buf1435_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
buf1436_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1439_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_958_layout = FixedLayout('cuda:0', torch.float32, size=[1920], stride=[1])
primals_959_layout = FixedLayout('cuda:0', torch.float32, size=[1920], stride=[1])
buf1440_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
class op1440_loop_body:
    var_ranges = {p0: 4, p1: 1920, p2: 256}
    index0 = 491520*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//60))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1436', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1439', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_958', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_959', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1440', get_index_5, add, None)
        return store


op1441: SchedulerNode(ComputedBuffer)
op1441.writes = [MemoryDep('buf1441', c0, {c0: 1966080})]
op1441.unmet_dependencies = [MemoryDep('buf1440', c0, {c0: 1966080})]
op1441.met_dependencies = []
op1441.outputs = [
    buf1441: ComputedBuffer
    buf1441.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
    buf1441.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1442'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1443'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1441.group.device = cuda:0
op1441.group.iteration = (1966080, 1)
op1441.sizes = ([1966080], [])
buf1440_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
buf1441_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1920, 16, 16], stride=[491520, 256, 16, 1])
class op1441_loop_body:
    var_ranges = {p0: 1966080}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1440', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1440', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1441', get_index_2, mul, None)
        return store


op1442: ExternKernelSchedulerNode(ExternKernelAlloc)
op1442.writes = [StarDep(name='buf1442', mode=None)]
op1442.unmet_dependencies = [StarDep(name='buf1441', mode=None)]
op1442.met_dependencies = [StarDep(name='primals_960', mode=None)]
op1442.outputs = [
    buf1442: ExternKernelAlloc
    buf1442.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1442.users = [NodeUser(node=SchedulerNode(name='op1446'), can_inplace=True, is_weak=False)]
]
op1442.node.kernel = extern_kernels.convolution


op1443: ExternKernelSchedulerNode(ExternKernelAlloc)
op1443.writes = [StarDep(name='buf1443', mode=None)]
op1443.unmet_dependencies = [StarDep(name='buf1441', mode=None)]
op1443.met_dependencies = [StarDep(name='primals_962', mode=None)]
op1443.outputs = [
    buf1443: ExternKernelAlloc
    buf1443.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1443.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1444'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1443.node.kernel = extern_kernels.convolution


op1444: ExternKernelSchedulerNode(ExternKernelAlloc)
op1444.writes = [StarDep(name='buf1444', mode=None)]
op1444.unmet_dependencies = [StarDep(name='buf1443', mode=None)]
op1444.met_dependencies = [StarDep(name='primals_963', mode=None)]
op1444.outputs = [
    buf1444: ExternKernelAlloc
    buf1444.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1444.users = [NodeUser(node=SchedulerNode(name='op1446'), can_inplace=True, is_weak=False)]
]
op1444.node.kernel = extern_kernels.convolution


op1445: ExternKernelSchedulerNode(ExternKernelOut)
op1445.writes = [StarDep(name='buf1445', mode=None)]
op1445.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1445.met_dependencies = [StarDep(name='primals_964', mode=None)]
op1445.outputs = [
    buf1445: ExternKernelOut
    buf1445.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
    buf1445.users = [NodeUser(node=SchedulerNode(name='op1446'), can_inplace=False, is_weak=False)]
]
op1445.node.kernel = extern_kernels.mm


op1446: SchedulerNode(ComputedBuffer)
op1446.writes = [MemoryDep('buf1446', c0, {c0: 655360})]
op1446.unmet_dependencies = 
    [   MemoryDep('buf1442', c0, {c0: 655360}),
        MemoryDep('buf1444', c0, {c0: 655360}),
        MemoryDep('buf1445', c0, {c0: 2560})]
op1446.met_dependencies = 
    [   MemoryDep('primals_961', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_965', c1, {c0: 4, c1: 640})]
op1446.outputs = [
    buf1446: ComputedBuffer
    buf1446.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1446.users = [
        NodeUser(node=SchedulerNode(name='op1447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1451'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1446.group.device = cuda:0
op1446.group.iteration = (655360, 1)
op1446.sizes = ([4, 640, 256], [])
buf1442_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_961_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1444_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1445_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
primals_965_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1446_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1446_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    index2 = 640*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1442', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_961', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1444', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1445', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_965', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1446', get_index_5, add_3, None)
        return store


op1447: SchedulerNode(ComputedBuffer)
op1447.writes = [MemoryDep('buf1447', c0, {c0: 128})]
op1447.unmet_dependencies = [MemoryDep('buf1446', c0, {c0: 655360})]
op1447.met_dependencies = []
op1447.outputs = [
    buf1447: ComputedBuffer
    buf1447.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1447.users = [
        NodeUser(node=SchedulerNode(name='op1451'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1447.group.device = cuda:0
op1447.group.iteration = (128, 5120)
op1447.sizes = ([128], [5120])
buf1446_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1447_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1447_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1446', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1447', get_index_1, getitem)
        return store_reduction


op1448: SchedulerNode(ComputedBuffer)
op1448.writes = [MemoryDep('buf1448', c0, {c0: 128})]
op1448.unmet_dependencies = [MemoryDep('buf1446', c0, {c0: 655360})]
op1448.met_dependencies = []
op1448.outputs = [
    buf1448: ComputedBuffer
    buf1448.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1448.users = [NodeUser(node=SchedulerNode(name='op1450'), can_inplace=True, is_weak=False)]
]
op1448.group.device = cuda:0
op1448.group.iteration = (128, 5120)
op1448.sizes = ([128], [5120])
buf1446_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1448_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1448_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1446', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1448', get_index_1, getitem_1)
        return store_reduction


op1450: SchedulerNode(ComputedBuffer)
op1450.writes = [MemoryDep('buf1450', c0, {c0: 128})]
op1450.unmet_dependencies = [MemoryDep('buf1448', c0, {c0: 128})]
op1450.met_dependencies = []
op1450.outputs = [
    buf1450: ComputedBuffer
    buf1450.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1450.users = [
        NodeUser(node=SchedulerNode(name='op1451'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1450.group.device = cuda:0
op1450.group.iteration = (128, 1)
op1450.sizes = ([128], [])
buf1448_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1450_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1450_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1448', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1450', get_index_1, rsqrt, None)
        return store


op1451: SchedulerNode(ComputedBuffer)
op1451.writes = [MemoryDep('buf1451', c0, {c0: 655360})]
op1451.unmet_dependencies = 
    [   MemoryDep('buf1446', c0, {c0: 655360}),
        MemoryDep('buf1447', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1450', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1451.met_dependencies = 
    [   MemoryDep('primals_966', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_967', c1, {c0: 4, c1: 640})]
op1451.outputs = [
    buf1451: ComputedBuffer
    buf1451.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1451.users = [NodeUser(node=SchedulerNode(name='op1452'), can_inplace=True, is_weak=False)]
]
op1451.group.device = cuda:0
op1451.group.iteration = (655360, 1)
op1451.sizes = ([4, 640, 256], [])
buf1446_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1447_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1450_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_966_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_967_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1451_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1451_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1446', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1447', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1450', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_966', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_967', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1451', get_index_5, add, None)
        return store


op1452: SchedulerNode(ComputedBuffer)
op1452.writes = [MemoryDep('buf1452', c0, {c0: 655360})]
op1452.unmet_dependencies = [MemoryDep('buf1451', c0, {c0: 655360})]
op1452.met_dependencies = []
op1452.outputs = [
    buf1452: ComputedBuffer
    buf1452.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1452.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1453'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1454'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1452.group.device = cuda:0
op1452.group.iteration = (655360, 1)
op1452.sizes = ([655360], [])
buf1451_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1452_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1452_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1451', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1451', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1452', get_index_2, mul, None)
        return store


op1453: ExternKernelSchedulerNode(ExternKernelAlloc)
op1453.writes = [StarDep(name='buf1453', mode=None)]
op1453.unmet_dependencies = [StarDep(name='buf1452', mode=None)]
op1453.met_dependencies = [StarDep(name='primals_968', mode=None)]
op1453.outputs = [
    buf1453: ExternKernelAlloc
    buf1453.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1453.users = [NodeUser(node=SchedulerNode(name='op1459'), can_inplace=True, is_weak=False)]
]
op1453.node.kernel = extern_kernels.convolution


op1454: ExternKernelSchedulerNode(ExternKernelAlloc)
op1454.writes = [StarDep(name='buf1454', mode=None)]
op1454.unmet_dependencies = [StarDep(name='buf1452', mode=None)]
op1454.met_dependencies = [StarDep(name='primals_970', mode=None)]
op1454.outputs = [
    buf1454: ExternKernelAlloc
    buf1454.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1454.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1455'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1454.node.kernel = extern_kernels.convolution


op1455: ExternKernelSchedulerNode(ExternKernelAlloc)
op1455.writes = [StarDep(name='buf1455', mode=None)]
op1455.unmet_dependencies = [StarDep(name='buf1454', mode=None)]
op1455.met_dependencies = [StarDep(name='primals_971', mode=None)]
op1455.outputs = [
    buf1455: ExternKernelAlloc
    buf1455.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1455.users = [NodeUser(node=SchedulerNode(name='op1459'), can_inplace=True, is_weak=False)]
]
op1455.node.kernel = extern_kernels.convolution


op1456: ExternKernelSchedulerNode(ExternKernelAlloc)
op1456.writes = [StarDep(name='buf1456', mode=None)]
op1456.unmet_dependencies = [StarDep(name='buf1435', mode=None)]
op1456.met_dependencies = [StarDep(name='primals_972', mode=None)]
op1456.outputs = [
    buf1456: ExternKernelAlloc
    buf1456.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1456.users = [NodeUser(node=SchedulerNode(name='op1459'), can_inplace=True, is_weak=False)]
]
op1456.node.kernel = extern_kernels.convolution


op1457: ExternKernelSchedulerNode(ExternKernelAlloc)
op1457.writes = [StarDep(name='buf1457', mode=None)]
op1457.unmet_dependencies = [StarDep(name='buf1435', mode=None)]
op1457.met_dependencies = [StarDep(name='primals_974', mode=None)]
op1457.outputs = [
    buf1457: ExternKernelAlloc
    buf1457.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1457.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1458'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1457.node.kernel = extern_kernels.convolution


op1458: ExternKernelSchedulerNode(ExternKernelAlloc)
op1458.writes = [StarDep(name='buf1458', mode=None)]
op1458.unmet_dependencies = [StarDep(name='buf1457', mode=None)]
op1458.met_dependencies = [StarDep(name='primals_975', mode=None)]
op1458.outputs = [
    buf1458: ExternKernelAlloc
    buf1458.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1458.users = [NodeUser(node=SchedulerNode(name='op1459'), can_inplace=True, is_weak=False)]
]
op1458.node.kernel = extern_kernels.convolution


op1459: SchedulerNode(ComputedBuffer)
op1459.writes = [MemoryDep('buf1459', c0, {c0: 655360})]
op1459.unmet_dependencies = 
    [   MemoryDep('buf1453', c0, {c0: 655360}),
        MemoryDep('buf1455', c0, {c0: 655360}),
        MemoryDep('buf1456', c0, {c0: 655360}),
        MemoryDep('buf1458', c0, {c0: 655360})]
op1459.met_dependencies = 
    [   MemoryDep('primals_969', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_973', c1, {c0: 4, c1: 640})]
op1459.outputs = [
    buf1459: ComputedBuffer
    buf1459.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1459.users = [
        NodeUser(node=SchedulerNode(name='op1460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1464'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1537'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1459.group.device = cuda:0
op1459.group.iteration = (655360, 1)
op1459.sizes = ([4, 640, 256], [])
buf1456_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_973_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1458_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1453_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_969_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1455_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1459_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1459_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_973', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1458', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1453', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_969', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1455', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1459', get_index_6, mul_2, None)
        return store


op1460: SchedulerNode(ComputedBuffer)
op1460.writes = [MemoryDep('buf1460', c0, {c0: 128})]
op1460.unmet_dependencies = [MemoryDep('buf1459', c0, {c0: 655360})]
op1460.met_dependencies = []
op1460.outputs = [
    buf1460: ComputedBuffer
    buf1460.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1460.users = [
        NodeUser(node=SchedulerNode(name='op1464'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1460.group.device = cuda:0
op1460.group.iteration = (128, 5120)
op1460.sizes = ([128], [5120])
buf1459_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1460_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1460_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1459', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1460', get_index_1, getitem)
        return store_reduction


op1461: SchedulerNode(ComputedBuffer)
op1461.writes = [MemoryDep('buf1461', c0, {c0: 128})]
op1461.unmet_dependencies = [MemoryDep('buf1459', c0, {c0: 655360})]
op1461.met_dependencies = []
op1461.outputs = [
    buf1461: ComputedBuffer
    buf1461.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1461.users = [
        NodeUser(node=SchedulerNode(name='op1463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1464'), can_inplace=False, is_weak=False),
    ]
]
op1461.group.device = cuda:0
op1461.group.iteration = (128, 5120)
op1461.sizes = ([128], [5120])
buf1459_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1461_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1461_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1459', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1461', get_index_1, getitem_1)
        return store_reduction


op1463: SchedulerNode(ComputedBuffer)
op1463.writes = [MemoryDep('buf1463', c0, {c0: 128})]
op1463.unmet_dependencies = [MemoryDep('buf1461', c0, {c0: 128})]
op1463.met_dependencies = []
op1463.outputs = [
    buf1463: ComputedBuffer
    buf1463.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1463.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1463.group.device = cuda:0
op1463.group.iteration = (128, 1)
op1463.sizes = ([128], [])
buf1461_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1463_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1463_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1461', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1463', get_index_1, rsqrt, None)
        return store


op1464: SchedulerNode(ComputedBuffer)
op1464.writes = [MemoryDep('buf1464', c0, {c0: 655360})]
op1464.unmet_dependencies = 
    [   MemoryDep('buf1459', c0, {c0: 655360}),
        MemoryDep('buf1460', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1461', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1464.met_dependencies = 
    [   MemoryDep('primals_976', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_977', c1, {c0: 4, c1: 640})]
op1464.outputs = [
    buf1464: ComputedBuffer
    buf1464.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1464.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1466'), can_inplace=False, is_weak=False),
    ]
]
op1464.group.device = cuda:0
op1464.group.iteration = (655360, 1)
op1464.sizes = ([4, 640, 256], [])
buf1459_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1460_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1461_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_976_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_977_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1464_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1464_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1459', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1460', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1461', get_index_2)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_976', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_977', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1464', get_index_5, add_1, None)
        return store


op1465: ExternKernelSchedulerNode(ExternKernelOut)
op1465.writes = [StarDep(name='buf1465', mode=None)]
op1465.unmet_dependencies = [StarDep(name='buf1464', mode=None)]
op1465.met_dependencies = [StarDep(name='primals_978', mode=None)]
op1465.outputs = [
    buf1465: ExternKernelOut
    buf1465.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1465.users = [
        NodeUser(node=SchedulerNode(name='op1469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1472'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1494'), can_inplace=True, is_weak=False),
    ]
]
op1465.node.kernel = extern_kernels.bmm


op1466: SchedulerNode(ComputedBuffer)
op1466.writes = [MemoryDep('buf1466', c0, {c0: 655360})]
op1466.unmet_dependencies = [MemoryDep('buf1464', 163840*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 640})]
op1466.met_dependencies = []
op1466.outputs = [
    buf1466: ComputedBuffer
    buf1466.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1466.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1467'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1466.group.device = cuda:0
op1466.group.iteration = (655360, 1)
op1466.sizes = ([4, 256, 640], [])
buf1464_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1466_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1466_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 640}
    index0 = 163840*p0 + p1 + 256*p2
    index1 = 163840*p0 + 640*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1464', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1466', get_index_1, load, None)
        return store


op1467: ExternKernelSchedulerNode(ExternKernelOut)
op1467.writes = [StarDep(name='buf1467', mode=None)]
op1467.unmet_dependencies = [StarDep(name='buf1466', mode=None)]
op1467.met_dependencies = [StarDep(name='primals_980', mode=None)]
op1467.outputs = [
    buf1467: ExternKernelOut
    buf1467.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1467.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1468'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1467.node.kernel = extern_kernels.mm


op1468: ExternKernelSchedulerNode(ExternKernelOut)
op1468.writes = [StarDep(name='buf1468', mode=None)]
op1468.unmet_dependencies = [StarDep(name='buf1467', mode=None)]
op1468.met_dependencies = [StarDep(name='primals_981', mode=None)]
op1468.outputs = [
    buf1468: ExternKernelOut
    buf1468.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1468.users = [
        NodeUser(node=SchedulerNode(name='op1469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1472'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1494'), can_inplace=True, is_weak=False),
    ]
]
op1468.node.kernel = extern_kernels.mm


op1469: SchedulerNode(ComputedBuffer)
op1469.writes = [MemoryDep('buf1469', c0, {c0: 1024})]
op1469.unmet_dependencies = [MemoryDep('buf1465', c0, {c0: 655360}), MemoryDep('buf1468', c0, {c0: 655360})]
op1469.met_dependencies = [MemoryDep('primals_979', c1, {c0: 1024, c1: 640})]
op1469.outputs = [
    buf1469: ComputedBuffer
    buf1469.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1469.users = [NodeUser(node=SchedulerNode(name='op1472'), can_inplace=False, is_weak=False)]
]
op1469.group.device = cuda:0
op1469.group.iteration = (1024, 640)
op1469.sizes = ([1024], [640])
buf1465_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_979_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1468_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1469_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1469_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1465', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_979', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1468', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1469', get_index_3, getitem)
        return store_reduction


op1470: SchedulerNode(ComputedBuffer)
op1470.writes = [MemoryDep('buf1470', c0, {c0: 1024})]
op1470.unmet_dependencies = [MemoryDep('buf1465', c0, {c0: 655360}), MemoryDep('buf1468', c0, {c0: 655360})]
op1470.met_dependencies = [MemoryDep('primals_979', c1, {c0: 1024, c1: 640})]
op1470.outputs = [
    buf1470: ComputedBuffer
    buf1470.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1470.users = [
        NodeUser(node=SchedulerNode(name='op1472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2080'), can_inplace=True, is_weak=False),
    ]
]
op1470.group.device = cuda:0
op1470.group.iteration = (1024, 640)
op1470.sizes = ([1024], [640])
buf1465_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_979_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1468_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1470_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1470_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1465', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_979', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1468', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1470', get_index_3, getitem_1)
        return store_reduction


op1472: SchedulerNode(ComputedBuffer)
op1472.writes = [MemoryDep('buf1472', c0, {c0: 655360})]
op1472.unmet_dependencies = 
    [   MemoryDep('buf1465', c0, {c0: 655360}),
        MemoryDep('buf1468', c0, {c0: 655360}),
        MemoryDep('buf1469', c0, {c0: 1024}),
        MemoryDep('buf1470', c0, {c0: 1024})]
op1472.met_dependencies = [MemoryDep('primals_979', c1, {c0: 1024, c1: 640})]
op1472.outputs = [
    buf1472: ComputedBuffer
    buf1472.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1472.users = [
        NodeUser(node=SchedulerNode(name='op1473'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1472.group.device = cuda:0
op1472.group.iteration = (655360, 1)
op1472.sizes = ([1024, 640], [])
buf1465_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_979_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1468_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1469_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1470_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1472_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1472_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1465', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_979', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1468', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1469', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1470', get_index_4)
        constant_1 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1472', get_index_5, mul_1, None)
        return store


op1473: SchedulerNode(ComputedBuffer)
op1473.writes = [MemoryDep('buf1473', c0, {c0: 655360})]
op1473.unmet_dependencies = [MemoryDep('buf1472', c0, {c0: 655360})]
op1473.met_dependencies = 
    [   MemoryDep('primals_982', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_983', c1, {c0: 1024, c1: 640})]
op1473.outputs = [
    buf1473: ComputedBuffer
    buf1473.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1473.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1474'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1475'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1477'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1478'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1481'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1473.group.device = cuda:0
op1473.group.iteration = (655360, 1)
op1473.sizes = ([1024, 640], [])
buf1472_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_982_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_983_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1473_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1473_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_982', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_983', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1473', get_index_3, add, None)
        return store


op1474: ExternKernelSchedulerNode(ExternKernelOut)
op1474.writes = [StarDep(name='buf1474', mode=None)]
op1474.unmet_dependencies = [StarDep(name='buf1473', mode=None)]
op1474.met_dependencies = [StarDep(name='primals_984', mode=None)]
op1474.outputs = [
    buf1474: ExternKernelOut
    buf1474.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1474.users = [NodeUser(node=SchedulerNode(name='op1483'), can_inplace=True, is_weak=False)]
]
op1474.node.kernel = extern_kernels.mm


op1475: ExternKernelSchedulerNode(ExternKernelOut)
op1475.writes = [StarDep(name='buf1475', mode=None)]
op1475.unmet_dependencies = [StarDep(name='buf1473', mode=None)]
op1475.met_dependencies = [StarDep(name='primals_985', mode=None)]
op1475.outputs = [
    buf1475: ExternKernelOut
    buf1475.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1475.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1476'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1475.node.kernel = extern_kernels.mm


op1476: ExternKernelSchedulerNode(ExternKernelOut)
op1476.writes = [StarDep(name='buf1476', mode=None)]
op1476.unmet_dependencies = [StarDep(name='buf1475', mode=None)]
op1476.met_dependencies = [StarDep(name='primals_986', mode=None)]
op1476.outputs = [
    buf1476: ExternKernelOut
    buf1476.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1476.users = [NodeUser(node=SchedulerNode(name='op1483'), can_inplace=True, is_weak=False)]
]
op1476.node.kernel = extern_kernels.mm


op1477: ExternKernelSchedulerNode(ExternKernelOut)
op1477.writes = [StarDep(name='buf1477', mode=None)]
op1477.unmet_dependencies = [StarDep(name='buf1473', mode=None)]
op1477.met_dependencies = [StarDep(name='primals_987', mode=None)]
op1477.outputs = [
    buf1477: ExternKernelOut
    buf1477.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1477.users = [NodeUser(node=SchedulerNode(name='op1484'), can_inplace=True, is_weak=False)]
]
op1477.node.kernel = extern_kernels.mm


op1478: ExternKernelSchedulerNode(ExternKernelOut)
op1478.writes = [StarDep(name='buf1478', mode=None)]
op1478.unmet_dependencies = [StarDep(name='buf1473', mode=None)]
op1478.met_dependencies = [StarDep(name='primals_988', mode=None)]
op1478.outputs = [
    buf1478: ExternKernelOut
    buf1478.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1479'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1478.node.kernel = extern_kernels.mm


op1479: ExternKernelSchedulerNode(ExternKernelOut)
op1479.writes = [StarDep(name='buf1479', mode=None)]
op1479.unmet_dependencies = [StarDep(name='buf1478', mode=None)]
op1479.met_dependencies = [StarDep(name='primals_989', mode=None)]
op1479.outputs = [
    buf1479: ExternKernelOut
    buf1479.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1479.users = [NodeUser(node=SchedulerNode(name='op1484'), can_inplace=True, is_weak=False)]
]
op1479.node.kernel = extern_kernels.mm


op1480: ExternKernelSchedulerNode(ExternKernelOut)
op1480.writes = [StarDep(name='buf1480', mode=None)]
op1480.unmet_dependencies = [StarDep(name='buf1473', mode=None)]
op1480.met_dependencies = [StarDep(name='primals_990', mode=None)]
op1480.outputs = [
    buf1480: ExternKernelOut
    buf1480.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1480.users = [NodeUser(node=SchedulerNode(name='op1485'), can_inplace=True, is_weak=False)]
]
op1480.node.kernel = extern_kernels.mm


op1481: ExternKernelSchedulerNode(ExternKernelOut)
op1481.writes = [StarDep(name='buf1481', mode=None)]
op1481.unmet_dependencies = [StarDep(name='buf1473', mode=None)]
op1481.met_dependencies = [StarDep(name='primals_991', mode=None)]
op1481.outputs = [
    buf1481: ExternKernelOut
    buf1481.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1481.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1482'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1481.node.kernel = extern_kernels.mm


op1482: ExternKernelSchedulerNode(ExternKernelOut)
op1482.writes = [StarDep(name='buf1482', mode=None)]
op1482.unmet_dependencies = [StarDep(name='buf1481', mode=None)]
op1482.met_dependencies = [StarDep(name='primals_992', mode=None)]
op1482.outputs = [
    buf1482: ExternKernelOut
    buf1482.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1482.users = [NodeUser(node=SchedulerNode(name='op1485'), can_inplace=True, is_weak=False)]
]
op1482.node.kernel = extern_kernels.mm


op1483: SchedulerNode(ComputedBuffer)
op1483.writes = [MemoryDep('buf1483', c0, {c0: 655360})]
op1483.unmet_dependencies = [MemoryDep('buf1474', c0, {c0: 655360}), MemoryDep('buf1476', c0, {c0: 655360})]
op1483.met_dependencies = []
op1483.outputs = [
    buf1483: ComputedBuffer
    buf1483.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1483.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1486'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1483.group.device = cuda:0
op1483.group.iteration = (655360, 1)
op1483.sizes = ([655360], [])
buf1474_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1476_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1483_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1483_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1474', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1476', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1483', get_index_2, add, None)
        return store


op1484: SchedulerNode(ComputedBuffer)
op1484.writes = [MemoryDep('buf1484', c0, {c0: 655360})]
op1484.unmet_dependencies = [MemoryDep('buf1477', c0, {c0: 655360}), MemoryDep('buf1479', c0, {c0: 655360})]
op1484.met_dependencies = []
op1484.outputs = [
    buf1484: ComputedBuffer
    buf1484.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1484.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1486'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1484.group.device = cuda:0
op1484.group.iteration = (655360, 1)
op1484.sizes = ([655360], [])
buf1477_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1479_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1484_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1484_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1477', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1479', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1484', get_index_2, add, None)
        return store


op1485: SchedulerNode(ComputedBuffer)
op1485.writes = [MemoryDep('buf1485', c0, {c0: 655360})]
op1485.unmet_dependencies = [MemoryDep('buf1480', c0, {c0: 655360}), MemoryDep('buf1482', c0, {c0: 655360})]
op1485.met_dependencies = []
op1485.outputs = [
    buf1485: ComputedBuffer
    buf1485.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1485.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1486'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1485.group.device = cuda:0
op1485.group.iteration = (655360, 1)
op1485.sizes = ([655360], [])
buf1480_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1482_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1485_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1485_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1480', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1482', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1485', get_index_2, add, None)
        return store


op1486: ExternKernelSchedulerNode(FallbackKernel)
op1486.writes = [StarDep(name='buf1486', mode=None)]
op1486.unmet_dependencies = 
    [   StarDep(name='buf1483', mode=None),
        StarDep(name='buf1484', mode=None),
        StarDep(name='buf1485', mode=None)]
op1486.met_dependencies = []
op1486.outputs = [
    buf1486: FallbackKernel
    buf1486.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1486.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1487'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1488'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1489'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1490'), can_inplace=False, is_weak=False),
    ]
]
op1486.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1487: ExternKernelSchedulerNode(MultiOutput)
op1487.writes = [StarDep(name='buf1487', mode=None)]
op1487.unmet_dependencies = [StarDep(name='buf1486', mode=None)]
op1487.met_dependencies = []
op1487.outputs = [
    buf1487: MultiOutput
    buf1487.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf1487.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1491'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1492'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1487.node.kernel = None


op1488: ExternKernelSchedulerNode(MultiOutput)
op1488.writes = [StarDep(name='buf1488', mode=None)]
op1488.unmet_dependencies = [StarDep(name='buf1486', mode=None)]
op1488.met_dependencies = []
op1488.outputs = [
    buf1488: MultiOutput
    buf1488.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf1488.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1488.node.kernel = None


op1489: ExternKernelSchedulerNode(MultiOutput)
op1489.writes = [StarDep(name='buf1489', mode=None)]
op1489.unmet_dependencies = [StarDep(name='buf1486', mode=None)]
op1489.met_dependencies = []
op1489.outputs = [
    buf1489: MultiOutput
    buf1489.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1489.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1489.node.kernel = None


op1490: ExternKernelSchedulerNode(MultiOutput)
op1490.writes = [StarDep(name='buf1490', mode=None)]
op1490.unmet_dependencies = [StarDep(name='buf1486', mode=None)]
op1490.met_dependencies = []
op1490.outputs = [
    buf1490: MultiOutput
    buf1490.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1490.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1490.node.kernel = None


op1491: ExternKernelSchedulerNode(ExternKernelOut)
op1491.writes = [StarDep(name='buf1491', mode=None)]
op1491.unmet_dependencies = [StarDep(name='buf1487', mode=None)]
op1491.met_dependencies = [StarDep(name='primals_993', mode=None)]
op1491.outputs = [
    buf1491: ExternKernelOut
    buf1491.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1491.users = [NodeUser(node=SchedulerNode(name='op1494'), can_inplace=True, is_weak=False)]
]
op1491.node.kernel = extern_kernels.mm


op1492: ExternKernelSchedulerNode(ExternKernelOut)
op1492.writes = [StarDep(name='buf1492', mode=None)]
op1492.unmet_dependencies = [StarDep(name='buf1487', mode=None)]
op1492.met_dependencies = [StarDep(name='primals_995', mode=None)]
op1492.outputs = [
    buf1492: ExternKernelOut
    buf1492.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1492.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1493'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1492.node.kernel = extern_kernels.mm


op1493: ExternKernelSchedulerNode(ExternKernelOut)
op1493.writes = [StarDep(name='buf1493', mode=None)]
op1493.unmet_dependencies = [StarDep(name='buf1492', mode=None)]
op1493.met_dependencies = [StarDep(name='primals_996', mode=None)]
op1493.outputs = [
    buf1493: ExternKernelOut
    buf1493.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1493.users = [NodeUser(node=SchedulerNode(name='op1494'), can_inplace=True, is_weak=False)]
]
op1493.node.kernel = extern_kernels.mm


op1494: SchedulerNode(ComputedBuffer)
op1494.writes = [MemoryDep('buf1494', c0, {c0: 655360})]
op1494.unmet_dependencies = 
    [   MemoryDep('buf1465', c0, {c0: 655360}),
        MemoryDep('buf1468', c0, {c0: 655360}),
        MemoryDep('buf1491', c0, {c0: 655360}),
        MemoryDep('buf1493', c0, {c0: 655360})]
op1494.met_dependencies = 
    [   MemoryDep('primals_979', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_994', c1, {c0: 1024, c1: 640})]
op1494.outputs = [
    buf1494: ComputedBuffer
    buf1494.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1494.users = [
        NodeUser(node=SchedulerNode(name='op1495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1498'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1523'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1533'), can_inplace=True, is_weak=False),
    ]
]
op1494.group.device = cuda:0
op1494.group.iteration = (655360, 1)
op1494.sizes = ([1024, 640], [])
buf1491_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_994_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1493_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1465_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_979_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1468_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1494_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_994', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1493', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1465', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_979', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1468', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1494', get_index_6, add_4, None)
        return store


op1495: SchedulerNode(ComputedBuffer)
op1495.writes = [MemoryDep('buf1495', c0, {c0: 1024})]
op1495.unmet_dependencies = [MemoryDep('buf1494', c0, {c0: 655360})]
op1495.met_dependencies = []
op1495.outputs = [
    buf1495: ComputedBuffer
    buf1495.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1495.users = [NodeUser(node=SchedulerNode(name='op1498'), can_inplace=False, is_weak=False)]
]
op1495.group.device = cuda:0
op1495.group.iteration = (1024, 640)
op1495.sizes = ([1024], [640])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1495_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1495_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1494', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1495', get_index_1, getitem)
        return store_reduction


op1496: SchedulerNode(ComputedBuffer)
op1496.writes = [MemoryDep('buf1496', c0, {c0: 1024})]
op1496.unmet_dependencies = [MemoryDep('buf1494', c0, {c0: 655360})]
op1496.met_dependencies = []
op1496.outputs = [
    buf1496: ComputedBuffer
    buf1496.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1496.users = [
        NodeUser(node=SchedulerNode(name='op1498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2079'), can_inplace=True, is_weak=False),
    ]
]
op1496.group.device = cuda:0
op1496.group.iteration = (1024, 640)
op1496.sizes = ([1024], [640])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1496_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1496_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1494', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1496', get_index_1, getitem_1)
        return store_reduction


op1498: SchedulerNode(ComputedBuffer)
op1498.writes = [MemoryDep('buf1498', c0, {c0: 655360})]
op1498.unmet_dependencies = 
    [   MemoryDep('buf1494', c0, {c0: 655360}),
        MemoryDep('buf1495', c0, {c0: 1024}),
        MemoryDep('buf1496', c0, {c0: 1024})]
op1498.met_dependencies = []
op1498.outputs = [
    buf1498: ComputedBuffer
    buf1498.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1498.users = [
        NodeUser(node=SchedulerNode(name='op1499'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1498.group.device = cuda:0
op1498.group.iteration = (655360, 1)
op1498.sizes = ([1024, 640], [])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1495_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1496_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1498_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1498_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1494', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1495', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1496', get_index_2)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1498', get_index_3, mul, None)
        return store


op1499: SchedulerNode(ComputedBuffer)
op1499.writes = [MemoryDep('buf1499', c0, {c0: 655360})]
op1499.unmet_dependencies = [MemoryDep('buf1498', c0, {c0: 655360})]
op1499.met_dependencies = 
    [   MemoryDep('primals_997', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_998', c1, {c0: 1024, c1: 640})]
op1499.outputs = [
    buf1499: ComputedBuffer
    buf1499.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1499.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1500'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1501'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1499.group.device = cuda:0
op1499.group.iteration = (655360, 1)
op1499.sizes = ([1024, 640], [])
buf1498_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_997_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_998_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1499_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1499_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1498', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_997', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_998', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1499', get_index_3, add, None)
        return store


op1500: ExternKernelSchedulerNode(ExternKernelOut)
op1500.writes = [StarDep(name='buf1500', mode=None)]
op1500.unmet_dependencies = [StarDep(name='buf1499', mode=None)]
op1500.met_dependencies = [StarDep(name='primals_999', mode=None)]
op1500.outputs = [
    buf1500: ExternKernelOut
    buf1500.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1500.users = [NodeUser(node=SchedulerNode(name='op1509'), can_inplace=True, is_weak=False)]
]
op1500.node.kernel = extern_kernels.mm


op1501: ExternKernelSchedulerNode(ExternKernelOut)
op1501.writes = [StarDep(name='buf1501', mode=None)]
op1501.unmet_dependencies = [StarDep(name='buf1499', mode=None)]
op1501.met_dependencies = [StarDep(name='primals_1000', mode=None)]
op1501.outputs = [
    buf1501: ExternKernelOut
    buf1501.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1501.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1502'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1501.node.kernel = extern_kernels.mm


op1502: ExternKernelSchedulerNode(ExternKernelOut)
op1502.writes = [StarDep(name='buf1502', mode=None)]
op1502.unmet_dependencies = [StarDep(name='buf1501', mode=None)]
op1502.met_dependencies = [StarDep(name='primals_1001', mode=None)]
op1502.outputs = [
    buf1502: ExternKernelOut
    buf1502.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1502.users = [NodeUser(node=SchedulerNode(name='op1509'), can_inplace=True, is_weak=False)]
]
op1502.node.kernel = extern_kernels.mm


op1503: ExternKernelSchedulerNode(ExternKernelOut)
op1503.writes = [StarDep(name='buf1503', mode=None)]
op1503.unmet_dependencies = []
op1503.met_dependencies = 
    [   StarDep(name='primals_1002', mode=None),
        StarDep(name='primals_177', mode=None)]
op1503.outputs = [
    buf1503: ExternKernelOut
    buf1503.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1503.users = [NodeUser(node=SchedulerNode(name='op1510'), can_inplace=True, is_weak=False)]
]
op1503.node.kernel = extern_kernels.mm


op1504: ExternKernelSchedulerNode(ExternKernelOut)
op1504.writes = [StarDep(name='buf1504', mode=None)]
op1504.unmet_dependencies = []
op1504.met_dependencies = 
    [   StarDep(name='primals_1003', mode=None),
        StarDep(name='primals_177', mode=None)]
op1504.outputs = [
    buf1504: ExternKernelOut
    buf1504.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1504.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1505'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1504.node.kernel = extern_kernels.mm


op1505: ExternKernelSchedulerNode(ExternKernelOut)
op1505.writes = [StarDep(name='buf1505', mode=None)]
op1505.unmet_dependencies = [StarDep(name='buf1504', mode=None)]
op1505.met_dependencies = [StarDep(name='primals_1004', mode=None)]
op1505.outputs = [
    buf1505: ExternKernelOut
    buf1505.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1505.users = [NodeUser(node=SchedulerNode(name='op1510'), can_inplace=True, is_weak=False)]
]
op1505.node.kernel = extern_kernels.mm


op1506: ExternKernelSchedulerNode(ExternKernelOut)
op1506.writes = [StarDep(name='buf1506', mode=None)]
op1506.unmet_dependencies = []
op1506.met_dependencies = 
    [   StarDep(name='primals_1005', mode=None),
        StarDep(name='primals_177', mode=None)]
op1506.outputs = [
    buf1506: ExternKernelOut
    buf1506.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1506.users = [NodeUser(node=SchedulerNode(name='op1511'), can_inplace=True, is_weak=False)]
]
op1506.node.kernel = extern_kernels.mm


op1507: ExternKernelSchedulerNode(ExternKernelOut)
op1507.writes = [StarDep(name='buf1507', mode=None)]
op1507.unmet_dependencies = []
op1507.met_dependencies = 
    [   StarDep(name='primals_1006', mode=None),
        StarDep(name='primals_177', mode=None)]
op1507.outputs = [
    buf1507: ExternKernelOut
    buf1507.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1507.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1508'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1507.node.kernel = extern_kernels.mm


op1508: ExternKernelSchedulerNode(ExternKernelOut)
op1508.writes = [StarDep(name='buf1508', mode=None)]
op1508.unmet_dependencies = [StarDep(name='buf1507', mode=None)]
op1508.met_dependencies = [StarDep(name='primals_1007', mode=None)]
op1508.outputs = [
    buf1508: ExternKernelOut
    buf1508.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1508.users = [NodeUser(node=SchedulerNode(name='op1511'), can_inplace=True, is_weak=False)]
]
op1508.node.kernel = extern_kernels.mm


op1509: SchedulerNode(ComputedBuffer)
op1509.writes = [MemoryDep('buf1509', c0, {c0: 655360})]
op1509.unmet_dependencies = [MemoryDep('buf1500', c0, {c0: 655360}), MemoryDep('buf1502', c0, {c0: 655360})]
op1509.met_dependencies = []
op1509.outputs = [
    buf1509: ComputedBuffer
    buf1509.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1509.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1512'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1509.group.device = cuda:0
op1509.group.iteration = (655360, 1)
op1509.sizes = ([655360], [])
buf1500_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1502_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1509_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1509_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1500', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1502', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1509', get_index_2, add, None)
        return store


op1510: SchedulerNode(ComputedBuffer)
op1510.writes = [MemoryDep('buf1510', c0, {c0: 197120})]
op1510.unmet_dependencies = [MemoryDep('buf1503', c0, {c0: 197120}), MemoryDep('buf1505', c0, {c0: 197120})]
op1510.met_dependencies = []
op1510.outputs = [
    buf1510: ComputedBuffer
    buf1510.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf1510.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1512'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1510.group.device = cuda:0
op1510.group.iteration = (197120, 1)
op1510.sizes = ([197120], [])
buf1503_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1505_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1510_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op1510_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1503', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1505', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1510', get_index_2, add, None)
        return store


op1511: SchedulerNode(ComputedBuffer)
op1511.writes = [MemoryDep('buf1511', c0, {c0: 197120})]
op1511.unmet_dependencies = [MemoryDep('buf1506', c0, {c0: 197120}), MemoryDep('buf1508', c0, {c0: 197120})]
op1511.met_dependencies = []
op1511.outputs = [
    buf1511: ComputedBuffer
    buf1511.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf1511.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1512'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1511.group.device = cuda:0
op1511.group.iteration = (197120, 1)
op1511.sizes = ([197120], [])
buf1506_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1508_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1511_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op1511_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1506', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1508', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1511', get_index_2, add, None)
        return store


op1512: ExternKernelSchedulerNode(FallbackKernel)
op1512.writes = [StarDep(name='buf1512', mode=None)]
op1512.unmet_dependencies = 
    [   StarDep(name='buf1509', mode=None),
        StarDep(name='buf1510', mode=None),
        StarDep(name='buf1511', mode=None)]
op1512.met_dependencies = []
op1512.outputs = [
    buf1512: FallbackKernel
    buf1512.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1512.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1513'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1514'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1515'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1516'), can_inplace=False, is_weak=False),
    ]
]
op1512.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1513: ExternKernelSchedulerNode(MultiOutput)
op1513.writes = [StarDep(name='buf1513', mode=None)]
op1513.unmet_dependencies = [StarDep(name='buf1512', mode=None)]
op1513.met_dependencies = []
op1513.outputs = [
    buf1513: MultiOutput
    buf1513.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf1513.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1517'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1518'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1513.node.kernel = None


op1514: ExternKernelSchedulerNode(MultiOutput)
op1514.writes = [StarDep(name='buf1514', mode=None)]
op1514.unmet_dependencies = [StarDep(name='buf1512', mode=None)]
op1514.met_dependencies = []
op1514.outputs = [
    buf1514: MultiOutput
    buf1514.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf1514.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1514.node.kernel = None


op1515: ExternKernelSchedulerNode(MultiOutput)
op1515.writes = [StarDep(name='buf1515', mode=None)]
op1515.unmet_dependencies = [StarDep(name='buf1512', mode=None)]
op1515.met_dependencies = []
op1515.outputs = [
    buf1515: MultiOutput
    buf1515.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1515.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1515.node.kernel = None


op1516: ExternKernelSchedulerNode(MultiOutput)
op1516.writes = [StarDep(name='buf1516', mode=None)]
op1516.unmet_dependencies = [StarDep(name='buf1512', mode=None)]
op1516.met_dependencies = []
op1516.outputs = [
    buf1516: MultiOutput
    buf1516.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1516.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1516.node.kernel = None


op1517: ExternKernelSchedulerNode(ExternKernelOut)
op1517.writes = [StarDep(name='buf1517', mode=None)]
op1517.unmet_dependencies = [StarDep(name='buf1513', mode=None)]
op1517.met_dependencies = [StarDep(name='primals_1008', mode=None)]
op1517.outputs = [
    buf1517: ExternKernelOut
    buf1517.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1517.users = [
        NodeUser(node=SchedulerNode(name='op1520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1523'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1533'), can_inplace=True, is_weak=False),
    ]
]
op1517.node.kernel = extern_kernels.mm


op1518: ExternKernelSchedulerNode(ExternKernelOut)
op1518.writes = [StarDep(name='buf1518', mode=None)]
op1518.unmet_dependencies = [StarDep(name='buf1513', mode=None)]
op1518.met_dependencies = [StarDep(name='primals_1010', mode=None)]
op1518.outputs = [
    buf1518: ExternKernelOut
    buf1518.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1518.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1519'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1518.node.kernel = extern_kernels.mm


op1519: ExternKernelSchedulerNode(ExternKernelOut)
op1519.writes = [StarDep(name='buf1519', mode=None)]
op1519.unmet_dependencies = [StarDep(name='buf1518', mode=None)]
op1519.met_dependencies = [StarDep(name='primals_1011', mode=None)]
op1519.outputs = [
    buf1519: ExternKernelOut
    buf1519.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1519.users = [
        NodeUser(node=SchedulerNode(name='op1520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1523'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1533'), can_inplace=True, is_weak=False),
    ]
]
op1519.node.kernel = extern_kernels.mm


op1520: SchedulerNode(ComputedBuffer)
op1520.writes = [MemoryDep('buf1520', c0, {c0: 1024})]
op1520.unmet_dependencies = 
    [   MemoryDep('buf1494', c0, {c0: 655360}),
        MemoryDep('buf1517', c0, {c0: 655360}),
        MemoryDep('buf1519', c0, {c0: 655360})]
op1520.met_dependencies = [MemoryDep('primals_1009', c1, {c0: 1024, c1: 640})]
op1520.outputs = [
    buf1520: ComputedBuffer
    buf1520.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1520.users = [NodeUser(node=SchedulerNode(name='op1523'), can_inplace=False, is_weak=False)]
]
op1520.group.device = cuda:0
op1520.group.iteration = (1024, 640)
op1520.sizes = ([1024], [640])
buf1517_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1009_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1519_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1520_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1520_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1517', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1009', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1519', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1494', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1520', get_index_4, getitem)
        return store_reduction


op1521: SchedulerNode(ComputedBuffer)
op1521.writes = [MemoryDep('buf1521', c0, {c0: 1024})]
op1521.unmet_dependencies = 
    [   MemoryDep('buf1494', c0, {c0: 655360}),
        MemoryDep('buf1517', c0, {c0: 655360}),
        MemoryDep('buf1519', c0, {c0: 655360})]
op1521.met_dependencies = [MemoryDep('primals_1009', c1, {c0: 1024, c1: 640})]
op1521.outputs = [
    buf1521: ComputedBuffer
    buf1521.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1521.users = [
        NodeUser(node=SchedulerNode(name='op1523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2078'), can_inplace=True, is_weak=False),
    ]
]
op1521.group.device = cuda:0
op1521.group.iteration = (1024, 640)
op1521.sizes = ([1024], [640])
buf1517_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1009_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1519_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1521_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1521_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1517', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1009', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1519', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1494', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1521', get_index_4, getitem_1)
        return store_reduction


op1523: SchedulerNode(ComputedBuffer)
op1523.writes = [MemoryDep('buf1523', c0, {c0: 655360})]
op1523.unmet_dependencies = 
    [   MemoryDep('buf1494', c0, {c0: 655360}),
        MemoryDep('buf1517', c0, {c0: 655360}),
        MemoryDep('buf1519', c0, {c0: 655360}),
        MemoryDep('buf1520', c0, {c0: 1024}),
        MemoryDep('buf1521', c0, {c0: 1024})]
op1523.met_dependencies = [MemoryDep('primals_1009', c1, {c0: 1024, c1: 640})]
op1523.outputs = [
    buf1523: ComputedBuffer
    buf1523.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1523.users = [
        NodeUser(node=SchedulerNode(name='op1524'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1523.group.device = cuda:0
op1523.group.iteration = (655360, 1)
op1523.sizes = ([1024, 640], [])
buf1517_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1009_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1519_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1520_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1521_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1523_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1523_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1517', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1009', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1519', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1494', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1520', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1521', get_index_5)
        constant_2 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1523', get_index_6, mul_2, None)
        return store


op1524: SchedulerNode(ComputedBuffer)
op1524.writes = [MemoryDep('buf1524', c0, {c0: 655360})]
op1524.unmet_dependencies = [MemoryDep('buf1523', c0, {c0: 655360})]
op1524.met_dependencies = 
    [   MemoryDep('primals_1012', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1013', c1, {c0: 1024, c1: 640})]
op1524.outputs = [
    buf1524: ComputedBuffer
    buf1524.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1524.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1525'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1526'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1524.group.device = cuda:0
op1524.group.iteration = (655360, 1)
op1524.sizes = ([1024, 640], [])
buf1523_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1012_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1013_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1524_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1524_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1012', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1013', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1524', get_index_3, add, None)
        return store


op1525: ExternKernelSchedulerNode(ExternKernelOut)
op1525.writes = [StarDep(name='buf1525', mode=None)]
op1525.unmet_dependencies = [StarDep(name='buf1524', mode=None)]
op1525.met_dependencies = [StarDep(name='primals_1014', mode=None)]
op1525.outputs = [
    buf1525: ExternKernelOut
    buf1525.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf1525.users = [NodeUser(node=SchedulerNode(name='op1528'), can_inplace=True, is_weak=False)]
]
op1525.node.kernel = extern_kernels.mm


op1526: ExternKernelSchedulerNode(ExternKernelOut)
op1526.writes = [StarDep(name='buf1526', mode=None)]
op1526.unmet_dependencies = [StarDep(name='buf1524', mode=None)]
op1526.met_dependencies = [StarDep(name='primals_1016', mode=None)]
op1526.outputs = [
    buf1526: ExternKernelOut
    buf1526.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1526.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1527'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1526.node.kernel = extern_kernels.mm


op1527: ExternKernelSchedulerNode(ExternKernelOut)
op1527.writes = [StarDep(name='buf1527', mode=None)]
op1527.unmet_dependencies = [StarDep(name='buf1526', mode=None)]
op1527.met_dependencies = [StarDep(name='primals_1017', mode=None)]
op1527.outputs = [
    buf1527: ExternKernelOut
    buf1527.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf1527.users = [NodeUser(node=SchedulerNode(name='op1528'), can_inplace=True, is_weak=False)]
]
op1527.node.kernel = extern_kernels.mm


op1528: SchedulerNode(ComputedBuffer)
op1528.writes = [MemoryDep('buf1528', c0, {c0: 5242880})]
op1528.unmet_dependencies = 
    [   MemoryDep('buf1525', c0, {c0: 5242880}),
        MemoryDep('buf1527', c0, {c0: 5242880})]
op1528.met_dependencies = [MemoryDep('primals_1015', c1, {c0: 1024, c1: 5120})]
op1528.outputs = [
    buf1528: ComputedBuffer
    buf1528.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
    buf1528.users = [
        NodeUser(node=SchedulerNode(name='op1529'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1528.group.device = cuda:0
op1528.group.iteration = (5242880, 1)
op1528.sizes = ([1024, 5120], [])
buf1525_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
primals_1015_layout = FixedLayout('cuda:0', torch.float32, size=[5120], stride=[1])
buf1527_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
buf1528_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
class op1528_loop_body:
    var_ranges = {p0: 1024, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1525', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1015', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1527', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1528', get_index_3, add_1, None)
        return store


op1529: SchedulerNode(ComputedBuffer)
op1529.writes = [MemoryDep('buf1529', c0, {c0: 2621440})]
op1529.unmet_dependencies = 
    [   MemoryDep('buf1528', 5120*c0 + c1 + 2560, {c0: 1024, c1: 2560}),
        MemoryDep('buf1528', 5120*c0 + c1, {c0: 1024, c1: 2560})]
op1529.met_dependencies = []
op1529.outputs = [
    buf1529: ComputedBuffer
    buf1529.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
    buf1529.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1530'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1531'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1529.group.device = cuda:0
op1529.group.iteration = (2621440, 1)
op1529.sizes = ([1024, 2560], [])
buf1528_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf1528_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf1529_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
class op1529_loop_body:
    var_ranges = {p0: 1024, p1: 2560}
    index0 = 5120*p0 + p1
    index1 = 5120*p0 + p1 + 2560
    index2 = 2560*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1528', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1528', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1528', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1529', get_index_3, mul_3, None)
        return store


op1530: ExternKernelSchedulerNode(ExternKernelOut)
op1530.writes = [StarDep(name='buf1530', mode=None)]
op1530.unmet_dependencies = [StarDep(name='buf1529', mode=None)]
op1530.met_dependencies = [StarDep(name='primals_1018', mode=None)]
op1530.outputs = [
    buf1530: ExternKernelOut
    buf1530.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1530.users = [NodeUser(node=SchedulerNode(name='op1533'), can_inplace=True, is_weak=False)]
]
op1530.node.kernel = extern_kernels.mm


op1531: ExternKernelSchedulerNode(ExternKernelOut)
op1531.writes = [StarDep(name='buf1531', mode=None)]
op1531.unmet_dependencies = [StarDep(name='buf1529', mode=None)]
op1531.met_dependencies = [StarDep(name='primals_1020', mode=None)]
op1531.outputs = [
    buf1531: ExternKernelOut
    buf1531.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1531.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1532'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1531.node.kernel = extern_kernels.mm


op1532: ExternKernelSchedulerNode(ExternKernelOut)
op1532.writes = [StarDep(name='buf1532', mode=None)]
op1532.unmet_dependencies = [StarDep(name='buf1531', mode=None)]
op1532.met_dependencies = [StarDep(name='primals_1021', mode=None)]
op1532.outputs = [
    buf1532: ExternKernelOut
    buf1532.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1532.users = [NodeUser(node=SchedulerNode(name='op1533'), can_inplace=True, is_weak=False)]
]
op1532.node.kernel = extern_kernels.mm


op1533: SchedulerNode(ComputedBuffer)
op1533.writes = [MemoryDep('buf1533', c0, {c0: 655360})]
op1533.unmet_dependencies = 
    [   MemoryDep('buf1494', c0, {c0: 655360}),
        MemoryDep('buf1517', c0, {c0: 655360}),
        MemoryDep('buf1519', c0, {c0: 655360}),
        MemoryDep('buf1530', c0, {c0: 655360}),
        MemoryDep('buf1532', c0, {c0: 655360})]
op1533.met_dependencies = 
    [   MemoryDep('primals_1009', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1019', c1, {c0: 1024, c1: 640})]
op1533.outputs = [
    buf1533: ComputedBuffer
    buf1533.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1533.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1534'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1535'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1533.group.device = cuda:0
op1533.group.iteration = (655360, 1)
op1533.sizes = ([1024, 640], [])
buf1530_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1019_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1532_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1517_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1009_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1519_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1494_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1533_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1533_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1530', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1019', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1532', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1517', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1009', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1519', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1494', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1533', get_index_7, add_5, None)
        return store


op1534: ExternKernelSchedulerNode(ExternKernelOut)
op1534.writes = [StarDep(name='buf1534', mode=None)]
op1534.unmet_dependencies = [StarDep(name='buf1533', mode=None)]
op1534.met_dependencies = [StarDep(name='primals_1022', mode=None)]
op1534.outputs = [
    buf1534: ExternKernelOut
    buf1534.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1534.users = [NodeUser(node=SchedulerNode(name='op1537'), can_inplace=False, is_weak=False)]
]
op1534.node.kernel = extern_kernels.mm


op1535: ExternKernelSchedulerNode(ExternKernelOut)
op1535.writes = [StarDep(name='buf1535', mode=None)]
op1535.unmet_dependencies = [StarDep(name='buf1533', mode=None)]
op1535.met_dependencies = [StarDep(name='primals_1024', mode=None)]
op1535.outputs = [
    buf1535: ExternKernelOut
    buf1535.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1535.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1536'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1535.node.kernel = extern_kernels.mm


op1536: ExternKernelSchedulerNode(ExternKernelOut)
op1536.writes = [StarDep(name='buf1536', mode=None)]
op1536.unmet_dependencies = [StarDep(name='buf1535', mode=None)]
op1536.met_dependencies = [StarDep(name='primals_1025', mode=None)]
op1536.outputs = [
    buf1536: ExternKernelOut
    buf1536.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1536.users = [NodeUser(node=SchedulerNode(name='op1537'), can_inplace=False, is_weak=False)]
]
op1536.node.kernel = extern_kernels.mm


op1537: SchedulerNode(ComputedBuffer)
op1537.writes = [MemoryDep('buf1537', c0, {c0: 1310720})]
op1537.unmet_dependencies = 
    [   MemoryDep('buf1459', 163840*c0 + c2 + 256*(I), {c0: 4, c1: 1280, c2: 256}),
        MemoryDep('buf1534', 163840*c0 + 640*c2 + (I), {c0: 4, c1: 1280, c2: 256}),
        MemoryDep('buf1536', 163840*c0 + 640*c2 + (I), {c0: 4, c1: 1280, c2: 256}),
        MemoryDep('buf577', 163840*c0 + c2 + 256*(I), {c0: 4, c1: 1280, c2: 256})]
op1537.met_dependencies = [MemoryDep('primals_1023', I, {c0: 4, c1: 1280})]
op1537.outputs = [
    buf1537: ComputedBuffer
    buf1537.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
    buf1537.users = [
        NodeUser(node=SchedulerNode(name='op1538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1542'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1558'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1559'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1537.group.device = cuda:0
op1537.group.iteration = (1310720, 1)
op1537.sizes = ([4, 1280, 256], [])
buf1534_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1023_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1536_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1459_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf577_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1537_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
class op1537_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 256}
    index0 = p1
    index1 = 163840*p0 + 640*p2 + (I)
    index2 = I
    index3 = 163840*p0 + p2 + 256*(I)
    index4 = 163840*p0 + p2 + 256*(I)
    index5 = 327680*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(640, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(640, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1280, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1537', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1534', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_1023', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1536', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1459', get_index_3)
        add_2 = ops.add(add_1, load_3)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf577', get_index)
        return load


op1538: SchedulerNode(ComputedBuffer)
op1538.writes = [MemoryDep('buf1538', c0, {c0: 128})]
op1538.unmet_dependencies = [MemoryDep('buf1537', c0, {c0: 1310720})]
op1538.met_dependencies = []
op1538.outputs = [
    buf1538: ComputedBuffer
    buf1538.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1538.users = [
        NodeUser(node=SchedulerNode(name='op1542'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1538.group.device = cuda:0
op1538.group.iteration = (128, 10240)
op1538.sizes = ([128], [10240])
buf1537_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
buf1538_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1538_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1537', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1538', get_index_1, getitem)
        return store_reduction


op1539: SchedulerNode(ComputedBuffer)
op1539.writes = [MemoryDep('buf1539', c0, {c0: 128})]
op1539.unmet_dependencies = [MemoryDep('buf1537', c0, {c0: 1310720})]
op1539.met_dependencies = []
op1539.outputs = [
    buf1539: ComputedBuffer
    buf1539.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1539.users = [NodeUser(node=SchedulerNode(name='op1541'), can_inplace=True, is_weak=False)]
]
op1539.group.device = cuda:0
op1539.group.iteration = (128, 10240)
op1539.sizes = ([128], [10240])
buf1537_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
buf1539_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1539_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1537', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1539', get_index_1, getitem_1)
        return store_reduction


op1541: SchedulerNode(ComputedBuffer)
op1541.writes = [MemoryDep('buf1541', c0, {c0: 128})]
op1541.unmet_dependencies = [MemoryDep('buf1539', c0, {c0: 128})]
op1541.met_dependencies = []
op1541.outputs = [
    buf1541: ComputedBuffer
    buf1541.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1541.users = [
        NodeUser(node=SchedulerNode(name='op1542'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1541.group.device = cuda:0
op1541.group.iteration = (128, 1)
op1541.sizes = ([128], [])
buf1539_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1541_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1541_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1539', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1541', get_index_1, rsqrt, None)
        return store


op1542: SchedulerNode(ComputedBuffer)
op1542.writes = [MemoryDep('buf1542', c0, {c0: 1310720})]
op1542.unmet_dependencies = 
    [   MemoryDep('buf1537', c0, {c0: 1310720}),
        MemoryDep('buf1538', 32*c0 + ((c1//40)), {c0: 4, c1: 1280}),
        MemoryDep('buf1541', 32*c0 + ((c1//40)), {c0: 4, c1: 1280})]
op1542.met_dependencies = 
    [   MemoryDep('primals_1026', c1, {c0: 4, c1: 1280}),
        MemoryDep('primals_1027', c1, {c0: 4, c1: 1280})]
op1542.outputs = [
    buf1542: ComputedBuffer
    buf1542.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
    buf1542.users = [NodeUser(node=SchedulerNode(name='op1543'), can_inplace=True, is_weak=False)]
]
op1542.group.device = cuda:0
op1542.group.iteration = (1310720, 1)
op1542.sizes = ([4, 1280, 256], [])
buf1537_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
buf1538_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1541_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1026_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
primals_1027_layout = FixedLayout('cuda:0', torch.float32, size=[1280], stride=[1])
buf1542_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
class op1542_loop_body:
    var_ranges = {p0: 4, p1: 1280, p2: 256}
    index0 = 327680*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//40))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1537', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1538', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1541', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1026', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1027', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1542', get_index_5, add, None)
        return store


op1543: SchedulerNode(ComputedBuffer)
op1543.writes = [MemoryDep('buf1543', c0, {c0: 1310720})]
op1543.unmet_dependencies = [MemoryDep('buf1542', c0, {c0: 1310720})]
op1543.met_dependencies = []
op1543.outputs = [
    buf1543: ComputedBuffer
    buf1543.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
    buf1543.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1544'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1545'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1543.group.device = cuda:0
op1543.group.iteration = (1310720, 1)
op1543.sizes = ([1310720], [])
buf1542_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
buf1543_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1280, 16, 16], stride=[327680, 256, 16, 1])
class op1543_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1542', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1542', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1543', get_index_2, mul, None)
        return store


op1544: ExternKernelSchedulerNode(ExternKernelAlloc)
op1544.writes = [StarDep(name='buf1544', mode=None)]
op1544.unmet_dependencies = [StarDep(name='buf1543', mode=None)]
op1544.met_dependencies = [StarDep(name='primals_1028', mode=None)]
op1544.outputs = [
    buf1544: ExternKernelAlloc
    buf1544.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1544.users = [NodeUser(node=SchedulerNode(name='op1548'), can_inplace=True, is_weak=False)]
]
op1544.node.kernel = extern_kernels.convolution


op1545: ExternKernelSchedulerNode(ExternKernelAlloc)
op1545.writes = [StarDep(name='buf1545', mode=None)]
op1545.unmet_dependencies = [StarDep(name='buf1543', mode=None)]
op1545.met_dependencies = [StarDep(name='primals_1030', mode=None)]
op1545.outputs = [
    buf1545: ExternKernelAlloc
    buf1545.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1545.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1546'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1545.node.kernel = extern_kernels.convolution


op1546: ExternKernelSchedulerNode(ExternKernelAlloc)
op1546.writes = [StarDep(name='buf1546', mode=None)]
op1546.unmet_dependencies = [StarDep(name='buf1545', mode=None)]
op1546.met_dependencies = [StarDep(name='primals_1031', mode=None)]
op1546.outputs = [
    buf1546: ExternKernelAlloc
    buf1546.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1546.users = [NodeUser(node=SchedulerNode(name='op1548'), can_inplace=True, is_weak=False)]
]
op1546.node.kernel = extern_kernels.convolution


op1547: ExternKernelSchedulerNode(ExternKernelOut)
op1547.writes = [StarDep(name='buf1547', mode=None)]
op1547.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1547.met_dependencies = [StarDep(name='primals_1032', mode=None)]
op1547.outputs = [
    buf1547: ExternKernelOut
    buf1547.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
    buf1547.users = [NodeUser(node=SchedulerNode(name='op1548'), can_inplace=False, is_weak=False)]
]
op1547.node.kernel = extern_kernels.mm


op1548: SchedulerNode(ComputedBuffer)
op1548.writes = [MemoryDep('buf1548', c0, {c0: 655360})]
op1548.unmet_dependencies = 
    [   MemoryDep('buf1544', c0, {c0: 655360}),
        MemoryDep('buf1546', c0, {c0: 655360}),
        MemoryDep('buf1547', c0, {c0: 2560})]
op1548.met_dependencies = 
    [   MemoryDep('primals_1029', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1033', c1, {c0: 4, c1: 640})]
op1548.outputs = [
    buf1548: ComputedBuffer
    buf1548.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1548.users = [
        NodeUser(node=SchedulerNode(name='op1549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1553'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1548.group.device = cuda:0
op1548.group.iteration = (655360, 1)
op1548.sizes = ([4, 640, 256], [])
buf1544_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_1029_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1546_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1547_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
primals_1033_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1548_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1548_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    index2 = 640*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1029', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1546', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1547', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1033', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1548', get_index_5, add_3, None)
        return store


op1549: SchedulerNode(ComputedBuffer)
op1549.writes = [MemoryDep('buf1549', c0, {c0: 128})]
op1549.unmet_dependencies = [MemoryDep('buf1548', c0, {c0: 655360})]
op1549.met_dependencies = []
op1549.outputs = [
    buf1549: ComputedBuffer
    buf1549.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1549.users = [
        NodeUser(node=SchedulerNode(name='op1553'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1549.group.device = cuda:0
op1549.group.iteration = (128, 5120)
op1549.sizes = ([128], [5120])
buf1548_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1549_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1549_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1548', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1549', get_index_1, getitem)
        return store_reduction


op1550: SchedulerNode(ComputedBuffer)
op1550.writes = [MemoryDep('buf1550', c0, {c0: 128})]
op1550.unmet_dependencies = [MemoryDep('buf1548', c0, {c0: 655360})]
op1550.met_dependencies = []
op1550.outputs = [
    buf1550: ComputedBuffer
    buf1550.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1550.users = [NodeUser(node=SchedulerNode(name='op1552'), can_inplace=True, is_weak=False)]
]
op1550.group.device = cuda:0
op1550.group.iteration = (128, 5120)
op1550.sizes = ([128], [5120])
buf1548_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1550_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1550_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1548', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1550', get_index_1, getitem_1)
        return store_reduction


op1552: SchedulerNode(ComputedBuffer)
op1552.writes = [MemoryDep('buf1552', c0, {c0: 128})]
op1552.unmet_dependencies = [MemoryDep('buf1550', c0, {c0: 128})]
op1552.met_dependencies = []
op1552.outputs = [
    buf1552: ComputedBuffer
    buf1552.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1552.users = [
        NodeUser(node=SchedulerNode(name='op1553'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1552.group.device = cuda:0
op1552.group.iteration = (128, 1)
op1552.sizes = ([128], [])
buf1550_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1552_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1552_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1550', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1552', get_index_1, rsqrt, None)
        return store


op1553: SchedulerNode(ComputedBuffer)
op1553.writes = [MemoryDep('buf1553', c0, {c0: 655360})]
op1553.unmet_dependencies = 
    [   MemoryDep('buf1548', c0, {c0: 655360}),
        MemoryDep('buf1549', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1552', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1553.met_dependencies = 
    [   MemoryDep('primals_1034', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1035', c1, {c0: 4, c1: 640})]
op1553.outputs = [
    buf1553: ComputedBuffer
    buf1553.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1553.users = [NodeUser(node=SchedulerNode(name='op1554'), can_inplace=True, is_weak=False)]
]
op1553.group.device = cuda:0
op1553.group.iteration = (655360, 1)
op1553.sizes = ([4, 640, 256], [])
buf1548_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1549_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1552_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1034_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1035_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1553_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1553_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1549', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1552', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1034', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1035', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1553', get_index_5, add, None)
        return store


op1554: SchedulerNode(ComputedBuffer)
op1554.writes = [MemoryDep('buf1554', c0, {c0: 655360})]
op1554.unmet_dependencies = [MemoryDep('buf1553', c0, {c0: 655360})]
op1554.met_dependencies = []
op1554.outputs = [
    buf1554: ComputedBuffer
    buf1554.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1554.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1555'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1556'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1554.group.device = cuda:0
op1554.group.iteration = (655360, 1)
op1554.sizes = ([655360], [])
buf1553_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1554_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1554_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1553', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1553', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1554', get_index_2, mul, None)
        return store


op1555: ExternKernelSchedulerNode(ExternKernelAlloc)
op1555.writes = [StarDep(name='buf1555', mode=None)]
op1555.unmet_dependencies = [StarDep(name='buf1554', mode=None)]
op1555.met_dependencies = [StarDep(name='primals_1036', mode=None)]
op1555.outputs = [
    buf1555: ExternKernelAlloc
    buf1555.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1555.users = [NodeUser(node=SchedulerNode(name='op1561'), can_inplace=True, is_weak=False)]
]
op1555.node.kernel = extern_kernels.convolution


op1556: ExternKernelSchedulerNode(ExternKernelAlloc)
op1556.writes = [StarDep(name='buf1556', mode=None)]
op1556.unmet_dependencies = [StarDep(name='buf1554', mode=None)]
op1556.met_dependencies = [StarDep(name='primals_1038', mode=None)]
op1556.outputs = [
    buf1556: ExternKernelAlloc
    buf1556.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1556.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1557'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1556.node.kernel = extern_kernels.convolution


op1557: ExternKernelSchedulerNode(ExternKernelAlloc)
op1557.writes = [StarDep(name='buf1557', mode=None)]
op1557.unmet_dependencies = [StarDep(name='buf1556', mode=None)]
op1557.met_dependencies = [StarDep(name='primals_1039', mode=None)]
op1557.outputs = [
    buf1557: ExternKernelAlloc
    buf1557.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1557.users = [NodeUser(node=SchedulerNode(name='op1561'), can_inplace=True, is_weak=False)]
]
op1557.node.kernel = extern_kernels.convolution


op1558: ExternKernelSchedulerNode(ExternKernelAlloc)
op1558.writes = [StarDep(name='buf1558', mode=None)]
op1558.unmet_dependencies = [StarDep(name='buf1537', mode=None)]
op1558.met_dependencies = [StarDep(name='primals_1040', mode=None)]
op1558.outputs = [
    buf1558: ExternKernelAlloc
    buf1558.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1558.users = [NodeUser(node=SchedulerNode(name='op1561'), can_inplace=True, is_weak=False)]
]
op1558.node.kernel = extern_kernels.convolution


op1559: ExternKernelSchedulerNode(ExternKernelAlloc)
op1559.writes = [StarDep(name='buf1559', mode=None)]
op1559.unmet_dependencies = [StarDep(name='buf1537', mode=None)]
op1559.met_dependencies = [StarDep(name='primals_1042', mode=None)]
op1559.outputs = [
    buf1559: ExternKernelAlloc
    buf1559.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1559.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1560'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1559.node.kernel = extern_kernels.convolution


op1560: ExternKernelSchedulerNode(ExternKernelAlloc)
op1560.writes = [StarDep(name='buf1560', mode=None)]
op1560.unmet_dependencies = [StarDep(name='buf1559', mode=None)]
op1560.met_dependencies = [StarDep(name='primals_1043', mode=None)]
op1560.outputs = [
    buf1560: ExternKernelAlloc
    buf1560.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1560.users = [NodeUser(node=SchedulerNode(name='op1561'), can_inplace=True, is_weak=False)]
]
op1560.node.kernel = extern_kernels.convolution


op1561: SchedulerNode(ComputedBuffer)
op1561.writes = [MemoryDep('buf1561', c0, {c0: 655360})]
op1561.unmet_dependencies = 
    [   MemoryDep('buf1555', c0, {c0: 655360}),
        MemoryDep('buf1557', c0, {c0: 655360}),
        MemoryDep('buf1558', c0, {c0: 655360}),
        MemoryDep('buf1560', c0, {c0: 655360})]
op1561.met_dependencies = 
    [   MemoryDep('primals_1037', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1041', c1, {c0: 4, c1: 640})]
op1561.outputs = [
    buf1561: ComputedBuffer
    buf1561.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1561.users = [
        NodeUser(node=SchedulerNode(name='op1562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1566'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1639'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1561.group.device = cuda:0
op1561.group.iteration = (655360, 1)
op1561.sizes = ([4, 640, 256], [])
buf1558_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_1041_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1560_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1555_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_1037_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1557_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1561_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1558', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1041', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1560', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1555', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1037', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1557', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1561', get_index_6, mul_2, None)
        return store


op1562: SchedulerNode(ComputedBuffer)
op1562.writes = [MemoryDep('buf1562', c0, {c0: 128})]
op1562.unmet_dependencies = [MemoryDep('buf1561', c0, {c0: 655360})]
op1562.met_dependencies = []
op1562.outputs = [
    buf1562: ComputedBuffer
    buf1562.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1562.users = [
        NodeUser(node=SchedulerNode(name='op1566'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1562.group.device = cuda:0
op1562.group.iteration = (128, 5120)
op1562.sizes = ([128], [5120])
buf1561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1562_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1562_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1561', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1562', get_index_1, getitem)
        return store_reduction


op1563: SchedulerNode(ComputedBuffer)
op1563.writes = [MemoryDep('buf1563', c0, {c0: 128})]
op1563.unmet_dependencies = [MemoryDep('buf1561', c0, {c0: 655360})]
op1563.met_dependencies = []
op1563.outputs = [
    buf1563: ComputedBuffer
    buf1563.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1563.users = [
        NodeUser(node=SchedulerNode(name='op1565'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1566'), can_inplace=False, is_weak=False),
    ]
]
op1563.group.device = cuda:0
op1563.group.iteration = (128, 5120)
op1563.sizes = ([128], [5120])
buf1561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1563_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1563_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1561', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1563', get_index_1, getitem_1)
        return store_reduction


op1565: SchedulerNode(ComputedBuffer)
op1565.writes = [MemoryDep('buf1565', c0, {c0: 128})]
op1565.unmet_dependencies = [MemoryDep('buf1563', c0, {c0: 128})]
op1565.met_dependencies = []
op1565.outputs = [
    buf1565: ComputedBuffer
    buf1565.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1565.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1565.group.device = cuda:0
op1565.group.iteration = (128, 1)
op1565.sizes = ([128], [])
buf1563_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1565_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1565_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1563', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1565', get_index_1, rsqrt, None)
        return store


op1566: SchedulerNode(ComputedBuffer)
op1566.writes = [MemoryDep('buf1566', c0, {c0: 655360})]
op1566.unmet_dependencies = 
    [   MemoryDep('buf1561', c0, {c0: 655360}),
        MemoryDep('buf1562', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1563', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1566.met_dependencies = 
    [   MemoryDep('primals_1044', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1045', c1, {c0: 4, c1: 640})]
op1566.outputs = [
    buf1566: ComputedBuffer
    buf1566.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1566.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1567'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1568'), can_inplace=False, is_weak=False),
    ]
]
op1566.group.device = cuda:0
op1566.group.iteration = (655360, 1)
op1566.sizes = ([4, 640, 256], [])
buf1561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1562_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1563_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_1044_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1045_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1566_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1566_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1561', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1562', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1563', get_index_2)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1044', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1045', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1566', get_index_5, add_1, None)
        return store


op1567: ExternKernelSchedulerNode(ExternKernelOut)
op1567.writes = [StarDep(name='buf1567', mode=None)]
op1567.unmet_dependencies = [StarDep(name='buf1566', mode=None)]
op1567.met_dependencies = [StarDep(name='primals_1046', mode=None)]
op1567.outputs = [
    buf1567: ExternKernelOut
    buf1567.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1567.users = [
        NodeUser(node=SchedulerNode(name='op1571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1574'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1596'), can_inplace=True, is_weak=False),
    ]
]
op1567.node.kernel = extern_kernels.bmm


op1568: SchedulerNode(ComputedBuffer)
op1568.writes = [MemoryDep('buf1568', c0, {c0: 655360})]
op1568.unmet_dependencies = [MemoryDep('buf1566', 163840*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 640})]
op1568.met_dependencies = []
op1568.outputs = [
    buf1568: ComputedBuffer
    buf1568.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1568.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1569'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1568.group.device = cuda:0
op1568.group.iteration = (655360, 1)
op1568.sizes = ([4, 256, 640], [])
buf1566_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1568_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1568_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 640}
    index0 = 163840*p0 + p1 + 256*p2
    index1 = 163840*p0 + 640*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1566', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1568', get_index_1, load, None)
        return store


op1569: ExternKernelSchedulerNode(ExternKernelOut)
op1569.writes = [StarDep(name='buf1569', mode=None)]
op1569.unmet_dependencies = [StarDep(name='buf1568', mode=None)]
op1569.met_dependencies = [StarDep(name='primals_1048', mode=None)]
op1569.outputs = [
    buf1569: ExternKernelOut
    buf1569.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1569.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1570'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1569.node.kernel = extern_kernels.mm


op1570: ExternKernelSchedulerNode(ExternKernelOut)
op1570.writes = [StarDep(name='buf1570', mode=None)]
op1570.unmet_dependencies = [StarDep(name='buf1569', mode=None)]
op1570.met_dependencies = [StarDep(name='primals_1049', mode=None)]
op1570.outputs = [
    buf1570: ExternKernelOut
    buf1570.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1570.users = [
        NodeUser(node=SchedulerNode(name='op1571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1574'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1596'), can_inplace=True, is_weak=False),
    ]
]
op1570.node.kernel = extern_kernels.mm


op1571: SchedulerNode(ComputedBuffer)
op1571.writes = [MemoryDep('buf1571', c0, {c0: 1024})]
op1571.unmet_dependencies = [MemoryDep('buf1567', c0, {c0: 655360}), MemoryDep('buf1570', c0, {c0: 655360})]
op1571.met_dependencies = [MemoryDep('primals_1047', c1, {c0: 1024, c1: 640})]
op1571.outputs = [
    buf1571: ComputedBuffer
    buf1571.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1571.users = [NodeUser(node=SchedulerNode(name='op1574'), can_inplace=False, is_weak=False)]
]
op1571.group.device = cuda:0
op1571.group.iteration = (1024, 640)
op1571.sizes = ([1024], [640])
buf1567_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1047_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1570_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1571_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1571_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1047', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1570', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1571', get_index_3, getitem)
        return store_reduction


op1572: SchedulerNode(ComputedBuffer)
op1572.writes = [MemoryDep('buf1572', c0, {c0: 1024})]
op1572.unmet_dependencies = [MemoryDep('buf1567', c0, {c0: 655360}), MemoryDep('buf1570', c0, {c0: 655360})]
op1572.met_dependencies = [MemoryDep('primals_1047', c1, {c0: 1024, c1: 640})]
op1572.outputs = [
    buf1572: ComputedBuffer
    buf1572.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1572.users = [
        NodeUser(node=SchedulerNode(name='op1574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2077'), can_inplace=True, is_weak=False),
    ]
]
op1572.group.device = cuda:0
op1572.group.iteration = (1024, 640)
op1572.sizes = ([1024], [640])
buf1567_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1047_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1570_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1572_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1572_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1047', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1570', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1572', get_index_3, getitem_1)
        return store_reduction


op1574: SchedulerNode(ComputedBuffer)
op1574.writes = [MemoryDep('buf1574', c0, {c0: 655360})]
op1574.unmet_dependencies = 
    [   MemoryDep('buf1567', c0, {c0: 655360}),
        MemoryDep('buf1570', c0, {c0: 655360}),
        MemoryDep('buf1571', c0, {c0: 1024}),
        MemoryDep('buf1572', c0, {c0: 1024})]
op1574.met_dependencies = [MemoryDep('primals_1047', c1, {c0: 1024, c1: 640})]
op1574.outputs = [
    buf1574: ComputedBuffer
    buf1574.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1574.users = [
        NodeUser(node=SchedulerNode(name='op1575'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1574.group.device = cuda:0
op1574.group.iteration = (655360, 1)
op1574.sizes = ([1024, 640], [])
buf1567_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1047_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1570_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1571_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1572_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1574_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1574_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1047', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1570', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1571', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1572', get_index_4)
        constant_1 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1574', get_index_5, mul_1, None)
        return store


op1575: SchedulerNode(ComputedBuffer)
op1575.writes = [MemoryDep('buf1575', c0, {c0: 655360})]
op1575.unmet_dependencies = [MemoryDep('buf1574', c0, {c0: 655360})]
op1575.met_dependencies = 
    [   MemoryDep('primals_1050', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1051', c1, {c0: 1024, c1: 640})]
op1575.outputs = [
    buf1575: ComputedBuffer
    buf1575.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1575.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1576'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1577'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1579'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1580'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1582'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1583'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1575.group.device = cuda:0
op1575.group.iteration = (655360, 1)
op1575.sizes = ([1024, 640], [])
buf1574_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1050_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1051_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1575_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1575_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1050', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1051', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1575', get_index_3, add, None)
        return store


op1576: ExternKernelSchedulerNode(ExternKernelOut)
op1576.writes = [StarDep(name='buf1576', mode=None)]
op1576.unmet_dependencies = [StarDep(name='buf1575', mode=None)]
op1576.met_dependencies = [StarDep(name='primals_1052', mode=None)]
op1576.outputs = [
    buf1576: ExternKernelOut
    buf1576.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1576.users = [NodeUser(node=SchedulerNode(name='op1585'), can_inplace=True, is_weak=False)]
]
op1576.node.kernel = extern_kernels.mm


op1577: ExternKernelSchedulerNode(ExternKernelOut)
op1577.writes = [StarDep(name='buf1577', mode=None)]
op1577.unmet_dependencies = [StarDep(name='buf1575', mode=None)]
op1577.met_dependencies = [StarDep(name='primals_1053', mode=None)]
op1577.outputs = [
    buf1577: ExternKernelOut
    buf1577.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1577.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1578'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1577.node.kernel = extern_kernels.mm


op1578: ExternKernelSchedulerNode(ExternKernelOut)
op1578.writes = [StarDep(name='buf1578', mode=None)]
op1578.unmet_dependencies = [StarDep(name='buf1577', mode=None)]
op1578.met_dependencies = [StarDep(name='primals_1054', mode=None)]
op1578.outputs = [
    buf1578: ExternKernelOut
    buf1578.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1578.users = [NodeUser(node=SchedulerNode(name='op1585'), can_inplace=True, is_weak=False)]
]
op1578.node.kernel = extern_kernels.mm


op1579: ExternKernelSchedulerNode(ExternKernelOut)
op1579.writes = [StarDep(name='buf1579', mode=None)]
op1579.unmet_dependencies = [StarDep(name='buf1575', mode=None)]
op1579.met_dependencies = [StarDep(name='primals_1055', mode=None)]
op1579.outputs = [
    buf1579: ExternKernelOut
    buf1579.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1579.users = [NodeUser(node=SchedulerNode(name='op1586'), can_inplace=True, is_weak=False)]
]
op1579.node.kernel = extern_kernels.mm


op1580: ExternKernelSchedulerNode(ExternKernelOut)
op1580.writes = [StarDep(name='buf1580', mode=None)]
op1580.unmet_dependencies = [StarDep(name='buf1575', mode=None)]
op1580.met_dependencies = [StarDep(name='primals_1056', mode=None)]
op1580.outputs = [
    buf1580: ExternKernelOut
    buf1580.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1580.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1581'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1580.node.kernel = extern_kernels.mm


op1581: ExternKernelSchedulerNode(ExternKernelOut)
op1581.writes = [StarDep(name='buf1581', mode=None)]
op1581.unmet_dependencies = [StarDep(name='buf1580', mode=None)]
op1581.met_dependencies = [StarDep(name='primals_1057', mode=None)]
op1581.outputs = [
    buf1581: ExternKernelOut
    buf1581.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1581.users = [NodeUser(node=SchedulerNode(name='op1586'), can_inplace=True, is_weak=False)]
]
op1581.node.kernel = extern_kernels.mm


op1582: ExternKernelSchedulerNode(ExternKernelOut)
op1582.writes = [StarDep(name='buf1582', mode=None)]
op1582.unmet_dependencies = [StarDep(name='buf1575', mode=None)]
op1582.met_dependencies = [StarDep(name='primals_1058', mode=None)]
op1582.outputs = [
    buf1582: ExternKernelOut
    buf1582.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1582.users = [NodeUser(node=SchedulerNode(name='op1587'), can_inplace=True, is_weak=False)]
]
op1582.node.kernel = extern_kernels.mm


op1583: ExternKernelSchedulerNode(ExternKernelOut)
op1583.writes = [StarDep(name='buf1583', mode=None)]
op1583.unmet_dependencies = [StarDep(name='buf1575', mode=None)]
op1583.met_dependencies = [StarDep(name='primals_1059', mode=None)]
op1583.outputs = [
    buf1583: ExternKernelOut
    buf1583.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1583.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1584'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1583.node.kernel = extern_kernels.mm


op1584: ExternKernelSchedulerNode(ExternKernelOut)
op1584.writes = [StarDep(name='buf1584', mode=None)]
op1584.unmet_dependencies = [StarDep(name='buf1583', mode=None)]
op1584.met_dependencies = [StarDep(name='primals_1060', mode=None)]
op1584.outputs = [
    buf1584: ExternKernelOut
    buf1584.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1584.users = [NodeUser(node=SchedulerNode(name='op1587'), can_inplace=True, is_weak=False)]
]
op1584.node.kernel = extern_kernels.mm


op1585: SchedulerNode(ComputedBuffer)
op1585.writes = [MemoryDep('buf1585', c0, {c0: 655360})]
op1585.unmet_dependencies = [MemoryDep('buf1576', c0, {c0: 655360}), MemoryDep('buf1578', c0, {c0: 655360})]
op1585.met_dependencies = []
op1585.outputs = [
    buf1585: ComputedBuffer
    buf1585.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1585.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1588'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1585.group.device = cuda:0
op1585.group.iteration = (655360, 1)
op1585.sizes = ([655360], [])
buf1576_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1578_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1585_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1585_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1576', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1578', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1585', get_index_2, add, None)
        return store


op1586: SchedulerNode(ComputedBuffer)
op1586.writes = [MemoryDep('buf1586', c0, {c0: 655360})]
op1586.unmet_dependencies = [MemoryDep('buf1579', c0, {c0: 655360}), MemoryDep('buf1581', c0, {c0: 655360})]
op1586.met_dependencies = []
op1586.outputs = [
    buf1586: ComputedBuffer
    buf1586.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1586.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1588'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1586.group.device = cuda:0
op1586.group.iteration = (655360, 1)
op1586.sizes = ([655360], [])
buf1579_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1581_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1586_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1586_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1579', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1581', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1586', get_index_2, add, None)
        return store


op1587: SchedulerNode(ComputedBuffer)
op1587.writes = [MemoryDep('buf1587', c0, {c0: 655360})]
op1587.unmet_dependencies = [MemoryDep('buf1582', c0, {c0: 655360}), MemoryDep('buf1584', c0, {c0: 655360})]
op1587.met_dependencies = []
op1587.outputs = [
    buf1587: ComputedBuffer
    buf1587.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1587.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1588'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1587.group.device = cuda:0
op1587.group.iteration = (655360, 1)
op1587.sizes = ([655360], [])
buf1582_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1584_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1587_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1587_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1582', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1584', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1587', get_index_2, add, None)
        return store


op1588: ExternKernelSchedulerNode(FallbackKernel)
op1588.writes = [StarDep(name='buf1588', mode=None)]
op1588.unmet_dependencies = 
    [   StarDep(name='buf1585', mode=None),
        StarDep(name='buf1586', mode=None),
        StarDep(name='buf1587', mode=None)]
op1588.met_dependencies = []
op1588.outputs = [
    buf1588: FallbackKernel
    buf1588.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1588.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1589'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1590'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1591'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1592'), can_inplace=False, is_weak=False),
    ]
]
op1588.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1589: ExternKernelSchedulerNode(MultiOutput)
op1589.writes = [StarDep(name='buf1589', mode=None)]
op1589.unmet_dependencies = [StarDep(name='buf1588', mode=None)]
op1589.met_dependencies = []
op1589.outputs = [
    buf1589: MultiOutput
    buf1589.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf1589.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1593'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1594'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1589.node.kernel = None


op1590: ExternKernelSchedulerNode(MultiOutput)
op1590.writes = [StarDep(name='buf1590', mode=None)]
op1590.unmet_dependencies = [StarDep(name='buf1588', mode=None)]
op1590.met_dependencies = []
op1590.outputs = [
    buf1590: MultiOutput
    buf1590.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf1590.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1590.node.kernel = None


op1591: ExternKernelSchedulerNode(MultiOutput)
op1591.writes = [StarDep(name='buf1591', mode=None)]
op1591.unmet_dependencies = [StarDep(name='buf1588', mode=None)]
op1591.met_dependencies = []
op1591.outputs = [
    buf1591: MultiOutput
    buf1591.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1591.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1591.node.kernel = None


op1592: ExternKernelSchedulerNode(MultiOutput)
op1592.writes = [StarDep(name='buf1592', mode=None)]
op1592.unmet_dependencies = [StarDep(name='buf1588', mode=None)]
op1592.met_dependencies = []
op1592.outputs = [
    buf1592: MultiOutput
    buf1592.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1592.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1592.node.kernel = None


op1593: ExternKernelSchedulerNode(ExternKernelOut)
op1593.writes = [StarDep(name='buf1593', mode=None)]
op1593.unmet_dependencies = [StarDep(name='buf1589', mode=None)]
op1593.met_dependencies = [StarDep(name='primals_1061', mode=None)]
op1593.outputs = [
    buf1593: ExternKernelOut
    buf1593.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1593.users = [NodeUser(node=SchedulerNode(name='op1596'), can_inplace=True, is_weak=False)]
]
op1593.node.kernel = extern_kernels.mm


op1594: ExternKernelSchedulerNode(ExternKernelOut)
op1594.writes = [StarDep(name='buf1594', mode=None)]
op1594.unmet_dependencies = [StarDep(name='buf1589', mode=None)]
op1594.met_dependencies = [StarDep(name='primals_1063', mode=None)]
op1594.outputs = [
    buf1594: ExternKernelOut
    buf1594.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1594.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1595'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1594.node.kernel = extern_kernels.mm


op1595: ExternKernelSchedulerNode(ExternKernelOut)
op1595.writes = [StarDep(name='buf1595', mode=None)]
op1595.unmet_dependencies = [StarDep(name='buf1594', mode=None)]
op1595.met_dependencies = [StarDep(name='primals_1064', mode=None)]
op1595.outputs = [
    buf1595: ExternKernelOut
    buf1595.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1595.users = [NodeUser(node=SchedulerNode(name='op1596'), can_inplace=True, is_weak=False)]
]
op1595.node.kernel = extern_kernels.mm


op1596: SchedulerNode(ComputedBuffer)
op1596.writes = [MemoryDep('buf1596', c0, {c0: 655360})]
op1596.unmet_dependencies = 
    [   MemoryDep('buf1567', c0, {c0: 655360}),
        MemoryDep('buf1570', c0, {c0: 655360}),
        MemoryDep('buf1593', c0, {c0: 655360}),
        MemoryDep('buf1595', c0, {c0: 655360})]
op1596.met_dependencies = 
    [   MemoryDep('primals_1047', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1062', c1, {c0: 1024, c1: 640})]
op1596.outputs = [
    buf1596: ComputedBuffer
    buf1596.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1596.users = [
        NodeUser(node=SchedulerNode(name='op1597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1600'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1635'), can_inplace=True, is_weak=False),
    ]
]
op1596.group.device = cuda:0
op1596.group.iteration = (655360, 1)
op1596.sizes = ([1024, 640], [])
buf1593_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1062_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1595_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1567_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1047_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1570_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1596_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1593', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1062', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1595', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1567', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1047', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1570', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1596', get_index_6, add_4, None)
        return store


op1597: SchedulerNode(ComputedBuffer)
op1597.writes = [MemoryDep('buf1597', c0, {c0: 1024})]
op1597.unmet_dependencies = [MemoryDep('buf1596', c0, {c0: 655360})]
op1597.met_dependencies = []
op1597.outputs = [
    buf1597: ComputedBuffer
    buf1597.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1597.users = [NodeUser(node=SchedulerNode(name='op1600'), can_inplace=False, is_weak=False)]
]
op1597.group.device = cuda:0
op1597.group.iteration = (1024, 640)
op1597.sizes = ([1024], [640])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1597_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1597_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1596', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1597', get_index_1, getitem)
        return store_reduction


op1598: SchedulerNode(ComputedBuffer)
op1598.writes = [MemoryDep('buf1598', c0, {c0: 1024})]
op1598.unmet_dependencies = [MemoryDep('buf1596', c0, {c0: 655360})]
op1598.met_dependencies = []
op1598.outputs = [
    buf1598: ComputedBuffer
    buf1598.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1598.users = [
        NodeUser(node=SchedulerNode(name='op1600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2076'), can_inplace=True, is_weak=False),
    ]
]
op1598.group.device = cuda:0
op1598.group.iteration = (1024, 640)
op1598.sizes = ([1024], [640])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1598_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1596', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1598', get_index_1, getitem_1)
        return store_reduction


op1600: SchedulerNode(ComputedBuffer)
op1600.writes = [MemoryDep('buf1600', c0, {c0: 655360})]
op1600.unmet_dependencies = 
    [   MemoryDep('buf1596', c0, {c0: 655360}),
        MemoryDep('buf1597', c0, {c0: 1024}),
        MemoryDep('buf1598', c0, {c0: 1024})]
op1600.met_dependencies = []
op1600.outputs = [
    buf1600: ComputedBuffer
    buf1600.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1600.users = [
        NodeUser(node=SchedulerNode(name='op1601'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1600.group.device = cuda:0
op1600.group.iteration = (655360, 1)
op1600.sizes = ([1024, 640], [])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1597_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1600_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1600_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1596', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1597', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1598', get_index_2)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1600', get_index_3, mul, None)
        return store


op1601: SchedulerNode(ComputedBuffer)
op1601.writes = [MemoryDep('buf1601', c0, {c0: 655360})]
op1601.unmet_dependencies = [MemoryDep('buf1600', c0, {c0: 655360})]
op1601.met_dependencies = 
    [   MemoryDep('primals_1065', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1066', c1, {c0: 1024, c1: 640})]
op1601.outputs = [
    buf1601: ComputedBuffer
    buf1601.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1601.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1602'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1603'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1601.group.device = cuda:0
op1601.group.iteration = (655360, 1)
op1601.sizes = ([1024, 640], [])
buf1600_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1065_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1066_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1601_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1601_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1600', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1065', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1066', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1601', get_index_3, add, None)
        return store


op1602: ExternKernelSchedulerNode(ExternKernelOut)
op1602.writes = [StarDep(name='buf1602', mode=None)]
op1602.unmet_dependencies = [StarDep(name='buf1601', mode=None)]
op1602.met_dependencies = [StarDep(name='primals_1067', mode=None)]
op1602.outputs = [
    buf1602: ExternKernelOut
    buf1602.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1602.users = [NodeUser(node=SchedulerNode(name='op1611'), can_inplace=True, is_weak=False)]
]
op1602.node.kernel = extern_kernels.mm


op1603: ExternKernelSchedulerNode(ExternKernelOut)
op1603.writes = [StarDep(name='buf1603', mode=None)]
op1603.unmet_dependencies = [StarDep(name='buf1601', mode=None)]
op1603.met_dependencies = [StarDep(name='primals_1068', mode=None)]
op1603.outputs = [
    buf1603: ExternKernelOut
    buf1603.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1603.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1604'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1603.node.kernel = extern_kernels.mm


op1604: ExternKernelSchedulerNode(ExternKernelOut)
op1604.writes = [StarDep(name='buf1604', mode=None)]
op1604.unmet_dependencies = [StarDep(name='buf1603', mode=None)]
op1604.met_dependencies = [StarDep(name='primals_1069', mode=None)]
op1604.outputs = [
    buf1604: ExternKernelOut
    buf1604.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1604.users = [NodeUser(node=SchedulerNode(name='op1611'), can_inplace=True, is_weak=False)]
]
op1604.node.kernel = extern_kernels.mm


op1605: ExternKernelSchedulerNode(ExternKernelOut)
op1605.writes = [StarDep(name='buf1605', mode=None)]
op1605.unmet_dependencies = []
op1605.met_dependencies = 
    [   StarDep(name='primals_1070', mode=None),
        StarDep(name='primals_177', mode=None)]
op1605.outputs = [
    buf1605: ExternKernelOut
    buf1605.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1605.users = [NodeUser(node=SchedulerNode(name='op1612'), can_inplace=True, is_weak=False)]
]
op1605.node.kernel = extern_kernels.mm


op1606: ExternKernelSchedulerNode(ExternKernelOut)
op1606.writes = [StarDep(name='buf1606', mode=None)]
op1606.unmet_dependencies = []
op1606.met_dependencies = 
    [   StarDep(name='primals_1071', mode=None),
        StarDep(name='primals_177', mode=None)]
op1606.outputs = [
    buf1606: ExternKernelOut
    buf1606.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1606.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1607'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1606.node.kernel = extern_kernels.mm


op1607: ExternKernelSchedulerNode(ExternKernelOut)
op1607.writes = [StarDep(name='buf1607', mode=None)]
op1607.unmet_dependencies = [StarDep(name='buf1606', mode=None)]
op1607.met_dependencies = [StarDep(name='primals_1072', mode=None)]
op1607.outputs = [
    buf1607: ExternKernelOut
    buf1607.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1607.users = [NodeUser(node=SchedulerNode(name='op1612'), can_inplace=True, is_weak=False)]
]
op1607.node.kernel = extern_kernels.mm


op1608: ExternKernelSchedulerNode(ExternKernelOut)
op1608.writes = [StarDep(name='buf1608', mode=None)]
op1608.unmet_dependencies = []
op1608.met_dependencies = 
    [   StarDep(name='primals_1073', mode=None),
        StarDep(name='primals_177', mode=None)]
op1608.outputs = [
    buf1608: ExternKernelOut
    buf1608.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1608.users = [NodeUser(node=SchedulerNode(name='op1613'), can_inplace=True, is_weak=False)]
]
op1608.node.kernel = extern_kernels.mm


op1609: ExternKernelSchedulerNode(ExternKernelOut)
op1609.writes = [StarDep(name='buf1609', mode=None)]
op1609.unmet_dependencies = []
op1609.met_dependencies = 
    [   StarDep(name='primals_1074', mode=None),
        StarDep(name='primals_177', mode=None)]
op1609.outputs = [
    buf1609: ExternKernelOut
    buf1609.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1609.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1610'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1609.node.kernel = extern_kernels.mm


op1610: ExternKernelSchedulerNode(ExternKernelOut)
op1610.writes = [StarDep(name='buf1610', mode=None)]
op1610.unmet_dependencies = [StarDep(name='buf1609', mode=None)]
op1610.met_dependencies = [StarDep(name='primals_1075', mode=None)]
op1610.outputs = [
    buf1610: ExternKernelOut
    buf1610.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1610.users = [NodeUser(node=SchedulerNode(name='op1613'), can_inplace=True, is_weak=False)]
]
op1610.node.kernel = extern_kernels.mm


op1611: SchedulerNode(ComputedBuffer)
op1611.writes = [MemoryDep('buf1611', c0, {c0: 655360})]
op1611.unmet_dependencies = [MemoryDep('buf1602', c0, {c0: 655360}), MemoryDep('buf1604', c0, {c0: 655360})]
op1611.met_dependencies = []
op1611.outputs = [
    buf1611: ComputedBuffer
    buf1611.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1611.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1614'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1611.group.device = cuda:0
op1611.group.iteration = (655360, 1)
op1611.sizes = ([655360], [])
buf1602_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1604_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1611_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1611_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1602', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1604', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1611', get_index_2, add, None)
        return store


op1612: SchedulerNode(ComputedBuffer)
op1612.writes = [MemoryDep('buf1612', c0, {c0: 197120})]
op1612.unmet_dependencies = [MemoryDep('buf1605', c0, {c0: 197120}), MemoryDep('buf1607', c0, {c0: 197120})]
op1612.met_dependencies = []
op1612.outputs = [
    buf1612: ComputedBuffer
    buf1612.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf1612.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1614'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1612.group.device = cuda:0
op1612.group.iteration = (197120, 1)
op1612.sizes = ([197120], [])
buf1605_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1607_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1612_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op1612_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1605', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1607', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1612', get_index_2, add, None)
        return store


op1613: SchedulerNode(ComputedBuffer)
op1613.writes = [MemoryDep('buf1613', c0, {c0: 197120})]
op1613.unmet_dependencies = [MemoryDep('buf1608', c0, {c0: 197120}), MemoryDep('buf1610', c0, {c0: 197120})]
op1613.met_dependencies = []
op1613.outputs = [
    buf1613: ComputedBuffer
    buf1613.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf1613.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1614'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1613.group.device = cuda:0
op1613.group.iteration = (197120, 1)
op1613.sizes = ([197120], [])
buf1608_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1610_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1613_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op1613_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1608', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1610', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1613', get_index_2, add, None)
        return store


op1614: ExternKernelSchedulerNode(FallbackKernel)
op1614.writes = [StarDep(name='buf1614', mode=None)]
op1614.unmet_dependencies = 
    [   StarDep(name='buf1611', mode=None),
        StarDep(name='buf1612', mode=None),
        StarDep(name='buf1613', mode=None)]
op1614.met_dependencies = []
op1614.outputs = [
    buf1614: FallbackKernel
    buf1614.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1614.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1615'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1616'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1617'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1618'), can_inplace=False, is_weak=False),
    ]
]
op1614.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1615: ExternKernelSchedulerNode(MultiOutput)
op1615.writes = [StarDep(name='buf1615', mode=None)]
op1615.unmet_dependencies = [StarDep(name='buf1614', mode=None)]
op1615.met_dependencies = []
op1615.outputs = [
    buf1615: MultiOutput
    buf1615.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf1615.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1619'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1620'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1615.node.kernel = None


op1616: ExternKernelSchedulerNode(MultiOutput)
op1616.writes = [StarDep(name='buf1616', mode=None)]
op1616.unmet_dependencies = [StarDep(name='buf1614', mode=None)]
op1616.met_dependencies = []
op1616.outputs = [
    buf1616: MultiOutput
    buf1616.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf1616.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1616.node.kernel = None


op1617: ExternKernelSchedulerNode(MultiOutput)
op1617.writes = [StarDep(name='buf1617', mode=None)]
op1617.unmet_dependencies = [StarDep(name='buf1614', mode=None)]
op1617.met_dependencies = []
op1617.outputs = [
    buf1617: MultiOutput
    buf1617.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1617.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1617.node.kernel = None


op1618: ExternKernelSchedulerNode(MultiOutput)
op1618.writes = [StarDep(name='buf1618', mode=None)]
op1618.unmet_dependencies = [StarDep(name='buf1614', mode=None)]
op1618.met_dependencies = []
op1618.outputs = [
    buf1618: MultiOutput
    buf1618.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1618.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1618.node.kernel = None


op1619: ExternKernelSchedulerNode(ExternKernelOut)
op1619.writes = [StarDep(name='buf1619', mode=None)]
op1619.unmet_dependencies = [StarDep(name='buf1615', mode=None)]
op1619.met_dependencies = [StarDep(name='primals_1076', mode=None)]
op1619.outputs = [
    buf1619: ExternKernelOut
    buf1619.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1619.users = [
        NodeUser(node=SchedulerNode(name='op1622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1635'), can_inplace=True, is_weak=False),
    ]
]
op1619.node.kernel = extern_kernels.mm


op1620: ExternKernelSchedulerNode(ExternKernelOut)
op1620.writes = [StarDep(name='buf1620', mode=None)]
op1620.unmet_dependencies = [StarDep(name='buf1615', mode=None)]
op1620.met_dependencies = [StarDep(name='primals_1078', mode=None)]
op1620.outputs = [
    buf1620: ExternKernelOut
    buf1620.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1620.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1621'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1620.node.kernel = extern_kernels.mm


op1621: ExternKernelSchedulerNode(ExternKernelOut)
op1621.writes = [StarDep(name='buf1621', mode=None)]
op1621.unmet_dependencies = [StarDep(name='buf1620', mode=None)]
op1621.met_dependencies = [StarDep(name='primals_1079', mode=None)]
op1621.outputs = [
    buf1621: ExternKernelOut
    buf1621.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1621.users = [
        NodeUser(node=SchedulerNode(name='op1622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1635'), can_inplace=True, is_weak=False),
    ]
]
op1621.node.kernel = extern_kernels.mm


op1622: SchedulerNode(ComputedBuffer)
op1622.writes = [MemoryDep('buf1622', c0, {c0: 1024})]
op1622.unmet_dependencies = 
    [   MemoryDep('buf1596', c0, {c0: 655360}),
        MemoryDep('buf1619', c0, {c0: 655360}),
        MemoryDep('buf1621', c0, {c0: 655360})]
op1622.met_dependencies = [MemoryDep('primals_1077', c1, {c0: 1024, c1: 640})]
op1622.outputs = [
    buf1622: ComputedBuffer
    buf1622.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1622.users = [NodeUser(node=SchedulerNode(name='op1625'), can_inplace=False, is_weak=False)]
]
op1622.group.device = cuda:0
op1622.group.iteration = (1024, 640)
op1622.sizes = ([1024], [640])
buf1619_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1077_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1621_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1622_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1622_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1619', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1077', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1621', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1596', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1622', get_index_4, getitem)
        return store_reduction


op1623: SchedulerNode(ComputedBuffer)
op1623.writes = [MemoryDep('buf1623', c0, {c0: 1024})]
op1623.unmet_dependencies = 
    [   MemoryDep('buf1596', c0, {c0: 655360}),
        MemoryDep('buf1619', c0, {c0: 655360}),
        MemoryDep('buf1621', c0, {c0: 655360})]
op1623.met_dependencies = [MemoryDep('primals_1077', c1, {c0: 1024, c1: 640})]
op1623.outputs = [
    buf1623: ComputedBuffer
    buf1623.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1623.users = [
        NodeUser(node=SchedulerNode(name='op1625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2075'), can_inplace=True, is_weak=False),
    ]
]
op1623.group.device = cuda:0
op1623.group.iteration = (1024, 640)
op1623.sizes = ([1024], [640])
buf1619_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1077_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1621_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1623_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1623_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1619', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1077', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1621', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1596', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1623', get_index_4, getitem_1)
        return store_reduction


op1625: SchedulerNode(ComputedBuffer)
op1625.writes = [MemoryDep('buf1625', c0, {c0: 655360})]
op1625.unmet_dependencies = 
    [   MemoryDep('buf1596', c0, {c0: 655360}),
        MemoryDep('buf1619', c0, {c0: 655360}),
        MemoryDep('buf1621', c0, {c0: 655360}),
        MemoryDep('buf1622', c0, {c0: 1024}),
        MemoryDep('buf1623', c0, {c0: 1024})]
op1625.met_dependencies = [MemoryDep('primals_1077', c1, {c0: 1024, c1: 640})]
op1625.outputs = [
    buf1625: ComputedBuffer
    buf1625.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1625.users = [
        NodeUser(node=SchedulerNode(name='op1626'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1625.group.device = cuda:0
op1625.group.iteration = (655360, 1)
op1625.sizes = ([1024, 640], [])
buf1619_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1077_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1621_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1622_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1623_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1625_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1625_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1619', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1077', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1621', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1596', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1622', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1623', get_index_5)
        constant_2 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1625', get_index_6, mul_2, None)
        return store


op1626: SchedulerNode(ComputedBuffer)
op1626.writes = [MemoryDep('buf1626', c0, {c0: 655360})]
op1626.unmet_dependencies = [MemoryDep('buf1625', c0, {c0: 655360})]
op1626.met_dependencies = 
    [   MemoryDep('primals_1080', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1081', c1, {c0: 1024, c1: 640})]
op1626.outputs = [
    buf1626: ComputedBuffer
    buf1626.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1626.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1627'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1628'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1626.group.device = cuda:0
op1626.group.iteration = (655360, 1)
op1626.sizes = ([1024, 640], [])
buf1625_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1080_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1081_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1626_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1626_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1625', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1080', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1081', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1626', get_index_3, add, None)
        return store


op1627: ExternKernelSchedulerNode(ExternKernelOut)
op1627.writes = [StarDep(name='buf1627', mode=None)]
op1627.unmet_dependencies = [StarDep(name='buf1626', mode=None)]
op1627.met_dependencies = [StarDep(name='primals_1082', mode=None)]
op1627.outputs = [
    buf1627: ExternKernelOut
    buf1627.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf1627.users = [NodeUser(node=SchedulerNode(name='op1630'), can_inplace=True, is_weak=False)]
]
op1627.node.kernel = extern_kernels.mm


op1628: ExternKernelSchedulerNode(ExternKernelOut)
op1628.writes = [StarDep(name='buf1628', mode=None)]
op1628.unmet_dependencies = [StarDep(name='buf1626', mode=None)]
op1628.met_dependencies = [StarDep(name='primals_1084', mode=None)]
op1628.outputs = [
    buf1628: ExternKernelOut
    buf1628.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1628.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1629'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1628.node.kernel = extern_kernels.mm


op1629: ExternKernelSchedulerNode(ExternKernelOut)
op1629.writes = [StarDep(name='buf1629', mode=None)]
op1629.unmet_dependencies = [StarDep(name='buf1628', mode=None)]
op1629.met_dependencies = [StarDep(name='primals_1085', mode=None)]
op1629.outputs = [
    buf1629: ExternKernelOut
    buf1629.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf1629.users = [NodeUser(node=SchedulerNode(name='op1630'), can_inplace=True, is_weak=False)]
]
op1629.node.kernel = extern_kernels.mm


op1630: SchedulerNode(ComputedBuffer)
op1630.writes = [MemoryDep('buf1630', c0, {c0: 5242880})]
op1630.unmet_dependencies = 
    [   MemoryDep('buf1627', c0, {c0: 5242880}),
        MemoryDep('buf1629', c0, {c0: 5242880})]
op1630.met_dependencies = [MemoryDep('primals_1083', c1, {c0: 1024, c1: 5120})]
op1630.outputs = [
    buf1630: ComputedBuffer
    buf1630.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
    buf1630.users = [
        NodeUser(node=SchedulerNode(name='op1631'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1630.group.device = cuda:0
op1630.group.iteration = (5242880, 1)
op1630.sizes = ([1024, 5120], [])
buf1627_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
primals_1083_layout = FixedLayout('cuda:0', torch.float32, size=[5120], stride=[1])
buf1629_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
buf1630_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
class op1630_loop_body:
    var_ranges = {p0: 1024, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1627', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1083', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1629', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1630', get_index_3, add_1, None)
        return store


op1631: SchedulerNode(ComputedBuffer)
op1631.writes = [MemoryDep('buf1631', c0, {c0: 2621440})]
op1631.unmet_dependencies = 
    [   MemoryDep('buf1630', 5120*c0 + c1 + 2560, {c0: 1024, c1: 2560}),
        MemoryDep('buf1630', 5120*c0 + c1, {c0: 1024, c1: 2560})]
op1631.met_dependencies = []
op1631.outputs = [
    buf1631: ComputedBuffer
    buf1631.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
    buf1631.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1632'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1633'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1631.group.device = cuda:0
op1631.group.iteration = (2621440, 1)
op1631.sizes = ([1024, 2560], [])
buf1630_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf1630_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf1631_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
class op1631_loop_body:
    var_ranges = {p0: 1024, p1: 2560}
    index0 = 5120*p0 + p1
    index1 = 5120*p0 + p1 + 2560
    index2 = 2560*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1630', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1630', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1630', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1631', get_index_3, mul_3, None)
        return store


op1632: ExternKernelSchedulerNode(ExternKernelOut)
op1632.writes = [StarDep(name='buf1632', mode=None)]
op1632.unmet_dependencies = [StarDep(name='buf1631', mode=None)]
op1632.met_dependencies = [StarDep(name='primals_1086', mode=None)]
op1632.outputs = [
    buf1632: ExternKernelOut
    buf1632.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1632.users = [NodeUser(node=SchedulerNode(name='op1635'), can_inplace=True, is_weak=False)]
]
op1632.node.kernel = extern_kernels.mm


op1633: ExternKernelSchedulerNode(ExternKernelOut)
op1633.writes = [StarDep(name='buf1633', mode=None)]
op1633.unmet_dependencies = [StarDep(name='buf1631', mode=None)]
op1633.met_dependencies = [StarDep(name='primals_1088', mode=None)]
op1633.outputs = [
    buf1633: ExternKernelOut
    buf1633.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1633.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1634'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1633.node.kernel = extern_kernels.mm


op1634: ExternKernelSchedulerNode(ExternKernelOut)
op1634.writes = [StarDep(name='buf1634', mode=None)]
op1634.unmet_dependencies = [StarDep(name='buf1633', mode=None)]
op1634.met_dependencies = [StarDep(name='primals_1089', mode=None)]
op1634.outputs = [
    buf1634: ExternKernelOut
    buf1634.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1634.users = [NodeUser(node=SchedulerNode(name='op1635'), can_inplace=True, is_weak=False)]
]
op1634.node.kernel = extern_kernels.mm


op1635: SchedulerNode(ComputedBuffer)
op1635.writes = [MemoryDep('buf1635', c0, {c0: 655360})]
op1635.unmet_dependencies = 
    [   MemoryDep('buf1596', c0, {c0: 655360}),
        MemoryDep('buf1619', c0, {c0: 655360}),
        MemoryDep('buf1621', c0, {c0: 655360}),
        MemoryDep('buf1632', c0, {c0: 655360}),
        MemoryDep('buf1634', c0, {c0: 655360})]
op1635.met_dependencies = 
    [   MemoryDep('primals_1077', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1087', c1, {c0: 1024, c1: 640})]
op1635.outputs = [
    buf1635: ComputedBuffer
    buf1635.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1635.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1636'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1637'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1635.group.device = cuda:0
op1635.group.iteration = (655360, 1)
op1635.sizes = ([1024, 640], [])
buf1632_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1087_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1634_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1619_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1077_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1621_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1596_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1635_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1635_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1632', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1087', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1634', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1619', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1077', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1621', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1596', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1635', get_index_7, add_5, None)
        return store


op1636: ExternKernelSchedulerNode(ExternKernelOut)
op1636.writes = [StarDep(name='buf1636', mode=None)]
op1636.unmet_dependencies = [StarDep(name='buf1635', mode=None)]
op1636.met_dependencies = [StarDep(name='primals_1090', mode=None)]
op1636.outputs = [
    buf1636: ExternKernelOut
    buf1636.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1636.users = [NodeUser(node=SchedulerNode(name='op1639'), can_inplace=False, is_weak=False)]
]
op1636.node.kernel = extern_kernels.mm


op1637: ExternKernelSchedulerNode(ExternKernelOut)
op1637.writes = [StarDep(name='buf1637', mode=None)]
op1637.unmet_dependencies = [StarDep(name='buf1635', mode=None)]
op1637.met_dependencies = [StarDep(name='primals_1092', mode=None)]
op1637.outputs = [
    buf1637: ExternKernelOut
    buf1637.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1637.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1638'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1637.node.kernel = extern_kernels.mm


op1638: ExternKernelSchedulerNode(ExternKernelOut)
op1638.writes = [StarDep(name='buf1638', mode=None)]
op1638.unmet_dependencies = [StarDep(name='buf1637', mode=None)]
op1638.met_dependencies = [StarDep(name='primals_1093', mode=None)]
op1638.outputs = [
    buf1638: ExternKernelOut
    buf1638.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1638.users = [NodeUser(node=SchedulerNode(name='op1639'), can_inplace=False, is_weak=False)]
]
op1638.node.kernel = extern_kernels.mm


op1639: SchedulerNode(ComputedBuffer)
op1639.writes = [MemoryDep('buf1639', c0, {c0: 983040})]
op1639.unmet_dependencies = 
    [   MemoryDep('buf1561', 163840*c0 + c2 + 256*(I), {c0: 4, c1: 960, c2: 256}),
        MemoryDep('buf1636', 163840*c0 + 640*c2 + (I), {c0: 4, c1: 960, c2: 256}),
        MemoryDep('buf1638', 163840*c0 + 640*c2 + (I), {c0: 4, c1: 960, c2: 256}),
        MemoryDep('buf475', 81920*c0 + c2 + 256*(I), {c0: 4, c1: 960, c2: 256})]
op1639.met_dependencies = [MemoryDep('primals_1091', I, {c0: 4, c1: 960})]
op1639.outputs = [
    buf1639: ComputedBuffer
    buf1639.layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
    buf1639.users = [
        NodeUser(node=SchedulerNode(name='op1640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1644'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1660'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1661'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1639.group.device = cuda:0
op1639.group.iteration = (983040, 1)
op1639.sizes = ([4, 960, 256], [])
buf1636_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1091_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1638_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf475_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 16, 16], stride=[81920, 256, 16, 1])
buf1639_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
class op1639_loop_body:
    var_ranges = {p0: 4, p1: 960, p2: 256}
    index0 = p1
    index1 = 163840*p0 + 640*p2 + (I)
    index2 = I
    index3 = 163840*p0 + p2 + 256*(I)
    index4 = 81920*p0 + p2 + 256*(I)
    index5 = 245760*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(640, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(640, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(960, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1639', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1636', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_1091', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1638', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1561', get_index_3)
        add_2 = ops.add(add_1, load_3)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf475', get_index)
        return load


op1640: SchedulerNode(ComputedBuffer)
op1640.writes = [MemoryDep('buf1640', c0, {c0: 128})]
op1640.unmet_dependencies = [MemoryDep('buf1639', c0, {c0: 983040})]
op1640.met_dependencies = []
op1640.outputs = [
    buf1640: ComputedBuffer
    buf1640.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1640.users = [
        NodeUser(node=SchedulerNode(name='op1644'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1640.group.device = cuda:0
op1640.group.iteration = (128, 7680)
op1640.sizes = ([128], [7680])
buf1639_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
buf1640_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1640_loop_body:
    var_ranges = {p0: 128, p1: 7680}
    index0 = 7680*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1639', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1640', get_index_1, getitem)
        return store_reduction


op1641: SchedulerNode(ComputedBuffer)
op1641.writes = [MemoryDep('buf1641', c0, {c0: 128})]
op1641.unmet_dependencies = [MemoryDep('buf1639', c0, {c0: 983040})]
op1641.met_dependencies = []
op1641.outputs = [
    buf1641: ComputedBuffer
    buf1641.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1641.users = [NodeUser(node=SchedulerNode(name='op1643'), can_inplace=True, is_weak=False)]
]
op1641.group.device = cuda:0
op1641.group.iteration = (128, 7680)
op1641.sizes = ([128], [7680])
buf1639_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
buf1641_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1641_loop_body:
    var_ranges = {p0: 128, p1: 7680}
    index0 = 7680*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1639', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1641', get_index_1, getitem_1)
        return store_reduction


op1643: SchedulerNode(ComputedBuffer)
op1643.writes = [MemoryDep('buf1643', c0, {c0: 128})]
op1643.unmet_dependencies = [MemoryDep('buf1641', c0, {c0: 128})]
op1643.met_dependencies = []
op1643.outputs = [
    buf1643: ComputedBuffer
    buf1643.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1643.users = [
        NodeUser(node=SchedulerNode(name='op1644'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1643.group.device = cuda:0
op1643.group.iteration = (128, 1)
op1643.sizes = ([128], [])
buf1641_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1643_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1643_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1641', get_index)
        constant = ops.constant(7680.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1643', get_index_1, rsqrt, None)
        return store


op1644: SchedulerNode(ComputedBuffer)
op1644.writes = [MemoryDep('buf1644', c0, {c0: 983040})]
op1644.unmet_dependencies = 
    [   MemoryDep('buf1639', c0, {c0: 983040}),
        MemoryDep('buf1640', 32*c0 + ((c1//30)), {c0: 4, c1: 960}),
        MemoryDep('buf1643', 32*c0 + ((c1//30)), {c0: 4, c1: 960})]
op1644.met_dependencies = 
    [   MemoryDep('primals_1094', c1, {c0: 4, c1: 960}),
        MemoryDep('primals_1095', c1, {c0: 4, c1: 960})]
op1644.outputs = [
    buf1644: ComputedBuffer
    buf1644.layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
    buf1644.users = [NodeUser(node=SchedulerNode(name='op1645'), can_inplace=True, is_weak=False)]
]
op1644.group.device = cuda:0
op1644.group.iteration = (983040, 1)
op1644.sizes = ([4, 960, 256], [])
buf1639_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
buf1640_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1643_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1094_layout = FixedLayout('cuda:0', torch.float32, size=[960], stride=[1])
primals_1095_layout = FixedLayout('cuda:0', torch.float32, size=[960], stride=[1])
buf1644_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
class op1644_loop_body:
    var_ranges = {p0: 4, p1: 960, p2: 256}
    index0 = 245760*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//30))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1639', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1640', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1643', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1094', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1095', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1644', get_index_5, add, None)
        return store


op1645: SchedulerNode(ComputedBuffer)
op1645.writes = [MemoryDep('buf1645', c0, {c0: 983040})]
op1645.unmet_dependencies = [MemoryDep('buf1644', c0, {c0: 983040})]
op1645.met_dependencies = []
op1645.outputs = [
    buf1645: ComputedBuffer
    buf1645.layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
    buf1645.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1646'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1647'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1645.group.device = cuda:0
op1645.group.iteration = (983040, 1)
op1645.sizes = ([983040], [])
buf1644_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
buf1645_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 16, 16], stride=[245760, 256, 16, 1])
class op1645_loop_body:
    var_ranges = {p0: 983040}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1644', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1644', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1645', get_index_2, mul, None)
        return store


op1646: ExternKernelSchedulerNode(ExternKernelAlloc)
op1646.writes = [StarDep(name='buf1646', mode=None)]
op1646.unmet_dependencies = [StarDep(name='buf1645', mode=None)]
op1646.met_dependencies = [StarDep(name='primals_1096', mode=None)]
op1646.outputs = [
    buf1646: ExternKernelAlloc
    buf1646.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1646.users = [NodeUser(node=SchedulerNode(name='op1650'), can_inplace=True, is_weak=False)]
]
op1646.node.kernel = extern_kernels.convolution


op1647: ExternKernelSchedulerNode(ExternKernelAlloc)
op1647.writes = [StarDep(name='buf1647', mode=None)]
op1647.unmet_dependencies = [StarDep(name='buf1645', mode=None)]
op1647.met_dependencies = [StarDep(name='primals_1098', mode=None)]
op1647.outputs = [
    buf1647: ExternKernelAlloc
    buf1647.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1647.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1648'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1647.node.kernel = extern_kernels.convolution


op1648: ExternKernelSchedulerNode(ExternKernelAlloc)
op1648.writes = [StarDep(name='buf1648', mode=None)]
op1648.unmet_dependencies = [StarDep(name='buf1647', mode=None)]
op1648.met_dependencies = [StarDep(name='primals_1099', mode=None)]
op1648.outputs = [
    buf1648: ExternKernelAlloc
    buf1648.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1648.users = [NodeUser(node=SchedulerNode(name='op1650'), can_inplace=True, is_weak=False)]
]
op1648.node.kernel = extern_kernels.convolution


op1649: ExternKernelSchedulerNode(ExternKernelOut)
op1649.writes = [StarDep(name='buf1649', mode=None)]
op1649.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1649.met_dependencies = [StarDep(name='primals_1100', mode=None)]
op1649.outputs = [
    buf1649: ExternKernelOut
    buf1649.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
    buf1649.users = [NodeUser(node=SchedulerNode(name='op1650'), can_inplace=False, is_weak=False)]
]
op1649.node.kernel = extern_kernels.mm


op1650: SchedulerNode(ComputedBuffer)
op1650.writes = [MemoryDep('buf1650', c0, {c0: 655360})]
op1650.unmet_dependencies = 
    [   MemoryDep('buf1646', c0, {c0: 655360}),
        MemoryDep('buf1648', c0, {c0: 655360}),
        MemoryDep('buf1649', c0, {c0: 2560})]
op1650.met_dependencies = 
    [   MemoryDep('primals_1097', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1101', c1, {c0: 4, c1: 640})]
op1650.outputs = [
    buf1650: ComputedBuffer
    buf1650.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1650.users = [
        NodeUser(node=SchedulerNode(name='op1651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1655'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1650.group.device = cuda:0
op1650.group.iteration = (655360, 1)
op1650.sizes = ([4, 640, 256], [])
buf1646_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_1097_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1648_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1649_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640], stride=[640, 1])
primals_1101_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1650_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1650_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    index2 = 640*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1646', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1097', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1648', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1649', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1101', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1650', get_index_5, add_3, None)
        return store


op1651: SchedulerNode(ComputedBuffer)
op1651.writes = [MemoryDep('buf1651', c0, {c0: 128})]
op1651.unmet_dependencies = [MemoryDep('buf1650', c0, {c0: 655360})]
op1651.met_dependencies = []
op1651.outputs = [
    buf1651: ComputedBuffer
    buf1651.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1651.users = [
        NodeUser(node=SchedulerNode(name='op1655'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1651.group.device = cuda:0
op1651.group.iteration = (128, 5120)
op1651.sizes = ([128], [5120])
buf1650_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1651_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1651_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1650', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1651', get_index_1, getitem)
        return store_reduction


op1652: SchedulerNode(ComputedBuffer)
op1652.writes = [MemoryDep('buf1652', c0, {c0: 128})]
op1652.unmet_dependencies = [MemoryDep('buf1650', c0, {c0: 655360})]
op1652.met_dependencies = []
op1652.outputs = [
    buf1652: ComputedBuffer
    buf1652.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1652.users = [NodeUser(node=SchedulerNode(name='op1654'), can_inplace=True, is_weak=False)]
]
op1652.group.device = cuda:0
op1652.group.iteration = (128, 5120)
op1652.sizes = ([128], [5120])
buf1650_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1652_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1652_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1650', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1652', get_index_1, getitem_1)
        return store_reduction


op1654: SchedulerNode(ComputedBuffer)
op1654.writes = [MemoryDep('buf1654', c0, {c0: 128})]
op1654.unmet_dependencies = [MemoryDep('buf1652', c0, {c0: 128})]
op1654.met_dependencies = []
op1654.outputs = [
    buf1654: ComputedBuffer
    buf1654.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1654.users = [
        NodeUser(node=SchedulerNode(name='op1655'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1654.group.device = cuda:0
op1654.group.iteration = (128, 1)
op1654.sizes = ([128], [])
buf1652_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1654_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1654_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1652', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1654', get_index_1, rsqrt, None)
        return store


op1655: SchedulerNode(ComputedBuffer)
op1655.writes = [MemoryDep('buf1655', c0, {c0: 655360})]
op1655.unmet_dependencies = 
    [   MemoryDep('buf1650', c0, {c0: 655360}),
        MemoryDep('buf1651', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1654', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1655.met_dependencies = 
    [   MemoryDep('primals_1102', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1103', c1, {c0: 4, c1: 640})]
op1655.outputs = [
    buf1655: ComputedBuffer
    buf1655.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1655.users = [NodeUser(node=SchedulerNode(name='op1656'), can_inplace=True, is_weak=False)]
]
op1655.group.device = cuda:0
op1655.group.iteration = (655360, 1)
op1655.sizes = ([4, 640, 256], [])
buf1650_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1651_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1654_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1102_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1103_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1655_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1655_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1650', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1651', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1654', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1102', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1103', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1655', get_index_5, add, None)
        return store


op1656: SchedulerNode(ComputedBuffer)
op1656.writes = [MemoryDep('buf1656', c0, {c0: 655360})]
op1656.unmet_dependencies = [MemoryDep('buf1655', c0, {c0: 655360})]
op1656.met_dependencies = []
op1656.outputs = [
    buf1656: ComputedBuffer
    buf1656.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1656.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1657'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1658'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1656.group.device = cuda:0
op1656.group.iteration = (655360, 1)
op1656.sizes = ([655360], [])
buf1655_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1656_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1656_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1655', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1655', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1656', get_index_2, mul, None)
        return store


op1657: ExternKernelSchedulerNode(ExternKernelAlloc)
op1657.writes = [StarDep(name='buf1657', mode=None)]
op1657.unmet_dependencies = [StarDep(name='buf1656', mode=None)]
op1657.met_dependencies = [StarDep(name='primals_1104', mode=None)]
op1657.outputs = [
    buf1657: ExternKernelAlloc
    buf1657.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1657.users = [NodeUser(node=SchedulerNode(name='op1663'), can_inplace=True, is_weak=False)]
]
op1657.node.kernel = extern_kernels.convolution


op1658: ExternKernelSchedulerNode(ExternKernelAlloc)
op1658.writes = [StarDep(name='buf1658', mode=None)]
op1658.unmet_dependencies = [StarDep(name='buf1656', mode=None)]
op1658.met_dependencies = [StarDep(name='primals_1106', mode=None)]
op1658.outputs = [
    buf1658: ExternKernelAlloc
    buf1658.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1658.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1659'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1658.node.kernel = extern_kernels.convolution


op1659: ExternKernelSchedulerNode(ExternKernelAlloc)
op1659.writes = [StarDep(name='buf1659', mode=None)]
op1659.unmet_dependencies = [StarDep(name='buf1658', mode=None)]
op1659.met_dependencies = [StarDep(name='primals_1107', mode=None)]
op1659.outputs = [
    buf1659: ExternKernelAlloc
    buf1659.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1659.users = [NodeUser(node=SchedulerNode(name='op1663'), can_inplace=True, is_weak=False)]
]
op1659.node.kernel = extern_kernels.convolution


op1660: ExternKernelSchedulerNode(ExternKernelAlloc)
op1660.writes = [StarDep(name='buf1660', mode=None)]
op1660.unmet_dependencies = [StarDep(name='buf1639', mode=None)]
op1660.met_dependencies = [StarDep(name='primals_1108', mode=None)]
op1660.outputs = [
    buf1660: ExternKernelAlloc
    buf1660.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1660.users = [NodeUser(node=SchedulerNode(name='op1663'), can_inplace=True, is_weak=False)]
]
op1660.node.kernel = extern_kernels.convolution


op1661: ExternKernelSchedulerNode(ExternKernelAlloc)
op1661.writes = [StarDep(name='buf1661', mode=None)]
op1661.unmet_dependencies = [StarDep(name='buf1639', mode=None)]
op1661.met_dependencies = [StarDep(name='primals_1110', mode=None)]
op1661.outputs = [
    buf1661: ExternKernelAlloc
    buf1661.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 16, 16], stride=[20480, 256, 16, 1])
    buf1661.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1662'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1661.node.kernel = extern_kernels.convolution


op1662: ExternKernelSchedulerNode(ExternKernelAlloc)
op1662.writes = [StarDep(name='buf1662', mode=None)]
op1662.unmet_dependencies = [StarDep(name='buf1661', mode=None)]
op1662.met_dependencies = [StarDep(name='primals_1111', mode=None)]
op1662.outputs = [
    buf1662: ExternKernelAlloc
    buf1662.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1662.users = [NodeUser(node=SchedulerNode(name='op1663'), can_inplace=True, is_weak=False)]
]
op1662.node.kernel = extern_kernels.convolution


op1663: SchedulerNode(ComputedBuffer)
op1663.writes = [MemoryDep('buf1663', c0, {c0: 655360})]
op1663.unmet_dependencies = 
    [   MemoryDep('buf1657', c0, {c0: 655360}),
        MemoryDep('buf1659', c0, {c0: 655360}),
        MemoryDep('buf1660', c0, {c0: 655360}),
        MemoryDep('buf1662', c0, {c0: 655360})]
op1663.met_dependencies = 
    [   MemoryDep('primals_1105', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1109', c1, {c0: 4, c1: 640})]
op1663.outputs = [
    buf1663: ComputedBuffer
    buf1663.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1663.users = [
        NodeUser(node=SchedulerNode(name='op1664'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1665'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1668'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1742'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1663.group.device = cuda:0
op1663.group.iteration = (655360, 1)
op1663.sizes = ([4, 640, 256], [])
buf1660_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_1109_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1662_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1657_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
primals_1105_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1659_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1663_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1663_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1660', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1109', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1662', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1657', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1105', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1659', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1663', get_index_6, mul_2, None)
        return store


op1664: SchedulerNode(ComputedBuffer)
op1664.writes = [MemoryDep('buf1664', c0, {c0: 128})]
op1664.unmet_dependencies = [MemoryDep('buf1663', c0, {c0: 655360})]
op1664.met_dependencies = []
op1664.outputs = [
    buf1664: ComputedBuffer
    buf1664.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1664.users = [
        NodeUser(node=SchedulerNode(name='op1668'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1664.group.device = cuda:0
op1664.group.iteration = (128, 5120)
op1664.sizes = ([128], [5120])
buf1663_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1664_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1664_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1663', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1664', get_index_1, getitem)
        return store_reduction


op1665: SchedulerNode(ComputedBuffer)
op1665.writes = [MemoryDep('buf1665', c0, {c0: 128})]
op1665.unmet_dependencies = [MemoryDep('buf1663', c0, {c0: 655360})]
op1665.met_dependencies = []
op1665.outputs = [
    buf1665: ComputedBuffer
    buf1665.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1665.users = [
        NodeUser(node=SchedulerNode(name='op1667'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1668'), can_inplace=False, is_weak=False),
    ]
]
op1665.group.device = cuda:0
op1665.group.iteration = (128, 5120)
op1665.sizes = ([128], [5120])
buf1663_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1665_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1665_loop_body:
    var_ranges = {p0: 128, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1663', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1665', get_index_1, getitem_1)
        return store_reduction


op1667: SchedulerNode(ComputedBuffer)
op1667.writes = [MemoryDep('buf1667', c0, {c0: 128})]
op1667.unmet_dependencies = [MemoryDep('buf1665', c0, {c0: 128})]
op1667.met_dependencies = []
op1667.outputs = [
    buf1667: ComputedBuffer
    buf1667.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1667.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1667.group.device = cuda:0
op1667.group.iteration = (128, 1)
op1667.sizes = ([128], [])
buf1665_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1667_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1667_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1665', get_index)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1667', get_index_1, rsqrt, None)
        return store


op1668: SchedulerNode(ComputedBuffer)
op1668.writes = [MemoryDep('buf1668', c0, {c0: 655360})]
op1668.unmet_dependencies = 
    [   MemoryDep('buf1663', c0, {c0: 655360}),
        MemoryDep('buf1664', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1665', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1668.met_dependencies = 
    [   MemoryDep('primals_1112', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1113', c1, {c0: 4, c1: 640})]
op1668.outputs = [
    buf1668: ComputedBuffer
    buf1668.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
    buf1668.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1670'), can_inplace=False, is_weak=False),
    ]
]
op1668.group.device = cuda:0
op1668.group.iteration = (655360, 1)
op1668.sizes = ([4, 640, 256], [])
buf1663_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1664_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1665_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_1112_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1113_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1668_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
class op1668_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 256}
    index0 = 163840*p0 + 256*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1663', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1664', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1665', get_index_2)
        constant = ops.constant(5120.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1112', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1113', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1668', get_index_5, add_1, None)
        return store


op1669: ExternKernelSchedulerNode(ExternKernelOut)
op1669.writes = [StarDep(name='buf1669', mode=None)]
op1669.unmet_dependencies = [StarDep(name='buf1668', mode=None)]
op1669.met_dependencies = [StarDep(name='primals_1114', mode=None)]
op1669.outputs = [
    buf1669: ExternKernelOut
    buf1669.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1669.users = [
        NodeUser(node=SchedulerNode(name='op1673'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1674'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1676'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1698'), can_inplace=True, is_weak=False),
    ]
]
op1669.node.kernel = extern_kernels.bmm


op1670: SchedulerNode(ComputedBuffer)
op1670.writes = [MemoryDep('buf1670', c0, {c0: 655360})]
op1670.unmet_dependencies = [MemoryDep('buf1668', 163840*c0 + c1 + 256*c2, {c0: 4, c1: 256, c2: 640})]
op1670.met_dependencies = []
op1670.outputs = [
    buf1670: ComputedBuffer
    buf1670.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1670.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1671'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1670.group.device = cuda:0
op1670.group.iteration = (655360, 1)
op1670.sizes = ([4, 256, 640], [])
buf1668_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1670_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1670_loop_body:
    var_ranges = {p0: 4, p1: 256, p2: 640}
    index0 = 163840*p0 + p1 + 256*p2
    index1 = 163840*p0 + 640*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1668', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1670', get_index_1, load, None)
        return store


op1671: ExternKernelSchedulerNode(ExternKernelOut)
op1671.writes = [StarDep(name='buf1671', mode=None)]
op1671.unmet_dependencies = [StarDep(name='buf1670', mode=None)]
op1671.met_dependencies = [StarDep(name='primals_1116', mode=None)]
op1671.outputs = [
    buf1671: ExternKernelOut
    buf1671.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1671.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1672'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1671.node.kernel = extern_kernels.mm


op1672: ExternKernelSchedulerNode(ExternKernelOut)
op1672.writes = [StarDep(name='buf1672', mode=None)]
op1672.unmet_dependencies = [StarDep(name='buf1671', mode=None)]
op1672.met_dependencies = [StarDep(name='primals_1117', mode=None)]
op1672.outputs = [
    buf1672: ExternKernelOut
    buf1672.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1672.users = [
        NodeUser(node=SchedulerNode(name='op1673'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1674'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1676'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1698'), can_inplace=True, is_weak=False),
    ]
]
op1672.node.kernel = extern_kernels.mm


op1673: SchedulerNode(ComputedBuffer)
op1673.writes = [MemoryDep('buf1673', c0, {c0: 1024})]
op1673.unmet_dependencies = [MemoryDep('buf1669', c0, {c0: 655360}), MemoryDep('buf1672', c0, {c0: 655360})]
op1673.met_dependencies = [MemoryDep('primals_1115', c1, {c0: 1024, c1: 640})]
op1673.outputs = [
    buf1673: ComputedBuffer
    buf1673.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1673.users = [NodeUser(node=SchedulerNode(name='op1676'), can_inplace=False, is_weak=False)]
]
op1673.group.device = cuda:0
op1673.group.iteration = (1024, 640)
op1673.sizes = ([1024], [640])
buf1669_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1115_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1672_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1673_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1673_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1669', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1115', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1672', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1673', get_index_3, getitem)
        return store_reduction


op1674: SchedulerNode(ComputedBuffer)
op1674.writes = [MemoryDep('buf1674', c0, {c0: 1024})]
op1674.unmet_dependencies = [MemoryDep('buf1669', c0, {c0: 655360}), MemoryDep('buf1672', c0, {c0: 655360})]
op1674.met_dependencies = [MemoryDep('primals_1115', c1, {c0: 1024, c1: 640})]
op1674.outputs = [
    buf1674: ComputedBuffer
    buf1674.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1674.users = [
        NodeUser(node=SchedulerNode(name='op1676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2074'), can_inplace=True, is_weak=False),
    ]
]
op1674.group.device = cuda:0
op1674.group.iteration = (1024, 640)
op1674.sizes = ([1024], [640])
buf1669_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1115_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1672_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1674_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1674_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1669', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1115', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1672', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1674', get_index_3, getitem_1)
        return store_reduction


op1676: SchedulerNode(ComputedBuffer)
op1676.writes = [MemoryDep('buf1676', c0, {c0: 655360})]
op1676.unmet_dependencies = 
    [   MemoryDep('buf1669', c0, {c0: 655360}),
        MemoryDep('buf1672', c0, {c0: 655360}),
        MemoryDep('buf1673', c0, {c0: 1024}),
        MemoryDep('buf1674', c0, {c0: 1024})]
op1676.met_dependencies = [MemoryDep('primals_1115', c1, {c0: 1024, c1: 640})]
op1676.outputs = [
    buf1676: ComputedBuffer
    buf1676.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1676.users = [
        NodeUser(node=SchedulerNode(name='op1677'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1676.group.device = cuda:0
op1676.group.iteration = (655360, 1)
op1676.sizes = ([1024, 640], [])
buf1669_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1115_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1672_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1673_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1674_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1676_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1676_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1669', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1115', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1672', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1673', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1674', get_index_4)
        constant_1 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1676', get_index_5, mul_1, None)
        return store


op1677: SchedulerNode(ComputedBuffer)
op1677.writes = [MemoryDep('buf1677', c0, {c0: 655360})]
op1677.unmet_dependencies = [MemoryDep('buf1676', c0, {c0: 655360})]
op1677.met_dependencies = 
    [   MemoryDep('primals_1118', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1119', c1, {c0: 1024, c1: 640})]
op1677.outputs = [
    buf1677: ComputedBuffer
    buf1677.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1677.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1678'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1679'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1681'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1682'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1684'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1685'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1677.group.device = cuda:0
op1677.group.iteration = (655360, 1)
op1677.sizes = ([1024, 640], [])
buf1676_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1118_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1119_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1677_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1677_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1118', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1119', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1677', get_index_3, add, None)
        return store


op1678: ExternKernelSchedulerNode(ExternKernelOut)
op1678.writes = [StarDep(name='buf1678', mode=None)]
op1678.unmet_dependencies = [StarDep(name='buf1677', mode=None)]
op1678.met_dependencies = [StarDep(name='primals_1120', mode=None)]
op1678.outputs = [
    buf1678: ExternKernelOut
    buf1678.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1678.users = [NodeUser(node=SchedulerNode(name='op1687'), can_inplace=True, is_weak=False)]
]
op1678.node.kernel = extern_kernels.mm


op1679: ExternKernelSchedulerNode(ExternKernelOut)
op1679.writes = [StarDep(name='buf1679', mode=None)]
op1679.unmet_dependencies = [StarDep(name='buf1677', mode=None)]
op1679.met_dependencies = [StarDep(name='primals_1121', mode=None)]
op1679.outputs = [
    buf1679: ExternKernelOut
    buf1679.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1679.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1680'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1679.node.kernel = extern_kernels.mm


op1680: ExternKernelSchedulerNode(ExternKernelOut)
op1680.writes = [StarDep(name='buf1680', mode=None)]
op1680.unmet_dependencies = [StarDep(name='buf1679', mode=None)]
op1680.met_dependencies = [StarDep(name='primals_1122', mode=None)]
op1680.outputs = [
    buf1680: ExternKernelOut
    buf1680.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1680.users = [NodeUser(node=SchedulerNode(name='op1687'), can_inplace=True, is_weak=False)]
]
op1680.node.kernel = extern_kernels.mm


op1681: ExternKernelSchedulerNode(ExternKernelOut)
op1681.writes = [StarDep(name='buf1681', mode=None)]
op1681.unmet_dependencies = [StarDep(name='buf1677', mode=None)]
op1681.met_dependencies = [StarDep(name='primals_1123', mode=None)]
op1681.outputs = [
    buf1681: ExternKernelOut
    buf1681.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1681.users = [NodeUser(node=SchedulerNode(name='op1688'), can_inplace=True, is_weak=False)]
]
op1681.node.kernel = extern_kernels.mm


op1682: ExternKernelSchedulerNode(ExternKernelOut)
op1682.writes = [StarDep(name='buf1682', mode=None)]
op1682.unmet_dependencies = [StarDep(name='buf1677', mode=None)]
op1682.met_dependencies = [StarDep(name='primals_1124', mode=None)]
op1682.outputs = [
    buf1682: ExternKernelOut
    buf1682.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1682.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1683'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1682.node.kernel = extern_kernels.mm


op1683: ExternKernelSchedulerNode(ExternKernelOut)
op1683.writes = [StarDep(name='buf1683', mode=None)]
op1683.unmet_dependencies = [StarDep(name='buf1682', mode=None)]
op1683.met_dependencies = [StarDep(name='primals_1125', mode=None)]
op1683.outputs = [
    buf1683: ExternKernelOut
    buf1683.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1683.users = [NodeUser(node=SchedulerNode(name='op1688'), can_inplace=True, is_weak=False)]
]
op1683.node.kernel = extern_kernels.mm


op1684: ExternKernelSchedulerNode(ExternKernelOut)
op1684.writes = [StarDep(name='buf1684', mode=None)]
op1684.unmet_dependencies = [StarDep(name='buf1677', mode=None)]
op1684.met_dependencies = [StarDep(name='primals_1126', mode=None)]
op1684.outputs = [
    buf1684: ExternKernelOut
    buf1684.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1684.users = [NodeUser(node=SchedulerNode(name='op1689'), can_inplace=True, is_weak=False)]
]
op1684.node.kernel = extern_kernels.mm


op1685: ExternKernelSchedulerNode(ExternKernelOut)
op1685.writes = [StarDep(name='buf1685', mode=None)]
op1685.unmet_dependencies = [StarDep(name='buf1677', mode=None)]
op1685.met_dependencies = [StarDep(name='primals_1127', mode=None)]
op1685.outputs = [
    buf1685: ExternKernelOut
    buf1685.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1685.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1686'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1685.node.kernel = extern_kernels.mm


op1686: ExternKernelSchedulerNode(ExternKernelOut)
op1686.writes = [StarDep(name='buf1686', mode=None)]
op1686.unmet_dependencies = [StarDep(name='buf1685', mode=None)]
op1686.met_dependencies = [StarDep(name='primals_1128', mode=None)]
op1686.outputs = [
    buf1686: ExternKernelOut
    buf1686.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1686.users = [NodeUser(node=SchedulerNode(name='op1689'), can_inplace=True, is_weak=False)]
]
op1686.node.kernel = extern_kernels.mm


op1687: SchedulerNode(ComputedBuffer)
op1687.writes = [MemoryDep('buf1687', c0, {c0: 655360})]
op1687.unmet_dependencies = [MemoryDep('buf1678', c0, {c0: 655360}), MemoryDep('buf1680', c0, {c0: 655360})]
op1687.met_dependencies = []
op1687.outputs = [
    buf1687: ComputedBuffer
    buf1687.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1687.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1690'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1687.group.device = cuda:0
op1687.group.iteration = (655360, 1)
op1687.sizes = ([655360], [])
buf1678_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1680_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1687_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1687_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1678', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1680', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1687', get_index_2, add, None)
        return store


op1688: SchedulerNode(ComputedBuffer)
op1688.writes = [MemoryDep('buf1688', c0, {c0: 655360})]
op1688.unmet_dependencies = [MemoryDep('buf1681', c0, {c0: 655360}), MemoryDep('buf1683', c0, {c0: 655360})]
op1688.met_dependencies = []
op1688.outputs = [
    buf1688: ComputedBuffer
    buf1688.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1688.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1690'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1688.group.device = cuda:0
op1688.group.iteration = (655360, 1)
op1688.sizes = ([655360], [])
buf1681_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1683_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1688_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1688_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1681', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1683', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1688', get_index_2, add, None)
        return store


op1689: SchedulerNode(ComputedBuffer)
op1689.writes = [MemoryDep('buf1689', c0, {c0: 655360})]
op1689.unmet_dependencies = [MemoryDep('buf1684', c0, {c0: 655360}), MemoryDep('buf1686', c0, {c0: 655360})]
op1689.met_dependencies = []
op1689.outputs = [
    buf1689: ComputedBuffer
    buf1689.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1689.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1690'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1689.group.device = cuda:0
op1689.group.iteration = (655360, 1)
op1689.sizes = ([655360], [])
buf1684_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1686_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1689_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1689_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1684', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1686', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1689', get_index_2, add, None)
        return store


op1690: ExternKernelSchedulerNode(FallbackKernel)
op1690.writes = [StarDep(name='buf1690', mode=None)]
op1690.unmet_dependencies = 
    [   StarDep(name='buf1687', mode=None),
        StarDep(name='buf1688', mode=None),
        StarDep(name='buf1689', mode=None)]
op1690.met_dependencies = []
op1690.outputs = [
    buf1690: FallbackKernel
    buf1690.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1690.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1691'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1692'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1693'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1694'), can_inplace=False, is_weak=False),
    ]
]
op1690.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1691: ExternKernelSchedulerNode(MultiOutput)
op1691.writes = [StarDep(name='buf1691', mode=None)]
op1691.unmet_dependencies = [StarDep(name='buf1690', mode=None)]
op1691.met_dependencies = []
op1691.outputs = [
    buf1691: MultiOutput
    buf1691.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf1691.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1695'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1696'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1691.node.kernel = None


op1692: ExternKernelSchedulerNode(MultiOutput)
op1692.writes = [StarDep(name='buf1692', mode=None)]
op1692.unmet_dependencies = [StarDep(name='buf1690', mode=None)]
op1692.met_dependencies = []
op1692.outputs = [
    buf1692: MultiOutput
    buf1692.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf1692.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1692.node.kernel = None


op1693: ExternKernelSchedulerNode(MultiOutput)
op1693.writes = [StarDep(name='buf1693', mode=None)]
op1693.unmet_dependencies = [StarDep(name='buf1690', mode=None)]
op1693.met_dependencies = []
op1693.outputs = [
    buf1693: MultiOutput
    buf1693.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1693.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1693.node.kernel = None


op1694: ExternKernelSchedulerNode(MultiOutput)
op1694.writes = [StarDep(name='buf1694', mode=None)]
op1694.unmet_dependencies = [StarDep(name='buf1690', mode=None)]
op1694.met_dependencies = []
op1694.outputs = [
    buf1694: MultiOutput
    buf1694.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1694.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1694.node.kernel = None


op1695: ExternKernelSchedulerNode(ExternKernelOut)
op1695.writes = [StarDep(name='buf1695', mode=None)]
op1695.unmet_dependencies = [StarDep(name='buf1691', mode=None)]
op1695.met_dependencies = [StarDep(name='primals_1129', mode=None)]
op1695.outputs = [
    buf1695: ExternKernelOut
    buf1695.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1695.users = [NodeUser(node=SchedulerNode(name='op1698'), can_inplace=True, is_weak=False)]
]
op1695.node.kernel = extern_kernels.mm


op1696: ExternKernelSchedulerNode(ExternKernelOut)
op1696.writes = [StarDep(name='buf1696', mode=None)]
op1696.unmet_dependencies = [StarDep(name='buf1691', mode=None)]
op1696.met_dependencies = [StarDep(name='primals_1131', mode=None)]
op1696.outputs = [
    buf1696: ExternKernelOut
    buf1696.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1696.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1697'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1696.node.kernel = extern_kernels.mm


op1697: ExternKernelSchedulerNode(ExternKernelOut)
op1697.writes = [StarDep(name='buf1697', mode=None)]
op1697.unmet_dependencies = [StarDep(name='buf1696', mode=None)]
op1697.met_dependencies = [StarDep(name='primals_1132', mode=None)]
op1697.outputs = [
    buf1697: ExternKernelOut
    buf1697.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1697.users = [NodeUser(node=SchedulerNode(name='op1698'), can_inplace=True, is_weak=False)]
]
op1697.node.kernel = extern_kernels.mm


op1698: SchedulerNode(ComputedBuffer)
op1698.writes = [MemoryDep('buf1698', c0, {c0: 655360})]
op1698.unmet_dependencies = 
    [   MemoryDep('buf1669', c0, {c0: 655360}),
        MemoryDep('buf1672', c0, {c0: 655360}),
        MemoryDep('buf1695', c0, {c0: 655360}),
        MemoryDep('buf1697', c0, {c0: 655360})]
op1698.met_dependencies = 
    [   MemoryDep('primals_1115', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1130', c1, {c0: 1024, c1: 640})]
op1698.outputs = [
    buf1698: ComputedBuffer
    buf1698.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1698.users = [
        NodeUser(node=SchedulerNode(name='op1699'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1702'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1727'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1737'), can_inplace=True, is_weak=False),
    ]
]
op1698.group.device = cuda:0
op1698.group.iteration = (655360, 1)
op1698.sizes = ([1024, 640], [])
buf1695_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1130_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1697_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1669_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1115_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1672_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1698_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1695', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1130', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1697', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1669', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1115', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1672', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1698', get_index_6, add_4, None)
        return store


op1699: SchedulerNode(ComputedBuffer)
op1699.writes = [MemoryDep('buf1699', c0, {c0: 1024})]
op1699.unmet_dependencies = [MemoryDep('buf1698', c0, {c0: 655360})]
op1699.met_dependencies = []
op1699.outputs = [
    buf1699: ComputedBuffer
    buf1699.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1699.users = [NodeUser(node=SchedulerNode(name='op1702'), can_inplace=False, is_weak=False)]
]
op1699.group.device = cuda:0
op1699.group.iteration = (1024, 640)
op1699.sizes = ([1024], [640])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1699_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1699_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1698', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1699', get_index_1, getitem)
        return store_reduction


op1700: SchedulerNode(ComputedBuffer)
op1700.writes = [MemoryDep('buf1700', c0, {c0: 1024})]
op1700.unmet_dependencies = [MemoryDep('buf1698', c0, {c0: 655360})]
op1700.met_dependencies = []
op1700.outputs = [
    buf1700: ComputedBuffer
    buf1700.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1700.users = [
        NodeUser(node=SchedulerNode(name='op1702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2073'), can_inplace=True, is_weak=False),
    ]
]
op1700.group.device = cuda:0
op1700.group.iteration = (1024, 640)
op1700.sizes = ([1024], [640])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1700_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1700_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1698', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1700', get_index_1, getitem_1)
        return store_reduction


op1702: SchedulerNode(ComputedBuffer)
op1702.writes = [MemoryDep('buf1702', c0, {c0: 655360})]
op1702.unmet_dependencies = 
    [   MemoryDep('buf1698', c0, {c0: 655360}),
        MemoryDep('buf1699', c0, {c0: 1024}),
        MemoryDep('buf1700', c0, {c0: 1024})]
op1702.met_dependencies = []
op1702.outputs = [
    buf1702: ComputedBuffer
    buf1702.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1702.users = [
        NodeUser(node=SchedulerNode(name='op1703'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1702.group.device = cuda:0
op1702.group.iteration = (655360, 1)
op1702.sizes = ([1024, 640], [])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1699_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1700_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1702_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1702_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1699', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1700', get_index_2)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1702', get_index_3, mul, None)
        return store


op1703: SchedulerNode(ComputedBuffer)
op1703.writes = [MemoryDep('buf1703', c0, {c0: 655360})]
op1703.unmet_dependencies = [MemoryDep('buf1702', c0, {c0: 655360})]
op1703.met_dependencies = 
    [   MemoryDep('primals_1133', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1134', c1, {c0: 1024, c1: 640})]
op1703.outputs = [
    buf1703: ComputedBuffer
    buf1703.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1703.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1704'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1705'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1703.group.device = cuda:0
op1703.group.iteration = (655360, 1)
op1703.sizes = ([1024, 640], [])
buf1702_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1133_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1134_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1703_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1703_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1702', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1133', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1134', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1703', get_index_3, add, None)
        return store


op1704: ExternKernelSchedulerNode(ExternKernelOut)
op1704.writes = [StarDep(name='buf1704', mode=None)]
op1704.unmet_dependencies = [StarDep(name='buf1703', mode=None)]
op1704.met_dependencies = [StarDep(name='primals_1135', mode=None)]
op1704.outputs = [
    buf1704: ExternKernelOut
    buf1704.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1704.users = [NodeUser(node=SchedulerNode(name='op1713'), can_inplace=True, is_weak=False)]
]
op1704.node.kernel = extern_kernels.mm


op1705: ExternKernelSchedulerNode(ExternKernelOut)
op1705.writes = [StarDep(name='buf1705', mode=None)]
op1705.unmet_dependencies = [StarDep(name='buf1703', mode=None)]
op1705.met_dependencies = [StarDep(name='primals_1136', mode=None)]
op1705.outputs = [
    buf1705: ExternKernelOut
    buf1705.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1705.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1706'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1705.node.kernel = extern_kernels.mm


op1706: ExternKernelSchedulerNode(ExternKernelOut)
op1706.writes = [StarDep(name='buf1706', mode=None)]
op1706.unmet_dependencies = [StarDep(name='buf1705', mode=None)]
op1706.met_dependencies = [StarDep(name='primals_1137', mode=None)]
op1706.outputs = [
    buf1706: ExternKernelOut
    buf1706.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1706.users = [NodeUser(node=SchedulerNode(name='op1713'), can_inplace=True, is_weak=False)]
]
op1706.node.kernel = extern_kernels.mm


op1707: ExternKernelSchedulerNode(ExternKernelOut)
op1707.writes = [StarDep(name='buf1707', mode=None)]
op1707.unmet_dependencies = []
op1707.met_dependencies = 
    [   StarDep(name='primals_1138', mode=None),
        StarDep(name='primals_177', mode=None)]
op1707.outputs = [
    buf1707: ExternKernelOut
    buf1707.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1707.users = [NodeUser(node=SchedulerNode(name='op1714'), can_inplace=True, is_weak=False)]
]
op1707.node.kernel = extern_kernels.mm


op1708: ExternKernelSchedulerNode(ExternKernelOut)
op1708.writes = [StarDep(name='buf1708', mode=None)]
op1708.unmet_dependencies = []
op1708.met_dependencies = 
    [   StarDep(name='primals_1139', mode=None),
        StarDep(name='primals_177', mode=None)]
op1708.outputs = [
    buf1708: ExternKernelOut
    buf1708.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1708.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1709'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1708.node.kernel = extern_kernels.mm


op1709: ExternKernelSchedulerNode(ExternKernelOut)
op1709.writes = [StarDep(name='buf1709', mode=None)]
op1709.unmet_dependencies = [StarDep(name='buf1708', mode=None)]
op1709.met_dependencies = [StarDep(name='primals_1140', mode=None)]
op1709.outputs = [
    buf1709: ExternKernelOut
    buf1709.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1709.users = [NodeUser(node=SchedulerNode(name='op1714'), can_inplace=True, is_weak=False)]
]
op1709.node.kernel = extern_kernels.mm


op1710: ExternKernelSchedulerNode(ExternKernelOut)
op1710.writes = [StarDep(name='buf1710', mode=None)]
op1710.unmet_dependencies = []
op1710.met_dependencies = 
    [   StarDep(name='primals_1141', mode=None),
        StarDep(name='primals_177', mode=None)]
op1710.outputs = [
    buf1710: ExternKernelOut
    buf1710.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1710.users = [NodeUser(node=SchedulerNode(name='op1715'), can_inplace=True, is_weak=False)]
]
op1710.node.kernel = extern_kernels.mm


op1711: ExternKernelSchedulerNode(ExternKernelOut)
op1711.writes = [StarDep(name='buf1711', mode=None)]
op1711.unmet_dependencies = []
op1711.met_dependencies = 
    [   StarDep(name='primals_1142', mode=None),
        StarDep(name='primals_177', mode=None)]
op1711.outputs = [
    buf1711: ExternKernelOut
    buf1711.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1711.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1712'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1711.node.kernel = extern_kernels.mm


op1712: ExternKernelSchedulerNode(ExternKernelOut)
op1712.writes = [StarDep(name='buf1712', mode=None)]
op1712.unmet_dependencies = [StarDep(name='buf1711', mode=None)]
op1712.met_dependencies = [StarDep(name='primals_1143', mode=None)]
op1712.outputs = [
    buf1712: ExternKernelOut
    buf1712.layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
    buf1712.users = [NodeUser(node=SchedulerNode(name='op1715'), can_inplace=True, is_weak=False)]
]
op1712.node.kernel = extern_kernels.mm


op1713: SchedulerNode(ComputedBuffer)
op1713.writes = [MemoryDep('buf1713', c0, {c0: 655360})]
op1713.unmet_dependencies = [MemoryDep('buf1704', c0, {c0: 655360}), MemoryDep('buf1706', c0, {c0: 655360})]
op1713.met_dependencies = []
op1713.outputs = [
    buf1713: ComputedBuffer
    buf1713.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1713.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1716'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1713.group.device = cuda:0
op1713.group.iteration = (655360, 1)
op1713.sizes = ([655360], [])
buf1704_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1706_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1713_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1713_loop_body:
    var_ranges = {p0: 655360}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1704', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1706', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1713', get_index_2, add, None)
        return store


op1714: SchedulerNode(ComputedBuffer)
op1714.writes = [MemoryDep('buf1714', c0, {c0: 197120})]
op1714.unmet_dependencies = [MemoryDep('buf1707', c0, {c0: 197120}), MemoryDep('buf1709', c0, {c0: 197120})]
op1714.met_dependencies = []
op1714.outputs = [
    buf1714: ComputedBuffer
    buf1714.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf1714.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1716'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1714.group.device = cuda:0
op1714.group.iteration = (197120, 1)
op1714.sizes = ([197120], [])
buf1707_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1709_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1714_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op1714_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1707', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1709', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1714', get_index_2, add, None)
        return store


op1715: SchedulerNode(ComputedBuffer)
op1715.writes = [MemoryDep('buf1715', c0, {c0: 197120})]
op1715.unmet_dependencies = [MemoryDep('buf1710', c0, {c0: 197120}), MemoryDep('buf1712', c0, {c0: 197120})]
op1715.met_dependencies = []
op1715.outputs = [
    buf1715: ComputedBuffer
    buf1715.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
    buf1715.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1716'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1715.group.device = cuda:0
op1715.group.iteration = (197120, 1)
op1715.sizes = ([197120], [])
buf1710_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1712_layout = FixedLayout('cuda:0', torch.float32, size=[308, 640], stride=[640, 1])
buf1715_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 640], stride=[49280, 640, 1])
class op1715_loop_body:
    var_ranges = {p0: 197120}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1710', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1712', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1715', get_index_2, add, None)
        return store


op1716: ExternKernelSchedulerNode(FallbackKernel)
op1716.writes = [StarDep(name='buf1716', mode=None)]
op1716.unmet_dependencies = 
    [   StarDep(name='buf1713', mode=None),
        StarDep(name='buf1714', mode=None),
        StarDep(name='buf1715', mode=None)]
op1716.met_dependencies = []
op1716.outputs = [
    buf1716: FallbackKernel
    buf1716.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1716.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1717'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1718'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1719'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1720'), can_inplace=False, is_weak=False),
    ]
]
op1716.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1717: ExternKernelSchedulerNode(MultiOutput)
op1717.writes = [StarDep(name='buf1717', mode=None)]
op1717.unmet_dependencies = [StarDep(name='buf1716', mode=None)]
op1717.met_dependencies = []
op1717.outputs = [
    buf1717: MultiOutput
    buf1717.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256, 64], stride=[163840, 64, 640, 1])
    buf1717.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1721'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1722'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1717.node.kernel = None


op1718: ExternKernelSchedulerNode(MultiOutput)
op1718.writes = [StarDep(name='buf1718', mode=None)]
op1718.unmet_dependencies = [StarDep(name='buf1716', mode=None)]
op1718.met_dependencies = []
op1718.outputs = [
    buf1718: MultiOutput
    buf1718.layout = FixedLayout('cuda:0', torch.float32, size=[4, 10, 256], stride=[2560, 256, 1])
    buf1718.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1718.node.kernel = None


op1719: ExternKernelSchedulerNode(MultiOutput)
op1719.writes = [StarDep(name='buf1719', mode=None)]
op1719.unmet_dependencies = [StarDep(name='buf1716', mode=None)]
op1719.met_dependencies = []
op1719.outputs = [
    buf1719: MultiOutput
    buf1719.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1719.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1719.node.kernel = None


op1720: ExternKernelSchedulerNode(MultiOutput)
op1720.writes = [StarDep(name='buf1720', mode=None)]
op1720.unmet_dependencies = [StarDep(name='buf1716', mode=None)]
op1720.met_dependencies = []
op1720.outputs = [
    buf1720: MultiOutput
    buf1720.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1720.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1720.node.kernel = None


op1721: ExternKernelSchedulerNode(ExternKernelOut)
op1721.writes = [StarDep(name='buf1721', mode=None)]
op1721.unmet_dependencies = [StarDep(name='buf1717', mode=None)]
op1721.met_dependencies = [StarDep(name='primals_1144', mode=None)]
op1721.outputs = [
    buf1721: ExternKernelOut
    buf1721.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1721.users = [
        NodeUser(node=SchedulerNode(name='op1724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1727'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1737'), can_inplace=True, is_weak=False),
    ]
]
op1721.node.kernel = extern_kernels.mm


op1722: ExternKernelSchedulerNode(ExternKernelOut)
op1722.writes = [StarDep(name='buf1722', mode=None)]
op1722.unmet_dependencies = [StarDep(name='buf1717', mode=None)]
op1722.met_dependencies = [StarDep(name='primals_1146', mode=None)]
op1722.outputs = [
    buf1722: ExternKernelOut
    buf1722.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1722.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1723'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1722.node.kernel = extern_kernels.mm


op1723: ExternKernelSchedulerNode(ExternKernelOut)
op1723.writes = [StarDep(name='buf1723', mode=None)]
op1723.unmet_dependencies = [StarDep(name='buf1722', mode=None)]
op1723.met_dependencies = [StarDep(name='primals_1147', mode=None)]
op1723.outputs = [
    buf1723: ExternKernelOut
    buf1723.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1723.users = [
        NodeUser(node=SchedulerNode(name='op1724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1727'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1737'), can_inplace=True, is_weak=False),
    ]
]
op1723.node.kernel = extern_kernels.mm


op1724: SchedulerNode(ComputedBuffer)
op1724.writes = [MemoryDep('buf1724', c0, {c0: 1024})]
op1724.unmet_dependencies = 
    [   MemoryDep('buf1698', c0, {c0: 655360}),
        MemoryDep('buf1721', c0, {c0: 655360}),
        MemoryDep('buf1723', c0, {c0: 655360})]
op1724.met_dependencies = [MemoryDep('primals_1145', c1, {c0: 1024, c1: 640})]
op1724.outputs = [
    buf1724: ComputedBuffer
    buf1724.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1724.users = [NodeUser(node=SchedulerNode(name='op1727'), can_inplace=False, is_weak=False)]
]
op1724.group.device = cuda:0
op1724.group.iteration = (1024, 640)
op1724.sizes = ([1024], [640])
buf1721_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1145_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1723_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1724_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1724_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1721', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1145', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1723', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1698', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1724', get_index_4, getitem)
        return store_reduction


op1725: SchedulerNode(ComputedBuffer)
op1725.writes = [MemoryDep('buf1725', c0, {c0: 1024})]
op1725.unmet_dependencies = 
    [   MemoryDep('buf1698', c0, {c0: 655360}),
        MemoryDep('buf1721', c0, {c0: 655360}),
        MemoryDep('buf1723', c0, {c0: 655360})]
op1725.met_dependencies = [MemoryDep('primals_1145', c1, {c0: 1024, c1: 640})]
op1725.outputs = [
    buf1725: ComputedBuffer
    buf1725.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
    buf1725.users = [
        NodeUser(node=SchedulerNode(name='op1727'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2072'), can_inplace=True, is_weak=False),
    ]
]
op1725.group.device = cuda:0
op1725.group.iteration = (1024, 640)
op1725.sizes = ([1024], [640])
buf1721_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1145_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1723_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1725_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
class op1725_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1721', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1145', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1723', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1698', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1725', get_index_4, getitem_1)
        return store_reduction


op1727: SchedulerNode(ComputedBuffer)
op1727.writes = [MemoryDep('buf1727', c0, {c0: 655360})]
op1727.unmet_dependencies = 
    [   MemoryDep('buf1698', c0, {c0: 655360}),
        MemoryDep('buf1721', c0, {c0: 655360}),
        MemoryDep('buf1723', c0, {c0: 655360}),
        MemoryDep('buf1724', c0, {c0: 1024}),
        MemoryDep('buf1725', c0, {c0: 1024})]
op1727.met_dependencies = [MemoryDep('primals_1145', c1, {c0: 1024, c1: 640})]
op1727.outputs = [
    buf1727: ComputedBuffer
    buf1727.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1727.users = [
        NodeUser(node=SchedulerNode(name='op1728'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1727.group.device = cuda:0
op1727.group.iteration = (655360, 1)
op1727.sizes = ([1024, 640], [])
buf1721_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1145_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1723_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1724_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1725_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf1727_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1727_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1721', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1145', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1723', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1698', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1724', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1725', get_index_5)
        constant_2 = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1727', get_index_6, mul_2, None)
        return store


op1728: SchedulerNode(ComputedBuffer)
op1728.writes = [MemoryDep('buf1728', c0, {c0: 655360})]
op1728.unmet_dependencies = [MemoryDep('buf1727', c0, {c0: 655360})]
op1728.met_dependencies = 
    [   MemoryDep('primals_1148', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1149', c1, {c0: 1024, c1: 640})]
op1728.outputs = [
    buf1728: ComputedBuffer
    buf1728.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1728.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1729'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1730'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1728.group.device = cuda:0
op1728.group.iteration = (655360, 1)
op1728.sizes = ([1024, 640], [])
buf1727_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
primals_1148_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1149_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1728_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1728_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1727', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1148', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1149', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1728', get_index_3, add, None)
        return store


op1729: ExternKernelSchedulerNode(ExternKernelOut)
op1729.writes = [StarDep(name='buf1729', mode=None)]
op1729.unmet_dependencies = [StarDep(name='buf1728', mode=None)]
op1729.met_dependencies = [StarDep(name='primals_1150', mode=None)]
op1729.outputs = [
    buf1729: ExternKernelOut
    buf1729.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf1729.users = [NodeUser(node=SchedulerNode(name='op1732'), can_inplace=True, is_weak=False)]
]
op1729.node.kernel = extern_kernels.mm


op1730: ExternKernelSchedulerNode(ExternKernelOut)
op1730.writes = [StarDep(name='buf1730', mode=None)]
op1730.unmet_dependencies = [StarDep(name='buf1728', mode=None)]
op1730.met_dependencies = [StarDep(name='primals_1152', mode=None)]
op1730.outputs = [
    buf1730: ExternKernelOut
    buf1730.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1730.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1731'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1730.node.kernel = extern_kernels.mm


op1731: ExternKernelSchedulerNode(ExternKernelOut)
op1731.writes = [StarDep(name='buf1731', mode=None)]
op1731.unmet_dependencies = [StarDep(name='buf1730', mode=None)]
op1731.met_dependencies = [StarDep(name='primals_1153', mode=None)]
op1731.outputs = [
    buf1731: ExternKernelOut
    buf1731.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
    buf1731.users = [NodeUser(node=SchedulerNode(name='op1732'), can_inplace=True, is_weak=False)]
]
op1731.node.kernel = extern_kernels.mm


op1732: SchedulerNode(ComputedBuffer)
op1732.writes = [MemoryDep('buf1732', c0, {c0: 5242880})]
op1732.unmet_dependencies = 
    [   MemoryDep('buf1729', c0, {c0: 5242880}),
        MemoryDep('buf1731', c0, {c0: 5242880})]
op1732.met_dependencies = [MemoryDep('primals_1151', c1, {c0: 1024, c1: 5120})]
op1732.outputs = [
    buf1732: ComputedBuffer
    buf1732.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
    buf1732.users = [
        NodeUser(node=SchedulerNode(name='op1733'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1732.group.device = cuda:0
op1732.group.iteration = (5242880, 1)
op1732.sizes = ([1024, 5120], [])
buf1729_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
primals_1151_layout = FixedLayout('cuda:0', torch.float32, size=[5120], stride=[1])
buf1731_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 5120], stride=[5120, 1])
buf1732_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
class op1732_loop_body:
    var_ranges = {p0: 1024, p1: 5120}
    index0 = 5120*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1729', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1151', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1731', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1732', get_index_3, add_1, None)
        return store


op1733: SchedulerNode(ComputedBuffer)
op1733.writes = [MemoryDep('buf1733', c0, {c0: 2621440})]
op1733.unmet_dependencies = 
    [   MemoryDep('buf1732', 5120*c0 + c1 + 2560, {c0: 1024, c1: 2560}),
        MemoryDep('buf1732', 5120*c0 + c1, {c0: 1024, c1: 2560})]
op1733.met_dependencies = []
op1733.outputs = [
    buf1733: ComputedBuffer
    buf1733.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
    buf1733.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1734'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1735'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1733.group.device = cuda:0
op1733.group.iteration = (2621440, 1)
op1733.sizes = ([1024, 2560], [])
buf1732_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf1732_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 5120], stride=[1310720, 5120, 1])
buf1733_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 2560], stride=[655360, 2560, 1])
class op1733_loop_body:
    var_ranges = {p0: 1024, p1: 2560}
    index0 = 5120*p0 + p1
    index1 = 5120*p0 + p1 + 2560
    index2 = 2560*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1732', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1732', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1732', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1733', get_index_3, mul_3, None)
        return store


op1734: ExternKernelSchedulerNode(ExternKernelOut)
op1734.writes = [StarDep(name='buf1734', mode=None)]
op1734.unmet_dependencies = [StarDep(name='buf1733', mode=None)]
op1734.met_dependencies = [StarDep(name='primals_1154', mode=None)]
op1734.outputs = [
    buf1734: ExternKernelOut
    buf1734.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1734.users = [NodeUser(node=SchedulerNode(name='op1737'), can_inplace=True, is_weak=False)]
]
op1734.node.kernel = extern_kernels.mm


op1735: ExternKernelSchedulerNode(ExternKernelOut)
op1735.writes = [StarDep(name='buf1735', mode=None)]
op1735.unmet_dependencies = [StarDep(name='buf1733', mode=None)]
op1735.met_dependencies = [StarDep(name='primals_1156', mode=None)]
op1735.outputs = [
    buf1735: ExternKernelOut
    buf1735.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1735.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1736'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1735.node.kernel = extern_kernels.mm


op1736: ExternKernelSchedulerNode(ExternKernelOut)
op1736.writes = [StarDep(name='buf1736', mode=None)]
op1736.unmet_dependencies = [StarDep(name='buf1735', mode=None)]
op1736.met_dependencies = [StarDep(name='primals_1157', mode=None)]
op1736.outputs = [
    buf1736: ExternKernelOut
    buf1736.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1736.users = [NodeUser(node=SchedulerNode(name='op1737'), can_inplace=True, is_weak=False)]
]
op1736.node.kernel = extern_kernels.mm


op1737: SchedulerNode(ComputedBuffer)
op1737.writes = [MemoryDep('buf1737', c0, {c0: 655360})]
op1737.unmet_dependencies = 
    [   MemoryDep('buf1698', c0, {c0: 655360}),
        MemoryDep('buf1721', c0, {c0: 655360}),
        MemoryDep('buf1723', c0, {c0: 655360}),
        MemoryDep('buf1734', c0, {c0: 655360}),
        MemoryDep('buf1736', c0, {c0: 655360})]
op1737.met_dependencies = 
    [   MemoryDep('primals_1145', c1, {c0: 1024, c1: 640}),
        MemoryDep('primals_1155', c1, {c0: 1024, c1: 640})]
op1737.outputs = [
    buf1737: ComputedBuffer
    buf1737.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
    buf1737.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1738'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1739'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1737.group.device = cuda:0
op1737.group.iteration = (655360, 1)
op1737.sizes = ([1024, 640], [])
buf1734_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1155_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1736_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1721_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1145_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1723_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1698_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
buf1737_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 640], stride=[163840, 640, 1])
class op1737_loop_body:
    var_ranges = {p0: 1024, p1: 640}
    index0 = 640*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1734', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1155', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1736', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1721', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1145', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1723', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1698', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1737', get_index_7, add_5, None)
        return store


op1738: ExternKernelSchedulerNode(ExternKernelOut)
op1738.writes = [StarDep(name='buf1738', mode=None)]
op1738.unmet_dependencies = [StarDep(name='buf1737', mode=None)]
op1738.met_dependencies = [StarDep(name='primals_1158', mode=None)]
op1738.outputs = [
    buf1738: ExternKernelOut
    buf1738.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1738.users = [NodeUser(node=SchedulerNode(name='op1742'), can_inplace=False, is_weak=False)]
]
op1738.node.kernel = extern_kernels.mm


op1739: ExternKernelSchedulerNode(ExternKernelOut)
op1739.writes = [StarDep(name='buf1739', mode=None)]
op1739.unmet_dependencies = [StarDep(name='buf1737', mode=None)]
op1739.met_dependencies = [StarDep(name='primals_1160', mode=None)]
op1739.outputs = [
    buf1739: ExternKernelOut
    buf1739.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 80], stride=[80, 1])
    buf1739.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1740'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1739.node.kernel = extern_kernels.mm


op1740: ExternKernelSchedulerNode(ExternKernelOut)
op1740.writes = [StarDep(name='buf1740', mode=None)]
op1740.unmet_dependencies = [StarDep(name='buf1739', mode=None)]
op1740.met_dependencies = [StarDep(name='primals_1161', mode=None)]
op1740.outputs = [
    buf1740: ExternKernelOut
    buf1740.layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
    buf1740.users = [NodeUser(node=SchedulerNode(name='op1742'), can_inplace=False, is_weak=False)]
]
op1740.node.kernel = extern_kernels.mm


op1741: SchedulerNode(ComputedBuffer)
op1741.writes = [MemoryDep('buf1741', c0, {c0: 32})]
op1741.unmet_dependencies = []
op1741.met_dependencies = []
op1741.outputs = [
    buf1741: ComputedBuffer
    buf1741.layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
    buf1741.users = [
        NodeUser(node=SchedulerNode(name='op1742'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1741.group.device = cuda:0
op1741.group.iteration = (32, 1)
op1741.sizes = ([32], [])
buf1741_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
class op1741_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1741', get_index_1, to_dtype, None)
        return store


op1742: SchedulerNode(ComputedBuffer)
op1742.writes = [MemoryDep('buf1742', c0, {c0: 2621440})]
op1742.unmet_dependencies = 
    [   MemoryDep('buf1663', 256*c0 + 16*tmp0 + tmp1, {c0: 2560}),
        MemoryDep('buf1738', 163840*c0 + c1 + 10240*tmp0 + 640*tmp1, {c0: 4, c1: 640}),
        MemoryDep('buf1740', 163840*c0 + c1 + 10240*tmp0 + 640*tmp1, {c0: 4, c1: 640}),
        MemoryDep('buf1741', c1, {c0: 2560, c1: 32}),
        MemoryDep('buf1741', c1, {c0: 81920, c1: 32})]
op1742.met_dependencies = [MemoryDep('primals_1159', c1, {c0: 4, c1: 640})]
op1742.outputs = [
    buf1742: ComputedBuffer
    buf1742.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1742.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1743'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1744'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1742.group.device = cuda:0
op1742.group.iteration = (2621440, 1)
op1742.sizes = ([4, 640, 32, 32], [])
buf1741_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
buf1741_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
buf1738_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
primals_1159_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1740_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 640], stride=[640, 1])
buf1663_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 16, 16], stride=[163840, 256, 16, 1])
buf1742_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1742_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 32, p3: 32}
    index0 = p2
    index1 = p3
    index2 = 10240*indirect0 + 640*indirect1 + 163840*p0 + p1
    index3 = p1
    index4 = 16*indirect0 + indirect1 + 163840*p0 + 256*p1
    index5 = 655360*p0 + 1024*p1 + 32*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1741', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1741', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1738', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_1159', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1740', get_index_4)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_4, constant)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf1663', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf1742', get_index_6, add_2, None)
        return store


op1743: ExternKernelSchedulerNode(ExternKernelAlloc)
op1743.writes = [StarDep(name='buf1743', mode=None)]
op1743.unmet_dependencies = [StarDep(name='buf1742', mode=None)]
op1743.met_dependencies = [StarDep(name='primals_1162', mode=None)]
op1743.outputs = [
    buf1743: ExternKernelAlloc
    buf1743.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1743.users = [NodeUser(node=SchedulerNode(name='op1746'), can_inplace=False, is_weak=False)]
]
op1743.node.kernel = extern_kernels.convolution


op1744: ExternKernelSchedulerNode(ExternKernelAlloc)
op1744.writes = [StarDep(name='buf1744', mode=None)]
op1744.unmet_dependencies = [StarDep(name='buf1742', mode=None)]
op1744.met_dependencies = [StarDep(name='primals_1164', mode=None)]
op1744.outputs = [
    buf1744: ExternKernelAlloc
    buf1744.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1744.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1745'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1744.node.kernel = extern_kernels.convolution


op1745: ExternKernelSchedulerNode(ExternKernelAlloc)
op1745.writes = [StarDep(name='buf1745', mode=None)]
op1745.unmet_dependencies = [StarDep(name='buf1744', mode=None)]
op1745.met_dependencies = [StarDep(name='primals_1165', mode=None)]
op1745.outputs = [
    buf1745: ExternKernelAlloc
    buf1745.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1745.users = [NodeUser(node=SchedulerNode(name='op1746'), can_inplace=False, is_weak=False)]
]
op1745.node.kernel = extern_kernels.convolution


op1746: SchedulerNode(ComputedBuffer)
op1746.writes = [MemoryDep('buf1746', c0, {c0: 3932160})]
op1746.unmet_dependencies = 
    [   MemoryDep('buf1743', 655360*c0 + c2 + 1024*(I), {c0: 4, c1: 960, c2: 1024}),
        MemoryDep('buf1745', 655360*c0 + c2 + 1024*(I), {c0: 4, c1: 960, c2: 1024}),
        MemoryDep('buf471', 327680*c0 + c2 + 1024*(I), {c0: 4, c1: 960, c2: 1024})]
op1746.met_dependencies = [MemoryDep('primals_1163', I, {c0: 4, c1: 960})]
op1746.outputs = [
    buf1746: ComputedBuffer
    buf1746.layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
    buf1746.users = [
        NodeUser(node=SchedulerNode(name='op1747'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1751'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1767'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1768'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1746.group.device = cuda:0
op1746.group.iteration = (3932160, 1)
op1746.sizes = ([4, 960, 1024], [])
buf1743_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
primals_1163_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1745_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf471_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1746_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
class op1746_loop_body:
    var_ranges = {p0: 4, p1: 960, p2: 1024}
    index0 = p1
    index1 = 655360*p0 + p2 + 1024*(I)
    index2 = I
    index3 = 327680*p0 + p2 + 1024*(I)
    index4 = 983040*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(640, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(640, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(960, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf1746', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1743', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_1163', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1745', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf471', get_index)
        return load


op1747: SchedulerNode(ComputedBuffer)
op1747.writes = [MemoryDep('buf1747', c0, {c0: 128})]
op1747.unmet_dependencies = [MemoryDep('buf1746', c0, {c0: 3932160})]
op1747.met_dependencies = []
op1747.outputs = [
    buf1747: ComputedBuffer
    buf1747.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1747.users = [
        NodeUser(node=SchedulerNode(name='op1751'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1747.group.device = cuda:0
op1747.group.iteration = (128, 30720)
op1747.sizes = ([128], [30720])
buf1746_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
buf1747_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1747_loop_body:
    var_ranges = {p0: 128, p1: 30720}
    index0 = 30720*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1746', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1747', get_index_1, getitem)
        return store_reduction


op1748: SchedulerNode(ComputedBuffer)
op1748.writes = [MemoryDep('buf1748', c0, {c0: 128})]
op1748.unmet_dependencies = [MemoryDep('buf1746', c0, {c0: 3932160})]
op1748.met_dependencies = []
op1748.outputs = [
    buf1748: ComputedBuffer
    buf1748.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1748.users = [NodeUser(node=SchedulerNode(name='op1750'), can_inplace=True, is_weak=False)]
]
op1748.group.device = cuda:0
op1748.group.iteration = (128, 30720)
op1748.sizes = ([128], [30720])
buf1746_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
buf1748_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1748_loop_body:
    var_ranges = {p0: 128, p1: 30720}
    index0 = 30720*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1746', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1748', get_index_1, getitem_1)
        return store_reduction


op1750: SchedulerNode(ComputedBuffer)
op1750.writes = [MemoryDep('buf1750', c0, {c0: 128})]
op1750.unmet_dependencies = [MemoryDep('buf1748', c0, {c0: 128})]
op1750.met_dependencies = []
op1750.outputs = [
    buf1750: ComputedBuffer
    buf1750.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1750.users = [
        NodeUser(node=SchedulerNode(name='op1751'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1750.group.device = cuda:0
op1750.group.iteration = (128, 1)
op1750.sizes = ([128], [])
buf1748_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1750_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1750_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1748', get_index)
        constant = ops.constant(30720.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1750', get_index_1, rsqrt, None)
        return store


op1751: SchedulerNode(ComputedBuffer)
op1751.writes = [MemoryDep('buf1751', c0, {c0: 3932160})]
op1751.unmet_dependencies = 
    [   MemoryDep('buf1746', c0, {c0: 3932160}),
        MemoryDep('buf1747', 32*c0 + ((c1//30)), {c0: 4, c1: 960}),
        MemoryDep('buf1750', 32*c0 + ((c1//30)), {c0: 4, c1: 960})]
op1751.met_dependencies = 
    [   MemoryDep('primals_1166', c1, {c0: 4, c1: 960}),
        MemoryDep('primals_1167', c1, {c0: 4, c1: 960})]
op1751.outputs = [
    buf1751: ComputedBuffer
    buf1751.layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
    buf1751.users = [NodeUser(node=SchedulerNode(name='op1752'), can_inplace=True, is_weak=False)]
]
op1751.group.device = cuda:0
op1751.group.iteration = (3932160, 1)
op1751.sizes = ([4, 960, 1024], [])
buf1746_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
buf1747_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1750_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1166_layout = FixedLayout('cuda:0', torch.float32, size=[960], stride=[1])
primals_1167_layout = FixedLayout('cuda:0', torch.float32, size=[960], stride=[1])
buf1751_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
class op1751_loop_body:
    var_ranges = {p0: 4, p1: 960, p2: 1024}
    index0 = 983040*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//30))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1746', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1747', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1750', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1166', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1167', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1751', get_index_5, add, None)
        return store


op1752: SchedulerNode(ComputedBuffer)
op1752.writes = [MemoryDep('buf1752', c0, {c0: 3932160})]
op1752.unmet_dependencies = [MemoryDep('buf1751', c0, {c0: 3932160})]
op1752.met_dependencies = []
op1752.outputs = [
    buf1752: ComputedBuffer
    buf1752.layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
    buf1752.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1753'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1754'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1752.group.device = cuda:0
op1752.group.iteration = (3932160, 1)
op1752.sizes = ([3932160], [])
buf1751_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
buf1752_layout = FixedLayout('cuda:0', torch.float32, size=[4, 960, 32, 32], stride=[983040, 1024, 32, 1])
class op1752_loop_body:
    var_ranges = {p0: 3932160}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1751', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1751', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1752', get_index_2, mul, None)
        return store


op1753: ExternKernelSchedulerNode(ExternKernelAlloc)
op1753.writes = [StarDep(name='buf1753', mode=None)]
op1753.unmet_dependencies = [StarDep(name='buf1752', mode=None)]
op1753.met_dependencies = [StarDep(name='primals_1168', mode=None)]
op1753.outputs = [
    buf1753: ExternKernelAlloc
    buf1753.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1753.users = [NodeUser(node=SchedulerNode(name='op1757'), can_inplace=True, is_weak=False)]
]
op1753.node.kernel = extern_kernels.convolution


op1754: ExternKernelSchedulerNode(ExternKernelAlloc)
op1754.writes = [StarDep(name='buf1754', mode=None)]
op1754.unmet_dependencies = [StarDep(name='buf1752', mode=None)]
op1754.met_dependencies = [StarDep(name='primals_1170', mode=None)]
op1754.outputs = [
    buf1754: ExternKernelAlloc
    buf1754.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1754.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1755'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1754.node.kernel = extern_kernels.convolution


op1755: ExternKernelSchedulerNode(ExternKernelAlloc)
op1755.writes = [StarDep(name='buf1755', mode=None)]
op1755.unmet_dependencies = [StarDep(name='buf1754', mode=None)]
op1755.met_dependencies = [StarDep(name='primals_1171', mode=None)]
op1755.outputs = [
    buf1755: ExternKernelAlloc
    buf1755.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1755.users = [NodeUser(node=SchedulerNode(name='op1757'), can_inplace=True, is_weak=False)]
]
op1755.node.kernel = extern_kernels.convolution


op1756: ExternKernelSchedulerNode(ExternKernelOut)
op1756.writes = [StarDep(name='buf1756', mode=None)]
op1756.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1756.met_dependencies = [StarDep(name='primals_1172', mode=None)]
op1756.outputs = [
    buf1756: ExternKernelOut
    buf1756.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf1756.users = [NodeUser(node=SchedulerNode(name='op1757'), can_inplace=False, is_weak=False)]
]
op1756.node.kernel = extern_kernels.mm


op1757: SchedulerNode(ComputedBuffer)
op1757.writes = [MemoryDep('buf1757', c0, {c0: 1310720})]
op1757.unmet_dependencies = 
    [   MemoryDep('buf1753', c0, {c0: 1310720}),
        MemoryDep('buf1755', c0, {c0: 1310720}),
        MemoryDep('buf1756', c0, {c0: 1280})]
op1757.met_dependencies = 
    [   MemoryDep('primals_1169', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1173', c1, {c0: 4, c1: 320})]
op1757.outputs = [
    buf1757: ComputedBuffer
    buf1757.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1757.users = [
        NodeUser(node=SchedulerNode(name='op1758'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1759'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1762'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1757.group.device = cuda:0
op1757.group.iteration = (1310720, 1)
op1757.sizes = ([4, 320, 1024], [])
buf1753_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1169_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1755_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1756_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
primals_1173_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1757_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1757_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    index2 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1753', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1169', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1755', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1756', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1173', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1757', get_index_5, add_3, None)
        return store


op1758: SchedulerNode(ComputedBuffer)
op1758.writes = [MemoryDep('buf1758', c0, {c0: 128})]
op1758.unmet_dependencies = [MemoryDep('buf1757', c0, {c0: 1310720})]
op1758.met_dependencies = []
op1758.outputs = [
    buf1758: ComputedBuffer
    buf1758.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1758.users = [
        NodeUser(node=SchedulerNode(name='op1762'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1758.group.device = cuda:0
op1758.group.iteration = (128, 10240)
op1758.sizes = ([128], [10240])
buf1757_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1758_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1758_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1757', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1758', get_index_1, getitem)
        return store_reduction


op1759: SchedulerNode(ComputedBuffer)
op1759.writes = [MemoryDep('buf1759', c0, {c0: 128})]
op1759.unmet_dependencies = [MemoryDep('buf1757', c0, {c0: 1310720})]
op1759.met_dependencies = []
op1759.outputs = [
    buf1759: ComputedBuffer
    buf1759.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1759.users = [NodeUser(node=SchedulerNode(name='op1761'), can_inplace=True, is_weak=False)]
]
op1759.group.device = cuda:0
op1759.group.iteration = (128, 10240)
op1759.sizes = ([128], [10240])
buf1757_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1759_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1759_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1757', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1759', get_index_1, getitem_1)
        return store_reduction


op1761: SchedulerNode(ComputedBuffer)
op1761.writes = [MemoryDep('buf1761', c0, {c0: 128})]
op1761.unmet_dependencies = [MemoryDep('buf1759', c0, {c0: 128})]
op1761.met_dependencies = []
op1761.outputs = [
    buf1761: ComputedBuffer
    buf1761.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1761.users = [
        NodeUser(node=SchedulerNode(name='op1762'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1761.group.device = cuda:0
op1761.group.iteration = (128, 1)
op1761.sizes = ([128], [])
buf1759_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1761_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1761_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1759', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1761', get_index_1, rsqrt, None)
        return store


op1762: SchedulerNode(ComputedBuffer)
op1762.writes = [MemoryDep('buf1762', c0, {c0: 1310720})]
op1762.unmet_dependencies = 
    [   MemoryDep('buf1757', c0, {c0: 1310720}),
        MemoryDep('buf1758', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf1761', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op1762.met_dependencies = 
    [   MemoryDep('primals_1174', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1175', c1, {c0: 4, c1: 320})]
op1762.outputs = [
    buf1762: ComputedBuffer
    buf1762.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1762.users = [NodeUser(node=SchedulerNode(name='op1763'), can_inplace=True, is_weak=False)]
]
op1762.group.device = cuda:0
op1762.group.iteration = (1310720, 1)
op1762.sizes = ([4, 320, 1024], [])
buf1757_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1758_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1761_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1174_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1175_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1762_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1762_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1757', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1758', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1761', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1174', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1175', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1762', get_index_5, add, None)
        return store


op1763: SchedulerNode(ComputedBuffer)
op1763.writes = [MemoryDep('buf1763', c0, {c0: 1310720})]
op1763.unmet_dependencies = [MemoryDep('buf1762', c0, {c0: 1310720})]
op1763.met_dependencies = []
op1763.outputs = [
    buf1763: ComputedBuffer
    buf1763.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1763.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1764'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1765'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1763.group.device = cuda:0
op1763.group.iteration = (1310720, 1)
op1763.sizes = ([1310720], [])
buf1762_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1763_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1763_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1762', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1762', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1763', get_index_2, mul, None)
        return store


op1764: ExternKernelSchedulerNode(ExternKernelAlloc)
op1764.writes = [StarDep(name='buf1764', mode=None)]
op1764.unmet_dependencies = [StarDep(name='buf1763', mode=None)]
op1764.met_dependencies = [StarDep(name='primals_1176', mode=None)]
op1764.outputs = [
    buf1764: ExternKernelAlloc
    buf1764.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1764.users = [NodeUser(node=SchedulerNode(name='op1770'), can_inplace=True, is_weak=False)]
]
op1764.node.kernel = extern_kernels.convolution


op1765: ExternKernelSchedulerNode(ExternKernelAlloc)
op1765.writes = [StarDep(name='buf1765', mode=None)]
op1765.unmet_dependencies = [StarDep(name='buf1763', mode=None)]
op1765.met_dependencies = [StarDep(name='primals_1178', mode=None)]
op1765.outputs = [
    buf1765: ExternKernelAlloc
    buf1765.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1765.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1766'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1765.node.kernel = extern_kernels.convolution


op1766: ExternKernelSchedulerNode(ExternKernelAlloc)
op1766.writes = [StarDep(name='buf1766', mode=None)]
op1766.unmet_dependencies = [StarDep(name='buf1765', mode=None)]
op1766.met_dependencies = [StarDep(name='primals_1179', mode=None)]
op1766.outputs = [
    buf1766: ExternKernelAlloc
    buf1766.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1766.users = [NodeUser(node=SchedulerNode(name='op1770'), can_inplace=True, is_weak=False)]
]
op1766.node.kernel = extern_kernels.convolution


op1767: ExternKernelSchedulerNode(ExternKernelAlloc)
op1767.writes = [StarDep(name='buf1767', mode=None)]
op1767.unmet_dependencies = [StarDep(name='buf1746', mode=None)]
op1767.met_dependencies = [StarDep(name='primals_1180', mode=None)]
op1767.outputs = [
    buf1767: ExternKernelAlloc
    buf1767.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1767.users = [NodeUser(node=SchedulerNode(name='op1770'), can_inplace=True, is_weak=False)]
]
op1767.node.kernel = extern_kernels.convolution


op1768: ExternKernelSchedulerNode(ExternKernelAlloc)
op1768.writes = [StarDep(name='buf1768', mode=None)]
op1768.unmet_dependencies = [StarDep(name='buf1746', mode=None)]
op1768.met_dependencies = [StarDep(name='primals_1182', mode=None)]
op1768.outputs = [
    buf1768: ExternKernelAlloc
    buf1768.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1768.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1769'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1768.node.kernel = extern_kernels.convolution


op1769: ExternKernelSchedulerNode(ExternKernelAlloc)
op1769.writes = [StarDep(name='buf1769', mode=None)]
op1769.unmet_dependencies = [StarDep(name='buf1768', mode=None)]
op1769.met_dependencies = [StarDep(name='primals_1183', mode=None)]
op1769.outputs = [
    buf1769: ExternKernelAlloc
    buf1769.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1769.users = [NodeUser(node=SchedulerNode(name='op1770'), can_inplace=True, is_weak=False)]
]
op1769.node.kernel = extern_kernels.convolution


op1770: SchedulerNode(ComputedBuffer)
op1770.writes = [MemoryDep('buf1770', c0, {c0: 1310720})]
op1770.unmet_dependencies = 
    [   MemoryDep('buf1764', c0, {c0: 1310720}),
        MemoryDep('buf1766', c0, {c0: 1310720}),
        MemoryDep('buf1767', c0, {c0: 1310720}),
        MemoryDep('buf1769', c0, {c0: 1310720})]
op1770.met_dependencies = 
    [   MemoryDep('primals_1177', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1181', c1, {c0: 4, c1: 320})]
op1770.outputs = [
    buf1770: ComputedBuffer
    buf1770.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1770.users = [
        NodeUser(node=SchedulerNode(name='op1771'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1775'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1848'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1770.group.device = cuda:0
op1770.group.iteration = (1310720, 1)
op1770.sizes = ([4, 320, 1024], [])
buf1767_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1181_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1769_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1764_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1177_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1766_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1770_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1770_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1767', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1181', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1769', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1764', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1177', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1766', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1770', get_index_6, mul_2, None)
        return store


op1771: SchedulerNode(ComputedBuffer)
op1771.writes = [MemoryDep('buf1771', c0, {c0: 128})]
op1771.unmet_dependencies = [MemoryDep('buf1770', c0, {c0: 1310720})]
op1771.met_dependencies = []
op1771.outputs = [
    buf1771: ComputedBuffer
    buf1771.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1771.users = [
        NodeUser(node=SchedulerNode(name='op1775'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1771.group.device = cuda:0
op1771.group.iteration = (128, 10240)
op1771.sizes = ([128], [10240])
buf1770_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1771_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1771_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1770', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1771', get_index_1, getitem)
        return store_reduction


op1772: SchedulerNode(ComputedBuffer)
op1772.writes = [MemoryDep('buf1772', c0, {c0: 128})]
op1772.unmet_dependencies = [MemoryDep('buf1770', c0, {c0: 1310720})]
op1772.met_dependencies = []
op1772.outputs = [
    buf1772: ComputedBuffer
    buf1772.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1772.users = [
        NodeUser(node=SchedulerNode(name='op1774'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1775'), can_inplace=False, is_weak=False),
    ]
]
op1772.group.device = cuda:0
op1772.group.iteration = (128, 10240)
op1772.sizes = ([128], [10240])
buf1770_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1772_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1772_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1770', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1772', get_index_1, getitem_1)
        return store_reduction


op1774: SchedulerNode(ComputedBuffer)
op1774.writes = [MemoryDep('buf1774', c0, {c0: 128})]
op1774.unmet_dependencies = [MemoryDep('buf1772', c0, {c0: 128})]
op1774.met_dependencies = []
op1774.outputs = [
    buf1774: ComputedBuffer
    buf1774.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1774.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1774.group.device = cuda:0
op1774.group.iteration = (128, 1)
op1774.sizes = ([128], [])
buf1772_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1774_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1774_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1772', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1774', get_index_1, rsqrt, None)
        return store


op1775: SchedulerNode(ComputedBuffer)
op1775.writes = [MemoryDep('buf1775', c0, {c0: 1310720})]
op1775.unmet_dependencies = 
    [   MemoryDep('buf1770', c0, {c0: 1310720}),
        MemoryDep('buf1771', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf1772', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op1775.met_dependencies = 
    [   MemoryDep('primals_1184', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1185', c1, {c0: 4, c1: 320})]
op1775.outputs = [
    buf1775: ComputedBuffer
    buf1775.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1775.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1777'), can_inplace=False, is_weak=False),
    ]
]
op1775.group.device = cuda:0
op1775.group.iteration = (1310720, 1)
op1775.sizes = ([4, 320, 1024], [])
buf1770_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1771_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1772_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_1184_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1185_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1775_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1775_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1770', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1771', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1772', get_index_2)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1184', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1185', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1775', get_index_5, add_1, None)
        return store


op1776: ExternKernelSchedulerNode(ExternKernelOut)
op1776.writes = [StarDep(name='buf1776', mode=None)]
op1776.unmet_dependencies = [StarDep(name='buf1775', mode=None)]
op1776.met_dependencies = [StarDep(name='primals_1186', mode=None)]
op1776.outputs = [
    buf1776: ExternKernelOut
    buf1776.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1776.users = [
        NodeUser(node=SchedulerNode(name='op1780'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1781'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1783'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1805'), can_inplace=True, is_weak=False),
    ]
]
op1776.node.kernel = extern_kernels.bmm


op1777: SchedulerNode(ComputedBuffer)
op1777.writes = [MemoryDep('buf1777', c0, {c0: 1310720})]
op1777.unmet_dependencies = [MemoryDep('buf1775', 327680*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 320})]
op1777.met_dependencies = []
op1777.outputs = [
    buf1777: ComputedBuffer
    buf1777.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1777.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1778'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1777.group.device = cuda:0
op1777.group.iteration = (1310720, 1)
op1777.sizes = ([4, 1024, 320], [])
buf1775_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1777_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1777_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 320}
    index0 = 327680*p0 + p1 + 1024*p2
    index1 = 327680*p0 + 320*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1775', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1777', get_index_1, load, None)
        return store


op1778: ExternKernelSchedulerNode(ExternKernelOut)
op1778.writes = [StarDep(name='buf1778', mode=None)]
op1778.unmet_dependencies = [StarDep(name='buf1777', mode=None)]
op1778.met_dependencies = [StarDep(name='primals_1188', mode=None)]
op1778.outputs = [
    buf1778: ExternKernelOut
    buf1778.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1778.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1779'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1778.node.kernel = extern_kernels.mm


op1779: ExternKernelSchedulerNode(ExternKernelOut)
op1779.writes = [StarDep(name='buf1779', mode=None)]
op1779.unmet_dependencies = [StarDep(name='buf1778', mode=None)]
op1779.met_dependencies = [StarDep(name='primals_1189', mode=None)]
op1779.outputs = [
    buf1779: ExternKernelOut
    buf1779.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1779.users = [
        NodeUser(node=SchedulerNode(name='op1780'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1781'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1783'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1805'), can_inplace=True, is_weak=False),
    ]
]
op1779.node.kernel = extern_kernels.mm


op1780: SchedulerNode(ComputedBuffer)
op1780.writes = [MemoryDep('buf1780', c0, {c0: 4096})]
op1780.unmet_dependencies = 
    [   MemoryDep('buf1776', c0, {c0: 1310720}),
        MemoryDep('buf1779', c0, {c0: 1310720})]
op1780.met_dependencies = [MemoryDep('primals_1187', c1, {c0: 4096, c1: 320})]
op1780.outputs = [
    buf1780: ComputedBuffer
    buf1780.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1780.users = [NodeUser(node=SchedulerNode(name='op1783'), can_inplace=False, is_weak=False)]
]
op1780.group.device = cuda:0
op1780.group.iteration = (4096, 320)
op1780.sizes = ([4096], [320])
buf1776_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1187_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1779_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1780_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1780_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1776', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1187', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1779', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1780', get_index_3, getitem)
        return store_reduction


op1781: SchedulerNode(ComputedBuffer)
op1781.writes = [MemoryDep('buf1781', c0, {c0: 4096})]
op1781.unmet_dependencies = 
    [   MemoryDep('buf1776', c0, {c0: 1310720}),
        MemoryDep('buf1779', c0, {c0: 1310720})]
op1781.met_dependencies = [MemoryDep('primals_1187', c1, {c0: 4096, c1: 320})]
op1781.outputs = [
    buf1781: ComputedBuffer
    buf1781.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1781.users = [
        NodeUser(node=SchedulerNode(name='op1783'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2071'), can_inplace=True, is_weak=False),
    ]
]
op1781.group.device = cuda:0
op1781.group.iteration = (4096, 320)
op1781.sizes = ([4096], [320])
buf1776_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1187_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1779_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1781_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1781_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1776', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1187', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1779', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1781', get_index_3, getitem_1)
        return store_reduction


op1783: SchedulerNode(ComputedBuffer)
op1783.writes = [MemoryDep('buf1783', c0, {c0: 1310720})]
op1783.unmet_dependencies = 
    [   MemoryDep('buf1776', c0, {c0: 1310720}),
        MemoryDep('buf1779', c0, {c0: 1310720}),
        MemoryDep('buf1780', c0, {c0: 4096}),
        MemoryDep('buf1781', c0, {c0: 4096})]
op1783.met_dependencies = [MemoryDep('primals_1187', c1, {c0: 4096, c1: 320})]
op1783.outputs = [
    buf1783: ComputedBuffer
    buf1783.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1783.users = [
        NodeUser(node=SchedulerNode(name='op1784'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1783.group.device = cuda:0
op1783.group.iteration = (1310720, 1)
op1783.sizes = ([4096, 320], [])
buf1776_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1187_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1779_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1780_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1781_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1783_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1783_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1776', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1187', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1779', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1780', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1781', get_index_4)
        constant_1 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1783', get_index_5, mul_1, None)
        return store


op1784: SchedulerNode(ComputedBuffer)
op1784.writes = [MemoryDep('buf1784', c0, {c0: 1310720})]
op1784.unmet_dependencies = [MemoryDep('buf1783', c0, {c0: 1310720})]
op1784.met_dependencies = 
    [   MemoryDep('primals_1190', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1191', c1, {c0: 4096, c1: 320})]
op1784.outputs = [
    buf1784: ComputedBuffer
    buf1784.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1784.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1785'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1786'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1788'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1789'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1791'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1792'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1784.group.device = cuda:0
op1784.group.iteration = (1310720, 1)
op1784.sizes = ([4096, 320], [])
buf1783_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1190_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1191_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1784_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1784_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1783', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1190', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1191', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1784', get_index_3, add, None)
        return store


op1785: ExternKernelSchedulerNode(ExternKernelOut)
op1785.writes = [StarDep(name='buf1785', mode=None)]
op1785.unmet_dependencies = [StarDep(name='buf1784', mode=None)]
op1785.met_dependencies = [StarDep(name='primals_1192', mode=None)]
op1785.outputs = [
    buf1785: ExternKernelOut
    buf1785.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1785.users = [NodeUser(node=SchedulerNode(name='op1794'), can_inplace=True, is_weak=False)]
]
op1785.node.kernel = extern_kernels.mm


op1786: ExternKernelSchedulerNode(ExternKernelOut)
op1786.writes = [StarDep(name='buf1786', mode=None)]
op1786.unmet_dependencies = [StarDep(name='buf1784', mode=None)]
op1786.met_dependencies = [StarDep(name='primals_1193', mode=None)]
op1786.outputs = [
    buf1786: ExternKernelOut
    buf1786.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1786.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1787'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1786.node.kernel = extern_kernels.mm


op1787: ExternKernelSchedulerNode(ExternKernelOut)
op1787.writes = [StarDep(name='buf1787', mode=None)]
op1787.unmet_dependencies = [StarDep(name='buf1786', mode=None)]
op1787.met_dependencies = [StarDep(name='primals_1194', mode=None)]
op1787.outputs = [
    buf1787: ExternKernelOut
    buf1787.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1787.users = [NodeUser(node=SchedulerNode(name='op1794'), can_inplace=True, is_weak=False)]
]
op1787.node.kernel = extern_kernels.mm


op1788: ExternKernelSchedulerNode(ExternKernelOut)
op1788.writes = [StarDep(name='buf1788', mode=None)]
op1788.unmet_dependencies = [StarDep(name='buf1784', mode=None)]
op1788.met_dependencies = [StarDep(name='primals_1195', mode=None)]
op1788.outputs = [
    buf1788: ExternKernelOut
    buf1788.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1788.users = [NodeUser(node=SchedulerNode(name='op1795'), can_inplace=True, is_weak=False)]
]
op1788.node.kernel = extern_kernels.mm


op1789: ExternKernelSchedulerNode(ExternKernelOut)
op1789.writes = [StarDep(name='buf1789', mode=None)]
op1789.unmet_dependencies = [StarDep(name='buf1784', mode=None)]
op1789.met_dependencies = [StarDep(name='primals_1196', mode=None)]
op1789.outputs = [
    buf1789: ExternKernelOut
    buf1789.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1789.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1790'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1789.node.kernel = extern_kernels.mm


op1790: ExternKernelSchedulerNode(ExternKernelOut)
op1790.writes = [StarDep(name='buf1790', mode=None)]
op1790.unmet_dependencies = [StarDep(name='buf1789', mode=None)]
op1790.met_dependencies = [StarDep(name='primals_1197', mode=None)]
op1790.outputs = [
    buf1790: ExternKernelOut
    buf1790.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1790.users = [NodeUser(node=SchedulerNode(name='op1795'), can_inplace=True, is_weak=False)]
]
op1790.node.kernel = extern_kernels.mm


op1791: ExternKernelSchedulerNode(ExternKernelOut)
op1791.writes = [StarDep(name='buf1791', mode=None)]
op1791.unmet_dependencies = [StarDep(name='buf1784', mode=None)]
op1791.met_dependencies = [StarDep(name='primals_1198', mode=None)]
op1791.outputs = [
    buf1791: ExternKernelOut
    buf1791.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1791.users = [NodeUser(node=SchedulerNode(name='op1796'), can_inplace=True, is_weak=False)]
]
op1791.node.kernel = extern_kernels.mm


op1792: ExternKernelSchedulerNode(ExternKernelOut)
op1792.writes = [StarDep(name='buf1792', mode=None)]
op1792.unmet_dependencies = [StarDep(name='buf1784', mode=None)]
op1792.met_dependencies = [StarDep(name='primals_1199', mode=None)]
op1792.outputs = [
    buf1792: ExternKernelOut
    buf1792.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1792.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1793'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1792.node.kernel = extern_kernels.mm


op1793: ExternKernelSchedulerNode(ExternKernelOut)
op1793.writes = [StarDep(name='buf1793', mode=None)]
op1793.unmet_dependencies = [StarDep(name='buf1792', mode=None)]
op1793.met_dependencies = [StarDep(name='primals_1200', mode=None)]
op1793.outputs = [
    buf1793: ExternKernelOut
    buf1793.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1793.users = [NodeUser(node=SchedulerNode(name='op1796'), can_inplace=True, is_weak=False)]
]
op1793.node.kernel = extern_kernels.mm


op1794: SchedulerNode(ComputedBuffer)
op1794.writes = [MemoryDep('buf1794', c0, {c0: 1310720})]
op1794.unmet_dependencies = 
    [   MemoryDep('buf1785', c0, {c0: 1310720}),
        MemoryDep('buf1787', c0, {c0: 1310720})]
op1794.met_dependencies = []
op1794.outputs = [
    buf1794: ComputedBuffer
    buf1794.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1794.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1797'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1794.group.device = cuda:0
op1794.group.iteration = (1310720, 1)
op1794.sizes = ([1310720], [])
buf1785_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1787_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1794_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1794_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1785', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1787', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1794', get_index_2, add, None)
        return store


op1795: SchedulerNode(ComputedBuffer)
op1795.writes = [MemoryDep('buf1795', c0, {c0: 1310720})]
op1795.unmet_dependencies = 
    [   MemoryDep('buf1788', c0, {c0: 1310720}),
        MemoryDep('buf1790', c0, {c0: 1310720})]
op1795.met_dependencies = []
op1795.outputs = [
    buf1795: ComputedBuffer
    buf1795.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1795.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1797'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1795.group.device = cuda:0
op1795.group.iteration = (1310720, 1)
op1795.sizes = ([1310720], [])
buf1788_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1790_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1795_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1795_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1788', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1790', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1795', get_index_2, add, None)
        return store


op1796: SchedulerNode(ComputedBuffer)
op1796.writes = [MemoryDep('buf1796', c0, {c0: 1310720})]
op1796.unmet_dependencies = 
    [   MemoryDep('buf1791', c0, {c0: 1310720}),
        MemoryDep('buf1793', c0, {c0: 1310720})]
op1796.met_dependencies = []
op1796.outputs = [
    buf1796: ComputedBuffer
    buf1796.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1796.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1797'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1796.group.device = cuda:0
op1796.group.iteration = (1310720, 1)
op1796.sizes = ([1310720], [])
buf1791_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1793_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1796_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1796_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1791', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1793', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1796', get_index_2, add, None)
        return store


op1797: ExternKernelSchedulerNode(FallbackKernel)
op1797.writes = [StarDep(name='buf1797', mode=None)]
op1797.unmet_dependencies = 
    [   StarDep(name='buf1794', mode=None),
        StarDep(name='buf1795', mode=None),
        StarDep(name='buf1796', mode=None)]
op1797.met_dependencies = []
op1797.outputs = [
    buf1797: FallbackKernel
    buf1797.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1797.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1798'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1799'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1800'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1801'), can_inplace=False, is_weak=False),
    ]
]
op1797.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1798: ExternKernelSchedulerNode(MultiOutput)
op1798.writes = [StarDep(name='buf1798', mode=None)]
op1798.unmet_dependencies = [StarDep(name='buf1797', mode=None)]
op1798.met_dependencies = []
op1798.outputs = [
    buf1798: MultiOutput
    buf1798.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf1798.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1802'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1803'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1798.node.kernel = None


op1799: ExternKernelSchedulerNode(MultiOutput)
op1799.writes = [StarDep(name='buf1799', mode=None)]
op1799.unmet_dependencies = [StarDep(name='buf1797', mode=None)]
op1799.met_dependencies = []
op1799.outputs = [
    buf1799: MultiOutput
    buf1799.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf1799.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1799.node.kernel = None


op1800: ExternKernelSchedulerNode(MultiOutput)
op1800.writes = [StarDep(name='buf1800', mode=None)]
op1800.unmet_dependencies = [StarDep(name='buf1797', mode=None)]
op1800.met_dependencies = []
op1800.outputs = [
    buf1800: MultiOutput
    buf1800.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1800.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1800.node.kernel = None


op1801: ExternKernelSchedulerNode(MultiOutput)
op1801.writes = [StarDep(name='buf1801', mode=None)]
op1801.unmet_dependencies = [StarDep(name='buf1797', mode=None)]
op1801.met_dependencies = []
op1801.outputs = [
    buf1801: MultiOutput
    buf1801.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1801.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1801.node.kernel = None


op1802: ExternKernelSchedulerNode(ExternKernelOut)
op1802.writes = [StarDep(name='buf1802', mode=None)]
op1802.unmet_dependencies = [StarDep(name='buf1798', mode=None)]
op1802.met_dependencies = [StarDep(name='primals_1201', mode=None)]
op1802.outputs = [
    buf1802: ExternKernelOut
    buf1802.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1802.users = [NodeUser(node=SchedulerNode(name='op1805'), can_inplace=True, is_weak=False)]
]
op1802.node.kernel = extern_kernels.mm


op1803: ExternKernelSchedulerNode(ExternKernelOut)
op1803.writes = [StarDep(name='buf1803', mode=None)]
op1803.unmet_dependencies = [StarDep(name='buf1798', mode=None)]
op1803.met_dependencies = [StarDep(name='primals_1203', mode=None)]
op1803.outputs = [
    buf1803: ExternKernelOut
    buf1803.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1803.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1804'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1803.node.kernel = extern_kernels.mm


op1804: ExternKernelSchedulerNode(ExternKernelOut)
op1804.writes = [StarDep(name='buf1804', mode=None)]
op1804.unmet_dependencies = [StarDep(name='buf1803', mode=None)]
op1804.met_dependencies = [StarDep(name='primals_1204', mode=None)]
op1804.outputs = [
    buf1804: ExternKernelOut
    buf1804.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1804.users = [NodeUser(node=SchedulerNode(name='op1805'), can_inplace=True, is_weak=False)]
]
op1804.node.kernel = extern_kernels.mm


op1805: SchedulerNode(ComputedBuffer)
op1805.writes = [MemoryDep('buf1805', c0, {c0: 1310720})]
op1805.unmet_dependencies = 
    [   MemoryDep('buf1776', c0, {c0: 1310720}),
        MemoryDep('buf1779', c0, {c0: 1310720}),
        MemoryDep('buf1802', c0, {c0: 1310720}),
        MemoryDep('buf1804', c0, {c0: 1310720})]
op1805.met_dependencies = 
    [   MemoryDep('primals_1187', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1202', c1, {c0: 4096, c1: 320})]
op1805.outputs = [
    buf1805: ComputedBuffer
    buf1805.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1805.users = [
        NodeUser(node=SchedulerNode(name='op1806'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1809'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1831'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1832'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1834'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1844'), can_inplace=True, is_weak=False),
    ]
]
op1805.group.device = cuda:0
op1805.group.iteration = (1310720, 1)
op1805.sizes = ([4096, 320], [])
buf1802_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1202_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1804_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1776_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1187_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1779_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1805_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1802', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1804', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1776', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1187', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1779', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1805', get_index_6, add_4, None)
        return store


op1806: SchedulerNode(ComputedBuffer)
op1806.writes = [MemoryDep('buf1806', c0, {c0: 4096})]
op1806.unmet_dependencies = [MemoryDep('buf1805', c0, {c0: 1310720})]
op1806.met_dependencies = []
op1806.outputs = [
    buf1806: ComputedBuffer
    buf1806.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1806.users = [NodeUser(node=SchedulerNode(name='op1809'), can_inplace=False, is_weak=False)]
]
op1806.group.device = cuda:0
op1806.group.iteration = (4096, 320)
op1806.sizes = ([4096], [320])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1806_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1806_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1805', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1806', get_index_1, getitem)
        return store_reduction


op1807: SchedulerNode(ComputedBuffer)
op1807.writes = [MemoryDep('buf1807', c0, {c0: 4096})]
op1807.unmet_dependencies = [MemoryDep('buf1805', c0, {c0: 1310720})]
op1807.met_dependencies = []
op1807.outputs = [
    buf1807: ComputedBuffer
    buf1807.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1807.users = [
        NodeUser(node=SchedulerNode(name='op1809'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2070'), can_inplace=True, is_weak=False),
    ]
]
op1807.group.device = cuda:0
op1807.group.iteration = (4096, 320)
op1807.sizes = ([4096], [320])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1807_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1807_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1805', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1807', get_index_1, getitem_1)
        return store_reduction


op1809: SchedulerNode(ComputedBuffer)
op1809.writes = [MemoryDep('buf1809', c0, {c0: 1310720})]
op1809.unmet_dependencies = 
    [   MemoryDep('buf1805', c0, {c0: 1310720}),
        MemoryDep('buf1806', c0, {c0: 4096}),
        MemoryDep('buf1807', c0, {c0: 4096})]
op1809.met_dependencies = []
op1809.outputs = [
    buf1809: ComputedBuffer
    buf1809.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1809.users = [
        NodeUser(node=SchedulerNode(name='op1810'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1809.group.device = cuda:0
op1809.group.iteration = (1310720, 1)
op1809.sizes = ([4096, 320], [])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1806_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1807_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1809_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1809_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1805', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1806', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1807', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1809', get_index_3, mul, None)
        return store


op1810: SchedulerNode(ComputedBuffer)
op1810.writes = [MemoryDep('buf1810', c0, {c0: 1310720})]
op1810.unmet_dependencies = [MemoryDep('buf1809', c0, {c0: 1310720})]
op1810.met_dependencies = 
    [   MemoryDep('primals_1205', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1206', c1, {c0: 4096, c1: 320})]
op1810.outputs = [
    buf1810: ComputedBuffer
    buf1810.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1810.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1811'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1812'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1810.group.device = cuda:0
op1810.group.iteration = (1310720, 1)
op1810.sizes = ([4096, 320], [])
buf1809_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1205_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1206_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1810_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1810_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1809', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1205', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1206', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1810', get_index_3, add, None)
        return store


op1811: ExternKernelSchedulerNode(ExternKernelOut)
op1811.writes = [StarDep(name='buf1811', mode=None)]
op1811.unmet_dependencies = [StarDep(name='buf1810', mode=None)]
op1811.met_dependencies = [StarDep(name='primals_1207', mode=None)]
op1811.outputs = [
    buf1811: ExternKernelOut
    buf1811.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1811.users = [NodeUser(node=SchedulerNode(name='op1820'), can_inplace=True, is_weak=False)]
]
op1811.node.kernel = extern_kernels.mm


op1812: ExternKernelSchedulerNode(ExternKernelOut)
op1812.writes = [StarDep(name='buf1812', mode=None)]
op1812.unmet_dependencies = [StarDep(name='buf1810', mode=None)]
op1812.met_dependencies = [StarDep(name='primals_1208', mode=None)]
op1812.outputs = [
    buf1812: ExternKernelOut
    buf1812.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1812.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1813'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1812.node.kernel = extern_kernels.mm


op1813: ExternKernelSchedulerNode(ExternKernelOut)
op1813.writes = [StarDep(name='buf1813', mode=None)]
op1813.unmet_dependencies = [StarDep(name='buf1812', mode=None)]
op1813.met_dependencies = [StarDep(name='primals_1209', mode=None)]
op1813.outputs = [
    buf1813: ExternKernelOut
    buf1813.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1813.users = [NodeUser(node=SchedulerNode(name='op1820'), can_inplace=True, is_weak=False)]
]
op1813.node.kernel = extern_kernels.mm


op1814: ExternKernelSchedulerNode(ExternKernelOut)
op1814.writes = [StarDep(name='buf1814', mode=None)]
op1814.unmet_dependencies = []
op1814.met_dependencies = 
    [   StarDep(name='primals_1210', mode=None),
        StarDep(name='primals_177', mode=None)]
op1814.outputs = [
    buf1814: ExternKernelOut
    buf1814.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1814.users = [NodeUser(node=SchedulerNode(name='op1821'), can_inplace=True, is_weak=False)]
]
op1814.node.kernel = extern_kernels.mm


op1815: ExternKernelSchedulerNode(ExternKernelOut)
op1815.writes = [StarDep(name='buf1815', mode=None)]
op1815.unmet_dependencies = []
op1815.met_dependencies = 
    [   StarDep(name='primals_1211', mode=None),
        StarDep(name='primals_177', mode=None)]
op1815.outputs = [
    buf1815: ExternKernelOut
    buf1815.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1815.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1816'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1815.node.kernel = extern_kernels.mm


op1816: ExternKernelSchedulerNode(ExternKernelOut)
op1816.writes = [StarDep(name='buf1816', mode=None)]
op1816.unmet_dependencies = [StarDep(name='buf1815', mode=None)]
op1816.met_dependencies = [StarDep(name='primals_1212', mode=None)]
op1816.outputs = [
    buf1816: ExternKernelOut
    buf1816.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1816.users = [NodeUser(node=SchedulerNode(name='op1821'), can_inplace=True, is_weak=False)]
]
op1816.node.kernel = extern_kernels.mm


op1817: ExternKernelSchedulerNode(ExternKernelOut)
op1817.writes = [StarDep(name='buf1817', mode=None)]
op1817.unmet_dependencies = []
op1817.met_dependencies = 
    [   StarDep(name='primals_1213', mode=None),
        StarDep(name='primals_177', mode=None)]
op1817.outputs = [
    buf1817: ExternKernelOut
    buf1817.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1817.users = [NodeUser(node=SchedulerNode(name='op1822'), can_inplace=True, is_weak=False)]
]
op1817.node.kernel = extern_kernels.mm


op1818: ExternKernelSchedulerNode(ExternKernelOut)
op1818.writes = [StarDep(name='buf1818', mode=None)]
op1818.unmet_dependencies = []
op1818.met_dependencies = 
    [   StarDep(name='primals_1214', mode=None),
        StarDep(name='primals_177', mode=None)]
op1818.outputs = [
    buf1818: ExternKernelOut
    buf1818.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1818.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1819'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1818.node.kernel = extern_kernels.mm


op1819: ExternKernelSchedulerNode(ExternKernelOut)
op1819.writes = [StarDep(name='buf1819', mode=None)]
op1819.unmet_dependencies = [StarDep(name='buf1818', mode=None)]
op1819.met_dependencies = [StarDep(name='primals_1215', mode=None)]
op1819.outputs = [
    buf1819: ExternKernelOut
    buf1819.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1819.users = [NodeUser(node=SchedulerNode(name='op1822'), can_inplace=True, is_weak=False)]
]
op1819.node.kernel = extern_kernels.mm


op1820: SchedulerNode(ComputedBuffer)
op1820.writes = [MemoryDep('buf1820', c0, {c0: 1310720})]
op1820.unmet_dependencies = 
    [   MemoryDep('buf1811', c0, {c0: 1310720}),
        MemoryDep('buf1813', c0, {c0: 1310720})]
op1820.met_dependencies = []
op1820.outputs = [
    buf1820: ComputedBuffer
    buf1820.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1820.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1823'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1820.group.device = cuda:0
op1820.group.iteration = (1310720, 1)
op1820.sizes = ([1310720], [])
buf1811_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1813_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1820_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1820_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1811', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1813', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1820', get_index_2, add, None)
        return store


op1821: SchedulerNode(ComputedBuffer)
op1821.writes = [MemoryDep('buf1821', c0, {c0: 98560})]
op1821.unmet_dependencies = [MemoryDep('buf1814', c0, {c0: 98560}), MemoryDep('buf1816', c0, {c0: 98560})]
op1821.met_dependencies = []
op1821.outputs = [
    buf1821: ComputedBuffer
    buf1821.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf1821.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1823'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1821.group.device = cuda:0
op1821.group.iteration = (98560, 1)
op1821.sizes = ([98560], [])
buf1814_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1816_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1821_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op1821_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1814', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1816', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1821', get_index_2, add, None)
        return store


op1822: SchedulerNode(ComputedBuffer)
op1822.writes = [MemoryDep('buf1822', c0, {c0: 98560})]
op1822.unmet_dependencies = [MemoryDep('buf1817', c0, {c0: 98560}), MemoryDep('buf1819', c0, {c0: 98560})]
op1822.met_dependencies = []
op1822.outputs = [
    buf1822: ComputedBuffer
    buf1822.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf1822.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1823'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1822.group.device = cuda:0
op1822.group.iteration = (98560, 1)
op1822.sizes = ([98560], [])
buf1817_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1819_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1822_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op1822_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1817', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1819', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1822', get_index_2, add, None)
        return store


op1823: ExternKernelSchedulerNode(FallbackKernel)
op1823.writes = [StarDep(name='buf1823', mode=None)]
op1823.unmet_dependencies = 
    [   StarDep(name='buf1820', mode=None),
        StarDep(name='buf1821', mode=None),
        StarDep(name='buf1822', mode=None)]
op1823.met_dependencies = []
op1823.outputs = [
    buf1823: FallbackKernel
    buf1823.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1823.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1824'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1825'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1826'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1827'), can_inplace=False, is_weak=False),
    ]
]
op1823.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1824: ExternKernelSchedulerNode(MultiOutput)
op1824.writes = [StarDep(name='buf1824', mode=None)]
op1824.unmet_dependencies = [StarDep(name='buf1823', mode=None)]
op1824.met_dependencies = []
op1824.outputs = [
    buf1824: MultiOutput
    buf1824.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf1824.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1828'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1829'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1824.node.kernel = None


op1825: ExternKernelSchedulerNode(MultiOutput)
op1825.writes = [StarDep(name='buf1825', mode=None)]
op1825.unmet_dependencies = [StarDep(name='buf1823', mode=None)]
op1825.met_dependencies = []
op1825.outputs = [
    buf1825: MultiOutput
    buf1825.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf1825.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1825.node.kernel = None


op1826: ExternKernelSchedulerNode(MultiOutput)
op1826.writes = [StarDep(name='buf1826', mode=None)]
op1826.unmet_dependencies = [StarDep(name='buf1823', mode=None)]
op1826.met_dependencies = []
op1826.outputs = [
    buf1826: MultiOutput
    buf1826.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1826.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1826.node.kernel = None


op1827: ExternKernelSchedulerNode(MultiOutput)
op1827.writes = [StarDep(name='buf1827', mode=None)]
op1827.unmet_dependencies = [StarDep(name='buf1823', mode=None)]
op1827.met_dependencies = []
op1827.outputs = [
    buf1827: MultiOutput
    buf1827.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1827.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1827.node.kernel = None


op1828: ExternKernelSchedulerNode(ExternKernelOut)
op1828.writes = [StarDep(name='buf1828', mode=None)]
op1828.unmet_dependencies = [StarDep(name='buf1824', mode=None)]
op1828.met_dependencies = [StarDep(name='primals_1216', mode=None)]
op1828.outputs = [
    buf1828: ExternKernelOut
    buf1828.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1828.users = [
        NodeUser(node=SchedulerNode(name='op1831'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1832'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1834'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1844'), can_inplace=True, is_weak=False),
    ]
]
op1828.node.kernel = extern_kernels.mm


op1829: ExternKernelSchedulerNode(ExternKernelOut)
op1829.writes = [StarDep(name='buf1829', mode=None)]
op1829.unmet_dependencies = [StarDep(name='buf1824', mode=None)]
op1829.met_dependencies = [StarDep(name='primals_1218', mode=None)]
op1829.outputs = [
    buf1829: ExternKernelOut
    buf1829.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1829.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1830'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1829.node.kernel = extern_kernels.mm


op1830: ExternKernelSchedulerNode(ExternKernelOut)
op1830.writes = [StarDep(name='buf1830', mode=None)]
op1830.unmet_dependencies = [StarDep(name='buf1829', mode=None)]
op1830.met_dependencies = [StarDep(name='primals_1219', mode=None)]
op1830.outputs = [
    buf1830: ExternKernelOut
    buf1830.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1830.users = [
        NodeUser(node=SchedulerNode(name='op1831'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1832'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1834'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1844'), can_inplace=True, is_weak=False),
    ]
]
op1830.node.kernel = extern_kernels.mm


op1831: SchedulerNode(ComputedBuffer)
op1831.writes = [MemoryDep('buf1831', c0, {c0: 4096})]
op1831.unmet_dependencies = 
    [   MemoryDep('buf1805', c0, {c0: 1310720}),
        MemoryDep('buf1828', c0, {c0: 1310720}),
        MemoryDep('buf1830', c0, {c0: 1310720})]
op1831.met_dependencies = [MemoryDep('primals_1217', c1, {c0: 4096, c1: 320})]
op1831.outputs = [
    buf1831: ComputedBuffer
    buf1831.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1831.users = [NodeUser(node=SchedulerNode(name='op1834'), can_inplace=False, is_weak=False)]
]
op1831.group.device = cuda:0
op1831.group.iteration = (4096, 320)
op1831.sizes = ([4096], [320])
buf1828_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1217_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1830_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1831_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1831_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1828', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1217', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1830', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1805', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1831', get_index_4, getitem)
        return store_reduction


op1832: SchedulerNode(ComputedBuffer)
op1832.writes = [MemoryDep('buf1832', c0, {c0: 4096})]
op1832.unmet_dependencies = 
    [   MemoryDep('buf1805', c0, {c0: 1310720}),
        MemoryDep('buf1828', c0, {c0: 1310720}),
        MemoryDep('buf1830', c0, {c0: 1310720})]
op1832.met_dependencies = [MemoryDep('primals_1217', c1, {c0: 4096, c1: 320})]
op1832.outputs = [
    buf1832: ComputedBuffer
    buf1832.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1832.users = [
        NodeUser(node=SchedulerNode(name='op1834'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2069'), can_inplace=True, is_weak=False),
    ]
]
op1832.group.device = cuda:0
op1832.group.iteration = (4096, 320)
op1832.sizes = ([4096], [320])
buf1828_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1217_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1830_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1832_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1832_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1828', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1217', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1830', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1805', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1832', get_index_4, getitem_1)
        return store_reduction


op1834: SchedulerNode(ComputedBuffer)
op1834.writes = [MemoryDep('buf1834', c0, {c0: 1310720})]
op1834.unmet_dependencies = 
    [   MemoryDep('buf1805', c0, {c0: 1310720}),
        MemoryDep('buf1828', c0, {c0: 1310720}),
        MemoryDep('buf1830', c0, {c0: 1310720}),
        MemoryDep('buf1831', c0, {c0: 4096}),
        MemoryDep('buf1832', c0, {c0: 4096})]
op1834.met_dependencies = [MemoryDep('primals_1217', c1, {c0: 4096, c1: 320})]
op1834.outputs = [
    buf1834: ComputedBuffer
    buf1834.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1834.users = [
        NodeUser(node=SchedulerNode(name='op1835'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1834.group.device = cuda:0
op1834.group.iteration = (1310720, 1)
op1834.sizes = ([4096, 320], [])
buf1828_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1217_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1830_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1831_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1832_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1834_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1834_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1828', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1217', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1830', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1805', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1831', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1832', get_index_5)
        constant_2 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1834', get_index_6, mul_2, None)
        return store


op1835: SchedulerNode(ComputedBuffer)
op1835.writes = [MemoryDep('buf1835', c0, {c0: 1310720})]
op1835.unmet_dependencies = [MemoryDep('buf1834', c0, {c0: 1310720})]
op1835.met_dependencies = 
    [   MemoryDep('primals_1220', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1221', c1, {c0: 4096, c1: 320})]
op1835.outputs = [
    buf1835: ComputedBuffer
    buf1835.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1835.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1836'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1837'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1835.group.device = cuda:0
op1835.group.iteration = (1310720, 1)
op1835.sizes = ([4096, 320], [])
buf1834_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1220_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1221_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1835_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1835_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1834', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1220', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1221', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1835', get_index_3, add, None)
        return store


op1836: ExternKernelSchedulerNode(ExternKernelOut)
op1836.writes = [StarDep(name='buf1836', mode=None)]
op1836.unmet_dependencies = [StarDep(name='buf1835', mode=None)]
op1836.met_dependencies = [StarDep(name='primals_1222', mode=None)]
op1836.outputs = [
    buf1836: ExternKernelOut
    buf1836.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf1836.users = [NodeUser(node=SchedulerNode(name='op1839'), can_inplace=True, is_weak=False)]
]
op1836.node.kernel = extern_kernels.mm


op1837: ExternKernelSchedulerNode(ExternKernelOut)
op1837.writes = [StarDep(name='buf1837', mode=None)]
op1837.unmet_dependencies = [StarDep(name='buf1835', mode=None)]
op1837.met_dependencies = [StarDep(name='primals_1224', mode=None)]
op1837.outputs = [
    buf1837: ExternKernelOut
    buf1837.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1837.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1838'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1837.node.kernel = extern_kernels.mm


op1838: ExternKernelSchedulerNode(ExternKernelOut)
op1838.writes = [StarDep(name='buf1838', mode=None)]
op1838.unmet_dependencies = [StarDep(name='buf1837', mode=None)]
op1838.met_dependencies = [StarDep(name='primals_1225', mode=None)]
op1838.outputs = [
    buf1838: ExternKernelOut
    buf1838.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf1838.users = [NodeUser(node=SchedulerNode(name='op1839'), can_inplace=True, is_weak=False)]
]
op1838.node.kernel = extern_kernels.mm


op1839: SchedulerNode(ComputedBuffer)
op1839.writes = [MemoryDep('buf1839', c0, {c0: 10485760})]
op1839.unmet_dependencies = 
    [   MemoryDep('buf1836', c0, {c0: 10485760}),
        MemoryDep('buf1838', c0, {c0: 10485760})]
op1839.met_dependencies = [MemoryDep('primals_1223', c1, {c0: 4096, c1: 2560})]
op1839.outputs = [
    buf1839: ComputedBuffer
    buf1839.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
    buf1839.users = [
        NodeUser(node=SchedulerNode(name='op1840'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1839.group.device = cuda:0
op1839.group.iteration = (10485760, 1)
op1839.sizes = ([4096, 2560], [])
buf1836_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
primals_1223_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1838_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
buf1839_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
class op1839_loop_body:
    var_ranges = {p0: 4096, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1836', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1223', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1838', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1839', get_index_3, add_1, None)
        return store


op1840: SchedulerNode(ComputedBuffer)
op1840.writes = [MemoryDep('buf1840', c0, {c0: 5242880})]
op1840.unmet_dependencies = 
    [   MemoryDep('buf1839', 2560*c0 + c1 + 1280, {c0: 4096, c1: 1280}),
        MemoryDep('buf1839', 2560*c0 + c1, {c0: 4096, c1: 1280})]
op1840.met_dependencies = []
op1840.outputs = [
    buf1840: ComputedBuffer
    buf1840.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
    buf1840.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1841'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1842'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1840.group.device = cuda:0
op1840.group.iteration = (5242880, 1)
op1840.sizes = ([4096, 1280], [])
buf1839_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf1839_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf1840_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
class op1840_loop_body:
    var_ranges = {p0: 4096, p1: 1280}
    index0 = 2560*p0 + p1
    index1 = 2560*p0 + p1 + 1280
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1839', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1839', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1839', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1840', get_index_3, mul_3, None)
        return store


op1841: ExternKernelSchedulerNode(ExternKernelOut)
op1841.writes = [StarDep(name='buf1841', mode=None)]
op1841.unmet_dependencies = [StarDep(name='buf1840', mode=None)]
op1841.met_dependencies = [StarDep(name='primals_1226', mode=None)]
op1841.outputs = [
    buf1841: ExternKernelOut
    buf1841.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1841.users = [NodeUser(node=SchedulerNode(name='op1844'), can_inplace=True, is_weak=False)]
]
op1841.node.kernel = extern_kernels.mm


op1842: ExternKernelSchedulerNode(ExternKernelOut)
op1842.writes = [StarDep(name='buf1842', mode=None)]
op1842.unmet_dependencies = [StarDep(name='buf1840', mode=None)]
op1842.met_dependencies = [StarDep(name='primals_1228', mode=None)]
op1842.outputs = [
    buf1842: ExternKernelOut
    buf1842.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1842.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1843'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1842.node.kernel = extern_kernels.mm


op1843: ExternKernelSchedulerNode(ExternKernelOut)
op1843.writes = [StarDep(name='buf1843', mode=None)]
op1843.unmet_dependencies = [StarDep(name='buf1842', mode=None)]
op1843.met_dependencies = [StarDep(name='primals_1229', mode=None)]
op1843.outputs = [
    buf1843: ExternKernelOut
    buf1843.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1843.users = [NodeUser(node=SchedulerNode(name='op1844'), can_inplace=True, is_weak=False)]
]
op1843.node.kernel = extern_kernels.mm


op1844: SchedulerNode(ComputedBuffer)
op1844.writes = [MemoryDep('buf1844', c0, {c0: 1310720})]
op1844.unmet_dependencies = 
    [   MemoryDep('buf1805', c0, {c0: 1310720}),
        MemoryDep('buf1828', c0, {c0: 1310720}),
        MemoryDep('buf1830', c0, {c0: 1310720}),
        MemoryDep('buf1841', c0, {c0: 1310720}),
        MemoryDep('buf1843', c0, {c0: 1310720})]
op1844.met_dependencies = 
    [   MemoryDep('primals_1217', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1227', c1, {c0: 4096, c1: 320})]
op1844.outputs = [
    buf1844: ComputedBuffer
    buf1844.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1844.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1845'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1846'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1844.group.device = cuda:0
op1844.group.iteration = (1310720, 1)
op1844.sizes = ([4096, 320], [])
buf1841_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1227_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1843_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1828_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1217_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1830_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1805_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1844_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1844_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1841', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1227', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1843', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1828', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1217', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1830', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1805', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1844', get_index_7, add_5, None)
        return store


op1845: ExternKernelSchedulerNode(ExternKernelOut)
op1845.writes = [StarDep(name='buf1845', mode=None)]
op1845.unmet_dependencies = [StarDep(name='buf1844', mode=None)]
op1845.met_dependencies = [StarDep(name='primals_1230', mode=None)]
op1845.outputs = [
    buf1845: ExternKernelOut
    buf1845.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1845.users = [NodeUser(node=SchedulerNode(name='op1848'), can_inplace=False, is_weak=False)]
]
op1845.node.kernel = extern_kernels.mm


op1846: ExternKernelSchedulerNode(ExternKernelOut)
op1846.writes = [StarDep(name='buf1846', mode=None)]
op1846.unmet_dependencies = [StarDep(name='buf1844', mode=None)]
op1846.met_dependencies = [StarDep(name='primals_1232', mode=None)]
op1846.outputs = [
    buf1846: ExternKernelOut
    buf1846.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1846.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1847'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1846.node.kernel = extern_kernels.mm


op1847: ExternKernelSchedulerNode(ExternKernelOut)
op1847.writes = [StarDep(name='buf1847', mode=None)]
op1847.unmet_dependencies = [StarDep(name='buf1846', mode=None)]
op1847.met_dependencies = [StarDep(name='primals_1233', mode=None)]
op1847.outputs = [
    buf1847: ExternKernelOut
    buf1847.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1847.users = [NodeUser(node=SchedulerNode(name='op1848'), can_inplace=False, is_weak=False)]
]
op1847.node.kernel = extern_kernels.mm


op1848: SchedulerNode(ComputedBuffer)
op1848.writes = [MemoryDep('buf1848', c0, {c0: 2621440})]
op1848.unmet_dependencies = 
    [   MemoryDep('buf1770', 327680*c0 + c2 + 1024*(I), {c0: 4, c1: 640, c2: 1024}),
        MemoryDep('buf1845', 327680*c0 + 320*c2 + (I), {c0: 4, c1: 640, c2: 1024}),
        MemoryDep('buf1847', 327680*c0 + 320*c2 + (I), {c0: 4, c1: 640, c2: 1024}),
        MemoryDep('buf372', 327680*c0 + c2 + 1024*(I), {c0: 4, c1: 640, c2: 1024})]
op1848.met_dependencies = [MemoryDep('primals_1231', I, {c0: 4, c1: 640})]
op1848.outputs = [
    buf1848: ComputedBuffer
    buf1848.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1848.users = [
        NodeUser(node=SchedulerNode(name='op1849'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1850'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1853'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1869'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1870'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1848.group.device = cuda:0
op1848.group.iteration = (2621440, 1)
op1848.sizes = ([4, 640, 1024], [])
buf1845_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1231_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1847_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1770_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1848_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1848_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 1024}
    index0 = p1
    index1 = 327680*p0 + 320*p2 + (I)
    index2 = I
    index3 = 327680*p0 + p2 + 1024*(I)
    index4 = 327680*p0 + p2 + 1024*(I)
    index5 = 655360*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(320, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(320, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(640, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1848', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1845', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_1231', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1847', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1770', get_index_3)
        add_2 = ops.add(add_1, load_3)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf372', get_index)
        return load


op1849: SchedulerNode(ComputedBuffer)
op1849.writes = [MemoryDep('buf1849', c0, {c0: 128})]
op1849.unmet_dependencies = [MemoryDep('buf1848', c0, {c0: 2621440})]
op1849.met_dependencies = []
op1849.outputs = [
    buf1849: ComputedBuffer
    buf1849.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1849.users = [
        NodeUser(node=SchedulerNode(name='op1853'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1849.group.device = cuda:0
op1849.group.iteration = (128, 20480)
op1849.sizes = ([128], [20480])
buf1848_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1849_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1849_loop_body:
    var_ranges = {p0: 128, p1: 20480}
    index0 = 20480*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1848', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1849', get_index_1, getitem)
        return store_reduction


op1850: SchedulerNode(ComputedBuffer)
op1850.writes = [MemoryDep('buf1850', c0, {c0: 128})]
op1850.unmet_dependencies = [MemoryDep('buf1848', c0, {c0: 2621440})]
op1850.met_dependencies = []
op1850.outputs = [
    buf1850: ComputedBuffer
    buf1850.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1850.users = [NodeUser(node=SchedulerNode(name='op1852'), can_inplace=True, is_weak=False)]
]
op1850.group.device = cuda:0
op1850.group.iteration = (128, 20480)
op1850.sizes = ([128], [20480])
buf1848_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1850_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1850_loop_body:
    var_ranges = {p0: 128, p1: 20480}
    index0 = 20480*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1848', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1850', get_index_1, getitem_1)
        return store_reduction


op1852: SchedulerNode(ComputedBuffer)
op1852.writes = [MemoryDep('buf1852', c0, {c0: 128})]
op1852.unmet_dependencies = [MemoryDep('buf1850', c0, {c0: 128})]
op1852.met_dependencies = []
op1852.outputs = [
    buf1852: ComputedBuffer
    buf1852.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1852.users = [
        NodeUser(node=SchedulerNode(name='op1853'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1852.group.device = cuda:0
op1852.group.iteration = (128, 1)
op1852.sizes = ([128], [])
buf1850_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1852_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1852_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1850', get_index)
        constant = ops.constant(20480.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1852', get_index_1, rsqrt, None)
        return store


op1853: SchedulerNode(ComputedBuffer)
op1853.writes = [MemoryDep('buf1853', c0, {c0: 2621440})]
op1853.unmet_dependencies = 
    [   MemoryDep('buf1848', c0, {c0: 2621440}),
        MemoryDep('buf1849', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1852', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1853.met_dependencies = 
    [   MemoryDep('primals_1234', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1235', c1, {c0: 4, c1: 640})]
op1853.outputs = [
    buf1853: ComputedBuffer
    buf1853.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1853.users = [NodeUser(node=SchedulerNode(name='op1854'), can_inplace=True, is_weak=False)]
]
op1853.group.device = cuda:0
op1853.group.iteration = (2621440, 1)
op1853.sizes = ([4, 640, 1024], [])
buf1848_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1849_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1852_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1234_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1235_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1853_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1853_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 1024}
    index0 = 655360*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1848', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1849', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1852', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1234', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1235', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1853', get_index_5, add, None)
        return store


op1854: SchedulerNode(ComputedBuffer)
op1854.writes = [MemoryDep('buf1854', c0, {c0: 2621440})]
op1854.unmet_dependencies = [MemoryDep('buf1853', c0, {c0: 2621440})]
op1854.met_dependencies = []
op1854.outputs = [
    buf1854: ComputedBuffer
    buf1854.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1854.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1855'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1856'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1854.group.device = cuda:0
op1854.group.iteration = (2621440, 1)
op1854.sizes = ([2621440], [])
buf1853_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1854_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1854_loop_body:
    var_ranges = {p0: 2621440}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1853', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1853', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1854', get_index_2, mul, None)
        return store


op1855: ExternKernelSchedulerNode(ExternKernelAlloc)
op1855.writes = [StarDep(name='buf1855', mode=None)]
op1855.unmet_dependencies = [StarDep(name='buf1854', mode=None)]
op1855.met_dependencies = [StarDep(name='primals_1236', mode=None)]
op1855.outputs = [
    buf1855: ExternKernelAlloc
    buf1855.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1855.users = [NodeUser(node=SchedulerNode(name='op1859'), can_inplace=True, is_weak=False)]
]
op1855.node.kernel = extern_kernels.convolution


op1856: ExternKernelSchedulerNode(ExternKernelAlloc)
op1856.writes = [StarDep(name='buf1856', mode=None)]
op1856.unmet_dependencies = [StarDep(name='buf1854', mode=None)]
op1856.met_dependencies = [StarDep(name='primals_1238', mode=None)]
op1856.outputs = [
    buf1856: ExternKernelAlloc
    buf1856.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1856.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1857'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1856.node.kernel = extern_kernels.convolution


op1857: ExternKernelSchedulerNode(ExternKernelAlloc)
op1857.writes = [StarDep(name='buf1857', mode=None)]
op1857.unmet_dependencies = [StarDep(name='buf1856', mode=None)]
op1857.met_dependencies = [StarDep(name='primals_1239', mode=None)]
op1857.outputs = [
    buf1857: ExternKernelAlloc
    buf1857.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1857.users = [NodeUser(node=SchedulerNode(name='op1859'), can_inplace=True, is_weak=False)]
]
op1857.node.kernel = extern_kernels.convolution


op1858: ExternKernelSchedulerNode(ExternKernelOut)
op1858.writes = [StarDep(name='buf1858', mode=None)]
op1858.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1858.met_dependencies = [StarDep(name='primals_1240', mode=None)]
op1858.outputs = [
    buf1858: ExternKernelOut
    buf1858.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf1858.users = [NodeUser(node=SchedulerNode(name='op1859'), can_inplace=False, is_weak=False)]
]
op1858.node.kernel = extern_kernels.mm


op1859: SchedulerNode(ComputedBuffer)
op1859.writes = [MemoryDep('buf1859', c0, {c0: 1310720})]
op1859.unmet_dependencies = 
    [   MemoryDep('buf1855', c0, {c0: 1310720}),
        MemoryDep('buf1857', c0, {c0: 1310720}),
        MemoryDep('buf1858', c0, {c0: 1280})]
op1859.met_dependencies = 
    [   MemoryDep('primals_1237', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1241', c1, {c0: 4, c1: 320})]
op1859.outputs = [
    buf1859: ComputedBuffer
    buf1859.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1859.users = [
        NodeUser(node=SchedulerNode(name='op1860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1861'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1864'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1859.group.device = cuda:0
op1859.group.iteration = (1310720, 1)
op1859.sizes = ([4, 320, 1024], [])
buf1855_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1237_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1857_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1858_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
primals_1241_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1859_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1859_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    index2 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1855', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1237', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1857', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1858', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1241', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1859', get_index_5, add_3, None)
        return store


op1860: SchedulerNode(ComputedBuffer)
op1860.writes = [MemoryDep('buf1860', c0, {c0: 128})]
op1860.unmet_dependencies = [MemoryDep('buf1859', c0, {c0: 1310720})]
op1860.met_dependencies = []
op1860.outputs = [
    buf1860: ComputedBuffer
    buf1860.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1860.users = [
        NodeUser(node=SchedulerNode(name='op1864'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1860.group.device = cuda:0
op1860.group.iteration = (128, 10240)
op1860.sizes = ([128], [10240])
buf1859_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1860_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1860_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1859', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1860', get_index_1, getitem)
        return store_reduction


op1861: SchedulerNode(ComputedBuffer)
op1861.writes = [MemoryDep('buf1861', c0, {c0: 128})]
op1861.unmet_dependencies = [MemoryDep('buf1859', c0, {c0: 1310720})]
op1861.met_dependencies = []
op1861.outputs = [
    buf1861: ComputedBuffer
    buf1861.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1861.users = [NodeUser(node=SchedulerNode(name='op1863'), can_inplace=True, is_weak=False)]
]
op1861.group.device = cuda:0
op1861.group.iteration = (128, 10240)
op1861.sizes = ([128], [10240])
buf1859_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1861_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1861_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1859', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1861', get_index_1, getitem_1)
        return store_reduction


op1863: SchedulerNode(ComputedBuffer)
op1863.writes = [MemoryDep('buf1863', c0, {c0: 128})]
op1863.unmet_dependencies = [MemoryDep('buf1861', c0, {c0: 128})]
op1863.met_dependencies = []
op1863.outputs = [
    buf1863: ComputedBuffer
    buf1863.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1863.users = [
        NodeUser(node=SchedulerNode(name='op1864'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1863.group.device = cuda:0
op1863.group.iteration = (128, 1)
op1863.sizes = ([128], [])
buf1861_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1863_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1863_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1861', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1863', get_index_1, rsqrt, None)
        return store


op1864: SchedulerNode(ComputedBuffer)
op1864.writes = [MemoryDep('buf1864', c0, {c0: 1310720})]
op1864.unmet_dependencies = 
    [   MemoryDep('buf1859', c0, {c0: 1310720}),
        MemoryDep('buf1860', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf1863', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op1864.met_dependencies = 
    [   MemoryDep('primals_1242', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1243', c1, {c0: 4, c1: 320})]
op1864.outputs = [
    buf1864: ComputedBuffer
    buf1864.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1864.users = [NodeUser(node=SchedulerNode(name='op1865'), can_inplace=True, is_weak=False)]
]
op1864.group.device = cuda:0
op1864.group.iteration = (1310720, 1)
op1864.sizes = ([4, 320, 1024], [])
buf1859_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1860_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1863_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1242_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1243_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1864_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1864_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1859', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1860', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1863', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1242', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1243', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1864', get_index_5, add, None)
        return store


op1865: SchedulerNode(ComputedBuffer)
op1865.writes = [MemoryDep('buf1865', c0, {c0: 1310720})]
op1865.unmet_dependencies = [MemoryDep('buf1864', c0, {c0: 1310720})]
op1865.met_dependencies = []
op1865.outputs = [
    buf1865: ComputedBuffer
    buf1865.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1865.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1866'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1867'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1865.group.device = cuda:0
op1865.group.iteration = (1310720, 1)
op1865.sizes = ([1310720], [])
buf1864_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1865_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1865_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1864', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1864', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1865', get_index_2, mul, None)
        return store


op1866: ExternKernelSchedulerNode(ExternKernelAlloc)
op1866.writes = [StarDep(name='buf1866', mode=None)]
op1866.unmet_dependencies = [StarDep(name='buf1865', mode=None)]
op1866.met_dependencies = [StarDep(name='primals_1244', mode=None)]
op1866.outputs = [
    buf1866: ExternKernelAlloc
    buf1866.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1866.users = [NodeUser(node=SchedulerNode(name='op1872'), can_inplace=True, is_weak=False)]
]
op1866.node.kernel = extern_kernels.convolution


op1867: ExternKernelSchedulerNode(ExternKernelAlloc)
op1867.writes = [StarDep(name='buf1867', mode=None)]
op1867.unmet_dependencies = [StarDep(name='buf1865', mode=None)]
op1867.met_dependencies = [StarDep(name='primals_1246', mode=None)]
op1867.outputs = [
    buf1867: ExternKernelAlloc
    buf1867.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1867.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1868'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1867.node.kernel = extern_kernels.convolution


op1868: ExternKernelSchedulerNode(ExternKernelAlloc)
op1868.writes = [StarDep(name='buf1868', mode=None)]
op1868.unmet_dependencies = [StarDep(name='buf1867', mode=None)]
op1868.met_dependencies = [StarDep(name='primals_1247', mode=None)]
op1868.outputs = [
    buf1868: ExternKernelAlloc
    buf1868.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1868.users = [NodeUser(node=SchedulerNode(name='op1872'), can_inplace=True, is_weak=False)]
]
op1868.node.kernel = extern_kernels.convolution


op1869: ExternKernelSchedulerNode(ExternKernelAlloc)
op1869.writes = [StarDep(name='buf1869', mode=None)]
op1869.unmet_dependencies = [StarDep(name='buf1848', mode=None)]
op1869.met_dependencies = [StarDep(name='primals_1248', mode=None)]
op1869.outputs = [
    buf1869: ExternKernelAlloc
    buf1869.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1869.users = [NodeUser(node=SchedulerNode(name='op1872'), can_inplace=True, is_weak=False)]
]
op1869.node.kernel = extern_kernels.convolution


op1870: ExternKernelSchedulerNode(ExternKernelAlloc)
op1870.writes = [StarDep(name='buf1870', mode=None)]
op1870.unmet_dependencies = [StarDep(name='buf1848', mode=None)]
op1870.met_dependencies = [StarDep(name='primals_1250', mode=None)]
op1870.outputs = [
    buf1870: ExternKernelAlloc
    buf1870.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1870.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1871'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1870.node.kernel = extern_kernels.convolution


op1871: ExternKernelSchedulerNode(ExternKernelAlloc)
op1871.writes = [StarDep(name='buf1871', mode=None)]
op1871.unmet_dependencies = [StarDep(name='buf1870', mode=None)]
op1871.met_dependencies = [StarDep(name='primals_1251', mode=None)]
op1871.outputs = [
    buf1871: ExternKernelAlloc
    buf1871.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1871.users = [NodeUser(node=SchedulerNode(name='op1872'), can_inplace=True, is_weak=False)]
]
op1871.node.kernel = extern_kernels.convolution


op1872: SchedulerNode(ComputedBuffer)
op1872.writes = [MemoryDep('buf1872', c0, {c0: 1310720})]
op1872.unmet_dependencies = 
    [   MemoryDep('buf1866', c0, {c0: 1310720}),
        MemoryDep('buf1868', c0, {c0: 1310720}),
        MemoryDep('buf1869', c0, {c0: 1310720}),
        MemoryDep('buf1871', c0, {c0: 1310720})]
op1872.met_dependencies = 
    [   MemoryDep('primals_1245', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1249', c1, {c0: 4, c1: 320})]
op1872.outputs = [
    buf1872: ComputedBuffer
    buf1872.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1872.users = [
        NodeUser(node=SchedulerNode(name='op1873'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1874'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1877'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1950'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1872.group.device = cuda:0
op1872.group.iteration = (1310720, 1)
op1872.sizes = ([4, 320, 1024], [])
buf1869_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1249_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1871_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1866_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1245_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1868_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1872_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1869', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1249', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1871', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1866', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1245', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1868', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1872', get_index_6, mul_2, None)
        return store


op1873: SchedulerNode(ComputedBuffer)
op1873.writes = [MemoryDep('buf1873', c0, {c0: 128})]
op1873.unmet_dependencies = [MemoryDep('buf1872', c0, {c0: 1310720})]
op1873.met_dependencies = []
op1873.outputs = [
    buf1873: ComputedBuffer
    buf1873.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1873.users = [
        NodeUser(node=SchedulerNode(name='op1877'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1873.group.device = cuda:0
op1873.group.iteration = (128, 10240)
op1873.sizes = ([128], [10240])
buf1872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1873_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1873_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1872', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1873', get_index_1, getitem)
        return store_reduction


op1874: SchedulerNode(ComputedBuffer)
op1874.writes = [MemoryDep('buf1874', c0, {c0: 128})]
op1874.unmet_dependencies = [MemoryDep('buf1872', c0, {c0: 1310720})]
op1874.met_dependencies = []
op1874.outputs = [
    buf1874: ComputedBuffer
    buf1874.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1874.users = [
        NodeUser(node=SchedulerNode(name='op1876'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1877'), can_inplace=False, is_weak=False),
    ]
]
op1874.group.device = cuda:0
op1874.group.iteration = (128, 10240)
op1874.sizes = ([128], [10240])
buf1872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1874_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1874_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1872', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1874', get_index_1, getitem_1)
        return store_reduction


op1876: SchedulerNode(ComputedBuffer)
op1876.writes = [MemoryDep('buf1876', c0, {c0: 128})]
op1876.unmet_dependencies = [MemoryDep('buf1874', c0, {c0: 128})]
op1876.met_dependencies = []
op1876.outputs = [
    buf1876: ComputedBuffer
    buf1876.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1876.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1876.group.device = cuda:0
op1876.group.iteration = (128, 1)
op1876.sizes = ([128], [])
buf1874_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1876_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1876_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1874', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1876', get_index_1, rsqrt, None)
        return store


op1877: SchedulerNode(ComputedBuffer)
op1877.writes = [MemoryDep('buf1877', c0, {c0: 1310720})]
op1877.unmet_dependencies = 
    [   MemoryDep('buf1872', c0, {c0: 1310720}),
        MemoryDep('buf1873', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf1874', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op1877.met_dependencies = 
    [   MemoryDep('primals_1252', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1253', c1, {c0: 4, c1: 320})]
op1877.outputs = [
    buf1877: ComputedBuffer
    buf1877.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1877.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1878'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1879'), can_inplace=False, is_weak=False),
    ]
]
op1877.group.device = cuda:0
op1877.group.iteration = (1310720, 1)
op1877.sizes = ([4, 320, 1024], [])
buf1872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1873_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1874_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_1252_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1253_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1877_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1877_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1872', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1873', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1874', get_index_2)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1252', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1253', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1877', get_index_5, add_1, None)
        return store


op1878: ExternKernelSchedulerNode(ExternKernelOut)
op1878.writes = [StarDep(name='buf1878', mode=None)]
op1878.unmet_dependencies = [StarDep(name='buf1877', mode=None)]
op1878.met_dependencies = [StarDep(name='primals_1254', mode=None)]
op1878.outputs = [
    buf1878: ExternKernelOut
    buf1878.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1878.users = [
        NodeUser(node=SchedulerNode(name='op1882'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1883'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1885'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1907'), can_inplace=True, is_weak=False),
    ]
]
op1878.node.kernel = extern_kernels.bmm


op1879: SchedulerNode(ComputedBuffer)
op1879.writes = [MemoryDep('buf1879', c0, {c0: 1310720})]
op1879.unmet_dependencies = [MemoryDep('buf1877', 327680*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 320})]
op1879.met_dependencies = []
op1879.outputs = [
    buf1879: ComputedBuffer
    buf1879.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1879.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1880'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1879.group.device = cuda:0
op1879.group.iteration = (1310720, 1)
op1879.sizes = ([4, 1024, 320], [])
buf1877_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1879_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1879_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 320}
    index0 = 327680*p0 + p1 + 1024*p2
    index1 = 327680*p0 + 320*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1877', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1879', get_index_1, load, None)
        return store


op1880: ExternKernelSchedulerNode(ExternKernelOut)
op1880.writes = [StarDep(name='buf1880', mode=None)]
op1880.unmet_dependencies = [StarDep(name='buf1879', mode=None)]
op1880.met_dependencies = [StarDep(name='primals_1256', mode=None)]
op1880.outputs = [
    buf1880: ExternKernelOut
    buf1880.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1880.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1881'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1880.node.kernel = extern_kernels.mm


op1881: ExternKernelSchedulerNode(ExternKernelOut)
op1881.writes = [StarDep(name='buf1881', mode=None)]
op1881.unmet_dependencies = [StarDep(name='buf1880', mode=None)]
op1881.met_dependencies = [StarDep(name='primals_1257', mode=None)]
op1881.outputs = [
    buf1881: ExternKernelOut
    buf1881.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1881.users = [
        NodeUser(node=SchedulerNode(name='op1882'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1883'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1885'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1907'), can_inplace=True, is_weak=False),
    ]
]
op1881.node.kernel = extern_kernels.mm


op1882: SchedulerNode(ComputedBuffer)
op1882.writes = [MemoryDep('buf1882', c0, {c0: 4096})]
op1882.unmet_dependencies = 
    [   MemoryDep('buf1878', c0, {c0: 1310720}),
        MemoryDep('buf1881', c0, {c0: 1310720})]
op1882.met_dependencies = [MemoryDep('primals_1255', c1, {c0: 4096, c1: 320})]
op1882.outputs = [
    buf1882: ComputedBuffer
    buf1882.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1882.users = [NodeUser(node=SchedulerNode(name='op1885'), can_inplace=False, is_weak=False)]
]
op1882.group.device = cuda:0
op1882.group.iteration = (4096, 320)
op1882.sizes = ([4096], [320])
buf1878_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1255_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1881_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1882_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1882_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1878', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1255', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1881', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1882', get_index_3, getitem)
        return store_reduction


op1883: SchedulerNode(ComputedBuffer)
op1883.writes = [MemoryDep('buf1883', c0, {c0: 4096})]
op1883.unmet_dependencies = 
    [   MemoryDep('buf1878', c0, {c0: 1310720}),
        MemoryDep('buf1881', c0, {c0: 1310720})]
op1883.met_dependencies = [MemoryDep('primals_1255', c1, {c0: 4096, c1: 320})]
op1883.outputs = [
    buf1883: ComputedBuffer
    buf1883.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1883.users = [
        NodeUser(node=SchedulerNode(name='op1885'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2068'), can_inplace=True, is_weak=False),
    ]
]
op1883.group.device = cuda:0
op1883.group.iteration = (4096, 320)
op1883.sizes = ([4096], [320])
buf1878_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1255_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1881_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1883_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1883_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1878', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1255', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1881', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1883', get_index_3, getitem_1)
        return store_reduction


op1885: SchedulerNode(ComputedBuffer)
op1885.writes = [MemoryDep('buf1885', c0, {c0: 1310720})]
op1885.unmet_dependencies = 
    [   MemoryDep('buf1878', c0, {c0: 1310720}),
        MemoryDep('buf1881', c0, {c0: 1310720}),
        MemoryDep('buf1882', c0, {c0: 4096}),
        MemoryDep('buf1883', c0, {c0: 4096})]
op1885.met_dependencies = [MemoryDep('primals_1255', c1, {c0: 4096, c1: 320})]
op1885.outputs = [
    buf1885: ComputedBuffer
    buf1885.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1885.users = [
        NodeUser(node=SchedulerNode(name='op1886'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1885.group.device = cuda:0
op1885.group.iteration = (1310720, 1)
op1885.sizes = ([4096, 320], [])
buf1878_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1255_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1881_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1882_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1883_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1885_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1878', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1255', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1881', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1882', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1883', get_index_4)
        constant_1 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1885', get_index_5, mul_1, None)
        return store


op1886: SchedulerNode(ComputedBuffer)
op1886.writes = [MemoryDep('buf1886', c0, {c0: 1310720})]
op1886.unmet_dependencies = [MemoryDep('buf1885', c0, {c0: 1310720})]
op1886.met_dependencies = 
    [   MemoryDep('primals_1258', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1259', c1, {c0: 4096, c1: 320})]
op1886.outputs = [
    buf1886: ComputedBuffer
    buf1886.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1886.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1887'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1888'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1890'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1891'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1893'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1894'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1886.group.device = cuda:0
op1886.group.iteration = (1310720, 1)
op1886.sizes = ([4096, 320], [])
buf1885_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1258_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1259_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1886_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1886_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1885', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1258', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1259', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1886', get_index_3, add, None)
        return store


op1887: ExternKernelSchedulerNode(ExternKernelOut)
op1887.writes = [StarDep(name='buf1887', mode=None)]
op1887.unmet_dependencies = [StarDep(name='buf1886', mode=None)]
op1887.met_dependencies = [StarDep(name='primals_1260', mode=None)]
op1887.outputs = [
    buf1887: ExternKernelOut
    buf1887.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1887.users = [NodeUser(node=SchedulerNode(name='op1896'), can_inplace=True, is_weak=False)]
]
op1887.node.kernel = extern_kernels.mm


op1888: ExternKernelSchedulerNode(ExternKernelOut)
op1888.writes = [StarDep(name='buf1888', mode=None)]
op1888.unmet_dependencies = [StarDep(name='buf1886', mode=None)]
op1888.met_dependencies = [StarDep(name='primals_1261', mode=None)]
op1888.outputs = [
    buf1888: ExternKernelOut
    buf1888.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1888.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1889'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1888.node.kernel = extern_kernels.mm


op1889: ExternKernelSchedulerNode(ExternKernelOut)
op1889.writes = [StarDep(name='buf1889', mode=None)]
op1889.unmet_dependencies = [StarDep(name='buf1888', mode=None)]
op1889.met_dependencies = [StarDep(name='primals_1262', mode=None)]
op1889.outputs = [
    buf1889: ExternKernelOut
    buf1889.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1889.users = [NodeUser(node=SchedulerNode(name='op1896'), can_inplace=True, is_weak=False)]
]
op1889.node.kernel = extern_kernels.mm


op1890: ExternKernelSchedulerNode(ExternKernelOut)
op1890.writes = [StarDep(name='buf1890', mode=None)]
op1890.unmet_dependencies = [StarDep(name='buf1886', mode=None)]
op1890.met_dependencies = [StarDep(name='primals_1263', mode=None)]
op1890.outputs = [
    buf1890: ExternKernelOut
    buf1890.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1890.users = [NodeUser(node=SchedulerNode(name='op1897'), can_inplace=True, is_weak=False)]
]
op1890.node.kernel = extern_kernels.mm


op1891: ExternKernelSchedulerNode(ExternKernelOut)
op1891.writes = [StarDep(name='buf1891', mode=None)]
op1891.unmet_dependencies = [StarDep(name='buf1886', mode=None)]
op1891.met_dependencies = [StarDep(name='primals_1264', mode=None)]
op1891.outputs = [
    buf1891: ExternKernelOut
    buf1891.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1891.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1892'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1891.node.kernel = extern_kernels.mm


op1892: ExternKernelSchedulerNode(ExternKernelOut)
op1892.writes = [StarDep(name='buf1892', mode=None)]
op1892.unmet_dependencies = [StarDep(name='buf1891', mode=None)]
op1892.met_dependencies = [StarDep(name='primals_1265', mode=None)]
op1892.outputs = [
    buf1892: ExternKernelOut
    buf1892.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1892.users = [NodeUser(node=SchedulerNode(name='op1897'), can_inplace=True, is_weak=False)]
]
op1892.node.kernel = extern_kernels.mm


op1893: ExternKernelSchedulerNode(ExternKernelOut)
op1893.writes = [StarDep(name='buf1893', mode=None)]
op1893.unmet_dependencies = [StarDep(name='buf1886', mode=None)]
op1893.met_dependencies = [StarDep(name='primals_1266', mode=None)]
op1893.outputs = [
    buf1893: ExternKernelOut
    buf1893.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1893.users = [NodeUser(node=SchedulerNode(name='op1898'), can_inplace=True, is_weak=False)]
]
op1893.node.kernel = extern_kernels.mm


op1894: ExternKernelSchedulerNode(ExternKernelOut)
op1894.writes = [StarDep(name='buf1894', mode=None)]
op1894.unmet_dependencies = [StarDep(name='buf1886', mode=None)]
op1894.met_dependencies = [StarDep(name='primals_1267', mode=None)]
op1894.outputs = [
    buf1894: ExternKernelOut
    buf1894.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1894.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1895'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1894.node.kernel = extern_kernels.mm


op1895: ExternKernelSchedulerNode(ExternKernelOut)
op1895.writes = [StarDep(name='buf1895', mode=None)]
op1895.unmet_dependencies = [StarDep(name='buf1894', mode=None)]
op1895.met_dependencies = [StarDep(name='primals_1268', mode=None)]
op1895.outputs = [
    buf1895: ExternKernelOut
    buf1895.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1895.users = [NodeUser(node=SchedulerNode(name='op1898'), can_inplace=True, is_weak=False)]
]
op1895.node.kernel = extern_kernels.mm


op1896: SchedulerNode(ComputedBuffer)
op1896.writes = [MemoryDep('buf1896', c0, {c0: 1310720})]
op1896.unmet_dependencies = 
    [   MemoryDep('buf1887', c0, {c0: 1310720}),
        MemoryDep('buf1889', c0, {c0: 1310720})]
op1896.met_dependencies = []
op1896.outputs = [
    buf1896: ComputedBuffer
    buf1896.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1896.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1899'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1896.group.device = cuda:0
op1896.group.iteration = (1310720, 1)
op1896.sizes = ([1310720], [])
buf1887_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1889_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1896_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1896_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1887', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1889', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1896', get_index_2, add, None)
        return store


op1897: SchedulerNode(ComputedBuffer)
op1897.writes = [MemoryDep('buf1897', c0, {c0: 1310720})]
op1897.unmet_dependencies = 
    [   MemoryDep('buf1890', c0, {c0: 1310720}),
        MemoryDep('buf1892', c0, {c0: 1310720})]
op1897.met_dependencies = []
op1897.outputs = [
    buf1897: ComputedBuffer
    buf1897.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1897.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1899'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1897.group.device = cuda:0
op1897.group.iteration = (1310720, 1)
op1897.sizes = ([1310720], [])
buf1890_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1892_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1897_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1897_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1890', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1892', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1897', get_index_2, add, None)
        return store


op1898: SchedulerNode(ComputedBuffer)
op1898.writes = [MemoryDep('buf1898', c0, {c0: 1310720})]
op1898.unmet_dependencies = 
    [   MemoryDep('buf1893', c0, {c0: 1310720}),
        MemoryDep('buf1895', c0, {c0: 1310720})]
op1898.met_dependencies = []
op1898.outputs = [
    buf1898: ComputedBuffer
    buf1898.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1898.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1899'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1898.group.device = cuda:0
op1898.group.iteration = (1310720, 1)
op1898.sizes = ([1310720], [])
buf1893_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1895_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1898_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1898_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1893', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1895', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1898', get_index_2, add, None)
        return store


op1899: ExternKernelSchedulerNode(FallbackKernel)
op1899.writes = [StarDep(name='buf1899', mode=None)]
op1899.unmet_dependencies = 
    [   StarDep(name='buf1896', mode=None),
        StarDep(name='buf1897', mode=None),
        StarDep(name='buf1898', mode=None)]
op1899.met_dependencies = []
op1899.outputs = [
    buf1899: FallbackKernel
    buf1899.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1899.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1900'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1901'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1902'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1903'), can_inplace=False, is_weak=False),
    ]
]
op1899.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1900: ExternKernelSchedulerNode(MultiOutput)
op1900.writes = [StarDep(name='buf1900', mode=None)]
op1900.unmet_dependencies = [StarDep(name='buf1899', mode=None)]
op1900.met_dependencies = []
op1900.outputs = [
    buf1900: MultiOutput
    buf1900.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf1900.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1904'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1905'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1900.node.kernel = None


op1901: ExternKernelSchedulerNode(MultiOutput)
op1901.writes = [StarDep(name='buf1901', mode=None)]
op1901.unmet_dependencies = [StarDep(name='buf1899', mode=None)]
op1901.met_dependencies = []
op1901.outputs = [
    buf1901: MultiOutput
    buf1901.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf1901.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1901.node.kernel = None


op1902: ExternKernelSchedulerNode(MultiOutput)
op1902.writes = [StarDep(name='buf1902', mode=None)]
op1902.unmet_dependencies = [StarDep(name='buf1899', mode=None)]
op1902.met_dependencies = []
op1902.outputs = [
    buf1902: MultiOutput
    buf1902.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1902.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1902.node.kernel = None


op1903: ExternKernelSchedulerNode(MultiOutput)
op1903.writes = [StarDep(name='buf1903', mode=None)]
op1903.unmet_dependencies = [StarDep(name='buf1899', mode=None)]
op1903.met_dependencies = []
op1903.outputs = [
    buf1903: MultiOutput
    buf1903.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1903.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1903.node.kernel = None


op1904: ExternKernelSchedulerNode(ExternKernelOut)
op1904.writes = [StarDep(name='buf1904', mode=None)]
op1904.unmet_dependencies = [StarDep(name='buf1900', mode=None)]
op1904.met_dependencies = [StarDep(name='primals_1269', mode=None)]
op1904.outputs = [
    buf1904: ExternKernelOut
    buf1904.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1904.users = [NodeUser(node=SchedulerNode(name='op1907'), can_inplace=True, is_weak=False)]
]
op1904.node.kernel = extern_kernels.mm


op1905: ExternKernelSchedulerNode(ExternKernelOut)
op1905.writes = [StarDep(name='buf1905', mode=None)]
op1905.unmet_dependencies = [StarDep(name='buf1900', mode=None)]
op1905.met_dependencies = [StarDep(name='primals_1271', mode=None)]
op1905.outputs = [
    buf1905: ExternKernelOut
    buf1905.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1905.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1906'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1905.node.kernel = extern_kernels.mm


op1906: ExternKernelSchedulerNode(ExternKernelOut)
op1906.writes = [StarDep(name='buf1906', mode=None)]
op1906.unmet_dependencies = [StarDep(name='buf1905', mode=None)]
op1906.met_dependencies = [StarDep(name='primals_1272', mode=None)]
op1906.outputs = [
    buf1906: ExternKernelOut
    buf1906.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1906.users = [NodeUser(node=SchedulerNode(name='op1907'), can_inplace=True, is_weak=False)]
]
op1906.node.kernel = extern_kernels.mm


op1907: SchedulerNode(ComputedBuffer)
op1907.writes = [MemoryDep('buf1907', c0, {c0: 1310720})]
op1907.unmet_dependencies = 
    [   MemoryDep('buf1878', c0, {c0: 1310720}),
        MemoryDep('buf1881', c0, {c0: 1310720}),
        MemoryDep('buf1904', c0, {c0: 1310720}),
        MemoryDep('buf1906', c0, {c0: 1310720})]
op1907.met_dependencies = 
    [   MemoryDep('primals_1255', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1270', c1, {c0: 4096, c1: 320})]
op1907.outputs = [
    buf1907: ComputedBuffer
    buf1907.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1907.users = [
        NodeUser(node=SchedulerNode(name='op1908'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1909'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1911'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1933'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1934'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1936'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1946'), can_inplace=True, is_weak=False),
    ]
]
op1907.group.device = cuda:0
op1907.group.iteration = (1310720, 1)
op1907.sizes = ([4096, 320], [])
buf1904_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1270_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1906_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1878_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1255_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1881_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1907_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1904', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1270', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1906', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1878', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1255', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1881', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1907', get_index_6, add_4, None)
        return store


op1908: SchedulerNode(ComputedBuffer)
op1908.writes = [MemoryDep('buf1908', c0, {c0: 4096})]
op1908.unmet_dependencies = [MemoryDep('buf1907', c0, {c0: 1310720})]
op1908.met_dependencies = []
op1908.outputs = [
    buf1908: ComputedBuffer
    buf1908.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1908.users = [NodeUser(node=SchedulerNode(name='op1911'), can_inplace=False, is_weak=False)]
]
op1908.group.device = cuda:0
op1908.group.iteration = (4096, 320)
op1908.sizes = ([4096], [320])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1908_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1908_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1907', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1908', get_index_1, getitem)
        return store_reduction


op1909: SchedulerNode(ComputedBuffer)
op1909.writes = [MemoryDep('buf1909', c0, {c0: 4096})]
op1909.unmet_dependencies = [MemoryDep('buf1907', c0, {c0: 1310720})]
op1909.met_dependencies = []
op1909.outputs = [
    buf1909: ComputedBuffer
    buf1909.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1909.users = [
        NodeUser(node=SchedulerNode(name='op1911'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2067'), can_inplace=True, is_weak=False),
    ]
]
op1909.group.device = cuda:0
op1909.group.iteration = (4096, 320)
op1909.sizes = ([4096], [320])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1909_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1909_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1907', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1909', get_index_1, getitem_1)
        return store_reduction


op1911: SchedulerNode(ComputedBuffer)
op1911.writes = [MemoryDep('buf1911', c0, {c0: 1310720})]
op1911.unmet_dependencies = 
    [   MemoryDep('buf1907', c0, {c0: 1310720}),
        MemoryDep('buf1908', c0, {c0: 4096}),
        MemoryDep('buf1909', c0, {c0: 4096})]
op1911.met_dependencies = []
op1911.outputs = [
    buf1911: ComputedBuffer
    buf1911.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1911.users = [
        NodeUser(node=SchedulerNode(name='op1912'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1911.group.device = cuda:0
op1911.group.iteration = (1310720, 1)
op1911.sizes = ([4096, 320], [])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1908_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1909_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1911_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1911_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1907', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1908', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1909', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1911', get_index_3, mul, None)
        return store


op1912: SchedulerNode(ComputedBuffer)
op1912.writes = [MemoryDep('buf1912', c0, {c0: 1310720})]
op1912.unmet_dependencies = [MemoryDep('buf1911', c0, {c0: 1310720})]
op1912.met_dependencies = 
    [   MemoryDep('primals_1273', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1274', c1, {c0: 4096, c1: 320})]
op1912.outputs = [
    buf1912: ComputedBuffer
    buf1912.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1912.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1913'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1914'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1912.group.device = cuda:0
op1912.group.iteration = (1310720, 1)
op1912.sizes = ([4096, 320], [])
buf1911_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1273_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1274_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1912_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1912_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1911', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1273', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1274', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1912', get_index_3, add, None)
        return store


op1913: ExternKernelSchedulerNode(ExternKernelOut)
op1913.writes = [StarDep(name='buf1913', mode=None)]
op1913.unmet_dependencies = [StarDep(name='buf1912', mode=None)]
op1913.met_dependencies = [StarDep(name='primals_1275', mode=None)]
op1913.outputs = [
    buf1913: ExternKernelOut
    buf1913.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1913.users = [NodeUser(node=SchedulerNode(name='op1922'), can_inplace=True, is_weak=False)]
]
op1913.node.kernel = extern_kernels.mm


op1914: ExternKernelSchedulerNode(ExternKernelOut)
op1914.writes = [StarDep(name='buf1914', mode=None)]
op1914.unmet_dependencies = [StarDep(name='buf1912', mode=None)]
op1914.met_dependencies = [StarDep(name='primals_1276', mode=None)]
op1914.outputs = [
    buf1914: ExternKernelOut
    buf1914.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1914.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1915'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1914.node.kernel = extern_kernels.mm


op1915: ExternKernelSchedulerNode(ExternKernelOut)
op1915.writes = [StarDep(name='buf1915', mode=None)]
op1915.unmet_dependencies = [StarDep(name='buf1914', mode=None)]
op1915.met_dependencies = [StarDep(name='primals_1277', mode=None)]
op1915.outputs = [
    buf1915: ExternKernelOut
    buf1915.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1915.users = [NodeUser(node=SchedulerNode(name='op1922'), can_inplace=True, is_weak=False)]
]
op1915.node.kernel = extern_kernels.mm


op1916: ExternKernelSchedulerNode(ExternKernelOut)
op1916.writes = [StarDep(name='buf1916', mode=None)]
op1916.unmet_dependencies = []
op1916.met_dependencies = 
    [   StarDep(name='primals_1278', mode=None),
        StarDep(name='primals_177', mode=None)]
op1916.outputs = [
    buf1916: ExternKernelOut
    buf1916.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1916.users = [NodeUser(node=SchedulerNode(name='op1923'), can_inplace=True, is_weak=False)]
]
op1916.node.kernel = extern_kernels.mm


op1917: ExternKernelSchedulerNode(ExternKernelOut)
op1917.writes = [StarDep(name='buf1917', mode=None)]
op1917.unmet_dependencies = []
op1917.met_dependencies = 
    [   StarDep(name='primals_1279', mode=None),
        StarDep(name='primals_177', mode=None)]
op1917.outputs = [
    buf1917: ExternKernelOut
    buf1917.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1917.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1918'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1917.node.kernel = extern_kernels.mm


op1918: ExternKernelSchedulerNode(ExternKernelOut)
op1918.writes = [StarDep(name='buf1918', mode=None)]
op1918.unmet_dependencies = [StarDep(name='buf1917', mode=None)]
op1918.met_dependencies = [StarDep(name='primals_1280', mode=None)]
op1918.outputs = [
    buf1918: ExternKernelOut
    buf1918.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1918.users = [NodeUser(node=SchedulerNode(name='op1923'), can_inplace=True, is_weak=False)]
]
op1918.node.kernel = extern_kernels.mm


op1919: ExternKernelSchedulerNode(ExternKernelOut)
op1919.writes = [StarDep(name='buf1919', mode=None)]
op1919.unmet_dependencies = []
op1919.met_dependencies = 
    [   StarDep(name='primals_1281', mode=None),
        StarDep(name='primals_177', mode=None)]
op1919.outputs = [
    buf1919: ExternKernelOut
    buf1919.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1919.users = [NodeUser(node=SchedulerNode(name='op1924'), can_inplace=True, is_weak=False)]
]
op1919.node.kernel = extern_kernels.mm


op1920: ExternKernelSchedulerNode(ExternKernelOut)
op1920.writes = [StarDep(name='buf1920', mode=None)]
op1920.unmet_dependencies = []
op1920.met_dependencies = 
    [   StarDep(name='primals_1282', mode=None),
        StarDep(name='primals_177', mode=None)]
op1920.outputs = [
    buf1920: ExternKernelOut
    buf1920.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf1920.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1921'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1920.node.kernel = extern_kernels.mm


op1921: ExternKernelSchedulerNode(ExternKernelOut)
op1921.writes = [StarDep(name='buf1921', mode=None)]
op1921.unmet_dependencies = [StarDep(name='buf1920', mode=None)]
op1921.met_dependencies = [StarDep(name='primals_1283', mode=None)]
op1921.outputs = [
    buf1921: ExternKernelOut
    buf1921.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf1921.users = [NodeUser(node=SchedulerNode(name='op1924'), can_inplace=True, is_weak=False)]
]
op1921.node.kernel = extern_kernels.mm


op1922: SchedulerNode(ComputedBuffer)
op1922.writes = [MemoryDep('buf1922', c0, {c0: 1310720})]
op1922.unmet_dependencies = 
    [   MemoryDep('buf1913', c0, {c0: 1310720}),
        MemoryDep('buf1915', c0, {c0: 1310720})]
op1922.met_dependencies = []
op1922.outputs = [
    buf1922: ComputedBuffer
    buf1922.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1922.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1925'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1922.group.device = cuda:0
op1922.group.iteration = (1310720, 1)
op1922.sizes = ([1310720], [])
buf1913_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1915_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1922_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1922_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1913', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1915', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1922', get_index_2, add, None)
        return store


op1923: SchedulerNode(ComputedBuffer)
op1923.writes = [MemoryDep('buf1923', c0, {c0: 98560})]
op1923.unmet_dependencies = [MemoryDep('buf1916', c0, {c0: 98560}), MemoryDep('buf1918', c0, {c0: 98560})]
op1923.met_dependencies = []
op1923.outputs = [
    buf1923: ComputedBuffer
    buf1923.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf1923.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1925'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1923.group.device = cuda:0
op1923.group.iteration = (98560, 1)
op1923.sizes = ([98560], [])
buf1916_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1918_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1923_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op1923_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1916', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1918', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1923', get_index_2, add, None)
        return store


op1924: SchedulerNode(ComputedBuffer)
op1924.writes = [MemoryDep('buf1924', c0, {c0: 98560})]
op1924.unmet_dependencies = [MemoryDep('buf1919', c0, {c0: 98560}), MemoryDep('buf1921', c0, {c0: 98560})]
op1924.met_dependencies = []
op1924.outputs = [
    buf1924: ComputedBuffer
    buf1924.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf1924.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1925'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1924.group.device = cuda:0
op1924.group.iteration = (98560, 1)
op1924.sizes = ([98560], [])
buf1919_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1921_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf1924_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op1924_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1919', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1921', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1924', get_index_2, add, None)
        return store


op1925: ExternKernelSchedulerNode(FallbackKernel)
op1925.writes = [StarDep(name='buf1925', mode=None)]
op1925.unmet_dependencies = 
    [   StarDep(name='buf1922', mode=None),
        StarDep(name='buf1923', mode=None),
        StarDep(name='buf1924', mode=None)]
op1925.met_dependencies = []
op1925.outputs = [
    buf1925: FallbackKernel
    buf1925.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1925.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1926'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1927'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1928'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1929'), can_inplace=False, is_weak=False),
    ]
]
op1925.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1926: ExternKernelSchedulerNode(MultiOutput)
op1926.writes = [StarDep(name='buf1926', mode=None)]
op1926.unmet_dependencies = [StarDep(name='buf1925', mode=None)]
op1926.met_dependencies = []
op1926.outputs = [
    buf1926: MultiOutput
    buf1926.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf1926.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1930'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1931'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1926.node.kernel = None


op1927: ExternKernelSchedulerNode(MultiOutput)
op1927.writes = [StarDep(name='buf1927', mode=None)]
op1927.unmet_dependencies = [StarDep(name='buf1925', mode=None)]
op1927.met_dependencies = []
op1927.outputs = [
    buf1927: MultiOutput
    buf1927.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf1927.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1927.node.kernel = None


op1928: ExternKernelSchedulerNode(MultiOutput)
op1928.writes = [StarDep(name='buf1928', mode=None)]
op1928.unmet_dependencies = [StarDep(name='buf1925', mode=None)]
op1928.met_dependencies = []
op1928.outputs = [
    buf1928: MultiOutput
    buf1928.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1928.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1928.node.kernel = None


op1929: ExternKernelSchedulerNode(MultiOutput)
op1929.writes = [StarDep(name='buf1929', mode=None)]
op1929.unmet_dependencies = [StarDep(name='buf1925', mode=None)]
op1929.met_dependencies = []
op1929.outputs = [
    buf1929: MultiOutput
    buf1929.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf1929.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1929.node.kernel = None


op1930: ExternKernelSchedulerNode(ExternKernelOut)
op1930.writes = [StarDep(name='buf1930', mode=None)]
op1930.unmet_dependencies = [StarDep(name='buf1926', mode=None)]
op1930.met_dependencies = [StarDep(name='primals_1284', mode=None)]
op1930.outputs = [
    buf1930: ExternKernelOut
    buf1930.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1930.users = [
        NodeUser(node=SchedulerNode(name='op1933'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1934'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1936'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1946'), can_inplace=True, is_weak=False),
    ]
]
op1930.node.kernel = extern_kernels.mm


op1931: ExternKernelSchedulerNode(ExternKernelOut)
op1931.writes = [StarDep(name='buf1931', mode=None)]
op1931.unmet_dependencies = [StarDep(name='buf1926', mode=None)]
op1931.met_dependencies = [StarDep(name='primals_1286', mode=None)]
op1931.outputs = [
    buf1931: ExternKernelOut
    buf1931.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1931.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1932'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1931.node.kernel = extern_kernels.mm


op1932: ExternKernelSchedulerNode(ExternKernelOut)
op1932.writes = [StarDep(name='buf1932', mode=None)]
op1932.unmet_dependencies = [StarDep(name='buf1931', mode=None)]
op1932.met_dependencies = [StarDep(name='primals_1287', mode=None)]
op1932.outputs = [
    buf1932: ExternKernelOut
    buf1932.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1932.users = [
        NodeUser(node=SchedulerNode(name='op1933'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1934'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1936'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1946'), can_inplace=True, is_weak=False),
    ]
]
op1932.node.kernel = extern_kernels.mm


op1933: SchedulerNode(ComputedBuffer)
op1933.writes = [MemoryDep('buf1933', c0, {c0: 4096})]
op1933.unmet_dependencies = 
    [   MemoryDep('buf1907', c0, {c0: 1310720}),
        MemoryDep('buf1930', c0, {c0: 1310720}),
        MemoryDep('buf1932', c0, {c0: 1310720})]
op1933.met_dependencies = [MemoryDep('primals_1285', c1, {c0: 4096, c1: 320})]
op1933.outputs = [
    buf1933: ComputedBuffer
    buf1933.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1933.users = [NodeUser(node=SchedulerNode(name='op1936'), can_inplace=False, is_weak=False)]
]
op1933.group.device = cuda:0
op1933.group.iteration = (4096, 320)
op1933.sizes = ([4096], [320])
buf1930_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1285_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1932_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1933_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1933_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1930', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1285', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1932', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1907', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1933', get_index_4, getitem)
        return store_reduction


op1934: SchedulerNode(ComputedBuffer)
op1934.writes = [MemoryDep('buf1934', c0, {c0: 4096})]
op1934.unmet_dependencies = 
    [   MemoryDep('buf1907', c0, {c0: 1310720}),
        MemoryDep('buf1930', c0, {c0: 1310720}),
        MemoryDep('buf1932', c0, {c0: 1310720})]
op1934.met_dependencies = [MemoryDep('primals_1285', c1, {c0: 4096, c1: 320})]
op1934.outputs = [
    buf1934: ComputedBuffer
    buf1934.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1934.users = [
        NodeUser(node=SchedulerNode(name='op1936'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2066'), can_inplace=True, is_weak=False),
    ]
]
op1934.group.device = cuda:0
op1934.group.iteration = (4096, 320)
op1934.sizes = ([4096], [320])
buf1930_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1285_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1932_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1934_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1934_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1930', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1285', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1932', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1907', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1934', get_index_4, getitem_1)
        return store_reduction


op1936: SchedulerNode(ComputedBuffer)
op1936.writes = [MemoryDep('buf1936', c0, {c0: 1310720})]
op1936.unmet_dependencies = 
    [   MemoryDep('buf1907', c0, {c0: 1310720}),
        MemoryDep('buf1930', c0, {c0: 1310720}),
        MemoryDep('buf1932', c0, {c0: 1310720}),
        MemoryDep('buf1933', c0, {c0: 4096}),
        MemoryDep('buf1934', c0, {c0: 4096})]
op1936.met_dependencies = [MemoryDep('primals_1285', c1, {c0: 4096, c1: 320})]
op1936.outputs = [
    buf1936: ComputedBuffer
    buf1936.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1936.users = [
        NodeUser(node=SchedulerNode(name='op1937'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1936.group.device = cuda:0
op1936.group.iteration = (1310720, 1)
op1936.sizes = ([4096, 320], [])
buf1930_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1285_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1932_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1933_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1934_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1936_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1936_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1930', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1285', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1932', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1907', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1933', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf1934', get_index_5)
        constant_2 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1936', get_index_6, mul_2, None)
        return store


op1937: SchedulerNode(ComputedBuffer)
op1937.writes = [MemoryDep('buf1937', c0, {c0: 1310720})]
op1937.unmet_dependencies = [MemoryDep('buf1936', c0, {c0: 1310720})]
op1937.met_dependencies = 
    [   MemoryDep('primals_1288', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1289', c1, {c0: 4096, c1: 320})]
op1937.outputs = [
    buf1937: ComputedBuffer
    buf1937.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1937.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1938'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1939'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1937.group.device = cuda:0
op1937.group.iteration = (1310720, 1)
op1937.sizes = ([4096, 320], [])
buf1936_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1288_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1289_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1937_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1937_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1936', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1288', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1289', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1937', get_index_3, add, None)
        return store


op1938: ExternKernelSchedulerNode(ExternKernelOut)
op1938.writes = [StarDep(name='buf1938', mode=None)]
op1938.unmet_dependencies = [StarDep(name='buf1937', mode=None)]
op1938.met_dependencies = [StarDep(name='primals_1290', mode=None)]
op1938.outputs = [
    buf1938: ExternKernelOut
    buf1938.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf1938.users = [NodeUser(node=SchedulerNode(name='op1941'), can_inplace=True, is_weak=False)]
]
op1938.node.kernel = extern_kernels.mm


op1939: ExternKernelSchedulerNode(ExternKernelOut)
op1939.writes = [StarDep(name='buf1939', mode=None)]
op1939.unmet_dependencies = [StarDep(name='buf1937', mode=None)]
op1939.met_dependencies = [StarDep(name='primals_1292', mode=None)]
op1939.outputs = [
    buf1939: ExternKernelOut
    buf1939.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1939.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1940'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1939.node.kernel = extern_kernels.mm


op1940: ExternKernelSchedulerNode(ExternKernelOut)
op1940.writes = [StarDep(name='buf1940', mode=None)]
op1940.unmet_dependencies = [StarDep(name='buf1939', mode=None)]
op1940.met_dependencies = [StarDep(name='primals_1293', mode=None)]
op1940.outputs = [
    buf1940: ExternKernelOut
    buf1940.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf1940.users = [NodeUser(node=SchedulerNode(name='op1941'), can_inplace=True, is_weak=False)]
]
op1940.node.kernel = extern_kernels.mm


op1941: SchedulerNode(ComputedBuffer)
op1941.writes = [MemoryDep('buf1941', c0, {c0: 10485760})]
op1941.unmet_dependencies = 
    [   MemoryDep('buf1938', c0, {c0: 10485760}),
        MemoryDep('buf1940', c0, {c0: 10485760})]
op1941.met_dependencies = [MemoryDep('primals_1291', c1, {c0: 4096, c1: 2560})]
op1941.outputs = [
    buf1941: ComputedBuffer
    buf1941.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
    buf1941.users = [
        NodeUser(node=SchedulerNode(name='op1942'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1941.group.device = cuda:0
op1941.group.iteration = (10485760, 1)
op1941.sizes = ([4096, 2560], [])
buf1938_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
primals_1291_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf1940_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
buf1941_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
class op1941_loop_body:
    var_ranges = {p0: 4096, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1938', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1291', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1940', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1941', get_index_3, add_1, None)
        return store


op1942: SchedulerNode(ComputedBuffer)
op1942.writes = [MemoryDep('buf1942', c0, {c0: 5242880})]
op1942.unmet_dependencies = 
    [   MemoryDep('buf1941', 2560*c0 + c1 + 1280, {c0: 4096, c1: 1280}),
        MemoryDep('buf1941', 2560*c0 + c1, {c0: 4096, c1: 1280})]
op1942.met_dependencies = []
op1942.outputs = [
    buf1942: ComputedBuffer
    buf1942.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
    buf1942.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1943'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1944'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1942.group.device = cuda:0
op1942.group.iteration = (5242880, 1)
op1942.sizes = ([4096, 1280], [])
buf1941_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf1941_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf1942_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
class op1942_loop_body:
    var_ranges = {p0: 4096, p1: 1280}
    index0 = 2560*p0 + p1
    index1 = 2560*p0 + p1 + 1280
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1941', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1941', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1941', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf1942', get_index_3, mul_3, None)
        return store


op1943: ExternKernelSchedulerNode(ExternKernelOut)
op1943.writes = [StarDep(name='buf1943', mode=None)]
op1943.unmet_dependencies = [StarDep(name='buf1942', mode=None)]
op1943.met_dependencies = [StarDep(name='primals_1294', mode=None)]
op1943.outputs = [
    buf1943: ExternKernelOut
    buf1943.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1943.users = [NodeUser(node=SchedulerNode(name='op1946'), can_inplace=True, is_weak=False)]
]
op1943.node.kernel = extern_kernels.mm


op1944: ExternKernelSchedulerNode(ExternKernelOut)
op1944.writes = [StarDep(name='buf1944', mode=None)]
op1944.unmet_dependencies = [StarDep(name='buf1942', mode=None)]
op1944.met_dependencies = [StarDep(name='primals_1296', mode=None)]
op1944.outputs = [
    buf1944: ExternKernelOut
    buf1944.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1944.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1945'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1944.node.kernel = extern_kernels.mm


op1945: ExternKernelSchedulerNode(ExternKernelOut)
op1945.writes = [StarDep(name='buf1945', mode=None)]
op1945.unmet_dependencies = [StarDep(name='buf1944', mode=None)]
op1945.met_dependencies = [StarDep(name='primals_1297', mode=None)]
op1945.outputs = [
    buf1945: ExternKernelOut
    buf1945.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1945.users = [NodeUser(node=SchedulerNode(name='op1946'), can_inplace=True, is_weak=False)]
]
op1945.node.kernel = extern_kernels.mm


op1946: SchedulerNode(ComputedBuffer)
op1946.writes = [MemoryDep('buf1946', c0, {c0: 1310720})]
op1946.unmet_dependencies = 
    [   MemoryDep('buf1907', c0, {c0: 1310720}),
        MemoryDep('buf1930', c0, {c0: 1310720}),
        MemoryDep('buf1932', c0, {c0: 1310720}),
        MemoryDep('buf1943', c0, {c0: 1310720}),
        MemoryDep('buf1945', c0, {c0: 1310720})]
op1946.met_dependencies = 
    [   MemoryDep('primals_1285', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1295', c1, {c0: 4096, c1: 320})]
op1946.outputs = [
    buf1946: ComputedBuffer
    buf1946.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1946.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1947'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1948'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1946.group.device = cuda:0
op1946.group.iteration = (1310720, 1)
op1946.sizes = ([4096, 320], [])
buf1943_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1295_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1945_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1930_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1285_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1932_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1907_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf1946_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1946_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1943', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1295', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1945', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1930', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1285', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1932', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1907', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1946', get_index_7, add_5, None)
        return store


op1947: ExternKernelSchedulerNode(ExternKernelOut)
op1947.writes = [StarDep(name='buf1947', mode=None)]
op1947.unmet_dependencies = [StarDep(name='buf1946', mode=None)]
op1947.met_dependencies = [StarDep(name='primals_1298', mode=None)]
op1947.outputs = [
    buf1947: ExternKernelOut
    buf1947.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1947.users = [NodeUser(node=SchedulerNode(name='op1950'), can_inplace=False, is_weak=False)]
]
op1947.node.kernel = extern_kernels.mm


op1948: ExternKernelSchedulerNode(ExternKernelOut)
op1948.writes = [StarDep(name='buf1948', mode=None)]
op1948.unmet_dependencies = [StarDep(name='buf1946', mode=None)]
op1948.met_dependencies = [StarDep(name='primals_1300', mode=None)]
op1948.outputs = [
    buf1948: ExternKernelOut
    buf1948.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1948.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1949'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1948.node.kernel = extern_kernels.mm


op1949: ExternKernelSchedulerNode(ExternKernelOut)
op1949.writes = [StarDep(name='buf1949', mode=None)]
op1949.unmet_dependencies = [StarDep(name='buf1948', mode=None)]
op1949.met_dependencies = [StarDep(name='primals_1301', mode=None)]
op1949.outputs = [
    buf1949: ExternKernelOut
    buf1949.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1949.users = [NodeUser(node=SchedulerNode(name='op1950'), can_inplace=False, is_weak=False)]
]
op1949.node.kernel = extern_kernels.mm


op1950: SchedulerNode(ComputedBuffer)
op1950.writes = [MemoryDep('buf1950', c0, {c0: 2621440})]
op1950.unmet_dependencies = 
    [   MemoryDep('buf1872', 327680*c0 + c2 + 1024*(I), {c0: 4, c1: 640, c2: 1024}),
        MemoryDep('buf1947', 327680*c0 + 320*c2 + (I), {c0: 4, c1: 640, c2: 1024}),
        MemoryDep('buf1949', 327680*c0 + 320*c2 + (I), {c0: 4, c1: 640, c2: 1024}),
        MemoryDep('buf272', 327680*c0 + c2 + 1024*(I), {c0: 4, c1: 640, c2: 1024})]
op1950.met_dependencies = [MemoryDep('primals_1299', I, {c0: 4, c1: 640})]
op1950.outputs = [
    buf1950: ComputedBuffer
    buf1950.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1950.users = [
        NodeUser(node=SchedulerNode(name='op1951'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1952'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1955'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1971'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1972'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1950.group.device = cuda:0
op1950.group.iteration = (2621440, 1)
op1950.sizes = ([4, 640, 1024], [])
buf1947_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1299_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1949_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1872_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1950_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 1024}
    index0 = p1
    index1 = 327680*p0 + 320*p2 + (I)
    index2 = I
    index3 = 327680*p0 + p2 + 1024*(I)
    index4 = 327680*p0 + p2 + 1024*(I)
    index5 = 655360*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(320, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(320, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(640, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1950', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf1947', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('primals_1299', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1949', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1872', get_index_3)
        add_2 = ops.add(add_1, load_3)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf272', get_index)
        return load


op1951: SchedulerNode(ComputedBuffer)
op1951.writes = [MemoryDep('buf1951', c0, {c0: 128})]
op1951.unmet_dependencies = [MemoryDep('buf1950', c0, {c0: 2621440})]
op1951.met_dependencies = []
op1951.outputs = [
    buf1951: ComputedBuffer
    buf1951.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1951.users = [
        NodeUser(node=SchedulerNode(name='op1955'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1951.group.device = cuda:0
op1951.group.iteration = (128, 20480)
op1951.sizes = ([128], [20480])
buf1950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1951_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1951_loop_body:
    var_ranges = {p0: 128, p1: 20480}
    index0 = 20480*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1950', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1951', get_index_1, getitem)
        return store_reduction


op1952: SchedulerNode(ComputedBuffer)
op1952.writes = [MemoryDep('buf1952', c0, {c0: 128})]
op1952.unmet_dependencies = [MemoryDep('buf1950', c0, {c0: 2621440})]
op1952.met_dependencies = []
op1952.outputs = [
    buf1952: ComputedBuffer
    buf1952.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1952.users = [NodeUser(node=SchedulerNode(name='op1954'), can_inplace=True, is_weak=False)]
]
op1952.group.device = cuda:0
op1952.group.iteration = (128, 20480)
op1952.sizes = ([128], [20480])
buf1950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1952_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1952_loop_body:
    var_ranges = {p0: 128, p1: 20480}
    index0 = 20480*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1950', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1952', get_index_1, getitem_1)
        return store_reduction


op1954: SchedulerNode(ComputedBuffer)
op1954.writes = [MemoryDep('buf1954', c0, {c0: 128})]
op1954.unmet_dependencies = [MemoryDep('buf1952', c0, {c0: 128})]
op1954.met_dependencies = []
op1954.outputs = [
    buf1954: ComputedBuffer
    buf1954.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1954.users = [
        NodeUser(node=SchedulerNode(name='op1955'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1954.group.device = cuda:0
op1954.group.iteration = (128, 1)
op1954.sizes = ([128], [])
buf1952_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1954_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1954_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1952', get_index)
        constant = ops.constant(20480.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1954', get_index_1, rsqrt, None)
        return store


op1955: SchedulerNode(ComputedBuffer)
op1955.writes = [MemoryDep('buf1955', c0, {c0: 2621440})]
op1955.unmet_dependencies = 
    [   MemoryDep('buf1950', c0, {c0: 2621440}),
        MemoryDep('buf1951', 32*c0 + ((c1//20)), {c0: 4, c1: 640}),
        MemoryDep('buf1954', 32*c0 + ((c1//20)), {c0: 4, c1: 640})]
op1955.met_dependencies = 
    [   MemoryDep('primals_1302', c1, {c0: 4, c1: 640}),
        MemoryDep('primals_1303', c1, {c0: 4, c1: 640})]
op1955.outputs = [
    buf1955: ComputedBuffer
    buf1955.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1955.users = [NodeUser(node=SchedulerNode(name='op1956'), can_inplace=True, is_weak=False)]
]
op1955.group.device = cuda:0
op1955.group.iteration = (2621440, 1)
op1955.sizes = ([4, 640, 1024], [])
buf1950_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1951_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1954_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1302_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
primals_1303_layout = FixedLayout('cuda:0', torch.float32, size=[640], stride=[1])
buf1955_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1955_loop_body:
    var_ranges = {p0: 4, p1: 640, p2: 1024}
    index0 = 655360*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//20))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1950', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1951', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1954', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1302', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1303', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1955', get_index_5, add, None)
        return store


op1956: SchedulerNode(ComputedBuffer)
op1956.writes = [MemoryDep('buf1956', c0, {c0: 2621440})]
op1956.unmet_dependencies = [MemoryDep('buf1955', c0, {c0: 2621440})]
op1956.met_dependencies = []
op1956.outputs = [
    buf1956: ComputedBuffer
    buf1956.layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
    buf1956.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1957'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1958'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1956.group.device = cuda:0
op1956.group.iteration = (2621440, 1)
op1956.sizes = ([2621440], [])
buf1955_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
buf1956_layout = FixedLayout('cuda:0', torch.float32, size=[4, 640, 32, 32], stride=[655360, 1024, 32, 1])
class op1956_loop_body:
    var_ranges = {p0: 2621440}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1955', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1955', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1956', get_index_2, mul, None)
        return store


op1957: ExternKernelSchedulerNode(ExternKernelAlloc)
op1957.writes = [StarDep(name='buf1957', mode=None)]
op1957.unmet_dependencies = [StarDep(name='buf1956', mode=None)]
op1957.met_dependencies = [StarDep(name='primals_1304', mode=None)]
op1957.outputs = [
    buf1957: ExternKernelAlloc
    buf1957.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1957.users = [NodeUser(node=SchedulerNode(name='op1961'), can_inplace=True, is_weak=False)]
]
op1957.node.kernel = extern_kernels.convolution


op1958: ExternKernelSchedulerNode(ExternKernelAlloc)
op1958.writes = [StarDep(name='buf1958', mode=None)]
op1958.unmet_dependencies = [StarDep(name='buf1956', mode=None)]
op1958.met_dependencies = [StarDep(name='primals_1306', mode=None)]
op1958.outputs = [
    buf1958: ExternKernelAlloc
    buf1958.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1958.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1959'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1958.node.kernel = extern_kernels.convolution


op1959: ExternKernelSchedulerNode(ExternKernelAlloc)
op1959.writes = [StarDep(name='buf1959', mode=None)]
op1959.unmet_dependencies = [StarDep(name='buf1958', mode=None)]
op1959.met_dependencies = [StarDep(name='primals_1307', mode=None)]
op1959.outputs = [
    buf1959: ExternKernelAlloc
    buf1959.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1959.users = [NodeUser(node=SchedulerNode(name='op1961'), can_inplace=True, is_weak=False)]
]
op1959.node.kernel = extern_kernels.convolution


op1960: ExternKernelSchedulerNode(ExternKernelOut)
op1960.writes = [StarDep(name='buf1960', mode=None)]
op1960.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op1960.met_dependencies = [StarDep(name='primals_1308', mode=None)]
op1960.outputs = [
    buf1960: ExternKernelOut
    buf1960.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
    buf1960.users = [NodeUser(node=SchedulerNode(name='op1961'), can_inplace=False, is_weak=False)]
]
op1960.node.kernel = extern_kernels.mm


op1961: SchedulerNode(ComputedBuffer)
op1961.writes = [MemoryDep('buf1961', c0, {c0: 1310720})]
op1961.unmet_dependencies = 
    [   MemoryDep('buf1957', c0, {c0: 1310720}),
        MemoryDep('buf1959', c0, {c0: 1310720}),
        MemoryDep('buf1960', c0, {c0: 1280})]
op1961.met_dependencies = 
    [   MemoryDep('primals_1305', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1309', c1, {c0: 4, c1: 320})]
op1961.outputs = [
    buf1961: ComputedBuffer
    buf1961.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1961.users = [
        NodeUser(node=SchedulerNode(name='op1962'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1963'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1966'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1961.group.device = cuda:0
op1961.group.iteration = (1310720, 1)
op1961.sizes = ([4, 320, 1024], [])
buf1957_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1305_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1959_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1960_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320], stride=[320, 1])
primals_1309_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1961_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1961_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    index2 = 320*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1957', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1305', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1959', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1960', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1309', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1961', get_index_5, add_3, None)
        return store


op1962: SchedulerNode(ComputedBuffer)
op1962.writes = [MemoryDep('buf1962', c0, {c0: 128})]
op1962.unmet_dependencies = [MemoryDep('buf1961', c0, {c0: 1310720})]
op1962.met_dependencies = []
op1962.outputs = [
    buf1962: ComputedBuffer
    buf1962.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1962.users = [
        NodeUser(node=SchedulerNode(name='op1966'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1962.group.device = cuda:0
op1962.group.iteration = (128, 10240)
op1962.sizes = ([128], [10240])
buf1961_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1962_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1962_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1961', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1962', get_index_1, getitem)
        return store_reduction


op1963: SchedulerNode(ComputedBuffer)
op1963.writes = [MemoryDep('buf1963', c0, {c0: 128})]
op1963.unmet_dependencies = [MemoryDep('buf1961', c0, {c0: 1310720})]
op1963.met_dependencies = []
op1963.outputs = [
    buf1963: ComputedBuffer
    buf1963.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1963.users = [NodeUser(node=SchedulerNode(name='op1965'), can_inplace=True, is_weak=False)]
]
op1963.group.device = cuda:0
op1963.group.iteration = (128, 10240)
op1963.sizes = ([128], [10240])
buf1961_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1963_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1963_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1961', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1963', get_index_1, getitem_1)
        return store_reduction


op1965: SchedulerNode(ComputedBuffer)
op1965.writes = [MemoryDep('buf1965', c0, {c0: 128})]
op1965.unmet_dependencies = [MemoryDep('buf1963', c0, {c0: 128})]
op1965.met_dependencies = []
op1965.outputs = [
    buf1965: ComputedBuffer
    buf1965.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf1965.users = [
        NodeUser(node=SchedulerNode(name='op1966'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1965.group.device = cuda:0
op1965.group.iteration = (128, 1)
op1965.sizes = ([128], [])
buf1963_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1965_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op1965_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1963', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1965', get_index_1, rsqrt, None)
        return store


op1966: SchedulerNode(ComputedBuffer)
op1966.writes = [MemoryDep('buf1966', c0, {c0: 1310720})]
op1966.unmet_dependencies = 
    [   MemoryDep('buf1961', c0, {c0: 1310720}),
        MemoryDep('buf1962', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf1965', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op1966.met_dependencies = 
    [   MemoryDep('primals_1310', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1311', c1, {c0: 4, c1: 320})]
op1966.outputs = [
    buf1966: ComputedBuffer
    buf1966.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1966.users = [NodeUser(node=SchedulerNode(name='op1967'), can_inplace=True, is_weak=False)]
]
op1966.group.device = cuda:0
op1966.group.iteration = (1310720, 1)
op1966.sizes = ([4, 320, 1024], [])
buf1961_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1962_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf1965_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1310_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1311_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1966_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1966_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1961', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1962', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1965', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1310', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1311', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1966', get_index_5, add, None)
        return store


op1967: SchedulerNode(ComputedBuffer)
op1967.writes = [MemoryDep('buf1967', c0, {c0: 1310720})]
op1967.unmet_dependencies = [MemoryDep('buf1966', c0, {c0: 1310720})]
op1967.met_dependencies = []
op1967.outputs = [
    buf1967: ComputedBuffer
    buf1967.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1967.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1968'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1969'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1967.group.device = cuda:0
op1967.group.iteration = (1310720, 1)
op1967.sizes = ([1310720], [])
buf1966_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1967_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1967_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1966', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1966', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1967', get_index_2, mul, None)
        return store


op1968: ExternKernelSchedulerNode(ExternKernelAlloc)
op1968.writes = [StarDep(name='buf1968', mode=None)]
op1968.unmet_dependencies = [StarDep(name='buf1967', mode=None)]
op1968.met_dependencies = [StarDep(name='primals_1312', mode=None)]
op1968.outputs = [
    buf1968: ExternKernelAlloc
    buf1968.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1968.users = [NodeUser(node=SchedulerNode(name='op1974'), can_inplace=True, is_weak=False)]
]
op1968.node.kernel = extern_kernels.convolution


op1969: ExternKernelSchedulerNode(ExternKernelAlloc)
op1969.writes = [StarDep(name='buf1969', mode=None)]
op1969.unmet_dependencies = [StarDep(name='buf1967', mode=None)]
op1969.met_dependencies = [StarDep(name='primals_1314', mode=None)]
op1969.outputs = [
    buf1969: ExternKernelAlloc
    buf1969.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1969.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1970'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1969.node.kernel = extern_kernels.convolution


op1970: ExternKernelSchedulerNode(ExternKernelAlloc)
op1970.writes = [StarDep(name='buf1970', mode=None)]
op1970.unmet_dependencies = [StarDep(name='buf1969', mode=None)]
op1970.met_dependencies = [StarDep(name='primals_1315', mode=None)]
op1970.outputs = [
    buf1970: ExternKernelAlloc
    buf1970.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1970.users = [NodeUser(node=SchedulerNode(name='op1974'), can_inplace=True, is_weak=False)]
]
op1970.node.kernel = extern_kernels.convolution


op1971: ExternKernelSchedulerNode(ExternKernelAlloc)
op1971.writes = [StarDep(name='buf1971', mode=None)]
op1971.unmet_dependencies = [StarDep(name='buf1950', mode=None)]
op1971.met_dependencies = [StarDep(name='primals_1316', mode=None)]
op1971.outputs = [
    buf1971: ExternKernelAlloc
    buf1971.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1971.users = [NodeUser(node=SchedulerNode(name='op1974'), can_inplace=True, is_weak=False)]
]
op1971.node.kernel = extern_kernels.convolution


op1972: ExternKernelSchedulerNode(ExternKernelAlloc)
op1972.writes = [StarDep(name='buf1972', mode=None)]
op1972.unmet_dependencies = [StarDep(name='buf1950', mode=None)]
op1972.met_dependencies = [StarDep(name='primals_1318', mode=None)]
op1972.outputs = [
    buf1972: ExternKernelAlloc
    buf1972.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf1972.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1973'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1972.node.kernel = extern_kernels.convolution


op1973: ExternKernelSchedulerNode(ExternKernelAlloc)
op1973.writes = [StarDep(name='buf1973', mode=None)]
op1973.unmet_dependencies = [StarDep(name='buf1972', mode=None)]
op1973.met_dependencies = [StarDep(name='primals_1319', mode=None)]
op1973.outputs = [
    buf1973: ExternKernelAlloc
    buf1973.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1973.users = [NodeUser(node=SchedulerNode(name='op1974'), can_inplace=True, is_weak=False)]
]
op1973.node.kernel = extern_kernels.convolution


op1974: SchedulerNode(ComputedBuffer)
op1974.writes = [MemoryDep('buf1974', c0, {c0: 1310720})]
op1974.unmet_dependencies = 
    [   MemoryDep('buf1968', c0, {c0: 1310720}),
        MemoryDep('buf1970', c0, {c0: 1310720}),
        MemoryDep('buf1971', c0, {c0: 1310720}),
        MemoryDep('buf1973', c0, {c0: 1310720})]
op1974.met_dependencies = 
    [   MemoryDep('primals_1313', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1317', c1, {c0: 4, c1: 320})]
op1974.outputs = [
    buf1974: ComputedBuffer
    buf1974.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1974.users = [
        NodeUser(node=SchedulerNode(name='op1975'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1976'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1979'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2052'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1974.group.device = cuda:0
op1974.group.iteration = (1310720, 1)
op1974.sizes = ([4, 320, 1024], [])
buf1971_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1317_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1973_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1968_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
primals_1313_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1970_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1974_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1974_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1971', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1317', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1973', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1968', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1313', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1970', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        add_4 = ops.add(add_1, add_3)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_4, constant_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf1974', get_index_6, mul_2, None)
        return store


op1975: SchedulerNode(ComputedBuffer)
op1975.writes = [MemoryDep('buf1975', c0, {c0: 128})]
op1975.unmet_dependencies = [MemoryDep('buf1974', c0, {c0: 1310720})]
op1975.met_dependencies = []
op1975.outputs = [
    buf1975: ComputedBuffer
    buf1975.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1975.users = [
        NodeUser(node=SchedulerNode(name='op1979'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1975.group.device = cuda:0
op1975.group.iteration = (128, 10240)
op1975.sizes = ([128], [10240])
buf1974_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1975_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1975_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1974', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1975', get_index_1, getitem)
        return store_reduction


op1976: SchedulerNode(ComputedBuffer)
op1976.writes = [MemoryDep('buf1976', c0, {c0: 128})]
op1976.unmet_dependencies = [MemoryDep('buf1974', c0, {c0: 1310720})]
op1976.met_dependencies = []
op1976.outputs = [
    buf1976: ComputedBuffer
    buf1976.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1976.users = [
        NodeUser(node=SchedulerNode(name='op1978'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1979'), can_inplace=False, is_weak=False),
    ]
]
op1976.group.device = cuda:0
op1976.group.iteration = (128, 10240)
op1976.sizes = ([128], [10240])
buf1974_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1976_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1976_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1974', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1976', get_index_1, getitem_1)
        return store_reduction


op1978: SchedulerNode(ComputedBuffer)
op1978.writes = [MemoryDep('buf1978', c0, {c0: 128})]
op1978.unmet_dependencies = [MemoryDep('buf1976', c0, {c0: 128})]
op1978.met_dependencies = []
op1978.outputs = [
    buf1978: ComputedBuffer
    buf1978.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf1978.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1978.group.device = cuda:0
op1978.group.iteration = (128, 1)
op1978.sizes = ([128], [])
buf1976_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1978_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op1978_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1976', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1978', get_index_1, rsqrt, None)
        return store


op1979: SchedulerNode(ComputedBuffer)
op1979.writes = [MemoryDep('buf1979', c0, {c0: 1310720})]
op1979.unmet_dependencies = 
    [   MemoryDep('buf1974', c0, {c0: 1310720}),
        MemoryDep('buf1975', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf1976', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op1979.met_dependencies = 
    [   MemoryDep('primals_1320', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1321', c1, {c0: 4, c1: 320})]
op1979.outputs = [
    buf1979: ComputedBuffer
    buf1979.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf1979.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1980'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1981'), can_inplace=False, is_weak=False),
    ]
]
op1979.group.device = cuda:0
op1979.group.iteration = (1310720, 1)
op1979.sizes = ([4, 320, 1024], [])
buf1974_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1975_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf1976_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
primals_1320_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1321_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1979_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op1979_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1974', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1975', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1976', get_index_2)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1320', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1321', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1979', get_index_5, add_1, None)
        return store


op1980: ExternKernelSchedulerNode(ExternKernelOut)
op1980.writes = [StarDep(name='buf1980', mode=None)]
op1980.unmet_dependencies = [StarDep(name='buf1979', mode=None)]
op1980.met_dependencies = [StarDep(name='primals_1322', mode=None)]
op1980.outputs = [
    buf1980: ExternKernelOut
    buf1980.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1980.users = [
        NodeUser(node=SchedulerNode(name='op1984'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1985'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1987'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2009'), can_inplace=True, is_weak=False),
    ]
]
op1980.node.kernel = extern_kernels.bmm


op1981: SchedulerNode(ComputedBuffer)
op1981.writes = [MemoryDep('buf1981', c0, {c0: 1310720})]
op1981.unmet_dependencies = [MemoryDep('buf1979', 327680*c0 + c1 + 1024*c2, {c0: 4, c1: 1024, c2: 320})]
op1981.met_dependencies = []
op1981.outputs = [
    buf1981: ComputedBuffer
    buf1981.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1981.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1982'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1981.group.device = cuda:0
op1981.group.iteration = (1310720, 1)
op1981.sizes = ([4, 1024, 320], [])
buf1979_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf1981_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1981_loop_body:
    var_ranges = {p0: 4, p1: 1024, p2: 320}
    index0 = 327680*p0 + p1 + 1024*p2
    index1 = 327680*p0 + 320*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1979', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1981', get_index_1, load, None)
        return store


op1982: ExternKernelSchedulerNode(ExternKernelOut)
op1982.writes = [StarDep(name='buf1982', mode=None)]
op1982.unmet_dependencies = [StarDep(name='buf1981', mode=None)]
op1982.met_dependencies = [StarDep(name='primals_1324', mode=None)]
op1982.outputs = [
    buf1982: ExternKernelOut
    buf1982.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1982.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1983'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1982.node.kernel = extern_kernels.mm


op1983: ExternKernelSchedulerNode(ExternKernelOut)
op1983.writes = [StarDep(name='buf1983', mode=None)]
op1983.unmet_dependencies = [StarDep(name='buf1982', mode=None)]
op1983.met_dependencies = [StarDep(name='primals_1325', mode=None)]
op1983.outputs = [
    buf1983: ExternKernelOut
    buf1983.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1983.users = [
        NodeUser(node=SchedulerNode(name='op1984'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1985'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1987'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2009'), can_inplace=True, is_weak=False),
    ]
]
op1983.node.kernel = extern_kernels.mm


op1984: SchedulerNode(ComputedBuffer)
op1984.writes = [MemoryDep('buf1984', c0, {c0: 4096})]
op1984.unmet_dependencies = 
    [   MemoryDep('buf1980', c0, {c0: 1310720}),
        MemoryDep('buf1983', c0, {c0: 1310720})]
op1984.met_dependencies = [MemoryDep('primals_1323', c1, {c0: 4096, c1: 320})]
op1984.outputs = [
    buf1984: ComputedBuffer
    buf1984.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1984.users = [NodeUser(node=SchedulerNode(name='op1987'), can_inplace=False, is_weak=False)]
]
op1984.group.device = cuda:0
op1984.group.iteration = (4096, 320)
op1984.sizes = ([4096], [320])
buf1980_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1323_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1983_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1984_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1984_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1980', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1323', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1983', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1984', get_index_3, getitem)
        return store_reduction


op1985: SchedulerNode(ComputedBuffer)
op1985.writes = [MemoryDep('buf1985', c0, {c0: 4096})]
op1985.unmet_dependencies = 
    [   MemoryDep('buf1980', c0, {c0: 1310720}),
        MemoryDep('buf1983', c0, {c0: 1310720})]
op1985.met_dependencies = [MemoryDep('primals_1323', c1, {c0: 4096, c1: 320})]
op1985.outputs = [
    buf1985: ComputedBuffer
    buf1985.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf1985.users = [
        NodeUser(node=SchedulerNode(name='op1987'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2065'), can_inplace=True, is_weak=False),
    ]
]
op1985.group.device = cuda:0
op1985.group.iteration = (4096, 320)
op1985.sizes = ([4096], [320])
buf1980_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1323_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1983_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1985_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op1985_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1980', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1323', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1983', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1985', get_index_3, getitem_1)
        return store_reduction


op1987: SchedulerNode(ComputedBuffer)
op1987.writes = [MemoryDep('buf1987', c0, {c0: 1310720})]
op1987.unmet_dependencies = 
    [   MemoryDep('buf1980', c0, {c0: 1310720}),
        MemoryDep('buf1983', c0, {c0: 1310720}),
        MemoryDep('buf1984', c0, {c0: 4096}),
        MemoryDep('buf1985', c0, {c0: 4096})]
op1987.met_dependencies = [MemoryDep('primals_1323', c1, {c0: 4096, c1: 320})]
op1987.outputs = [
    buf1987: ComputedBuffer
    buf1987.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1987.users = [
        NodeUser(node=SchedulerNode(name='op1988'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1987.group.device = cuda:0
op1987.group.iteration = (1310720, 1)
op1987.sizes = ([4096, 320], [])
buf1980_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1323_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1983_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1984_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1985_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf1987_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1987_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1980', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1323', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1983', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1984', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1985', get_index_4)
        constant_1 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1987', get_index_5, mul_1, None)
        return store


op1988: SchedulerNode(ComputedBuffer)
op1988.writes = [MemoryDep('buf1988', c0, {c0: 1310720})]
op1988.unmet_dependencies = [MemoryDep('buf1987', c0, {c0: 1310720})]
op1988.met_dependencies = 
    [   MemoryDep('primals_1326', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1327', c1, {c0: 4096, c1: 320})]
op1988.outputs = [
    buf1988: ComputedBuffer
    buf1988.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1988.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1989'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1990'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1992'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1993'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1995'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1996'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1988.group.device = cuda:0
op1988.group.iteration = (1310720, 1)
op1988.sizes = ([4096, 320], [])
buf1987_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1326_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1327_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1988_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1988_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1987', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1326', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1327', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf1988', get_index_3, add, None)
        return store


op1989: ExternKernelSchedulerNode(ExternKernelOut)
op1989.writes = [StarDep(name='buf1989', mode=None)]
op1989.unmet_dependencies = [StarDep(name='buf1988', mode=None)]
op1989.met_dependencies = [StarDep(name='primals_1328', mode=None)]
op1989.outputs = [
    buf1989: ExternKernelOut
    buf1989.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1989.users = [NodeUser(node=SchedulerNode(name='op1998'), can_inplace=True, is_weak=False)]
]
op1989.node.kernel = extern_kernels.mm


op1990: ExternKernelSchedulerNode(ExternKernelOut)
op1990.writes = [StarDep(name='buf1990', mode=None)]
op1990.unmet_dependencies = [StarDep(name='buf1988', mode=None)]
op1990.met_dependencies = [StarDep(name='primals_1329', mode=None)]
op1990.outputs = [
    buf1990: ExternKernelOut
    buf1990.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1990.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1991'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1990.node.kernel = extern_kernels.mm


op1991: ExternKernelSchedulerNode(ExternKernelOut)
op1991.writes = [StarDep(name='buf1991', mode=None)]
op1991.unmet_dependencies = [StarDep(name='buf1990', mode=None)]
op1991.met_dependencies = [StarDep(name='primals_1330', mode=None)]
op1991.outputs = [
    buf1991: ExternKernelOut
    buf1991.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1991.users = [NodeUser(node=SchedulerNode(name='op1998'), can_inplace=True, is_weak=False)]
]
op1991.node.kernel = extern_kernels.mm


op1992: ExternKernelSchedulerNode(ExternKernelOut)
op1992.writes = [StarDep(name='buf1992', mode=None)]
op1992.unmet_dependencies = [StarDep(name='buf1988', mode=None)]
op1992.met_dependencies = [StarDep(name='primals_1331', mode=None)]
op1992.outputs = [
    buf1992: ExternKernelOut
    buf1992.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1992.users = [NodeUser(node=SchedulerNode(name='op1999'), can_inplace=True, is_weak=False)]
]
op1992.node.kernel = extern_kernels.mm


op1993: ExternKernelSchedulerNode(ExternKernelOut)
op1993.writes = [StarDep(name='buf1993', mode=None)]
op1993.unmet_dependencies = [StarDep(name='buf1988', mode=None)]
op1993.met_dependencies = [StarDep(name='primals_1332', mode=None)]
op1993.outputs = [
    buf1993: ExternKernelOut
    buf1993.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1993.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1994'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1993.node.kernel = extern_kernels.mm


op1994: ExternKernelSchedulerNode(ExternKernelOut)
op1994.writes = [StarDep(name='buf1994', mode=None)]
op1994.unmet_dependencies = [StarDep(name='buf1993', mode=None)]
op1994.met_dependencies = [StarDep(name='primals_1333', mode=None)]
op1994.outputs = [
    buf1994: ExternKernelOut
    buf1994.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1994.users = [NodeUser(node=SchedulerNode(name='op1999'), can_inplace=True, is_weak=False)]
]
op1994.node.kernel = extern_kernels.mm


op1995: ExternKernelSchedulerNode(ExternKernelOut)
op1995.writes = [StarDep(name='buf1995', mode=None)]
op1995.unmet_dependencies = [StarDep(name='buf1988', mode=None)]
op1995.met_dependencies = [StarDep(name='primals_1334', mode=None)]
op1995.outputs = [
    buf1995: ExternKernelOut
    buf1995.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1995.users = [NodeUser(node=SchedulerNode(name='op2000'), can_inplace=True, is_weak=False)]
]
op1995.node.kernel = extern_kernels.mm


op1996: ExternKernelSchedulerNode(ExternKernelOut)
op1996.writes = [StarDep(name='buf1996', mode=None)]
op1996.unmet_dependencies = [StarDep(name='buf1988', mode=None)]
op1996.met_dependencies = [StarDep(name='primals_1335', mode=None)]
op1996.outputs = [
    buf1996: ExternKernelOut
    buf1996.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf1996.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1997'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1996.node.kernel = extern_kernels.mm


op1997: ExternKernelSchedulerNode(ExternKernelOut)
op1997.writes = [StarDep(name='buf1997', mode=None)]
op1997.unmet_dependencies = [StarDep(name='buf1996', mode=None)]
op1997.met_dependencies = [StarDep(name='primals_1336', mode=None)]
op1997.outputs = [
    buf1997: ExternKernelOut
    buf1997.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf1997.users = [NodeUser(node=SchedulerNode(name='op2000'), can_inplace=True, is_weak=False)]
]
op1997.node.kernel = extern_kernels.mm


op1998: SchedulerNode(ComputedBuffer)
op1998.writes = [MemoryDep('buf1998', c0, {c0: 1310720})]
op1998.unmet_dependencies = 
    [   MemoryDep('buf1989', c0, {c0: 1310720}),
        MemoryDep('buf1991', c0, {c0: 1310720})]
op1998.met_dependencies = []
op1998.outputs = [
    buf1998: ComputedBuffer
    buf1998.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1998.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2001'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1998.group.device = cuda:0
op1998.group.iteration = (1310720, 1)
op1998.sizes = ([1310720], [])
buf1989_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1991_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1998_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1998_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1989', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1991', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1998', get_index_2, add, None)
        return store


op1999: SchedulerNode(ComputedBuffer)
op1999.writes = [MemoryDep('buf1999', c0, {c0: 1310720})]
op1999.unmet_dependencies = 
    [   MemoryDep('buf1992', c0, {c0: 1310720}),
        MemoryDep('buf1994', c0, {c0: 1310720})]
op1999.met_dependencies = []
op1999.outputs = [
    buf1999: ComputedBuffer
    buf1999.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf1999.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2001'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1999.group.device = cuda:0
op1999.group.iteration = (1310720, 1)
op1999.sizes = ([1310720], [])
buf1992_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1994_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1999_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op1999_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1992', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1994', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf1999', get_index_2, add, None)
        return store


op2000: SchedulerNode(ComputedBuffer)
op2000.writes = [MemoryDep('buf2000', c0, {c0: 1310720})]
op2000.unmet_dependencies = 
    [   MemoryDep('buf1995', c0, {c0: 1310720}),
        MemoryDep('buf1997', c0, {c0: 1310720})]
op2000.met_dependencies = []
op2000.outputs = [
    buf2000: ComputedBuffer
    buf2000.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2000.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2001'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2000.group.device = cuda:0
op2000.group.iteration = (1310720, 1)
op2000.sizes = ([1310720], [])
buf1995_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1997_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2000_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2000_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1995', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1997', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2000', get_index_2, add, None)
        return store


op2001: ExternKernelSchedulerNode(FallbackKernel)
op2001.writes = [StarDep(name='buf2001', mode=None)]
op2001.unmet_dependencies = 
    [   StarDep(name='buf1998', mode=None),
        StarDep(name='buf1999', mode=None),
        StarDep(name='buf2000', mode=None)]
op2001.met_dependencies = []
op2001.outputs = [
    buf2001: FallbackKernel
    buf2001.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf2001.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2002'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2003'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2004'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2005'), can_inplace=False, is_weak=False),
    ]
]
op2001.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op2002: ExternKernelSchedulerNode(MultiOutput)
op2002.writes = [StarDep(name='buf2002', mode=None)]
op2002.unmet_dependencies = [StarDep(name='buf2001', mode=None)]
op2002.met_dependencies = []
op2002.outputs = [
    buf2002: MultiOutput
    buf2002.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf2002.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2006'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2007'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2002.node.kernel = None


op2003: ExternKernelSchedulerNode(MultiOutput)
op2003.writes = [StarDep(name='buf2003', mode=None)]
op2003.unmet_dependencies = [StarDep(name='buf2001', mode=None)]
op2003.met_dependencies = []
op2003.outputs = [
    buf2003: MultiOutput
    buf2003.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf2003.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2003.node.kernel = None


op2004: ExternKernelSchedulerNode(MultiOutput)
op2004.writes = [StarDep(name='buf2004', mode=None)]
op2004.unmet_dependencies = [StarDep(name='buf2001', mode=None)]
op2004.met_dependencies = []
op2004.outputs = [
    buf2004: MultiOutput
    buf2004.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf2004.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2004.node.kernel = None


op2005: ExternKernelSchedulerNode(MultiOutput)
op2005.writes = [StarDep(name='buf2005', mode=None)]
op2005.unmet_dependencies = [StarDep(name='buf2001', mode=None)]
op2005.met_dependencies = []
op2005.outputs = [
    buf2005: MultiOutput
    buf2005.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf2005.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2005.node.kernel = None


op2006: ExternKernelSchedulerNode(ExternKernelOut)
op2006.writes = [StarDep(name='buf2006', mode=None)]
op2006.unmet_dependencies = [StarDep(name='buf2002', mode=None)]
op2006.met_dependencies = [StarDep(name='primals_1337', mode=None)]
op2006.outputs = [
    buf2006: ExternKernelOut
    buf2006.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2006.users = [NodeUser(node=SchedulerNode(name='op2009'), can_inplace=True, is_weak=False)]
]
op2006.node.kernel = extern_kernels.mm


op2007: ExternKernelSchedulerNode(ExternKernelOut)
op2007.writes = [StarDep(name='buf2007', mode=None)]
op2007.unmet_dependencies = [StarDep(name='buf2002', mode=None)]
op2007.met_dependencies = [StarDep(name='primals_1339', mode=None)]
op2007.outputs = [
    buf2007: ExternKernelOut
    buf2007.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf2007.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2008'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2007.node.kernel = extern_kernels.mm


op2008: ExternKernelSchedulerNode(ExternKernelOut)
op2008.writes = [StarDep(name='buf2008', mode=None)]
op2008.unmet_dependencies = [StarDep(name='buf2007', mode=None)]
op2008.met_dependencies = [StarDep(name='primals_1340', mode=None)]
op2008.outputs = [
    buf2008: ExternKernelOut
    buf2008.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2008.users = [NodeUser(node=SchedulerNode(name='op2009'), can_inplace=True, is_weak=False)]
]
op2008.node.kernel = extern_kernels.mm


op2009: SchedulerNode(ComputedBuffer)
op2009.writes = [MemoryDep('buf2009', c0, {c0: 1310720})]
op2009.unmet_dependencies = 
    [   MemoryDep('buf1980', c0, {c0: 1310720}),
        MemoryDep('buf1983', c0, {c0: 1310720}),
        MemoryDep('buf2006', c0, {c0: 1310720}),
        MemoryDep('buf2008', c0, {c0: 1310720})]
op2009.met_dependencies = 
    [   MemoryDep('primals_1323', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1338', c1, {c0: 4096, c1: 320})]
op2009.outputs = [
    buf2009: ComputedBuffer
    buf2009.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2009.users = [
        NodeUser(node=SchedulerNode(name='op2010'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2011'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2013'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2035'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2036'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2038'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2048'), can_inplace=True, is_weak=False),
    ]
]
op2009.group.device = cuda:0
op2009.group.iteration = (1310720, 1)
op2009.sizes = ([4096, 320], [])
buf2006_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1338_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2008_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1980_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1323_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf1983_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2009_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2006', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1338', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2008', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf1980', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1323', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1983', get_index_5)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(load_5, constant_2)
        add_3 = ops.add(add_2, mul_2)
        add_4 = ops.add(mul_1, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf2009', get_index_6, add_4, None)
        return store


op2010: SchedulerNode(ComputedBuffer)
op2010.writes = [MemoryDep('buf2010', c0, {c0: 4096})]
op2010.unmet_dependencies = [MemoryDep('buf2009', c0, {c0: 1310720})]
op2010.met_dependencies = []
op2010.outputs = [
    buf2010: ComputedBuffer
    buf2010.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf2010.users = [NodeUser(node=SchedulerNode(name='op2013'), can_inplace=False, is_weak=False)]
]
op2010.group.device = cuda:0
op2010.group.iteration = (4096, 320)
op2010.sizes = ([4096], [320])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2010_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op2010_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2009', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2010', get_index_1, getitem)
        return store_reduction


op2011: SchedulerNode(ComputedBuffer)
op2011.writes = [MemoryDep('buf2011', c0, {c0: 4096})]
op2011.unmet_dependencies = [MemoryDep('buf2009', c0, {c0: 1310720})]
op2011.met_dependencies = []
op2011.outputs = [
    buf2011: ComputedBuffer
    buf2011.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf2011.users = [
        NodeUser(node=SchedulerNode(name='op2013'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2064'), can_inplace=True, is_weak=False),
    ]
]
op2011.group.device = cuda:0
op2011.group.iteration = (4096, 320)
op2011.sizes = ([4096], [320])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2011_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op2011_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2009', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2011', get_index_1, getitem_1)
        return store_reduction


op2013: SchedulerNode(ComputedBuffer)
op2013.writes = [MemoryDep('buf2013', c0, {c0: 1310720})]
op2013.unmet_dependencies = 
    [   MemoryDep('buf2009', c0, {c0: 1310720}),
        MemoryDep('buf2010', c0, {c0: 4096}),
        MemoryDep('buf2011', c0, {c0: 4096})]
op2013.met_dependencies = []
op2013.outputs = [
    buf2013: ComputedBuffer
    buf2013.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2013.users = [
        NodeUser(node=SchedulerNode(name='op2014'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2013.group.device = cuda:0
op2013.group.iteration = (1310720, 1)
op2013.sizes = ([4096, 320], [])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2010_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2011_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2013_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2013_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2009', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2010', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf2011', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2013', get_index_3, mul, None)
        return store


op2014: SchedulerNode(ComputedBuffer)
op2014.writes = [MemoryDep('buf2014', c0, {c0: 1310720})]
op2014.unmet_dependencies = [MemoryDep('buf2013', c0, {c0: 1310720})]
op2014.met_dependencies = 
    [   MemoryDep('primals_1341', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1342', c1, {c0: 4096, c1: 320})]
op2014.outputs = [
    buf2014: ComputedBuffer
    buf2014.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2014.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2015'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2016'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2014.group.device = cuda:0
op2014.group.iteration = (1310720, 1)
op2014.sizes = ([4096, 320], [])
buf2013_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1341_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1342_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2014_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2014_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2013', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1341', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1342', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2014', get_index_3, add, None)
        return store


op2015: ExternKernelSchedulerNode(ExternKernelOut)
op2015.writes = [StarDep(name='buf2015', mode=None)]
op2015.unmet_dependencies = [StarDep(name='buf2014', mode=None)]
op2015.met_dependencies = [StarDep(name='primals_1343', mode=None)]
op2015.outputs = [
    buf2015: ExternKernelOut
    buf2015.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2015.users = [NodeUser(node=SchedulerNode(name='op2024'), can_inplace=True, is_weak=False)]
]
op2015.node.kernel = extern_kernels.mm


op2016: ExternKernelSchedulerNode(ExternKernelOut)
op2016.writes = [StarDep(name='buf2016', mode=None)]
op2016.unmet_dependencies = [StarDep(name='buf2014', mode=None)]
op2016.met_dependencies = [StarDep(name='primals_1344', mode=None)]
op2016.outputs = [
    buf2016: ExternKernelOut
    buf2016.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf2016.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2017'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2016.node.kernel = extern_kernels.mm


op2017: ExternKernelSchedulerNode(ExternKernelOut)
op2017.writes = [StarDep(name='buf2017', mode=None)]
op2017.unmet_dependencies = [StarDep(name='buf2016', mode=None)]
op2017.met_dependencies = [StarDep(name='primals_1345', mode=None)]
op2017.outputs = [
    buf2017: ExternKernelOut
    buf2017.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2017.users = [NodeUser(node=SchedulerNode(name='op2024'), can_inplace=True, is_weak=False)]
]
op2017.node.kernel = extern_kernels.mm


op2018: ExternKernelSchedulerNode(ExternKernelOut)
op2018.writes = [StarDep(name='buf2018', mode=None)]
op2018.unmet_dependencies = []
op2018.met_dependencies = 
    [   StarDep(name='primals_1346', mode=None),
        StarDep(name='primals_177', mode=None)]
op2018.outputs = [
    buf2018: ExternKernelOut
    buf2018.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf2018.users = [NodeUser(node=SchedulerNode(name='op2025'), can_inplace=True, is_weak=False)]
]
op2018.node.kernel = extern_kernels.mm


op2019: ExternKernelSchedulerNode(ExternKernelOut)
op2019.writes = [StarDep(name='buf2019', mode=None)]
op2019.unmet_dependencies = []
op2019.met_dependencies = 
    [   StarDep(name='primals_1347', mode=None),
        StarDep(name='primals_177', mode=None)]
op2019.outputs = [
    buf2019: ExternKernelOut
    buf2019.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf2019.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2020'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2019.node.kernel = extern_kernels.mm


op2020: ExternKernelSchedulerNode(ExternKernelOut)
op2020.writes = [StarDep(name='buf2020', mode=None)]
op2020.unmet_dependencies = [StarDep(name='buf2019', mode=None)]
op2020.met_dependencies = [StarDep(name='primals_1348', mode=None)]
op2020.outputs = [
    buf2020: ExternKernelOut
    buf2020.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf2020.users = [NodeUser(node=SchedulerNode(name='op2025'), can_inplace=True, is_weak=False)]
]
op2020.node.kernel = extern_kernels.mm


op2021: ExternKernelSchedulerNode(ExternKernelOut)
op2021.writes = [StarDep(name='buf2021', mode=None)]
op2021.unmet_dependencies = []
op2021.met_dependencies = 
    [   StarDep(name='primals_1349', mode=None),
        StarDep(name='primals_177', mode=None)]
op2021.outputs = [
    buf2021: ExternKernelOut
    buf2021.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf2021.users = [NodeUser(node=SchedulerNode(name='op2026'), can_inplace=True, is_weak=False)]
]
op2021.node.kernel = extern_kernels.mm


op2022: ExternKernelSchedulerNode(ExternKernelOut)
op2022.writes = [StarDep(name='buf2022', mode=None)]
op2022.unmet_dependencies = []
op2022.met_dependencies = 
    [   StarDep(name='primals_1350', mode=None),
        StarDep(name='primals_177', mode=None)]
op2022.outputs = [
    buf2022: ExternKernelOut
    buf2022.layout = FixedLayout('cuda:0', torch.float32, size=[308, 80], stride=[80, 1])
    buf2022.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2023'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2022.node.kernel = extern_kernels.mm


op2023: ExternKernelSchedulerNode(ExternKernelOut)
op2023.writes = [StarDep(name='buf2023', mode=None)]
op2023.unmet_dependencies = [StarDep(name='buf2022', mode=None)]
op2023.met_dependencies = [StarDep(name='primals_1351', mode=None)]
op2023.outputs = [
    buf2023: ExternKernelOut
    buf2023.layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
    buf2023.users = [NodeUser(node=SchedulerNode(name='op2026'), can_inplace=True, is_weak=False)]
]
op2023.node.kernel = extern_kernels.mm


op2024: SchedulerNode(ComputedBuffer)
op2024.writes = [MemoryDep('buf2024', c0, {c0: 1310720})]
op2024.unmet_dependencies = 
    [   MemoryDep('buf2015', c0, {c0: 1310720}),
        MemoryDep('buf2017', c0, {c0: 1310720})]
op2024.met_dependencies = []
op2024.outputs = [
    buf2024: ComputedBuffer
    buf2024.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2024.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2027'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2024.group.device = cuda:0
op2024.group.iteration = (1310720, 1)
op2024.sizes = ([1310720], [])
buf2015_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2017_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2024_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2024_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2015', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2017', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2024', get_index_2, add, None)
        return store


op2025: SchedulerNode(ComputedBuffer)
op2025.writes = [MemoryDep('buf2025', c0, {c0: 98560})]
op2025.unmet_dependencies = [MemoryDep('buf2018', c0, {c0: 98560}), MemoryDep('buf2020', c0, {c0: 98560})]
op2025.met_dependencies = []
op2025.outputs = [
    buf2025: ComputedBuffer
    buf2025.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf2025.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2027'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2025.group.device = cuda:0
op2025.group.iteration = (98560, 1)
op2025.sizes = ([98560], [])
buf2018_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf2020_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf2025_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op2025_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2018', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2020', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2025', get_index_2, add, None)
        return store


op2026: SchedulerNode(ComputedBuffer)
op2026.writes = [MemoryDep('buf2026', c0, {c0: 98560})]
op2026.unmet_dependencies = [MemoryDep('buf2021', c0, {c0: 98560}), MemoryDep('buf2023', c0, {c0: 98560})]
op2026.met_dependencies = []
op2026.outputs = [
    buf2026: ComputedBuffer
    buf2026.layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
    buf2026.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2027'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2026.group.device = cuda:0
op2026.group.iteration = (98560, 1)
op2026.sizes = ([98560], [])
buf2021_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf2023_layout = FixedLayout('cuda:0', torch.float32, size=[308, 320], stride=[320, 1])
buf2026_layout = FixedLayout('cuda:0', torch.float32, size=[4, 77, 320], stride=[24640, 320, 1])
class op2026_loop_body:
    var_ranges = {p0: 98560}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2021', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2023', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        add = ops.add(load, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2026', get_index_2, add, None)
        return store


op2027: ExternKernelSchedulerNode(FallbackKernel)
op2027.writes = [StarDep(name='buf2027', mode=None)]
op2027.unmet_dependencies = 
    [   StarDep(name='buf2024', mode=None),
        StarDep(name='buf2025', mode=None),
        StarDep(name='buf2026', mode=None)]
op2027.met_dependencies = []
op2027.outputs = [
    buf2027: FallbackKernel
    buf2027.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf2027.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2028'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2029'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2030'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2031'), can_inplace=False, is_weak=False),
    ]
]
op2027.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op2028: ExternKernelSchedulerNode(MultiOutput)
op2028.writes = [StarDep(name='buf2028', mode=None)]
op2028.unmet_dependencies = [StarDep(name='buf2027', mode=None)]
op2028.met_dependencies = []
op2028.outputs = [
    buf2028: MultiOutput
    buf2028.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024, 64], stride=[327680, 64, 320, 1])
    buf2028.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2032'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2033'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2028.node.kernel = None


op2029: ExternKernelSchedulerNode(MultiOutput)
op2029.writes = [StarDep(name='buf2029', mode=None)]
op2029.unmet_dependencies = [StarDep(name='buf2027', mode=None)]
op2029.met_dependencies = []
op2029.outputs = [
    buf2029: MultiOutput
    buf2029.layout = FixedLayout('cuda:0', torch.float32, size=[4, 5, 1024], stride=[5120, 1024, 1])
    buf2029.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2029.node.kernel = None


op2030: ExternKernelSchedulerNode(MultiOutput)
op2030.writes = [StarDep(name='buf2030', mode=None)]
op2030.unmet_dependencies = [StarDep(name='buf2027', mode=None)]
op2030.met_dependencies = []
op2030.outputs = [
    buf2030: MultiOutput
    buf2030.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf2030.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2030.node.kernel = None


op2031: ExternKernelSchedulerNode(MultiOutput)
op2031.writes = [StarDep(name='buf2031', mode=None)]
op2031.unmet_dependencies = [StarDep(name='buf2027', mode=None)]
op2031.met_dependencies = []
op2031.outputs = [
    buf2031: MultiOutput
    buf2031.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf2031.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2031.node.kernel = None


op2032: ExternKernelSchedulerNode(ExternKernelOut)
op2032.writes = [StarDep(name='buf2032', mode=None)]
op2032.unmet_dependencies = [StarDep(name='buf2028', mode=None)]
op2032.met_dependencies = [StarDep(name='primals_1352', mode=None)]
op2032.outputs = [
    buf2032: ExternKernelOut
    buf2032.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2032.users = [
        NodeUser(node=SchedulerNode(name='op2035'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2036'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2038'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2048'), can_inplace=True, is_weak=False),
    ]
]
op2032.node.kernel = extern_kernels.mm


op2033: ExternKernelSchedulerNode(ExternKernelOut)
op2033.writes = [StarDep(name='buf2033', mode=None)]
op2033.unmet_dependencies = [StarDep(name='buf2028', mode=None)]
op2033.met_dependencies = [StarDep(name='primals_1354', mode=None)]
op2033.outputs = [
    buf2033: ExternKernelOut
    buf2033.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf2033.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2034'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2033.node.kernel = extern_kernels.mm


op2034: ExternKernelSchedulerNode(ExternKernelOut)
op2034.writes = [StarDep(name='buf2034', mode=None)]
op2034.unmet_dependencies = [StarDep(name='buf2033', mode=None)]
op2034.met_dependencies = [StarDep(name='primals_1355', mode=None)]
op2034.outputs = [
    buf2034: ExternKernelOut
    buf2034.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2034.users = [
        NodeUser(node=SchedulerNode(name='op2035'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2036'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2038'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2048'), can_inplace=True, is_weak=False),
    ]
]
op2034.node.kernel = extern_kernels.mm


op2035: SchedulerNode(ComputedBuffer)
op2035.writes = [MemoryDep('buf2035', c0, {c0: 4096})]
op2035.unmet_dependencies = 
    [   MemoryDep('buf2009', c0, {c0: 1310720}),
        MemoryDep('buf2032', c0, {c0: 1310720}),
        MemoryDep('buf2034', c0, {c0: 1310720})]
op2035.met_dependencies = [MemoryDep('primals_1353', c1, {c0: 4096, c1: 320})]
op2035.outputs = [
    buf2035: ComputedBuffer
    buf2035.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf2035.users = [NodeUser(node=SchedulerNode(name='op2038'), can_inplace=False, is_weak=False)]
]
op2035.group.device = cuda:0
op2035.group.iteration = (4096, 320)
op2035.sizes = ([4096], [320])
buf2032_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1353_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2034_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2035_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op2035_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2032', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1353', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2034', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf2009', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf2035', get_index_4, getitem)
        return store_reduction


op2036: SchedulerNode(ComputedBuffer)
op2036.writes = [MemoryDep('buf2036', c0, {c0: 4096})]
op2036.unmet_dependencies = 
    [   MemoryDep('buf2009', c0, {c0: 1310720}),
        MemoryDep('buf2032', c0, {c0: 1310720}),
        MemoryDep('buf2034', c0, {c0: 1310720})]
op2036.met_dependencies = [MemoryDep('primals_1353', c1, {c0: 4096, c1: 320})]
op2036.outputs = [
    buf2036: ComputedBuffer
    buf2036.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
    buf2036.users = [
        NodeUser(node=SchedulerNode(name='op2038'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2063'), can_inplace=True, is_weak=False),
    ]
]
op2036.group.device = cuda:0
op2036.group.iteration = (4096, 320)
op2036.sizes = ([4096], [320])
buf2032_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1353_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2034_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2036_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
class op2036_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2032', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1353', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2034', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf2009', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf2036', get_index_4, getitem_1)
        return store_reduction


op2038: SchedulerNode(ComputedBuffer)
op2038.writes = [MemoryDep('buf2038', c0, {c0: 1310720})]
op2038.unmet_dependencies = 
    [   MemoryDep('buf2009', c0, {c0: 1310720}),
        MemoryDep('buf2032', c0, {c0: 1310720}),
        MemoryDep('buf2034', c0, {c0: 1310720}),
        MemoryDep('buf2035', c0, {c0: 4096}),
        MemoryDep('buf2036', c0, {c0: 4096})]
op2038.met_dependencies = [MemoryDep('primals_1353', c1, {c0: 4096, c1: 320})]
op2038.outputs = [
    buf2038: ComputedBuffer
    buf2038.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2038.users = [
        NodeUser(node=SchedulerNode(name='op2039'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2038.group.device = cuda:0
op2038.group.iteration = (1310720, 1)
op2038.sizes = ([4096, 320], [])
buf2032_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1353_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2034_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2035_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2036_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2038_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2038_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2032', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1353', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2034', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf2009', get_index_3)
        add_2 = ops.add(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf2035', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf2036', get_index_5)
        constant_2 = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_3)
        rsqrt = ops.rsqrt(add_3)
        mul_2 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf2038', get_index_6, mul_2, None)
        return store


op2039: SchedulerNode(ComputedBuffer)
op2039.writes = [MemoryDep('buf2039', c0, {c0: 1310720})]
op2039.unmet_dependencies = [MemoryDep('buf2038', c0, {c0: 1310720})]
op2039.met_dependencies = 
    [   MemoryDep('primals_1356', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1357', c1, {c0: 4096, c1: 320})]
op2039.outputs = [
    buf2039: ComputedBuffer
    buf2039.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2039.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2040'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2041'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2039.group.device = cuda:0
op2039.group.iteration = (1310720, 1)
op2039.sizes = ([4096, 320], [])
buf2038_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
primals_1356_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1357_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2039_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2039_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2038', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1356', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1357', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2039', get_index_3, add, None)
        return store


op2040: ExternKernelSchedulerNode(ExternKernelOut)
op2040.writes = [StarDep(name='buf2040', mode=None)]
op2040.unmet_dependencies = [StarDep(name='buf2039', mode=None)]
op2040.met_dependencies = [StarDep(name='primals_1358', mode=None)]
op2040.outputs = [
    buf2040: ExternKernelOut
    buf2040.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf2040.users = [NodeUser(node=SchedulerNode(name='op2043'), can_inplace=True, is_weak=False)]
]
op2040.node.kernel = extern_kernels.mm


op2041: ExternKernelSchedulerNode(ExternKernelOut)
op2041.writes = [StarDep(name='buf2041', mode=None)]
op2041.unmet_dependencies = [StarDep(name='buf2039', mode=None)]
op2041.met_dependencies = [StarDep(name='primals_1360', mode=None)]
op2041.outputs = [
    buf2041: ExternKernelOut
    buf2041.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf2041.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2042'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2041.node.kernel = extern_kernels.mm


op2042: ExternKernelSchedulerNode(ExternKernelOut)
op2042.writes = [StarDep(name='buf2042', mode=None)]
op2042.unmet_dependencies = [StarDep(name='buf2041', mode=None)]
op2042.met_dependencies = [StarDep(name='primals_1361', mode=None)]
op2042.outputs = [
    buf2042: ExternKernelOut
    buf2042.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
    buf2042.users = [NodeUser(node=SchedulerNode(name='op2043'), can_inplace=True, is_weak=False)]
]
op2042.node.kernel = extern_kernels.mm


op2043: SchedulerNode(ComputedBuffer)
op2043.writes = [MemoryDep('buf2043', c0, {c0: 10485760})]
op2043.unmet_dependencies = 
    [   MemoryDep('buf2040', c0, {c0: 10485760}),
        MemoryDep('buf2042', c0, {c0: 10485760})]
op2043.met_dependencies = [MemoryDep('primals_1359', c1, {c0: 4096, c1: 2560})]
op2043.outputs = [
    buf2043: ComputedBuffer
    buf2043.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
    buf2043.users = [
        NodeUser(node=SchedulerNode(name='op2044'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2043.group.device = cuda:0
op2043.group.iteration = (10485760, 1)
op2043.sizes = ([4096, 2560], [])
buf2040_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
primals_1359_layout = FixedLayout('cuda:0', torch.float32, size=[2560], stride=[1])
buf2042_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 2560], stride=[2560, 1])
buf2043_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
class op2043_loop_body:
    var_ranges = {p0: 4096, p1: 2560}
    index0 = 2560*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2040', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1359', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2042', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2043', get_index_3, add_1, None)
        return store


op2044: SchedulerNode(ComputedBuffer)
op2044.writes = [MemoryDep('buf2044', c0, {c0: 5242880})]
op2044.unmet_dependencies = 
    [   MemoryDep('buf2043', 2560*c0 + c1 + 1280, {c0: 4096, c1: 1280}),
        MemoryDep('buf2043', 2560*c0 + c1, {c0: 4096, c1: 1280})]
op2044.met_dependencies = []
op2044.outputs = [
    buf2044: ComputedBuffer
    buf2044.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
    buf2044.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2045'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2046'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2044.group.device = cuda:0
op2044.group.iteration = (5242880, 1)
op2044.sizes = ([4096, 1280], [])
buf2043_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf2043_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 2560], stride=[2621440, 2560, 1])
buf2044_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1280], stride=[1310720, 1280, 1])
class op2044_loop_body:
    var_ranges = {p0: 4096, p1: 1280}
    index0 = 2560*p0 + p1
    index1 = 2560*p0 + p1 + 1280
    index2 = 1280*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2043', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2043', get_index_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf2043', get_index_2)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_2, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        mul_3 = ops.mul(load, mul_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf2044', get_index_3, mul_3, None)
        return store


op2045: ExternKernelSchedulerNode(ExternKernelOut)
op2045.writes = [StarDep(name='buf2045', mode=None)]
op2045.unmet_dependencies = [StarDep(name='buf2044', mode=None)]
op2045.met_dependencies = [StarDep(name='primals_1362', mode=None)]
op2045.outputs = [
    buf2045: ExternKernelOut
    buf2045.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2045.users = [NodeUser(node=SchedulerNode(name='op2048'), can_inplace=True, is_weak=False)]
]
op2045.node.kernel = extern_kernels.mm


op2046: ExternKernelSchedulerNode(ExternKernelOut)
op2046.writes = [StarDep(name='buf2046', mode=None)]
op2046.unmet_dependencies = [StarDep(name='buf2044', mode=None)]
op2046.met_dependencies = [StarDep(name='primals_1364', mode=None)]
op2046.outputs = [
    buf2046: ExternKernelOut
    buf2046.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf2046.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2047'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2046.node.kernel = extern_kernels.mm


op2047: ExternKernelSchedulerNode(ExternKernelOut)
op2047.writes = [StarDep(name='buf2047', mode=None)]
op2047.unmet_dependencies = [StarDep(name='buf2046', mode=None)]
op2047.met_dependencies = [StarDep(name='primals_1365', mode=None)]
op2047.outputs = [
    buf2047: ExternKernelOut
    buf2047.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2047.users = [NodeUser(node=SchedulerNode(name='op2048'), can_inplace=True, is_weak=False)]
]
op2047.node.kernel = extern_kernels.mm


op2048: SchedulerNode(ComputedBuffer)
op2048.writes = [MemoryDep('buf2048', c0, {c0: 1310720})]
op2048.unmet_dependencies = 
    [   MemoryDep('buf2009', c0, {c0: 1310720}),
        MemoryDep('buf2032', c0, {c0: 1310720}),
        MemoryDep('buf2034', c0, {c0: 1310720}),
        MemoryDep('buf2045', c0, {c0: 1310720}),
        MemoryDep('buf2047', c0, {c0: 1310720})]
op2048.met_dependencies = 
    [   MemoryDep('primals_1353', c1, {c0: 4096, c1: 320}),
        MemoryDep('primals_1363', c1, {c0: 4096, c1: 320})]
op2048.outputs = [
    buf2048: ComputedBuffer
    buf2048.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
    buf2048.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2049'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2050'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2048.group.device = cuda:0
op2048.group.iteration = (1310720, 1)
op2048.sizes = ([4096, 320], [])
buf2045_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1363_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2047_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2032_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1353_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2034_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf2009_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
buf2048_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 320], stride=[327680, 320, 1])
class op2048_loop_body:
    var_ranges = {p0: 4096, p1: 320}
    index0 = 320*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2045', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1363', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2047', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf2032', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_1353', get_index_4)
        add_2 = ops.add(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf2034', get_index_5)
        constant_1 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(load_5, constant_1)
        add_3 = ops.add(add_2, mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(add_3, constant_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf2009', get_index_6)
        add_4 = ops.add(mul_2, load_6)
        add_5 = ops.add(add_1, add_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf2048', get_index_7, add_5, None)
        return store


op2049: ExternKernelSchedulerNode(ExternKernelOut)
op2049.writes = [StarDep(name='buf2049', mode=None)]
op2049.unmet_dependencies = [StarDep(name='buf2048', mode=None)]
op2049.met_dependencies = [StarDep(name='primals_1366', mode=None)]
op2049.outputs = [
    buf2049: ExternKernelOut
    buf2049.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2049.users = [NodeUser(node=SchedulerNode(name='op2052'), can_inplace=False, is_weak=False)]
]
op2049.node.kernel = extern_kernels.mm


op2050: ExternKernelSchedulerNode(ExternKernelOut)
op2050.writes = [StarDep(name='buf2050', mode=None)]
op2050.unmet_dependencies = [StarDep(name='buf2048', mode=None)]
op2050.met_dependencies = [StarDep(name='primals_1368', mode=None)]
op2050.outputs = [
    buf2050: ExternKernelOut
    buf2050.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 80], stride=[80, 1])
    buf2050.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2051'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2050.node.kernel = extern_kernels.mm


op2051: ExternKernelSchedulerNode(ExternKernelOut)
op2051.writes = [StarDep(name='buf2051', mode=None)]
op2051.unmet_dependencies = [StarDep(name='buf2050', mode=None)]
op2051.met_dependencies = [StarDep(name='primals_1369', mode=None)]
op2051.outputs = [
    buf2051: ExternKernelOut
    buf2051.layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
    buf2051.users = [NodeUser(node=SchedulerNode(name='op2052'), can_inplace=False, is_weak=False)]
]
op2051.node.kernel = extern_kernels.mm


op2052: SchedulerNode(ComputedBuffer)
op2052.writes = [MemoryDep('buf2052', c0, {c0: 1310720})]
op2052.unmet_dependencies = 
    [   MemoryDep('buf1974', c0, {c0: 1310720}),
        MemoryDep('buf2049', 327680*c0 + c1 + 320*c2, {c0: 4, c1: 320, c2: 1024}),
        MemoryDep('buf2051', 327680*c0 + c1 + 320*c2, {c0: 4, c1: 320, c2: 1024})]
op2052.met_dependencies = [MemoryDep('primals_1367', c1, {c0: 4, c1: 320})]
op2052.outputs = [
    buf2052: ComputedBuffer
    buf2052.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf2052.users = [
        NodeUser(node=SchedulerNode(name='op2053'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2054'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2057'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2052.group.device = cuda:0
op2052.group.iteration = (1310720, 1)
op2052.sizes = ([4, 320, 1024], [])
buf2049_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
primals_1367_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2051_layout = FixedLayout('cuda:0', torch.float32, size=[4096, 320], stride=[320, 1])
buf1974_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf2052_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op2052_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + p1 + 320*p2
    index1 = p1
    index2 = 327680*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2049', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1367', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2051', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1974', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf2052', get_index_4, add_2, None)
        return store


op2053: SchedulerNode(ComputedBuffer)
op2053.writes = [MemoryDep('buf2053', c0, {c0: 128})]
op2053.unmet_dependencies = [MemoryDep('buf2052', c0, {c0: 1310720})]
op2053.met_dependencies = []
op2053.outputs = [
    buf2053: ComputedBuffer
    buf2053.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf2053.users = [
        NodeUser(node=SchedulerNode(name='op2057'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2053.group.device = cuda:0
op2053.group.iteration = (128, 10240)
op2053.sizes = ([128], [10240])
buf2052_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf2053_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op2053_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2052', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2053', get_index_1, getitem)
        return store_reduction


op2054: SchedulerNode(ComputedBuffer)
op2054.writes = [MemoryDep('buf2054', c0, {c0: 128})]
op2054.unmet_dependencies = [MemoryDep('buf2052', c0, {c0: 1310720})]
op2054.met_dependencies = []
op2054.outputs = [
    buf2054: ComputedBuffer
    buf2054.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
    buf2054.users = [NodeUser(node=SchedulerNode(name='op2056'), can_inplace=True, is_weak=False)]
]
op2054.group.device = cuda:0
op2054.group.iteration = (128, 10240)
op2054.sizes = ([128], [10240])
buf2052_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf2054_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
class op2054_loop_body:
    var_ranges = {p0: 128, p1: 10240}
    index0 = 10240*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2052', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2054', get_index_1, getitem_1)
        return store_reduction


op2056: SchedulerNode(ComputedBuffer)
op2056.writes = [MemoryDep('buf2056', c0, {c0: 128})]
op2056.unmet_dependencies = [MemoryDep('buf2054', c0, {c0: 128})]
op2056.met_dependencies = []
op2056.outputs = [
    buf2056: ComputedBuffer
    buf2056.layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
    buf2056.users = [
        NodeUser(node=SchedulerNode(name='op2057'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2056.group.device = cuda:0
op2056.group.iteration = (128, 1)
op2056.sizes = ([128], [])
buf2054_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 128, 128])
buf2056_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
class op2056_loop_body:
    var_ranges = {p0: 128}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2054', get_index)
        constant = ops.constant(10240.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2056', get_index_1, rsqrt, None)
        return store


op2057: SchedulerNode(ComputedBuffer)
op2057.writes = [MemoryDep('buf2057', c0, {c0: 1310720})]
op2057.unmet_dependencies = 
    [   MemoryDep('buf2052', c0, {c0: 1310720}),
        MemoryDep('buf2053', 32*c0 + ((c1//10)), {c0: 4, c1: 320}),
        MemoryDep('buf2056', 32*c0 + ((c1//10)), {c0: 4, c1: 320})]
op2057.met_dependencies = 
    [   MemoryDep('primals_1370', c1, {c0: 4, c1: 320}),
        MemoryDep('primals_1371', c1, {c0: 4, c1: 320})]
op2057.outputs = [
    buf2057: ComputedBuffer
    buf2057.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf2057.users = [NodeUser(node=SchedulerNode(name='op2058'), can_inplace=True, is_weak=False)]
]
op2057.group.device = cuda:0
op2057.group.iteration = (1310720, 1)
op2057.sizes = ([4, 320, 1024], [])
buf2052_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf2053_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
buf2056_layout = FixedLayout('cuda:0', torch.float32, size=[4, 32, 1, 1], stride=[32, 1, 1, 1])
primals_1370_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
primals_1371_layout = FixedLayout('cuda:0', torch.float32, size=[320], stride=[1])
buf2057_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op2057_loop_body:
    var_ranges = {p0: 4, p1: 320, p2: 1024}
    index0 = 327680*p0 + 1024*p1 + p2
    index1 = 32*p0 + ((p1//10))
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2052', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2053', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf2056', get_index_2)
        mul = ops.mul(sub, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_1370', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_1371', get_index_4)
        add = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf2057', get_index_5, add, None)
        return store


op2058: SchedulerNode(ComputedBuffer)
op2058.writes = [MemoryDep('buf2058', c0, {c0: 1310720})]
op2058.unmet_dependencies = [MemoryDep('buf2057', c0, {c0: 1310720})]
op2058.met_dependencies = []
op2058.outputs = [
    buf2058: ComputedBuffer
    buf2058.layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
    buf2058.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2059'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2060'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2058.group.device = cuda:0
op2058.group.iteration = (1310720, 1)
op2058.sizes = ([1310720], [])
buf2057_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
buf2058_layout = FixedLayout('cuda:0', torch.float32, size=[4, 320, 32, 32], stride=[327680, 1024, 32, 1])
class op2058_loop_body:
    var_ranges = {p0: 1310720}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2057', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2057', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf2058', get_index_2, mul, None)
        return store


op2059: ExternKernelSchedulerNode(ExternKernelAlloc)
op2059.writes = [StarDep(name='buf2059', mode=None)]
op2059.unmet_dependencies = [StarDep(name='buf2058', mode=None)]
op2059.met_dependencies = [StarDep(name='primals_1372', mode=None)]
op2059.outputs = [
    buf2059: ExternKernelAlloc
    buf2059.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf2059.users = [NodeUser(node=SchedulerNode(name='op2062'), can_inplace=True, is_weak=False)]
]
op2059.node.kernel = extern_kernels.convolution


op2060: ExternKernelSchedulerNode(ExternKernelAlloc)
op2060.writes = [StarDep(name='buf2060', mode=None)]
op2060.unmet_dependencies = [StarDep(name='buf2058', mode=None)]
op2060.met_dependencies = [StarDep(name='primals_1374', mode=None)]
op2060.outputs = [
    buf2060: ExternKernelAlloc
    buf2060.layout = FixedLayout('cuda:0', torch.float32, size=[4, 80, 32, 32], stride=[81920, 1024, 32, 1])
    buf2060.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2061'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2060.node.kernel = extern_kernels.convolution


op2061: ExternKernelSchedulerNode(ExternKernelAlloc)
op2061.writes = [StarDep(name='buf2061', mode=None)]
op2061.unmet_dependencies = [StarDep(name='buf2060', mode=None)]
op2061.met_dependencies = [StarDep(name='primals_1375', mode=None)]
op2061.outputs = [
    buf2061: ExternKernelAlloc
    buf2061.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf2061.users = [NodeUser(node=SchedulerNode(name='op2062'), can_inplace=True, is_weak=False)]
]
op2061.node.kernel = extern_kernels.convolution


op2062: SchedulerNode(ComputedBuffer)
op2062.writes = [MemoryDep('buf2062', c0, {c0: 16384})]
op2062.unmet_dependencies = [MemoryDep('buf2059', c0, {c0: 16384}), MemoryDep('buf2061', c0, {c0: 16384})]
op2062.met_dependencies = [MemoryDep('primals_1373', c1, {c0: 4, c1: 4})]
op2062.outputs = [
    buf2062: ComputedBuffer
    buf2062.layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
    buf2062.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2062.group.device = cuda:0
op2062.group.iteration = (16384, 1)
op2062.sizes = ([4, 4, 1024], [])
buf2059_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
primals_1373_layout = FixedLayout('cuda:0', torch.float32, size=[4], stride=[1])
buf2061_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
buf2062_layout = FixedLayout('cuda:0', torch.float32, size=[4, 4, 32, 32], stride=[4096, 1024, 32, 1])
class op2062_loop_body:
    var_ranges = {p0: 4, p1: 4, p2: 1024}
    index0 = 4096*p0 + 1024*p1 + p2
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2059', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1373', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2061', get_index_2)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_2, constant)
        add_1 = ops.add(add, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2062', get_index_3, add_1, None)
        return store


op2063: SchedulerNode(ComputedBuffer)
op2063.writes = [MemoryDep('buf2063', c0, {c0: 4096})]
op2063.unmet_dependencies = [MemoryDep('buf2036', c0, {c0: 4096})]
op2063.met_dependencies = []
op2063.outputs = [
    buf2063: ComputedBuffer
    buf2063.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2063.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2063.group.device = cuda:0
op2063.group.iteration = (4096, 1)
op2063.sizes = ([4096], [])
buf2036_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2063_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2063_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2036', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2063', get_index_1, mul, None)
        return store


op2064: SchedulerNode(ComputedBuffer)
op2064.writes = [MemoryDep('buf2064', c0, {c0: 4096})]
op2064.unmet_dependencies = [MemoryDep('buf2011', c0, {c0: 4096})]
op2064.met_dependencies = []
op2064.outputs = [
    buf2064: ComputedBuffer
    buf2064.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2064.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2064.group.device = cuda:0
op2064.group.iteration = (4096, 1)
op2064.sizes = ([4096], [])
buf2011_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2064_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2064_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2011', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2064', get_index_1, mul, None)
        return store


op2065: SchedulerNode(ComputedBuffer)
op2065.writes = [MemoryDep('buf2065', c0, {c0: 4096})]
op2065.unmet_dependencies = [MemoryDep('buf1985', c0, {c0: 4096})]
op2065.met_dependencies = []
op2065.outputs = [
    buf2065: ComputedBuffer
    buf2065.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2065.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2065.group.device = cuda:0
op2065.group.iteration = (4096, 1)
op2065.sizes = ([4096], [])
buf1985_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2065_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2065_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1985', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2065', get_index_1, mul, None)
        return store


op2066: SchedulerNode(ComputedBuffer)
op2066.writes = [MemoryDep('buf2066', c0, {c0: 4096})]
op2066.unmet_dependencies = [MemoryDep('buf1934', c0, {c0: 4096})]
op2066.met_dependencies = []
op2066.outputs = [
    buf2066: ComputedBuffer
    buf2066.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2066.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2066.group.device = cuda:0
op2066.group.iteration = (4096, 1)
op2066.sizes = ([4096], [])
buf1934_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2066_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2066_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1934', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2066', get_index_1, mul, None)
        return store


op2067: SchedulerNode(ComputedBuffer)
op2067.writes = [MemoryDep('buf2067', c0, {c0: 4096})]
op2067.unmet_dependencies = [MemoryDep('buf1909', c0, {c0: 4096})]
op2067.met_dependencies = []
op2067.outputs = [
    buf2067: ComputedBuffer
    buf2067.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2067.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2067.group.device = cuda:0
op2067.group.iteration = (4096, 1)
op2067.sizes = ([4096], [])
buf1909_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2067_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2067_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1909', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2067', get_index_1, mul, None)
        return store


op2068: SchedulerNode(ComputedBuffer)
op2068.writes = [MemoryDep('buf2068', c0, {c0: 4096})]
op2068.unmet_dependencies = [MemoryDep('buf1883', c0, {c0: 4096})]
op2068.met_dependencies = []
op2068.outputs = [
    buf2068: ComputedBuffer
    buf2068.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2068.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2068.group.device = cuda:0
op2068.group.iteration = (4096, 1)
op2068.sizes = ([4096], [])
buf1883_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2068_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2068_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1883', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2068', get_index_1, mul, None)
        return store


op2069: SchedulerNode(ComputedBuffer)
op2069.writes = [MemoryDep('buf2069', c0, {c0: 4096})]
op2069.unmet_dependencies = [MemoryDep('buf1832', c0, {c0: 4096})]
op2069.met_dependencies = []
op2069.outputs = [
    buf2069: ComputedBuffer
    buf2069.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2069.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2069.group.device = cuda:0
op2069.group.iteration = (4096, 1)
op2069.sizes = ([4096], [])
buf1832_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2069_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2069_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1832', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2069', get_index_1, mul, None)
        return store


op2070: SchedulerNode(ComputedBuffer)
op2070.writes = [MemoryDep('buf2070', c0, {c0: 4096})]
op2070.unmet_dependencies = [MemoryDep('buf1807', c0, {c0: 4096})]
op2070.met_dependencies = []
op2070.outputs = [
    buf2070: ComputedBuffer
    buf2070.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2070.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2070.group.device = cuda:0
op2070.group.iteration = (4096, 1)
op2070.sizes = ([4096], [])
buf1807_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2070_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2070_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1807', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2070', get_index_1, mul, None)
        return store


op2071: SchedulerNode(ComputedBuffer)
op2071.writes = [MemoryDep('buf2071', c0, {c0: 4096})]
op2071.unmet_dependencies = [MemoryDep('buf1781', c0, {c0: 4096})]
op2071.met_dependencies = []
op2071.outputs = [
    buf2071: ComputedBuffer
    buf2071.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2071.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2071.group.device = cuda:0
op2071.group.iteration = (4096, 1)
op2071.sizes = ([4096], [])
buf1781_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2071_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2071_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1781', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2071', get_index_1, mul, None)
        return store


op2072: SchedulerNode(ComputedBuffer)
op2072.writes = [MemoryDep('buf2072', c0, {c0: 1024})]
op2072.unmet_dependencies = [MemoryDep('buf1725', c0, {c0: 1024})]
op2072.met_dependencies = []
op2072.outputs = [
    buf2072: ComputedBuffer
    buf2072.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2072.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2072.group.device = cuda:0
op2072.group.iteration = (1024, 1)
op2072.sizes = ([1024], [])
buf1725_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2072_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2072_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1725', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2072', get_index_1, mul, None)
        return store


op2073: SchedulerNode(ComputedBuffer)
op2073.writes = [MemoryDep('buf2073', c0, {c0: 1024})]
op2073.unmet_dependencies = [MemoryDep('buf1700', c0, {c0: 1024})]
op2073.met_dependencies = []
op2073.outputs = [
    buf2073: ComputedBuffer
    buf2073.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2073.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2073.group.device = cuda:0
op2073.group.iteration = (1024, 1)
op2073.sizes = ([1024], [])
buf1700_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2073_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2073_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1700', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2073', get_index_1, mul, None)
        return store


op2074: SchedulerNode(ComputedBuffer)
op2074.writes = [MemoryDep('buf2074', c0, {c0: 1024})]
op2074.unmet_dependencies = [MemoryDep('buf1674', c0, {c0: 1024})]
op2074.met_dependencies = []
op2074.outputs = [
    buf2074: ComputedBuffer
    buf2074.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2074.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2074.group.device = cuda:0
op2074.group.iteration = (1024, 1)
op2074.sizes = ([1024], [])
buf1674_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2074_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2074_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1674', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2074', get_index_1, mul, None)
        return store


op2075: SchedulerNode(ComputedBuffer)
op2075.writes = [MemoryDep('buf2075', c0, {c0: 1024})]
op2075.unmet_dependencies = [MemoryDep('buf1623', c0, {c0: 1024})]
op2075.met_dependencies = []
op2075.outputs = [
    buf2075: ComputedBuffer
    buf2075.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2075.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2075.group.device = cuda:0
op2075.group.iteration = (1024, 1)
op2075.sizes = ([1024], [])
buf1623_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2075_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2075_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1623', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2075', get_index_1, mul, None)
        return store


op2076: SchedulerNode(ComputedBuffer)
op2076.writes = [MemoryDep('buf2076', c0, {c0: 1024})]
op2076.unmet_dependencies = [MemoryDep('buf1598', c0, {c0: 1024})]
op2076.met_dependencies = []
op2076.outputs = [
    buf2076: ComputedBuffer
    buf2076.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2076.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2076.group.device = cuda:0
op2076.group.iteration = (1024, 1)
op2076.sizes = ([1024], [])
buf1598_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2076_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2076_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1598', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2076', get_index_1, mul, None)
        return store


op2077: SchedulerNode(ComputedBuffer)
op2077.writes = [MemoryDep('buf2077', c0, {c0: 1024})]
op2077.unmet_dependencies = [MemoryDep('buf1572', c0, {c0: 1024})]
op2077.met_dependencies = []
op2077.outputs = [
    buf2077: ComputedBuffer
    buf2077.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2077.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2077.group.device = cuda:0
op2077.group.iteration = (1024, 1)
op2077.sizes = ([1024], [])
buf1572_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2077_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2077_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1572', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2077', get_index_1, mul, None)
        return store


op2078: SchedulerNode(ComputedBuffer)
op2078.writes = [MemoryDep('buf2078', c0, {c0: 1024})]
op2078.unmet_dependencies = [MemoryDep('buf1521', c0, {c0: 1024})]
op2078.met_dependencies = []
op2078.outputs = [
    buf2078: ComputedBuffer
    buf2078.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2078.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2078.group.device = cuda:0
op2078.group.iteration = (1024, 1)
op2078.sizes = ([1024], [])
buf1521_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2078_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2078_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1521', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2078', get_index_1, mul, None)
        return store


op2079: SchedulerNode(ComputedBuffer)
op2079.writes = [MemoryDep('buf2079', c0, {c0: 1024})]
op2079.unmet_dependencies = [MemoryDep('buf1496', c0, {c0: 1024})]
op2079.met_dependencies = []
op2079.outputs = [
    buf2079: ComputedBuffer
    buf2079.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2079.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2079.group.device = cuda:0
op2079.group.iteration = (1024, 1)
op2079.sizes = ([1024], [])
buf1496_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2079_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2079_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1496', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2079', get_index_1, mul, None)
        return store


op2080: SchedulerNode(ComputedBuffer)
op2080.writes = [MemoryDep('buf2080', c0, {c0: 1024})]
op2080.unmet_dependencies = [MemoryDep('buf1470', c0, {c0: 1024})]
op2080.met_dependencies = []
op2080.outputs = [
    buf2080: ComputedBuffer
    buf2080.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2080.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2080.group.device = cuda:0
op2080.group.iteration = (1024, 1)
op2080.sizes = ([1024], [])
buf1470_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2080_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2080_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1470', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2080', get_index_1, mul, None)
        return store


op2081: SchedulerNode(ComputedBuffer)
op2081.writes = [MemoryDep('buf2081', c0, {c0: 256})]
op2081.unmet_dependencies = [MemoryDep('buf1414', c0, {c0: 256})]
op2081.met_dependencies = []
op2081.outputs = [
    buf2081: ComputedBuffer
    buf2081.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2081.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2081.group.device = cuda:0
op2081.group.iteration = (256, 1)
op2081.sizes = ([256], [])
buf1414_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2081_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2081_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1414', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2081', get_index_1, mul, None)
        return store


op2082: SchedulerNode(ComputedBuffer)
op2082.writes = [MemoryDep('buf2082', c0, {c0: 256})]
op2082.unmet_dependencies = [MemoryDep('buf1389', c0, {c0: 256})]
op2082.met_dependencies = []
op2082.outputs = [
    buf2082: ComputedBuffer
    buf2082.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2082.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2082.group.device = cuda:0
op2082.group.iteration = (256, 1)
op2082.sizes = ([256], [])
buf1389_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2082_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2082_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1389', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2082', get_index_1, mul, None)
        return store


op2083: SchedulerNode(ComputedBuffer)
op2083.writes = [MemoryDep('buf2083', c0, {c0: 256})]
op2083.unmet_dependencies = [MemoryDep('buf1363', c0, {c0: 256})]
op2083.met_dependencies = []
op2083.outputs = [
    buf2083: ComputedBuffer
    buf2083.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2083.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2083.group.device = cuda:0
op2083.group.iteration = (256, 1)
op2083.sizes = ([256], [])
buf1363_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2083_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2083_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1363', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2083', get_index_1, mul, None)
        return store


op2084: SchedulerNode(ComputedBuffer)
op2084.writes = [MemoryDep('buf2084', c0, {c0: 256})]
op2084.unmet_dependencies = [MemoryDep('buf1312', c0, {c0: 256})]
op2084.met_dependencies = []
op2084.outputs = [
    buf2084: ComputedBuffer
    buf2084.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2084.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2084.group.device = cuda:0
op2084.group.iteration = (256, 1)
op2084.sizes = ([256], [])
buf1312_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2084_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2084_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1312', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2084', get_index_1, mul, None)
        return store


op2085: SchedulerNode(ComputedBuffer)
op2085.writes = [MemoryDep('buf2085', c0, {c0: 256})]
op2085.unmet_dependencies = [MemoryDep('buf1287', c0, {c0: 256})]
op2085.met_dependencies = []
op2085.outputs = [
    buf2085: ComputedBuffer
    buf2085.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2085.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2085.group.device = cuda:0
op2085.group.iteration = (256, 1)
op2085.sizes = ([256], [])
buf1287_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2085_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2085_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1287', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2085', get_index_1, mul, None)
        return store


op2086: SchedulerNode(ComputedBuffer)
op2086.writes = [MemoryDep('buf2086', c0, {c0: 256})]
op2086.unmet_dependencies = [MemoryDep('buf1261', c0, {c0: 256})]
op2086.met_dependencies = []
op2086.outputs = [
    buf2086: ComputedBuffer
    buf2086.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2086.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2086.group.device = cuda:0
op2086.group.iteration = (256, 1)
op2086.sizes = ([256], [])
buf1261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2086_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2086_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1261', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2086', get_index_1, mul, None)
        return store


op2087: SchedulerNode(ComputedBuffer)
op2087.writes = [MemoryDep('buf2087', c0, {c0: 256})]
op2087.unmet_dependencies = [MemoryDep('buf1210', c0, {c0: 256})]
op2087.met_dependencies = []
op2087.outputs = [
    buf2087: ComputedBuffer
    buf2087.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2087.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2087.group.device = cuda:0
op2087.group.iteration = (256, 1)
op2087.sizes = ([256], [])
buf1210_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2087_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2087_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1210', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2087', get_index_1, mul, None)
        return store


op2088: SchedulerNode(ComputedBuffer)
op2088.writes = [MemoryDep('buf2088', c0, {c0: 256})]
op2088.unmet_dependencies = [MemoryDep('buf1185', c0, {c0: 256})]
op2088.met_dependencies = []
op2088.outputs = [
    buf2088: ComputedBuffer
    buf2088.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2088.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2088.group.device = cuda:0
op2088.group.iteration = (256, 1)
op2088.sizes = ([256], [])
buf1185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2088_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2088_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1185', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2088', get_index_1, mul, None)
        return store


op2089: SchedulerNode(ComputedBuffer)
op2089.writes = [MemoryDep('buf2089', c0, {c0: 256})]
op2089.unmet_dependencies = [MemoryDep('buf1159', c0, {c0: 256})]
op2089.met_dependencies = []
op2089.outputs = [
    buf2089: ComputedBuffer
    buf2089.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2089.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2089.group.device = cuda:0
op2089.group.iteration = (256, 1)
op2089.sizes = ([256], [])
buf1159_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2089_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2089_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1159', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2089', get_index_1, mul, None)
        return store


op2090: SchedulerNode(ComputedBuffer)
op2090.writes = [MemoryDep('buf2090', c0, {c0: 64})]
op2090.unmet_dependencies = [MemoryDep('buf1010', c0, {c0: 64})]
op2090.met_dependencies = []
op2090.outputs = [
    buf2090: ComputedBuffer
    buf2090.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 1])
    buf2090.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2090.group.device = cuda:0
op2090.group.iteration = (64, 1)
op2090.sizes = ([64], [])
buf1010_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf2090_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 1])
class op2090_loop_body:
    var_ranges = {p0: 64}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1010', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2090', get_index_1, mul, None)
        return store


op2091: SchedulerNode(ComputedBuffer)
op2091.writes = [MemoryDep('buf2091', c0, {c0: 64})]
op2091.unmet_dependencies = [MemoryDep('buf985', c0, {c0: 64})]
op2091.met_dependencies = []
op2091.outputs = [
    buf2091: ComputedBuffer
    buf2091.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 1])
    buf2091.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2091.group.device = cuda:0
op2091.group.iteration = (64, 1)
op2091.sizes = ([64], [])
buf985_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf2091_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 1])
class op2091_loop_body:
    var_ranges = {p0: 64}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf985', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2091', get_index_1, mul, None)
        return store


op2092: SchedulerNode(ComputedBuffer)
op2092.writes = [MemoryDep('buf2092', c0, {c0: 64})]
op2092.unmet_dependencies = [MemoryDep('buf959', c0, {c0: 64})]
op2092.met_dependencies = []
op2092.outputs = [
    buf2092: ComputedBuffer
    buf2092.layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 1])
    buf2092.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2092.group.device = cuda:0
op2092.group.iteration = (64, 1)
op2092.sizes = ([64], [])
buf959_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 64])
buf2092_layout = FixedLayout('cuda:0', torch.float32, size=[4, 16, 1], stride=[16, 1, 1])
class op2092_loop_body:
    var_ranges = {p0: 64}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf959', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2092', get_index_1, mul, None)
        return store


op2093: SchedulerNode(ComputedBuffer)
op2093.writes = [MemoryDep('buf2093', c0, {c0: 256})]
op2093.unmet_dependencies = [MemoryDep('buf865', c0, {c0: 256})]
op2093.met_dependencies = []
op2093.outputs = [
    buf2093: ComputedBuffer
    buf2093.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2093.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2093.group.device = cuda:0
op2093.group.iteration = (256, 1)
op2093.sizes = ([256], [])
buf865_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2093_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2093_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf865', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2093', get_index_1, mul, None)
        return store


op2094: SchedulerNode(ComputedBuffer)
op2094.writes = [MemoryDep('buf2094', c0, {c0: 256})]
op2094.unmet_dependencies = [MemoryDep('buf840', c0, {c0: 256})]
op2094.met_dependencies = []
op2094.outputs = [
    buf2094: ComputedBuffer
    buf2094.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2094.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2094.group.device = cuda:0
op2094.group.iteration = (256, 1)
op2094.sizes = ([256], [])
buf840_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2094_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2094_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf840', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2094', get_index_1, mul, None)
        return store


op2095: SchedulerNode(ComputedBuffer)
op2095.writes = [MemoryDep('buf2095', c0, {c0: 256})]
op2095.unmet_dependencies = [MemoryDep('buf814', c0, {c0: 256})]
op2095.met_dependencies = []
op2095.outputs = [
    buf2095: ComputedBuffer
    buf2095.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2095.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2095.group.device = cuda:0
op2095.group.iteration = (256, 1)
op2095.sizes = ([256], [])
buf814_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2095_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2095_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf814', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2095', get_index_1, mul, None)
        return store


op2096: SchedulerNode(ComputedBuffer)
op2096.writes = [MemoryDep('buf2096', c0, {c0: 256})]
op2096.unmet_dependencies = [MemoryDep('buf766', c0, {c0: 256})]
op2096.met_dependencies = []
op2096.outputs = [
    buf2096: ComputedBuffer
    buf2096.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2096.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2096.group.device = cuda:0
op2096.group.iteration = (256, 1)
op2096.sizes = ([256], [])
buf766_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2096_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2096_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf766', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2096', get_index_1, mul, None)
        return store


op2097: SchedulerNode(ComputedBuffer)
op2097.writes = [MemoryDep('buf2097', c0, {c0: 256})]
op2097.unmet_dependencies = [MemoryDep('buf741', c0, {c0: 256})]
op2097.met_dependencies = []
op2097.outputs = [
    buf2097: ComputedBuffer
    buf2097.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2097.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2097.group.device = cuda:0
op2097.group.iteration = (256, 1)
op2097.sizes = ([256], [])
buf741_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2097_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2097_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf741', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2097', get_index_1, mul, None)
        return store


op2098: SchedulerNode(ComputedBuffer)
op2098.writes = [MemoryDep('buf2098', c0, {c0: 256})]
op2098.unmet_dependencies = [MemoryDep('buf715', c0, {c0: 256})]
op2098.met_dependencies = []
op2098.outputs = [
    buf2098: ComputedBuffer
    buf2098.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf2098.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2098.group.device = cuda:0
op2098.group.iteration = (256, 1)
op2098.sizes = ([256], [])
buf715_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf2098_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op2098_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        constant = ops.constant(1280.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.00078125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2098', get_index_1, mul, None)
        return store


op2099: SchedulerNode(ComputedBuffer)
op2099.writes = [MemoryDep('buf2099', c0, {c0: 1024})]
op2099.unmet_dependencies = [MemoryDep('buf660', c0, {c0: 1024})]
op2099.met_dependencies = []
op2099.outputs = [
    buf2099: ComputedBuffer
    buf2099.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2099.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2099.group.device = cuda:0
op2099.group.iteration = (1024, 1)
op2099.sizes = ([1024], [])
buf660_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2099_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2099_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2099', get_index_1, mul, None)
        return store


op2100: SchedulerNode(ComputedBuffer)
op2100.writes = [MemoryDep('buf2100', c0, {c0: 1024})]
op2100.unmet_dependencies = [MemoryDep('buf635', c0, {c0: 1024})]
op2100.met_dependencies = []
op2100.outputs = [
    buf2100: ComputedBuffer
    buf2100.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2100.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2100.group.device = cuda:0
op2100.group.iteration = (1024, 1)
op2100.sizes = ([1024], [])
buf635_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2100_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2100_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf635', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2100', get_index_1, mul, None)
        return store


op2101: SchedulerNode(ComputedBuffer)
op2101.writes = [MemoryDep('buf2101', c0, {c0: 1024})]
op2101.unmet_dependencies = [MemoryDep('buf609', c0, {c0: 1024})]
op2101.met_dependencies = []
op2101.outputs = [
    buf2101: ComputedBuffer
    buf2101.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2101.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2101.group.device = cuda:0
op2101.group.iteration = (1024, 1)
op2101.sizes = ([1024], [])
buf609_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2101_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2101_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2101', get_index_1, mul, None)
        return store


op2102: SchedulerNode(ComputedBuffer)
op2102.writes = [MemoryDep('buf2102', c0, {c0: 1024})]
op2102.unmet_dependencies = [MemoryDep('buf561', c0, {c0: 1024})]
op2102.met_dependencies = []
op2102.outputs = [
    buf2102: ComputedBuffer
    buf2102.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2102.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2102.group.device = cuda:0
op2102.group.iteration = (1024, 1)
op2102.sizes = ([1024], [])
buf561_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2102_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2102_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2102', get_index_1, mul, None)
        return store


op2103: SchedulerNode(ComputedBuffer)
op2103.writes = [MemoryDep('buf2103', c0, {c0: 1024})]
op2103.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 1024})]
op2103.met_dependencies = []
op2103.outputs = [
    buf2103: ComputedBuffer
    buf2103.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2103.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2103.group.device = cuda:0
op2103.group.iteration = (1024, 1)
op2103.sizes = ([1024], [])
buf536_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2103_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2103_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2103', get_index_1, mul, None)
        return store


op2104: SchedulerNode(ComputedBuffer)
op2104.writes = [MemoryDep('buf2104', c0, {c0: 1024})]
op2104.unmet_dependencies = [MemoryDep('buf510', c0, {c0: 1024})]
op2104.met_dependencies = []
op2104.outputs = [
    buf2104: ComputedBuffer
    buf2104.layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
    buf2104.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2104.group.device = cuda:0
op2104.group.iteration = (1024, 1)
op2104.sizes = ([1024], [])
buf510_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1024])
buf2104_layout = FixedLayout('cuda:0', torch.float32, size=[4, 256, 1], stride=[256, 1, 1])
class op2104_loop_body:
    var_ranges = {p0: 1024}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        constant = ops.constant(640.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0015625, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2104', get_index_1, mul, None)
        return store


op2105: SchedulerNode(ComputedBuffer)
op2105.writes = [MemoryDep('buf2105', c0, {c0: 4096})]
op2105.unmet_dependencies = [MemoryDep('buf455', c0, {c0: 4096})]
op2105.met_dependencies = []
op2105.outputs = [
    buf2105: ComputedBuffer
    buf2105.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2105.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2105.group.device = cuda:0
op2105.group.iteration = (4096, 1)
op2105.sizes = ([4096], [])
buf455_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2105_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2105', get_index_1, mul, None)
        return store


op2106: SchedulerNode(ComputedBuffer)
op2106.writes = [MemoryDep('buf2106', c0, {c0: 4096})]
op2106.unmet_dependencies = [MemoryDep('buf430', c0, {c0: 4096})]
op2106.met_dependencies = []
op2106.outputs = [
    buf2106: ComputedBuffer
    buf2106.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2106.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2106.group.device = cuda:0
op2106.group.iteration = (4096, 1)
op2106.sizes = ([4096], [])
buf430_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2106_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2106', get_index_1, mul, None)
        return store


op2107: SchedulerNode(ComputedBuffer)
op2107.writes = [MemoryDep('buf2107', c0, {c0: 4096})]
op2107.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 4096})]
op2107.met_dependencies = []
op2107.outputs = [
    buf2107: ComputedBuffer
    buf2107.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2107.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2107.group.device = cuda:0
op2107.group.iteration = (4096, 1)
op2107.sizes = ([4096], [])
buf404_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2107_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2107', get_index_1, mul, None)
        return store


op2108: SchedulerNode(ComputedBuffer)
op2108.writes = [MemoryDep('buf2108', c0, {c0: 4096})]
op2108.unmet_dependencies = [MemoryDep('buf356', c0, {c0: 4096})]
op2108.met_dependencies = []
op2108.outputs = [
    buf2108: ComputedBuffer
    buf2108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2108.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2108.group.device = cuda:0
op2108.group.iteration = (4096, 1)
op2108.sizes = ([4096], [])
buf356_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2108_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2108', get_index_1, mul, None)
        return store


op2109: SchedulerNode(ComputedBuffer)
op2109.writes = [MemoryDep('buf2109', c0, {c0: 4096})]
op2109.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 4096})]
op2109.met_dependencies = []
op2109.outputs = [
    buf2109: ComputedBuffer
    buf2109.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2109.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2109.group.device = cuda:0
op2109.group.iteration = (4096, 1)
op2109.sizes = ([4096], [])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2109_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2109', get_index_1, mul, None)
        return store


op2110: SchedulerNode(ComputedBuffer)
op2110.writes = [MemoryDep('buf2110', c0, {c0: 4096})]
op2110.unmet_dependencies = [MemoryDep('buf305', c0, {c0: 4096})]
op2110.met_dependencies = []
op2110.outputs = [
    buf2110: ComputedBuffer
    buf2110.layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
    buf2110.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2110.group.device = cuda:0
op2110.group.iteration = (4096, 1)
op2110.sizes = ([4096], [])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 4096])
buf2110_layout = FixedLayout('cuda:0', torch.float32, size=[4, 1024, 1], stride=[1024, 1, 1])
class op2110_loop_body:
    var_ranges = {p0: 4096}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.003125, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2110', get_index_1, mul, None)
        return store


